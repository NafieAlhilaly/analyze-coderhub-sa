{"ast":null,"code":"'use strict';\n\nvar Registry = require('../registry');\n/*\n * containerArrayMatch: does this attribute string point into a\n * layout container array?\n *\n * @param {String} astr: an attribute string, like *annotations[2].text*\n *\n * @returns {Object | false} Returns false if `astr` doesn't match a container\n *  array. If it does, returns:\n *     {array: {String}, index: {Number}, property: {String}}\n *  ie the attribute string for the array, the index within the array (or ''\n *  if the whole array) and the property within that (or '' if the whole array\n *  or the whole object)\n */\n\n\nmodule.exports = function containerArrayMatch(astr) {\n  var rootContainers = Registry.layoutArrayContainers;\n  var regexpContainers = Registry.layoutArrayRegexes;\n  var rootPart = astr.split('[')[0];\n  var arrayStr;\n  var match; // look for regexp matches first, because they may be nested inside root matches\n  // eg updatemenus[i].buttons is nested inside updatemenus\n\n  for (var i = 0; i < regexpContainers.length; i++) {\n    match = astr.match(regexpContainers[i]);\n\n    if (match && match.index === 0) {\n      arrayStr = match[0];\n      break;\n    }\n  } // now look for root matches\n\n\n  if (!arrayStr) arrayStr = rootContainers[rootContainers.indexOf(rootPart)];\n  if (!arrayStr) return false;\n  var tail = astr.substr(arrayStr.length);\n  if (!tail) return {\n    array: arrayStr,\n    index: '',\n    property: ''\n  };\n  match = tail.match(/^\\[(0|[1-9][0-9]*)\\](\\.(.+))?$/);\n  if (!match) return false;\n  return {\n    array: arrayStr,\n    index: Number(match[1]),\n    property: match[3] || ''\n  };\n};","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/plotly.js/src/plot_api/container_array_match.js"],"names":["Registry","require","module","exports","containerArrayMatch","astr","rootContainers","layoutArrayContainers","regexpContainers","layoutArrayRegexes","rootPart","split","arrayStr","match","i","length","index","indexOf","tail","substr","array","property","Number"],"mappings":"AAAA;;AAEA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,aAAD,CAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,SAASC,mBAAT,CAA6BC,IAA7B,EAAmC;AAChD,MAAIC,cAAc,GAAGN,QAAQ,CAACO,qBAA9B;AACA,MAAIC,gBAAgB,GAAGR,QAAQ,CAACS,kBAAhC;AACA,MAAIC,QAAQ,GAAGL,IAAI,CAACM,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAAf;AACA,MAAIC,QAAJ;AACA,MAAIC,KAAJ,CALgD,CAOhD;AACA;;AACA,OAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGN,gBAAgB,CAACO,MAApC,EAA4CD,CAAC,EAA7C,EAAiD;AAC7CD,IAAAA,KAAK,GAAGR,IAAI,CAACQ,KAAL,CAAWL,gBAAgB,CAACM,CAAD,CAA3B,CAAR;;AACA,QAAGD,KAAK,IAAIA,KAAK,CAACG,KAAN,KAAgB,CAA5B,EAA+B;AAC3BJ,MAAAA,QAAQ,GAAGC,KAAK,CAAC,CAAD,CAAhB;AACA;AACH;AACJ,GAf+C,CAiBhD;;;AACA,MAAG,CAACD,QAAJ,EAAcA,QAAQ,GAAGN,cAAc,CAACA,cAAc,CAACW,OAAf,CAAuBP,QAAvB,CAAD,CAAzB;AAEd,MAAG,CAACE,QAAJ,EAAc,OAAO,KAAP;AAEd,MAAIM,IAAI,GAAGb,IAAI,CAACc,MAAL,CAAYP,QAAQ,CAACG,MAArB,CAAX;AACA,MAAG,CAACG,IAAJ,EAAU,OAAO;AAACE,IAAAA,KAAK,EAAER,QAAR;AAAkBI,IAAAA,KAAK,EAAE,EAAzB;AAA6BK,IAAAA,QAAQ,EAAE;AAAvC,GAAP;AAEVR,EAAAA,KAAK,GAAGK,IAAI,CAACL,KAAL,CAAW,gCAAX,CAAR;AACA,MAAG,CAACA,KAAJ,EAAW,OAAO,KAAP;AAEX,SAAO;AAACO,IAAAA,KAAK,EAAER,QAAR;AAAkBI,IAAAA,KAAK,EAAEM,MAAM,CAACT,KAAK,CAAC,CAAD,CAAN,CAA/B;AAA2CQ,IAAAA,QAAQ,EAAER,KAAK,CAAC,CAAD,CAAL,IAAY;AAAjE,GAAP;AACH,CA7BD","sourcesContent":["'use strict';\n\nvar Registry = require('../registry');\n\n/*\n * containerArrayMatch: does this attribute string point into a\n * layout container array?\n *\n * @param {String} astr: an attribute string, like *annotations[2].text*\n *\n * @returns {Object | false} Returns false if `astr` doesn't match a container\n *  array. If it does, returns:\n *     {array: {String}, index: {Number}, property: {String}}\n *  ie the attribute string for the array, the index within the array (or ''\n *  if the whole array) and the property within that (or '' if the whole array\n *  or the whole object)\n */\nmodule.exports = function containerArrayMatch(astr) {\n    var rootContainers = Registry.layoutArrayContainers;\n    var regexpContainers = Registry.layoutArrayRegexes;\n    var rootPart = astr.split('[')[0];\n    var arrayStr;\n    var match;\n\n    // look for regexp matches first, because they may be nested inside root matches\n    // eg updatemenus[i].buttons is nested inside updatemenus\n    for(var i = 0; i < regexpContainers.length; i++) {\n        match = astr.match(regexpContainers[i]);\n        if(match && match.index === 0) {\n            arrayStr = match[0];\n            break;\n        }\n    }\n\n    // now look for root matches\n    if(!arrayStr) arrayStr = rootContainers[rootContainers.indexOf(rootPart)];\n\n    if(!arrayStr) return false;\n\n    var tail = astr.substr(arrayStr.length);\n    if(!tail) return {array: arrayStr, index: '', property: ''};\n\n    match = tail.match(/^\\[(0|[1-9][0-9]*)\\](\\.(.+))?$/);\n    if(!match) return false;\n\n    return {array: arrayStr, index: Number(match[1]), property: match[3] || ''};\n};\n"]},"metadata":{},"sourceType":"script"}