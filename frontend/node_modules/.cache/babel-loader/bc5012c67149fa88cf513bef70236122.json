{"ast":null,"code":"'use strict';\n/* eslint-disable consistent-return */\n\nfunction isWhiteSpace(chr) {\n  return chr === 0x20 || chr === 0x09 || chr === 0x0D || chr === 0x0A;\n} // Filter NaN, Infinity, < 0\n\n\nfunction isFinitePositive(val) {\n  return typeof val === 'number' && isFinite(val) && val > 0;\n}\n\nfunction canBeSvg(buf) {\n  var i = 0,\n      max = buf.length; // byte order mark, https://github.com/nodeca/probe-image-size/issues/57\n\n  if (buf[0] === 0xEF && buf[1] === 0xBB && buf[2] === 0xBF) i = 3;\n\n  while (i < max && isWhiteSpace(buf[i])) {\n    i++;\n  }\n\n  if (i === max) return false;\n  return buf[i] === 0x3c;\n  /* < */\n} // skip `<?` (comments), `<!` (directives, cdata, doctype),\n// looking for `<svg>` or `<NAMESPACE:svg>`\n\n\nvar SVG_HEADER_RE = /<[-_.:a-zA-Z0-9][^>]*>/; // test if the top level element is svg + optional namespace,\n// used to skip svg embedded in html\n\nvar SVG_TAG_RE = /^<([-_.:a-zA-Z0-9]+:)?svg\\s/;\nvar SVG_WIDTH_RE = /[^-]\\bwidth=\"([^%]+?)\"|[^-]\\bwidth='([^%]+?)'/;\nvar SVG_HEIGHT_RE = /\\bheight=\"([^%]+?)\"|\\bheight='([^%]+?)'/;\nvar SVG_VIEWBOX_RE = /\\bview[bB]ox=\"(.+?)\"|\\bview[bB]ox='(.+?)'/;\nvar SVG_UNITS_RE = /in$|mm$|cm$|pt$|pc$|px$|em$|ex$/;\n\nfunction svgAttrs(str) {\n  var width = str.match(SVG_WIDTH_RE);\n  var height = str.match(SVG_HEIGHT_RE);\n  var viewbox = str.match(SVG_VIEWBOX_RE);\n  return {\n    width: width && (width[1] || width[2]),\n    height: height && (height[1] || height[2]),\n    viewbox: viewbox && (viewbox[1] || viewbox[2])\n  };\n}\n\nfunction units(str) {\n  if (!SVG_UNITS_RE.test(str)) return 'px';\n  return str.match(SVG_UNITS_RE)[0];\n}\n\nmodule.exports = function (data) {\n  if (!canBeSvg(data)) return;\n  var str = '';\n\n  for (var i = 0; i < data.length; i++) {\n    // 1. We can't rely on buffer features\n    // 2. Don't care about UTF16 because ascii is enougth for our goals\n    str += String.fromCharCode(data[i]);\n  } // get top level element\n\n\n  var svgTag = (str.match(SVG_HEADER_RE) || [''])[0]; // test if top level element is <svg>\n\n  if (!SVG_TAG_RE.test(svgTag)) return;\n  var attrs = svgAttrs(svgTag);\n  var width = parseFloat(attrs.width);\n  var height = parseFloat(attrs.height); // Extract from direct values\n\n  if (attrs.width && attrs.height) {\n    if (!isFinitePositive(width) || !isFinitePositive(height)) return;\n    return {\n      width: width,\n      height: height,\n      type: 'svg',\n      mime: 'image/svg+xml',\n      wUnits: units(attrs.width),\n      hUnits: units(attrs.height)\n    };\n  } // Extract from viewbox\n\n\n  var parts = (attrs.viewbox || '').split(' ');\n  var viewbox = {\n    width: parts[2],\n    height: parts[3]\n  };\n  var vbWidth = parseFloat(viewbox.width);\n  var vbHeight = parseFloat(viewbox.height);\n  if (!isFinitePositive(vbWidth) || !isFinitePositive(vbHeight)) return;\n  if (units(viewbox.width) !== units(viewbox.height)) return;\n  var ratio = vbWidth / vbHeight;\n\n  if (attrs.width) {\n    if (!isFinitePositive(width)) return;\n    return {\n      width: width,\n      height: width / ratio,\n      type: 'svg',\n      mime: 'image/svg+xml',\n      wUnits: units(attrs.width),\n      hUnits: units(attrs.width)\n    };\n  }\n\n  if (attrs.height) {\n    if (!isFinitePositive(height)) return;\n    return {\n      width: height * ratio,\n      height: height,\n      type: 'svg',\n      mime: 'image/svg+xml',\n      wUnits: units(attrs.height),\n      hUnits: units(attrs.height)\n    };\n  }\n\n  return {\n    width: vbWidth,\n    height: vbHeight,\n    type: 'svg',\n    mime: 'image/svg+xml',\n    wUnits: units(viewbox.width),\n    hUnits: units(viewbox.height)\n  };\n};","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/probe-image-size/lib/parse_sync/svg.js"],"names":["isWhiteSpace","chr","isFinitePositive","val","isFinite","canBeSvg","buf","i","max","length","SVG_HEADER_RE","SVG_TAG_RE","SVG_WIDTH_RE","SVG_HEIGHT_RE","SVG_VIEWBOX_RE","SVG_UNITS_RE","svgAttrs","str","width","match","height","viewbox","units","test","module","exports","data","String","fromCharCode","svgTag","attrs","parseFloat","type","mime","wUnits","hUnits","parts","split","vbWidth","vbHeight","ratio"],"mappings":"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","sourcesContent":["'use strict';\n\n/* eslint-disable consistent-return */\n\nfunction isWhiteSpace(chr) {\n  return chr === 0x20 || chr === 0x09 || chr === 0x0D || chr === 0x0A;\n}\n\n// Filter NaN, Infinity, < 0\nfunction isFinitePositive(val) {\n  return typeof val === 'number' && isFinite(val) && val > 0;\n}\n\nfunction canBeSvg(buf) {\n  var i = 0, max = buf.length;\n\n  // byte order mark, https://github.com/nodeca/probe-image-size/issues/57\n  if (buf[0] === 0xEF && buf[1] === 0xBB && buf[2] === 0xBF) i = 3;\n\n  while (i < max && isWhiteSpace(buf[i])) i++;\n\n  if (i === max) return false;\n  return buf[i] === 0x3c; /* < */\n}\n\n\n// skip `<?` (comments), `<!` (directives, cdata, doctype),\n// looking for `<svg>` or `<NAMESPACE:svg>`\nvar SVG_HEADER_RE  = /<[-_.:a-zA-Z0-9][^>]*>/;\n\n// test if the top level element is svg + optional namespace,\n// used to skip svg embedded in html\nvar SVG_TAG_RE     = /^<([-_.:a-zA-Z0-9]+:)?svg\\s/;\n\nvar SVG_WIDTH_RE   = /[^-]\\bwidth=\"([^%]+?)\"|[^-]\\bwidth='([^%]+?)'/;\nvar SVG_HEIGHT_RE  = /\\bheight=\"([^%]+?)\"|\\bheight='([^%]+?)'/;\nvar SVG_VIEWBOX_RE = /\\bview[bB]ox=\"(.+?)\"|\\bview[bB]ox='(.+?)'/;\nvar SVG_UNITS_RE   = /in$|mm$|cm$|pt$|pc$|px$|em$|ex$/;\n\nfunction svgAttrs(str) {\n  var width   = str.match(SVG_WIDTH_RE);\n  var height  = str.match(SVG_HEIGHT_RE);\n  var viewbox = str.match(SVG_VIEWBOX_RE);\n\n  return {\n    width:   width && (width[1] || width[2]),\n    height:  height && (height[1] || height[2]),\n    viewbox: viewbox && (viewbox[1] || viewbox[2])\n  };\n}\n\n\nfunction units(str) {\n  if (!SVG_UNITS_RE.test(str)) return 'px';\n\n  return str.match(SVG_UNITS_RE)[0];\n}\n\n\nmodule.exports = function (data) {\n  if (!canBeSvg(data)) return;\n\n  var str = '';\n\n  for (var i = 0; i < data.length; i++) {\n    // 1. We can't rely on buffer features\n    // 2. Don't care about UTF16 because ascii is enougth for our goals\n    str += String.fromCharCode(data[i]);\n  }\n\n  // get top level element\n  var svgTag = (str.match(SVG_HEADER_RE) || [ '' ])[0];\n\n  // test if top level element is <svg>\n  if (!SVG_TAG_RE.test(svgTag)) return;\n\n  var attrs  = svgAttrs(svgTag);\n  var width  = parseFloat(attrs.width);\n  var height = parseFloat(attrs.height);\n\n  // Extract from direct values\n\n  if (attrs.width && attrs.height) {\n    if (!isFinitePositive(width) || !isFinitePositive(height)) return;\n\n    return {\n      width:  width,\n      height: height,\n      type:   'svg',\n      mime:   'image/svg+xml',\n      wUnits: units(attrs.width),\n      hUnits: units(attrs.height)\n    };\n  }\n\n  // Extract from viewbox\n\n  var parts = (attrs.viewbox || '').split(' ');\n  var viewbox = {\n    width:  parts[2],\n    height: parts[3]\n  };\n  var vbWidth  = parseFloat(viewbox.width);\n  var vbHeight = parseFloat(viewbox.height);\n\n  if (!isFinitePositive(vbWidth) || !isFinitePositive(vbHeight)) return;\n  if (units(viewbox.width) !== units(viewbox.height)) return;\n\n  var ratio = vbWidth / vbHeight;\n\n  if (attrs.width) {\n    if (!isFinitePositive(width)) return;\n\n    return {\n      width:  width,\n      height: width / ratio,\n      type:   'svg',\n      mime:   'image/svg+xml',\n      wUnits: units(attrs.width),\n      hUnits: units(attrs.width)\n    };\n  }\n\n  if (attrs.height) {\n    if (!isFinitePositive(height)) return;\n\n    return {\n      width:  height * ratio,\n      height: height,\n      type:   'svg',\n      mime:   'image/svg+xml',\n      wUnits: units(attrs.height),\n      hUnits: units(attrs.height)\n    };\n  }\n\n  return {\n    width:  vbWidth,\n    height: vbHeight,\n    type:   'svg',\n    mime:   'image/svg+xml',\n    wUnits: units(viewbox.width),\n    hUnits: units(viewbox.height)\n  };\n};\n"]},"metadata":{},"sourceType":"script"}