{"ast":null,"code":"module.exports = rotate;\n/**\n * Rotates a mat4 by the given angle\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nfunction rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2],\n      len = Math.sqrt(x * x + y * y + z * z),\n      s,\n      c,\n      t,\n      a00,\n      a01,\n      a02,\n      a03,\n      a10,\n      a11,\n      a12,\n      a13,\n      a20,\n      a21,\n      a22,\n      a23,\n      b00,\n      b01,\n      b02,\n      b10,\n      b11,\n      b12,\n      b20,\n      b21,\n      b22;\n\n  if (Math.abs(len) < 0.000001) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n\n;","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/gl-mat4/rotate.js"],"names":["module","exports","rotate","out","a","rad","axis","x","y","z","len","Math","sqrt","s","c","t","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","b00","b01","b02","b10","b11","b12","b20","b21","b22","abs","sin","cos"],"mappings":"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","sourcesContent":["module.exports = rotate;\n\n/**\n * Rotates a mat4 by the given angle\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nfunction rotate(out, a, rad, axis) {\n    var x = axis[0], y = axis[1], z = axis[2],\n        len = Math.sqrt(x * x + y * y + z * z),\n        s, c, t,\n        a00, a01, a02, a03,\n        a10, a11, a12, a13,\n        a20, a21, a22, a23,\n        b00, b01, b02,\n        b10, b11, b12,\n        b20, b21, b22;\n\n    if (Math.abs(len) < 0.000001) { return null; }\n    \n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    s = Math.sin(rad);\n    c = Math.cos(rad);\n    t = 1 - c;\n\n    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n    // Construct the elements of the rotation matrix\n    b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;\n    b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;\n    b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;\n\n    // Perform rotation-specific matrix multiplication\n    out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n    out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n    out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n    out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n    out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n    out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n    out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n    out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n    out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n    out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n    out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n    out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged last row\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n    return out;\n};"]},"metadata":{},"sourceType":"script"}