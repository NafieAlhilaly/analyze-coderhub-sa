{"ast":null,"code":"'use strict';\n\nvar baseAttrs = require('../../plots/attributes');\n\nvar domainAttrs = require('../../plots/domain').attributes;\n\nvar fontAttrs = require('../../plots/font_attributes');\n\nvar colorAttrs = require('../../components/color/attributes');\n\nvar hovertemplateAttrs = require('../../plots/template_attributes').hovertemplateAttrs;\n\nvar texttemplateAttrs = require('../../plots/template_attributes').texttemplateAttrs;\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nvar textFontAttrs = fontAttrs({\n  editType: 'plot',\n  arrayOk: true,\n  colorEditType: 'plot',\n  description: 'Sets the font used for `textinfo`.'\n});\nmodule.exports = {\n  labels: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: ['Sets the sector labels.', 'If `labels` entries are duplicated, we sum associated `values`', 'or simply count occurrences if `values` is not provided.', 'For other array attributes (including color) we use the first', 'non-empty entry among all occurrences of the label.'].join(' ')\n  },\n  // equivalent of x0 and dx, if label is missing\n  label0: {\n    valType: 'number',\n    dflt: 0,\n    editType: 'calc',\n    description: ['Alternate to `labels`.', 'Builds a numeric set of labels.', 'Use with `dlabel`', 'where `label0` is the starting label and `dlabel` the step.'].join(' ')\n  },\n  dlabel: {\n    valType: 'number',\n    dflt: 1,\n    editType: 'calc',\n    description: 'Sets the label step. See `label0` for more info.'\n  },\n  values: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: ['Sets the values of the sectors.', 'If omitted, we count occurrences of each label.'].join(' ')\n  },\n  marker: {\n    colors: {\n      valType: 'data_array',\n      // TODO 'color_array' ?\n      editType: 'calc',\n      description: ['Sets the color of each sector.', 'If not specified, the default trace color set is used', 'to pick the sector colors.'].join(' ')\n    },\n    line: {\n      color: {\n        valType: 'color',\n        dflt: colorAttrs.defaultLine,\n        arrayOk: true,\n        editType: 'style',\n        description: ['Sets the color of the line enclosing each sector.'].join(' ')\n      },\n      width: {\n        valType: 'number',\n        min: 0,\n        dflt: 0,\n        arrayOk: true,\n        editType: 'style',\n        description: ['Sets the width (in px) of the line enclosing each sector.'].join(' ')\n      },\n      editType: 'calc'\n    },\n    editType: 'calc'\n  },\n  text: {\n    valType: 'data_array',\n    editType: 'plot',\n    description: ['Sets text elements associated with each sector.', 'If trace `textinfo` contains a *text* flag, these elements will be seen', 'on the chart.', 'If trace `hoverinfo` contains a *text* flag and *hovertext* is not set,', 'these elements will be seen in the hover labels.'].join(' ')\n  },\n  hovertext: {\n    valType: 'string',\n    dflt: '',\n    arrayOk: true,\n    editType: 'style',\n    description: ['Sets hover text elements associated with each sector.', 'If a single string, the same string appears for', 'all data points.', 'If an array of string, the items are mapped in order of', 'this trace\\'s sectors.', 'To be seen, trace `hoverinfo` must contain a *text* flag.'].join(' ')\n  },\n  // 'see eg:'\n  // 'https://www.e-education.psu.edu/natureofgeoinfo/sites/www.e-education.psu.edu.natureofgeoinfo/files/image/hisp_pies.gif',\n  // '(this example involves a map too - may someday be a whole trace type',\n  // 'of its own. but the point is the size of the whole pie is important.)'\n  scalegroup: {\n    valType: 'string',\n    dflt: '',\n    editType: 'calc',\n    description: ['If there are multiple pie charts that should be sized according to', 'their totals, link them by providing a non-empty group id here', 'shared by every trace in the same group.'].join(' ')\n  },\n  // labels (legend is handled by plots.attributes.showlegend and layout.hiddenlabels)\n  textinfo: {\n    valType: 'flaglist',\n    flags: ['label', 'text', 'value', 'percent'],\n    extras: ['none'],\n    editType: 'calc',\n    description: ['Determines which trace information appear on the graph.'].join(' ')\n  },\n  hoverinfo: extendFlat({}, baseAttrs.hoverinfo, {\n    flags: ['label', 'text', 'value', 'percent', 'name']\n  }),\n  hovertemplate: hovertemplateAttrs({}, {\n    keys: ['label', 'color', 'value', 'percent', 'text']\n  }),\n  texttemplate: texttemplateAttrs({\n    editType: 'plot'\n  }, {\n    keys: ['label', 'color', 'value', 'percent', 'text']\n  }),\n  textposition: {\n    valType: 'enumerated',\n    values: ['inside', 'outside', 'auto', 'none'],\n    dflt: 'auto',\n    arrayOk: true,\n    editType: 'plot',\n    description: ['Specifies the location of the `textinfo`.'].join(' ')\n  },\n  textfont: extendFlat({}, textFontAttrs, {\n    description: 'Sets the font used for `textinfo`.'\n  }),\n  insidetextorientation: {\n    valType: 'enumerated',\n    values: ['horizontal', 'radial', 'tangential', 'auto'],\n    dflt: 'auto',\n    editType: 'plot',\n    description: ['Controls the orientation of the text inside chart sectors.', 'When set to *auto*, text may be oriented in any direction in order', 'to be as big as possible in the middle of a sector.', 'The *horizontal* option orients text to be parallel with the bottom', 'of the chart, and may make text smaller in order to achieve that goal.', 'The *radial* option orients text along the radius of the sector.', 'The *tangential* option orients text perpendicular to the radius of the sector.'].join(' ')\n  },\n  insidetextfont: extendFlat({}, textFontAttrs, {\n    description: 'Sets the font used for `textinfo` lying inside the sector.'\n  }),\n  outsidetextfont: extendFlat({}, textFontAttrs, {\n    description: 'Sets the font used for `textinfo` lying outside the sector.'\n  }),\n  automargin: {\n    valType: 'boolean',\n    dflt: false,\n    editType: 'plot',\n    description: ['Determines whether outside text labels can push the margins.'].join(' ')\n  },\n  title: {\n    text: {\n      valType: 'string',\n      dflt: '',\n      editType: 'plot',\n      description: ['Sets the title of the chart.', 'If it is empty, no title is displayed.', 'Note that before the existence of `title.text`, the title\\'s', 'contents used to be defined as the `title` attribute itself.', 'This behavior has been deprecated.'].join(' ')\n    },\n    font: extendFlat({}, textFontAttrs, {\n      description: ['Sets the font used for `title`.', 'Note that the title\\'s font used to be set', 'by the now deprecated `titlefont` attribute.'].join(' ')\n    }),\n    position: {\n      valType: 'enumerated',\n      values: ['top left', 'top center', 'top right', 'middle center', 'bottom left', 'bottom center', 'bottom right'],\n      editType: 'plot',\n      description: ['Specifies the location of the `title`.', 'Note that the title\\'s position used to be set', 'by the now deprecated `titleposition` attribute.'].join(' ')\n    },\n    editType: 'plot'\n  },\n  // position and shape\n  domain: domainAttrs({\n    name: 'pie',\n    trace: true,\n    editType: 'calc'\n  }),\n  hole: {\n    valType: 'number',\n    min: 0,\n    max: 1,\n    dflt: 0,\n    editType: 'calc',\n    description: ['Sets the fraction of the radius to cut out of the pie.', 'Use this to make a donut chart.'].join(' ')\n  },\n  // ordering and direction\n  sort: {\n    valType: 'boolean',\n    dflt: true,\n    editType: 'calc',\n    description: ['Determines whether or not the sectors are reordered', 'from largest to smallest.'].join(' ')\n  },\n  direction: {\n    /**\n     * there are two common conventions, both of which place the first\n     * (largest, if sorted) slice with its left edge at 12 o'clock but\n     * succeeding slices follow either cw or ccw from there.\n     *\n     * see http://visage.co/data-visualization-101-pie-charts/\n     */\n    valType: 'enumerated',\n    values: ['clockwise', 'counterclockwise'],\n    dflt: 'counterclockwise',\n    editType: 'calc',\n    description: ['Specifies the direction at which succeeding sectors follow', 'one another.'].join(' ')\n  },\n  rotation: {\n    valType: 'number',\n    min: -360,\n    max: 360,\n    dflt: 0,\n    editType: 'calc',\n    description: ['Instead of the first slice starting at 12 o\\'clock,', 'rotate to some other angle.'].join(' ')\n  },\n  pull: {\n    valType: 'number',\n    min: 0,\n    max: 1,\n    dflt: 0,\n    arrayOk: true,\n    editType: 'calc',\n    description: ['Sets the fraction of larger radius to pull the sectors', 'out from the center. This can be a constant', 'to pull all slices apart from each other equally', 'or an array to highlight one or more slices.'].join(' ')\n  },\n  _deprecated: {\n    title: {\n      valType: 'string',\n      dflt: '',\n      editType: 'calc',\n      description: ['Deprecated in favor of `title.text`.', 'Note that value of `title` is no longer a simple', '*string* but a set of sub-attributes.'].join(' ')\n    },\n    titlefont: extendFlat({}, textFontAttrs, {\n      description: 'Deprecated in favor of `title.font`.'\n    }),\n    titleposition: {\n      valType: 'enumerated',\n      values: ['top left', 'top center', 'top right', 'middle center', 'bottom left', 'bottom center', 'bottom right'],\n      editType: 'calc',\n      description: 'Deprecated in favor of `title.position`.'\n    }\n  }\n};","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/plotly.js/src/traces/pie/attributes.js"],"names":["baseAttrs","require","domainAttrs","attributes","fontAttrs","colorAttrs","hovertemplateAttrs","texttemplateAttrs","extendFlat","textFontAttrs","editType","arrayOk","colorEditType","description","module","exports","labels","valType","join","label0","dflt","dlabel","values","marker","colors","line","color","defaultLine","width","min","text","hovertext","scalegroup","textinfo","flags","extras","hoverinfo","hovertemplate","keys","texttemplate","textposition","textfont","insidetextorientation","insidetextfont","outsidetextfont","automargin","title","font","position","domain","name","trace","hole","max","sort","direction","rotation","pull","_deprecated","titlefont","titleposition"],"mappings":"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","sourcesContent":["'use strict';\n\nvar baseAttrs = require('../../plots/attributes');\nvar domainAttrs = require('../../plots/domain').attributes;\nvar fontAttrs = require('../../plots/font_attributes');\nvar colorAttrs = require('../../components/color/attributes');\nvar hovertemplateAttrs = require('../../plots/template_attributes').hovertemplateAttrs;\nvar texttemplateAttrs = require('../../plots/template_attributes').texttemplateAttrs;\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nvar textFontAttrs = fontAttrs({\n    editType: 'plot',\n    arrayOk: true,\n    colorEditType: 'plot',\n    description: 'Sets the font used for `textinfo`.'\n});\n\nmodule.exports = {\n    labels: {\n        valType: 'data_array',\n        editType: 'calc',\n        description: [\n            'Sets the sector labels.',\n            'If `labels` entries are duplicated, we sum associated `values`',\n            'or simply count occurrences if `values` is not provided.',\n            'For other array attributes (including color) we use the first',\n            'non-empty entry among all occurrences of the label.'\n        ].join(' ')\n    },\n    // equivalent of x0 and dx, if label is missing\n    label0: {\n        valType: 'number',\n        dflt: 0,\n        editType: 'calc',\n        description: [\n            'Alternate to `labels`.',\n            'Builds a numeric set of labels.',\n            'Use with `dlabel`',\n            'where `label0` is the starting label and `dlabel` the step.'\n        ].join(' ')\n    },\n    dlabel: {\n        valType: 'number',\n        dflt: 1,\n        editType: 'calc',\n        description: 'Sets the label step. See `label0` for more info.'\n    },\n\n    values: {\n        valType: 'data_array',\n        editType: 'calc',\n        description: [\n            'Sets the values of the sectors.',\n            'If omitted, we count occurrences of each label.'\n        ].join(' ')\n    },\n\n    marker: {\n        colors: {\n            valType: 'data_array',  // TODO 'color_array' ?\n            editType: 'calc',\n            description: [\n                'Sets the color of each sector.',\n                'If not specified, the default trace color set is used',\n                'to pick the sector colors.'\n            ].join(' ')\n        },\n\n        line: {\n            color: {\n                valType: 'color',\n                dflt: colorAttrs.defaultLine,\n                arrayOk: true,\n                editType: 'style',\n                description: [\n                    'Sets the color of the line enclosing each sector.'\n                ].join(' ')\n            },\n            width: {\n                valType: 'number',\n                min: 0,\n                dflt: 0,\n                arrayOk: true,\n                editType: 'style',\n                description: [\n                    'Sets the width (in px) of the line enclosing each sector.'\n                ].join(' ')\n            },\n            editType: 'calc'\n        },\n        editType: 'calc'\n    },\n\n    text: {\n        valType: 'data_array',\n        editType: 'plot',\n        description: [\n            'Sets text elements associated with each sector.',\n            'If trace `textinfo` contains a *text* flag, these elements will be seen',\n            'on the chart.',\n            'If trace `hoverinfo` contains a *text* flag and *hovertext* is not set,',\n            'these elements will be seen in the hover labels.'\n        ].join(' ')\n    },\n    hovertext: {\n        valType: 'string',\n        dflt: '',\n        arrayOk: true,\n        editType: 'style',\n        description: [\n            'Sets hover text elements associated with each sector.',\n            'If a single string, the same string appears for',\n            'all data points.',\n            'If an array of string, the items are mapped in order of',\n            'this trace\\'s sectors.',\n            'To be seen, trace `hoverinfo` must contain a *text* flag.'\n        ].join(' ')\n    },\n\n// 'see eg:'\n// 'https://www.e-education.psu.edu/natureofgeoinfo/sites/www.e-education.psu.edu.natureofgeoinfo/files/image/hisp_pies.gif',\n// '(this example involves a map too - may someday be a whole trace type',\n// 'of its own. but the point is the size of the whole pie is important.)'\n    scalegroup: {\n        valType: 'string',\n        dflt: '',\n        editType: 'calc',\n        description: [\n            'If there are multiple pie charts that should be sized according to',\n            'their totals, link them by providing a non-empty group id here',\n            'shared by every trace in the same group.'\n        ].join(' ')\n    },\n\n    // labels (legend is handled by plots.attributes.showlegend and layout.hiddenlabels)\n    textinfo: {\n        valType: 'flaglist',\n        flags: ['label', 'text', 'value', 'percent'],\n        extras: ['none'],\n        editType: 'calc',\n        description: [\n            'Determines which trace information appear on the graph.'\n        ].join(' ')\n    },\n    hoverinfo: extendFlat({}, baseAttrs.hoverinfo, {\n        flags: ['label', 'text', 'value', 'percent', 'name']\n    }),\n    hovertemplate: hovertemplateAttrs({}, {\n        keys: ['label', 'color', 'value', 'percent', 'text']\n    }),\n    texttemplate: texttemplateAttrs({editType: 'plot'}, {\n        keys: ['label', 'color', 'value', 'percent', 'text']\n    }),\n    textposition: {\n        valType: 'enumerated',\n        values: ['inside', 'outside', 'auto', 'none'],\n        dflt: 'auto',\n        arrayOk: true,\n        editType: 'plot',\n        description: [\n            'Specifies the location of the `textinfo`.'\n        ].join(' ')\n    },\n    textfont: extendFlat({}, textFontAttrs, {\n        description: 'Sets the font used for `textinfo`.'\n    }),\n    insidetextorientation: {\n        valType: 'enumerated',\n        values: ['horizontal', 'radial', 'tangential', 'auto'],\n        dflt: 'auto',\n        editType: 'plot',\n        description: [\n            'Controls the orientation of the text inside chart sectors.',\n            'When set to *auto*, text may be oriented in any direction in order',\n            'to be as big as possible in the middle of a sector.',\n            'The *horizontal* option orients text to be parallel with the bottom',\n            'of the chart, and may make text smaller in order to achieve that goal.',\n            'The *radial* option orients text along the radius of the sector.',\n            'The *tangential* option orients text perpendicular to the radius of the sector.'\n        ].join(' ')\n    },\n    insidetextfont: extendFlat({}, textFontAttrs, {\n        description: 'Sets the font used for `textinfo` lying inside the sector.'\n    }),\n    outsidetextfont: extendFlat({}, textFontAttrs, {\n        description: 'Sets the font used for `textinfo` lying outside the sector.'\n    }),\n    automargin: {\n        valType: 'boolean',\n        dflt: false,\n        editType: 'plot',\n        description: [\n            'Determines whether outside text labels can push the margins.'\n        ].join(' ')\n    },\n\n    title: {\n        text: {\n            valType: 'string',\n            dflt: '',\n            editType: 'plot',\n            description: [\n                'Sets the title of the chart.',\n                'If it is empty, no title is displayed.',\n                'Note that before the existence of `title.text`, the title\\'s',\n                'contents used to be defined as the `title` attribute itself.',\n                'This behavior has been deprecated.'\n            ].join(' ')\n        },\n        font: extendFlat({}, textFontAttrs, {\n            description: [\n                'Sets the font used for `title`.',\n                'Note that the title\\'s font used to be set',\n                'by the now deprecated `titlefont` attribute.'\n            ].join(' ')\n        }),\n        position: {\n            valType: 'enumerated',\n            values: [\n                'top left', 'top center', 'top right',\n                'middle center',\n                'bottom left', 'bottom center', 'bottom right'\n            ],\n            editType: 'plot',\n            description: [\n                'Specifies the location of the `title`.',\n                'Note that the title\\'s position used to be set',\n                'by the now deprecated `titleposition` attribute.'\n            ].join(' ')\n        },\n\n        editType: 'plot'\n    },\n\n    // position and shape\n    domain: domainAttrs({name: 'pie', trace: true, editType: 'calc'}),\n\n    hole: {\n        valType: 'number',\n        min: 0,\n        max: 1,\n        dflt: 0,\n        editType: 'calc',\n        description: [\n            'Sets the fraction of the radius to cut out of the pie.',\n            'Use this to make a donut chart.'\n        ].join(' ')\n    },\n\n    // ordering and direction\n    sort: {\n        valType: 'boolean',\n        dflt: true,\n        editType: 'calc',\n        description: [\n            'Determines whether or not the sectors are reordered',\n            'from largest to smallest.'\n        ].join(' ')\n    },\n    direction: {\n        /**\n         * there are two common conventions, both of which place the first\n         * (largest, if sorted) slice with its left edge at 12 o'clock but\n         * succeeding slices follow either cw or ccw from there.\n         *\n         * see http://visage.co/data-visualization-101-pie-charts/\n         */\n        valType: 'enumerated',\n        values: ['clockwise', 'counterclockwise'],\n        dflt: 'counterclockwise',\n        editType: 'calc',\n        description: [\n            'Specifies the direction at which succeeding sectors follow',\n            'one another.'\n        ].join(' ')\n    },\n    rotation: {\n        valType: 'number',\n        min: -360,\n        max: 360,\n        dflt: 0,\n        editType: 'calc',\n        description: [\n            'Instead of the first slice starting at 12 o\\'clock,',\n            'rotate to some other angle.'\n        ].join(' ')\n    },\n\n    pull: {\n        valType: 'number',\n        min: 0,\n        max: 1,\n        dflt: 0,\n        arrayOk: true,\n        editType: 'calc',\n        description: [\n            'Sets the fraction of larger radius to pull the sectors',\n            'out from the center. This can be a constant',\n            'to pull all slices apart from each other equally',\n            'or an array to highlight one or more slices.'\n        ].join(' ')\n    },\n\n    _deprecated: {\n        title: {\n            valType: 'string',\n            dflt: '',\n            editType: 'calc',\n            description: [\n                'Deprecated in favor of `title.text`.',\n                'Note that value of `title` is no longer a simple',\n                '*string* but a set of sub-attributes.'\n            ].join(' ')\n        },\n        titlefont: extendFlat({}, textFontAttrs, {\n            description: 'Deprecated in favor of `title.font`.'\n        }),\n        titleposition: {\n            valType: 'enumerated',\n            values: [\n                'top left', 'top center', 'top right',\n                'middle center',\n                'bottom left', 'bottom center', 'bottom right'\n            ],\n            editType: 'calc',\n            description: 'Deprecated in favor of `title.position`.'\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}