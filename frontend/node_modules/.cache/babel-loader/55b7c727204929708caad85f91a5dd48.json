{"ast":null,"code":"'use strict';\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar Registry = require('../registry');\n\nvar Lib = require('../lib');\n\nvar helpers = require('./helpers');\n\nvar clonePlot = require('./cloneplot');\n\nvar toSVG = require('./tosvg');\n\nvar svgToImg = require('./svgtoimg');\n/**\n * @param {object} gd figure Object\n * @param {object} opts option object\n * @param opts.format 'jpeg' | 'png' | 'webp' | 'svg'\n */\n\n\nfunction toImage(gd, opts) {\n  // first clone the GD so we can operate in a clean environment\n  var ev = new EventEmitter();\n  var clone = clonePlot(gd, {\n    format: 'png'\n  });\n  var clonedGd = clone.gd; // put the cloned div somewhere off screen before attaching to DOM\n\n  clonedGd.style.position = 'absolute';\n  clonedGd.style.left = '-5000px';\n  document.body.appendChild(clonedGd);\n\n  function wait() {\n    var delay = helpers.getDelay(clonedGd._fullLayout);\n    setTimeout(function () {\n      var svg = toSVG(clonedGd);\n      var canvas = document.createElement('canvas');\n      canvas.id = Lib.randstr();\n      ev = svgToImg({\n        format: opts.format,\n        width: clonedGd._fullLayout.width,\n        height: clonedGd._fullLayout.height,\n        canvas: canvas,\n        emitter: ev,\n        svg: svg\n      });\n\n      ev.clean = function () {\n        if (clonedGd) document.body.removeChild(clonedGd);\n      };\n    }, delay);\n  }\n\n  var redrawFunc = helpers.getRedrawFunc(clonedGd);\n  Registry.call('_doPlot', clonedGd, clone.data, clone.layout, clone.config).then(redrawFunc).then(wait).catch(function (err) {\n    ev.emit('error', err);\n  });\n  return ev;\n}\n\nmodule.exports = toImage;","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/plotly.js/src/snapshot/toimage.js"],"names":["EventEmitter","require","Registry","Lib","helpers","clonePlot","toSVG","svgToImg","toImage","gd","opts","ev","clone","format","clonedGd","style","position","left","document","body","appendChild","wait","delay","getDelay","_fullLayout","setTimeout","svg","canvas","createElement","id","randstr","width","height","emitter","clean","removeChild","redrawFunc","getRedrawFunc","call","data","layout","config","then","catch","err","emit","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,QAAD,CAAP,CAAkBD,YAArC;;AAEA,IAAIE,QAAQ,GAAGD,OAAO,CAAC,aAAD,CAAtB;;AACA,IAAIE,GAAG,GAAGF,OAAO,CAAC,QAAD,CAAjB;;AAEA,IAAIG,OAAO,GAAGH,OAAO,CAAC,WAAD,CAArB;;AACA,IAAII,SAAS,GAAGJ,OAAO,CAAC,aAAD,CAAvB;;AACA,IAAIK,KAAK,GAAGL,OAAO,CAAC,SAAD,CAAnB;;AACA,IAAIM,QAAQ,GAAGN,OAAO,CAAC,YAAD,CAAtB;AAEA;AACA;AACA;AACA;AACA;;;AACA,SAASO,OAAT,CAAiBC,EAAjB,EAAqBC,IAArB,EAA2B;AACvB;AACA,MAAIC,EAAE,GAAG,IAAIX,YAAJ,EAAT;AAEA,MAAIY,KAAK,GAAGP,SAAS,CAACI,EAAD,EAAK;AAACI,IAAAA,MAAM,EAAE;AAAT,GAAL,CAArB;AACA,MAAIC,QAAQ,GAAGF,KAAK,CAACH,EAArB,CALuB,CAOvB;;AACAK,EAAAA,QAAQ,CAACC,KAAT,CAAeC,QAAf,GAA0B,UAA1B;AACAF,EAAAA,QAAQ,CAACC,KAAT,CAAeE,IAAf,GAAsB,SAAtB;AACAC,EAAAA,QAAQ,CAACC,IAAT,CAAcC,WAAd,CAA0BN,QAA1B;;AAEA,WAASO,IAAT,GAAgB;AACZ,QAAIC,KAAK,GAAGlB,OAAO,CAACmB,QAAR,CAAiBT,QAAQ,CAACU,WAA1B,CAAZ;AAEAC,IAAAA,UAAU,CAAC,YAAW;AAClB,UAAIC,GAAG,GAAGpB,KAAK,CAACQ,QAAD,CAAf;AAEA,UAAIa,MAAM,GAAGT,QAAQ,CAACU,aAAT,CAAuB,QAAvB,CAAb;AACAD,MAAAA,MAAM,CAACE,EAAP,GAAY1B,GAAG,CAAC2B,OAAJ,EAAZ;AAEAnB,MAAAA,EAAE,GAAGJ,QAAQ,CAAC;AACVM,QAAAA,MAAM,EAAEH,IAAI,CAACG,MADH;AAEVkB,QAAAA,KAAK,EAAEjB,QAAQ,CAACU,WAAT,CAAqBO,KAFlB;AAGVC,QAAAA,MAAM,EAAElB,QAAQ,CAACU,WAAT,CAAqBQ,MAHnB;AAIVL,QAAAA,MAAM,EAAEA,MAJE;AAKVM,QAAAA,OAAO,EAAEtB,EALC;AAMVe,QAAAA,GAAG,EAAEA;AANK,OAAD,CAAb;;AASAf,MAAAA,EAAE,CAACuB,KAAH,GAAW,YAAW;AAClB,YAAGpB,QAAH,EAAaI,QAAQ,CAACC,IAAT,CAAcgB,WAAd,CAA0BrB,QAA1B;AAChB,OAFD;AAGH,KAlBS,EAkBPQ,KAlBO,CAAV;AAmBH;;AAED,MAAIc,UAAU,GAAGhC,OAAO,CAACiC,aAAR,CAAsBvB,QAAtB,CAAjB;AAEAZ,EAAAA,QAAQ,CAACoC,IAAT,CAAc,SAAd,EAAyBxB,QAAzB,EAAmCF,KAAK,CAAC2B,IAAzC,EAA+C3B,KAAK,CAAC4B,MAArD,EAA6D5B,KAAK,CAAC6B,MAAnE,EACKC,IADL,CACUN,UADV,EAEKM,IAFL,CAEUrB,IAFV,EAGKsB,KAHL,CAGW,UAASC,GAAT,EAAc;AACjBjC,IAAAA,EAAE,CAACkC,IAAH,CAAQ,OAAR,EAAiBD,GAAjB;AACH,GALL;AAQA,SAAOjC,EAAP;AACH;;AAEDmC,MAAM,CAACC,OAAP,GAAiBvC,OAAjB","sourcesContent":["'use strict';\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar Registry = require('../registry');\nvar Lib = require('../lib');\n\nvar helpers = require('./helpers');\nvar clonePlot = require('./cloneplot');\nvar toSVG = require('./tosvg');\nvar svgToImg = require('./svgtoimg');\n\n/**\n * @param {object} gd figure Object\n * @param {object} opts option object\n * @param opts.format 'jpeg' | 'png' | 'webp' | 'svg'\n */\nfunction toImage(gd, opts) {\n    // first clone the GD so we can operate in a clean environment\n    var ev = new EventEmitter();\n\n    var clone = clonePlot(gd, {format: 'png'});\n    var clonedGd = clone.gd;\n\n    // put the cloned div somewhere off screen before attaching to DOM\n    clonedGd.style.position = 'absolute';\n    clonedGd.style.left = '-5000px';\n    document.body.appendChild(clonedGd);\n\n    function wait() {\n        var delay = helpers.getDelay(clonedGd._fullLayout);\n\n        setTimeout(function() {\n            var svg = toSVG(clonedGd);\n\n            var canvas = document.createElement('canvas');\n            canvas.id = Lib.randstr();\n\n            ev = svgToImg({\n                format: opts.format,\n                width: clonedGd._fullLayout.width,\n                height: clonedGd._fullLayout.height,\n                canvas: canvas,\n                emitter: ev,\n                svg: svg\n            });\n\n            ev.clean = function() {\n                if(clonedGd) document.body.removeChild(clonedGd);\n            };\n        }, delay);\n    }\n\n    var redrawFunc = helpers.getRedrawFunc(clonedGd);\n\n    Registry.call('_doPlot', clonedGd, clone.data, clone.layout, clone.config)\n        .then(redrawFunc)\n        .then(wait)\n        .catch(function(err) {\n            ev.emit('error', err);\n        });\n\n\n    return ev;\n}\n\nmodule.exports = toImage;\n"]},"metadata":{},"sourceType":"script"}