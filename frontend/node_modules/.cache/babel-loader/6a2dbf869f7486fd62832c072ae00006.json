{"ast":null,"code":"module.exports = vectorizeText;\nmodule.exports.processPixels = processPixels;\n\nvar surfaceNets = require('surface-nets');\n\nvar ndarray = require('ndarray');\n\nvar simplify = require('simplify-planar-graph');\n\nvar cleanPSLG = require('clean-pslg');\n\nvar cdt2d = require('cdt2d');\n\nvar toPolygonCrappy = require('planar-graph-to-polyline');\n\nvar TAG_bold = \"b\";\nvar CHR_bold = 'b|';\nvar TAG_italic = \"i\";\nvar CHR_italic = 'i|';\nvar TAG_super = \"sup\";\nvar CHR_super0 = '+';\nvar CHR_super = '+1';\nvar TAG_sub = \"sub\";\nvar CHR_sub0 = '-';\nvar CHR_sub = '-1';\n\nfunction parseTag(tag, TAG_CHR, str, map) {\n  var opnTag = \"<\" + tag + \">\";\n  var clsTag = \"</\" + tag + \">\";\n  var nOPN = opnTag.length;\n  var nCLS = clsTag.length;\n  var isRecursive = TAG_CHR[0] === CHR_super0 || TAG_CHR[0] === CHR_sub0;\n  var a = 0;\n  var b = -nCLS;\n\n  while (a > -1) {\n    a = str.indexOf(opnTag, a);\n    if (a === -1) break;\n    b = str.indexOf(clsTag, a + nOPN);\n    if (b === -1) break;\n    if (b <= a) break;\n\n    for (var i = a; i < b + nCLS; ++i) {\n      if (i < a + nOPN || i >= b) {\n        map[i] = null;\n        str = str.substr(0, i) + \" \" + str.substr(i + 1);\n      } else {\n        if (map[i] !== null) {\n          var pos = map[i].indexOf(TAG_CHR[0]);\n\n          if (pos === -1) {\n            map[i] += TAG_CHR;\n          } else {\n            // i.e. to handle multiple sub/super-scripts\n            if (isRecursive) {\n              // i.e to increase the sub/sup number\n              map[i] = map[i].substr(0, pos + 1) + (1 + parseInt(map[i][pos + 1])) + map[i].substr(pos + 2);\n            }\n          }\n        }\n      }\n    }\n\n    var start = a + nOPN;\n    var remainingStr = str.substr(start, b - start);\n    var c = remainingStr.indexOf(opnTag);\n    if (c !== -1) a = c;else a = b + nCLS;\n  }\n\n  return map;\n}\n\nfunction transformPositions(positions, options, size) {\n  var align = options.textAlign || \"start\";\n  var baseline = options.textBaseline || \"alphabetic\";\n  var lo = [1 << 30, 1 << 30];\n  var hi = [0, 0];\n  var n = positions.length;\n\n  for (var i = 0; i < n; ++i) {\n    var p = positions[i];\n\n    for (var j = 0; j < 2; ++j) {\n      lo[j] = Math.min(lo[j], p[j]) | 0;\n      hi[j] = Math.max(hi[j], p[j]) | 0;\n    }\n  }\n\n  var xShift = 0;\n\n  switch (align) {\n    case \"center\":\n      xShift = -0.5 * (lo[0] + hi[0]);\n      break;\n\n    case \"right\":\n    case \"end\":\n      xShift = -hi[0];\n      break;\n\n    case \"left\":\n    case \"start\":\n      xShift = -lo[0];\n      break;\n\n    default:\n      throw new Error(\"vectorize-text: Unrecognized textAlign: '\" + align + \"'\");\n  }\n\n  var yShift = 0;\n\n  switch (baseline) {\n    case \"hanging\":\n    case \"top\":\n      yShift = -lo[1];\n      break;\n\n    case \"middle\":\n      yShift = -0.5 * (lo[1] + hi[1]);\n      break;\n\n    case \"alphabetic\":\n    case \"ideographic\":\n      yShift = -3 * size;\n      break;\n\n    case \"bottom\":\n      yShift = -hi[1];\n      break;\n\n    default:\n      throw new Error(\"vectorize-text: Unrecoginized textBaseline: '\" + baseline + \"'\");\n  }\n\n  var scale = 1.0 / size;\n\n  if (\"lineHeight\" in options) {\n    scale *= +options.lineHeight;\n  } else if (\"width\" in options) {\n    scale = options.width / (hi[0] - lo[0]);\n  } else if (\"height\" in options) {\n    scale = options.height / (hi[1] - lo[1]);\n  }\n\n  return positions.map(function (p) {\n    return [scale * (p[0] + xShift), scale * (p[1] + yShift)];\n  });\n}\n\nfunction getPixels(canvas, context, rawString, fontSize, lineSpacing, styletags) {\n  rawString = rawString.replace(/\\n/g, ''); // don't accept \\n in the input\n\n  if (styletags.breaklines === true) {\n    rawString = rawString.replace(/\\<br\\>/g, '\\n'); // replace <br> tags with \\n in the string\n  } else {\n    rawString = rawString.replace(/\\<br\\>/g, ' '); // don't accept <br> tags in the input and replace with space in this case\n  }\n\n  var activeStyle = \"\";\n  var map = [];\n\n  for (j = 0; j < rawString.length; ++j) {\n    map[j] = activeStyle;\n  }\n\n  if (styletags.bolds === true) map = parseTag(TAG_bold, CHR_bold, rawString, map);\n  if (styletags.italics === true) map = parseTag(TAG_italic, CHR_italic, rawString, map);\n  if (styletags.superscripts === true) map = parseTag(TAG_super, CHR_super, rawString, map);\n  if (styletags.subscripts === true) map = parseTag(TAG_sub, CHR_sub, rawString, map);\n  var allStyles = [];\n  var plainText = \"\";\n\n  for (j = 0; j < rawString.length; ++j) {\n    if (map[j] !== null) {\n      plainText += rawString[j];\n      allStyles.push(map[j]);\n    }\n  }\n\n  var allTexts = plainText.split('\\n');\n  var numberOfLines = allTexts.length;\n  var lineHeight = Math.round(lineSpacing * fontSize);\n  var offsetX = fontSize;\n  var offsetY = fontSize * 2;\n  var maxWidth = 0;\n  var minHeight = numberOfLines * lineHeight + offsetY;\n\n  if (canvas.height < minHeight) {\n    canvas.height = minHeight;\n  }\n\n  context.fillStyle = \"#000\";\n  context.fillRect(0, 0, canvas.width, canvas.height);\n  context.fillStyle = \"#fff\";\n  var i, j, xPos, yPos, zPos;\n  var nDone = 0;\n  var buffer = \"\";\n\n  function writeBuffer() {\n    if (buffer !== \"\") {\n      var delta = context.measureText(buffer).width;\n      context.fillText(buffer, offsetX + xPos, offsetY + yPos);\n      xPos += delta;\n    }\n  }\n\n  function getTextFontSize() {\n    return \"\" + Math.round(zPos) + \"px \";\n  }\n\n  function changeStyle(oldStyle, newStyle) {\n    var ctxFont = \"\" + context.font;\n\n    if (styletags.subscripts === true) {\n      var oldIndex_Sub = oldStyle.indexOf(CHR_sub0);\n      var newIndex_Sub = newStyle.indexOf(CHR_sub0);\n      var oldSub = oldIndex_Sub > -1 ? parseInt(oldStyle[1 + oldIndex_Sub]) : 0;\n      var newSub = newIndex_Sub > -1 ? parseInt(newStyle[1 + newIndex_Sub]) : 0;\n\n      if (oldSub !== newSub) {\n        ctxFont = ctxFont.replace(getTextFontSize(), \"?px \");\n        zPos *= Math.pow(0.75, newSub - oldSub);\n        ctxFont = ctxFont.replace(\"?px \", getTextFontSize());\n      }\n\n      yPos += 0.25 * lineHeight * (newSub - oldSub);\n    }\n\n    if (styletags.superscripts === true) {\n      var oldIndex_Super = oldStyle.indexOf(CHR_super0);\n      var newIndex_Super = newStyle.indexOf(CHR_super0);\n      var oldSuper = oldIndex_Super > -1 ? parseInt(oldStyle[1 + oldIndex_Super]) : 0;\n      var newSuper = newIndex_Super > -1 ? parseInt(newStyle[1 + newIndex_Super]) : 0;\n\n      if (oldSuper !== newSuper) {\n        ctxFont = ctxFont.replace(getTextFontSize(), \"?px \");\n        zPos *= Math.pow(0.75, newSuper - oldSuper);\n        ctxFont = ctxFont.replace(\"?px \", getTextFontSize());\n      }\n\n      yPos -= 0.25 * lineHeight * (newSuper - oldSuper);\n    }\n\n    if (styletags.bolds === true) {\n      var wasBold = oldStyle.indexOf(CHR_bold) > -1;\n      var is_Bold = newStyle.indexOf(CHR_bold) > -1;\n\n      if (!wasBold && is_Bold) {\n        if (wasItalic) {\n          ctxFont = ctxFont.replace(\"italic \", \"italic bold \");\n        } else {\n          ctxFont = \"bold \" + ctxFont;\n        }\n      }\n\n      if (wasBold && !is_Bold) {\n        ctxFont = ctxFont.replace(\"bold \", '');\n      }\n    }\n\n    if (styletags.italics === true) {\n      var wasItalic = oldStyle.indexOf(CHR_italic) > -1;\n      var is_Italic = newStyle.indexOf(CHR_italic) > -1;\n\n      if (!wasItalic && is_Italic) {\n        ctxFont = \"italic \" + ctxFont;\n      }\n\n      if (wasItalic && !is_Italic) {\n        ctxFont = ctxFont.replace(\"italic \", '');\n      }\n    }\n\n    context.font = ctxFont;\n  }\n\n  for (i = 0; i < numberOfLines; ++i) {\n    var txt = allTexts[i] + '\\n';\n    xPos = 0;\n    yPos = i * lineHeight;\n    zPos = fontSize;\n    buffer = \"\";\n\n    for (j = 0; j < txt.length; ++j) {\n      var style = j + nDone < allStyles.length ? allStyles[j + nDone] : allStyles[allStyles.length - 1];\n\n      if (activeStyle === style) {\n        buffer += txt[j];\n      } else {\n        writeBuffer();\n        buffer = txt[j];\n\n        if (style !== undefined) {\n          changeStyle(activeStyle, style);\n          activeStyle = style;\n        }\n      }\n    }\n\n    writeBuffer();\n    nDone += txt.length;\n    var width = Math.round(xPos + 2 * offsetX) | 0;\n    if (maxWidth < width) maxWidth = width;\n  } //Cut pixels from image\n\n\n  var xCut = maxWidth;\n  var yCut = offsetY + lineHeight * numberOfLines;\n  var pixels = ndarray(context.getImageData(0, 0, xCut, yCut).data, [yCut, xCut, 4]);\n  return pixels.pick(-1, -1, 0).transpose(1, 0);\n}\n\nfunction getContour(pixels, doSimplify) {\n  var contour = surfaceNets(pixels, 128);\n\n  if (doSimplify) {\n    return simplify(contour.cells, contour.positions, 0.25);\n  }\n\n  return {\n    edges: contour.cells,\n    positions: contour.positions\n  };\n}\n\nfunction processPixelsImpl(pixels, options, size, simplify) {\n  //Extract contour\n  var contour = getContour(pixels, simplify); //Apply warp to positions\n\n  var positions = transformPositions(contour.positions, options, size);\n  var edges = contour.edges;\n  var flip = \"ccw\" === options.orientation; //Clean up the PSLG, resolve self intersections, etc.\n\n  cleanPSLG(positions, edges); //If triangulate flag passed, triangulate the result\n\n  if (options.polygons || options.polygon || options.polyline) {\n    var result = toPolygonCrappy(edges, positions);\n    var nresult = new Array(result.length);\n\n    for (var i = 0; i < result.length; ++i) {\n      var loops = result[i];\n      var nloops = new Array(loops.length);\n\n      for (var j = 0; j < loops.length; ++j) {\n        var loop = loops[j];\n        var nloop = new Array(loop.length);\n\n        for (var k = 0; k < loop.length; ++k) {\n          nloop[k] = positions[loop[k]].slice();\n        }\n\n        if (flip) {\n          nloop.reverse();\n        }\n\n        nloops[j] = nloop;\n      }\n\n      nresult[i] = nloops;\n    }\n\n    return nresult;\n  } else if (options.triangles || options.triangulate || options.triangle) {\n    return {\n      cells: cdt2d(positions, edges, {\n        delaunay: false,\n        exterior: false,\n        interior: true\n      }),\n      positions: positions\n    };\n  } else {\n    return {\n      edges: edges,\n      positions: positions\n    };\n  }\n}\n\nfunction processPixels(pixels, options, size) {\n  try {\n    return processPixelsImpl(pixels, options, size, true);\n  } catch (e) {}\n\n  try {\n    return processPixelsImpl(pixels, options, size, false);\n  } catch (e) {}\n\n  if (options.polygons || options.polyline || options.polygon) {\n    return [];\n  }\n\n  if (options.triangles || options.triangulate || options.triangle) {\n    return {\n      cells: [],\n      positions: []\n    };\n  }\n\n  return {\n    edges: [],\n    positions: []\n  };\n}\n\nfunction vectorizeText(str, canvas, context, options) {\n  var size = 64;\n  var lineSpacing = 1.25;\n  var styletags = {\n    breaklines: false,\n    bolds: false,\n    italics: false,\n    subscripts: false,\n    superscripts: false\n  };\n\n  if (options) {\n    if (options.size && options.size > 0) size = options.size;\n    if (options.lineSpacing && options.lineSpacing > 0) lineSpacing = options.lineSpacing;\n    if (options.styletags && options.styletags.breaklines) styletags.breaklines = options.styletags.breaklines ? true : false;\n    if (options.styletags && options.styletags.bolds) styletags.bolds = options.styletags.bolds ? true : false;\n    if (options.styletags && options.styletags.italics) styletags.italics = options.styletags.italics ? true : false;\n    if (options.styletags && options.styletags.subscripts) styletags.subscripts = options.styletags.subscripts ? true : false;\n    if (options.styletags && options.styletags.superscripts) styletags.superscripts = options.styletags.superscripts ? true : false;\n  }\n\n  context.font = [options.fontStyle, options.fontVariant, options.fontWeight, size + \"px\", options.font].filter(function (d) {\n    return d;\n  }).join(\" \");\n  context.textAlign = \"start\";\n  context.textBaseline = \"alphabetic\";\n  context.direction = \"ltr\";\n  var pixels = getPixels(canvas, context, str, size, lineSpacing, styletags);\n  return processPixels(pixels, options, size);\n}","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/vectorize-text/lib/vtext.js"],"names":["module","exports","vectorizeText","processPixels","surfaceNets","require","ndarray","simplify","cleanPSLG","cdt2d","toPolygonCrappy","TAG_bold","CHR_bold","TAG_italic","CHR_italic","TAG_super","CHR_super0","CHR_super","TAG_sub","CHR_sub0","CHR_sub","parseTag","tag","TAG_CHR","str","map","opnTag","clsTag","nOPN","length","nCLS","isRecursive","a","b","indexOf","i","substr","pos","parseInt","start","remainingStr","c","transformPositions","positions","options","size","align","textAlign","baseline","textBaseline","lo","hi","n","p","j","Math","min","max","xShift","Error","yShift","scale","lineHeight","width","height","getPixels","canvas","context","rawString","fontSize","lineSpacing","styletags","replace","breaklines","activeStyle","bolds","italics","superscripts","subscripts","allStyles","plainText","push","allTexts","split","numberOfLines","round","offsetX","offsetY","maxWidth","minHeight","fillStyle","fillRect","xPos","yPos","zPos","nDone","buffer","writeBuffer","delta","measureText","fillText","getTextFontSize","changeStyle","oldStyle","newStyle","ctxFont","font","oldIndex_Sub","newIndex_Sub","oldSub","newSub","pow","oldIndex_Super","newIndex_Super","oldSuper","newSuper","wasBold","is_Bold","wasItalic","is_Italic","txt","style","undefined","xCut","yCut","pixels","getImageData","data","pick","transpose","getContour","doSimplify","contour","cells","edges","processPixelsImpl","flip","orientation","polygons","polygon","polyline","result","nresult","Array","loops","nloops","loop","nloop","k","slice","reverse","triangles","triangulate","triangle","delaunay","exterior","interior","e","fontStyle","fontVariant","fontWeight","filter","d","join","direction"],"mappings":"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","sourcesContent":["module.exports = vectorizeText\nmodule.exports.processPixels = processPixels\n\nvar surfaceNets = require('surface-nets')\nvar ndarray = require('ndarray')\nvar simplify = require('simplify-planar-graph')\nvar cleanPSLG = require('clean-pslg')\nvar cdt2d = require('cdt2d')\nvar toPolygonCrappy = require('planar-graph-to-polyline')\n\nvar TAG_bold = \"b\"\nvar CHR_bold = 'b|'\n\nvar TAG_italic = \"i\"\nvar CHR_italic = 'i|'\n\nvar TAG_super = \"sup\"\nvar CHR_super0 = '+'\nvar CHR_super = '+1'\n\nvar TAG_sub = \"sub\"\nvar CHR_sub0 = '-'\nvar CHR_sub = '-1'\n\nfunction parseTag(tag, TAG_CHR, str, map) {\n\n  var opnTag =  \"<\"  + tag + \">\"\n  var clsTag =  \"</\" + tag + \">\"\n\n  var nOPN = opnTag.length\n  var nCLS = clsTag.length\n\n  var isRecursive = (TAG_CHR[0] === CHR_super0) ||\n                    (TAG_CHR[0] === CHR_sub0);\n\n  var a = 0\n  var b = -nCLS\n  while (a > -1) {\n    a = str.indexOf(opnTag, a)\n    if(a === -1) break\n\n    b = str.indexOf(clsTag, a + nOPN)\n    if(b === -1) break\n\n    if(b <= a) break\n\n    for(var i = a; i < b + nCLS; ++i){\n      if((i < a + nOPN) || (i >= b)) {\n        map[i] = null\n        str = str.substr(0, i) + \" \" + str.substr(i + 1)\n      } else {\n        if(map[i] !== null) {\n          var pos = map[i].indexOf(TAG_CHR[0])\n          if(pos === -1) {\n            map[i] += TAG_CHR\n          } else { // i.e. to handle multiple sub/super-scripts\n            if(isRecursive) {\n              // i.e to increase the sub/sup number\n              map[i] = map[i].substr(0, pos + 1) + (1 + parseInt(map[i][pos + 1])) + map[i].substr(pos + 2)\n            }\n          }\n        }\n      }\n    }\n\n    var start = a + nOPN\n    var remainingStr = str.substr(start, b - start)\n\n    var c = remainingStr.indexOf(opnTag)\n    if(c !== -1) a = c\n    else a = b + nCLS\n  }\n\n  return map\n}\n\nfunction transformPositions(positions, options, size) {\n  var align = options.textAlign || \"start\"\n  var baseline = options.textBaseline || \"alphabetic\"\n\n  var lo = [1<<30, 1<<30]\n  var hi = [0,0]\n  var n = positions.length\n  for(var i=0; i<n; ++i) {\n    var p = positions[i]\n    for(var j=0; j<2; ++j) {\n      lo[j] = Math.min(lo[j], p[j])|0\n      hi[j] = Math.max(hi[j], p[j])|0\n    }\n  }\n\n  var xShift = 0\n  switch(align) {\n    case \"center\":\n      xShift = -0.5 * (lo[0] + hi[0])\n    break\n\n    case \"right\":\n    case \"end\":\n      xShift = -hi[0]\n    break\n\n    case \"left\":\n    case \"start\":\n      xShift = -lo[0]\n    break\n\n    default:\n      throw new Error(\"vectorize-text: Unrecognized textAlign: '\" + align + \"'\")\n  }\n\n  var yShift = 0\n  switch(baseline) {\n    case \"hanging\":\n    case \"top\":\n      yShift = -lo[1]\n    break\n\n    case \"middle\":\n      yShift = -0.5 * (lo[1] + hi[1])\n    break\n\n    case \"alphabetic\":\n    case \"ideographic\":\n      yShift = -3 * size\n    break\n\n    case \"bottom\":\n      yShift = -hi[1]\n    break\n\n    default:\n      throw new Error(\"vectorize-text: Unrecoginized textBaseline: '\" + baseline + \"'\")\n  }\n\n  var scale = 1.0 / size\n  if(\"lineHeight\" in options) {\n    scale *= +options.lineHeight\n  } else if(\"width\" in options) {\n    scale = options.width / (hi[0] - lo[0])\n  } else if(\"height\" in options) {\n    scale = options.height / (hi[1] - lo[1])\n  }\n\n  return positions.map(function(p) {\n    return [ scale * (p[0] + xShift), scale * (p[1] + yShift) ]\n  })\n}\n\nfunction getPixels(canvas, context, rawString, fontSize, lineSpacing, styletags) {\n\n  rawString = rawString.replace(/\\n/g, '') // don't accept \\n in the input\n\n  if(styletags.breaklines === true) {\n    rawString = rawString.replace(/\\<br\\>/g, '\\n') // replace <br> tags with \\n in the string\n  } else {\n    rawString = rawString.replace(/\\<br\\>/g, ' ') // don't accept <br> tags in the input and replace with space in this case\n  }\n\n  var activeStyle = \"\"\n  var map = []\n  for(j = 0; j < rawString.length; ++j) {\n    map[j] = activeStyle\n  }\n\n  if(styletags.bolds === true) map = parseTag(TAG_bold, CHR_bold, rawString, map)\n  if(styletags.italics === true) map = parseTag(TAG_italic, CHR_italic, rawString, map)\n  if(styletags.superscripts === true) map = parseTag(TAG_super, CHR_super, rawString, map)\n  if(styletags.subscripts === true) map = parseTag(TAG_sub, CHR_sub, rawString, map)\n\n  var allStyles = []\n  var plainText = \"\"\n  for(j = 0; j < rawString.length; ++j) {\n    if(map[j] !== null) {\n      plainText += rawString[j]\n      allStyles.push(map[j])\n    }\n  }\n\n  var allTexts = plainText.split('\\n')\n\n  var numberOfLines = allTexts.length\n  var lineHeight = Math.round(lineSpacing * fontSize)\n  var offsetX = fontSize\n  var offsetY = fontSize * 2\n  var maxWidth = 0\n  var minHeight = numberOfLines * lineHeight + offsetY\n\n  if(canvas.height < minHeight) {\n    canvas.height = minHeight\n  }\n\n  context.fillStyle = \"#000\"\n  context.fillRect(0, 0, canvas.width, canvas.height)\n\n  context.fillStyle = \"#fff\"\n  var i, j, xPos, yPos, zPos\n  var nDone = 0\n\n  var buffer = \"\"\n  function writeBuffer() {\n    if(buffer !== \"\") {\n      var delta = context.measureText(buffer).width\n\n      context.fillText(buffer, offsetX + xPos, offsetY + yPos)\n      xPos += delta\n    }\n  }\n\n  function getTextFontSize() {\n    return \"\" + Math.round(zPos) + \"px \";\n  }\n\n  function changeStyle(oldStyle, newStyle) {\n    var ctxFont = \"\" + context.font;\n\n    if(styletags.subscripts === true) {\n      var oldIndex_Sub = oldStyle.indexOf(CHR_sub0);\n      var newIndex_Sub = newStyle.indexOf(CHR_sub0);\n\n      var oldSub = (oldIndex_Sub > -1) ? parseInt(oldStyle[1 + oldIndex_Sub]) : 0;\n      var newSub = (newIndex_Sub > -1) ? parseInt(newStyle[1 + newIndex_Sub]) : 0;\n\n      if(oldSub !== newSub) {\n        ctxFont = ctxFont.replace(getTextFontSize(), \"?px \")\n        zPos *= Math.pow(0.75, (newSub - oldSub))\n        ctxFont = ctxFont.replace(\"?px \", getTextFontSize())\n      }\n      yPos += 0.25 * lineHeight * (newSub - oldSub);\n    }\n\n    if(styletags.superscripts === true) {\n      var oldIndex_Super = oldStyle.indexOf(CHR_super0);\n      var newIndex_Super = newStyle.indexOf(CHR_super0);\n\n      var oldSuper = (oldIndex_Super > -1) ? parseInt(oldStyle[1 + oldIndex_Super]) : 0;\n      var newSuper = (newIndex_Super > -1) ? parseInt(newStyle[1 + newIndex_Super]) : 0;\n\n      if(oldSuper !== newSuper) {\n        ctxFont = ctxFont.replace(getTextFontSize(), \"?px \")\n        zPos *= Math.pow(0.75, (newSuper - oldSuper))\n        ctxFont = ctxFont.replace(\"?px \", getTextFontSize())\n      }\n      yPos -= 0.25 * lineHeight * (newSuper - oldSuper);\n    }\n\n    if(styletags.bolds === true) {\n      var wasBold = (oldStyle.indexOf(CHR_bold) > -1)\n      var is_Bold = (newStyle.indexOf(CHR_bold) > -1)\n\n      if(!wasBold && is_Bold) {\n        if(wasItalic) {\n          ctxFont = ctxFont.replace(\"italic \", \"italic bold \")\n        } else {\n          ctxFont = \"bold \" + ctxFont\n        }\n      }\n      if(wasBold && !is_Bold) {\n        ctxFont = ctxFont.replace(\"bold \", '')\n      }\n    }\n\n    if(styletags.italics === true) {\n      var wasItalic = (oldStyle.indexOf(CHR_italic) > -1)\n      var is_Italic = (newStyle.indexOf(CHR_italic) > -1)\n\n      if(!wasItalic && is_Italic) {\n        ctxFont = \"italic \" + ctxFont\n      }\n      if(wasItalic && !is_Italic) {\n        ctxFont = ctxFont.replace(\"italic \", '')\n      }\n    }\n    context.font = ctxFont\n  }\n\n  for(i = 0; i < numberOfLines; ++i) {\n    var txt = allTexts[i] + '\\n'\n    xPos = 0\n    yPos = i * lineHeight\n    zPos = fontSize\n\n    buffer = \"\"\n    \n    for(j = 0; j < txt.length; ++j) {\n      var style = (j + nDone < allStyles.length) ? allStyles[j + nDone] : allStyles[allStyles.length - 1]\n      if(activeStyle === style) {\n        buffer += txt[j]\n      } else {\n        writeBuffer()\n        buffer = txt[j]\n\n        if(style !== undefined) {\n          changeStyle(activeStyle, style)\n          activeStyle = style\n        }\n      }\n    }\n    writeBuffer()\n\n    nDone += txt.length\n\n    var width = Math.round(xPos + 2 * offsetX) | 0\n    if(maxWidth < width) maxWidth = width\n  }\n\n  //Cut pixels from image\n  var xCut = maxWidth\n  var yCut = offsetY + lineHeight * numberOfLines\n  var pixels = ndarray(context.getImageData(0, 0, xCut, yCut).data, [yCut, xCut, 4])\n  return pixels.pick(-1, -1, 0).transpose(1, 0)\n}\n\nfunction getContour(pixels, doSimplify) {\n  var contour = surfaceNets(pixels, 128)\n  if(doSimplify) {\n    return simplify(contour.cells, contour.positions, 0.25)\n  }\n  return {\n    edges: contour.cells,\n    positions: contour.positions\n  }\n}\n\nfunction processPixelsImpl(pixels, options, size, simplify) {\n  //Extract contour\n  var contour = getContour(pixels, simplify)\n\n  //Apply warp to positions\n  var positions = transformPositions(contour.positions, options, size)\n  var edges     = contour.edges\n  var flip = \"ccw\" === options.orientation\n\n  //Clean up the PSLG, resolve self intersections, etc.\n  cleanPSLG(positions, edges)\n\n  //If triangulate flag passed, triangulate the result\n  if(options.polygons || options.polygon || options.polyline) {\n    var result = toPolygonCrappy(edges, positions)\n    var nresult = new Array(result.length)\n    for(var i=0; i<result.length; ++i) {\n      var loops = result[i]\n      var nloops = new Array(loops.length)\n      for(var j=0; j<loops.length; ++j) {\n        var loop = loops[j]\n        var nloop = new Array(loop.length)\n        for(var k=0; k<loop.length; ++k) {\n          nloop[k] = positions[loop[k]].slice()\n        }\n        if(flip) {\n          nloop.reverse()\n        }\n        nloops[j] = nloop\n      }\n      nresult[i] = nloops\n    }\n    return nresult\n  } else if(options.triangles || options.triangulate || options.triangle) {\n    return {\n      cells: cdt2d(positions, edges, {\n        delaunay: false,\n        exterior: false,\n        interior: true\n      }),\n      positions: positions\n    }\n  } else {\n    return {\n      edges:     edges,\n      positions: positions\n    }\n  }\n}\n\nfunction processPixels(pixels, options, size) {\n  try {\n    return processPixelsImpl(pixels, options, size, true)\n  } catch(e) {}\n  try {\n    return processPixelsImpl(pixels, options, size, false)\n  } catch(e) {}\n  if(options.polygons || options.polyline || options.polygon) {\n    return []\n  }\n  if(options.triangles || options.triangulate || options.triangle) {\n    return {\n      cells: [],\n      positions: []\n    }\n  }\n  return {\n    edges: [],\n    positions: []\n  }\n}\n\nfunction vectorizeText(str, canvas, context, options) {\n  var size = 64\n  var lineSpacing = 1.25\n  var styletags = {\n    breaklines: false,\n    bolds: false,\n    italics: false,\n    subscripts: false,\n    superscripts: false\n  }\n\n  if(options) {\n\n    if(options.size &&\n       options.size > 0) size =\n       options.size\n\n    if(options.lineSpacing &&\n       options.lineSpacing > 0) lineSpacing =\n       options.lineSpacing\n\n    if(options.styletags &&\n       options.styletags.breaklines) styletags.breaklines =\n       options.styletags.breaklines ? true : false\n\n    if(options.styletags &&\n       options.styletags.bolds) styletags.bolds =\n       options.styletags.bolds ? true : false\n\n    if(options.styletags &&\n       options.styletags.italics) styletags.italics =\n       options.styletags.italics ? true : false\n\n    if(options.styletags &&\n       options.styletags.subscripts) styletags.subscripts =\n       options.styletags.subscripts ? true : false\n\n    if(options.styletags &&\n       options.styletags.superscripts) styletags.superscripts =\n       options.styletags.superscripts ? true : false\n  }\n\n  context.font = [\n    options.fontStyle,\n    options.fontVariant,\n    options.fontWeight,\n    size + \"px\",\n    options.font\n  ].filter(function(d) {return d}).join(\" \")\n  context.textAlign = \"start\"\n  context.textBaseline = \"alphabetic\"\n  context.direction = \"ltr\"\n\n  var pixels = getPixels(canvas, context, str, size, lineSpacing, styletags)\n\n  return processPixels(pixels, options, size)\n}\n"]},"metadata":{},"sourceType":"script"}