{"ast":null,"code":"'use strict';\n\nvar c = require('./constants');\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nvar isNumeric = require('fast-isnumeric'); // pure functions, don't alter but passes on `gd` and parts of `trace` without deep copying\n\n\nmodule.exports = function calc(gd, trace) {\n  var cellsValues = squareStringMatrix(trace.cells.values);\n\n  var slicer = function (a) {\n    return a.slice(trace.header.values.length, a.length);\n  };\n\n  var headerValuesIn = squareStringMatrix(trace.header.values);\n\n  if (headerValuesIn.length && !headerValuesIn[0].length) {\n    headerValuesIn[0] = [''];\n    headerValuesIn = squareStringMatrix(headerValuesIn);\n  }\n\n  var headerValues = headerValuesIn.concat(slicer(cellsValues).map(function () {\n    return emptyStrings((headerValuesIn[0] || ['']).length);\n  }));\n  var domain = trace.domain;\n  var groupWidth = Math.floor(gd._fullLayout._size.w * (domain.x[1] - domain.x[0]));\n  var groupHeight = Math.floor(gd._fullLayout._size.h * (domain.y[1] - domain.y[0]));\n  var headerRowHeights = trace.header.values.length ? headerValues[0].map(function () {\n    return trace.header.height;\n  }) : [c.emptyHeaderHeight];\n  var rowHeights = cellsValues.length ? cellsValues[0].map(function () {\n    return trace.cells.height;\n  }) : [];\n  var headerHeight = headerRowHeights.reduce(sum, 0);\n  var scrollHeight = groupHeight - headerHeight;\n  var minimumFillHeight = scrollHeight + c.uplift;\n  var anchorToRowBlock = makeAnchorToRowBlock(rowHeights, minimumFillHeight);\n  var anchorToHeaderRowBlock = makeAnchorToRowBlock(headerRowHeights, headerHeight);\n  var headerRowBlocks = makeRowBlock(anchorToHeaderRowBlock, []);\n  var rowBlocks = makeRowBlock(anchorToRowBlock, headerRowBlocks);\n  var uniqueKeys = {};\n\n  var columnOrder = trace._fullInput.columnorder.concat(slicer(cellsValues.map(function (d, i) {\n    return i;\n  })));\n\n  var columnWidths = headerValues.map(function (d, i) {\n    var value = Array.isArray(trace.columnwidth) ? trace.columnwidth[Math.min(i, trace.columnwidth.length - 1)] : trace.columnwidth;\n    return isNumeric(value) ? Number(value) : 1;\n  });\n  var totalColumnWidths = columnWidths.reduce(sum, 0); // fit columns in the available vertical space as there's no vertical scrolling now\n\n  columnWidths = columnWidths.map(function (d) {\n    return d / totalColumnWidths * groupWidth;\n  });\n  var maxLineWidth = Math.max(arrayMax(trace.header.line.width), arrayMax(trace.cells.line.width));\n  var calcdata = {\n    // include staticPlot in the key so if it changes we delete and redraw\n    key: trace.uid + gd._context.staticPlot,\n    translateX: domain.x[0] * gd._fullLayout._size.w,\n    translateY: gd._fullLayout._size.h * (1 - domain.y[1]),\n    size: gd._fullLayout._size,\n    width: groupWidth,\n    maxLineWidth: maxLineWidth,\n    height: groupHeight,\n    columnOrder: columnOrder,\n    // will be mutated on column move, todo use in callback\n    groupHeight: groupHeight,\n    rowBlocks: rowBlocks,\n    headerRowBlocks: headerRowBlocks,\n    scrollY: 0,\n    // will be mutated on scroll\n    cells: extendFlat({}, trace.cells, {\n      values: cellsValues\n    }),\n    headerCells: extendFlat({}, trace.header, {\n      values: headerValues\n    }),\n    gdColumns: headerValues.map(function (d) {\n      return d[0];\n    }),\n    gdColumnsOriginalOrder: headerValues.map(function (d) {\n      return d[0];\n    }),\n    prevPages: [0, 0],\n    scrollbarState: {\n      scrollbarScrollInProgress: false\n    },\n    columns: headerValues.map(function (label, i) {\n      var foundKey = uniqueKeys[label];\n      uniqueKeys[label] = (foundKey || 0) + 1;\n      var key = label + '__' + uniqueKeys[label];\n      return {\n        key: key,\n        label: label,\n        specIndex: i,\n        xIndex: columnOrder[i],\n        xScale: xScale,\n        x: undefined,\n        // initialized below\n        calcdata: undefined,\n        // initialized below\n        columnWidth: columnWidths[i]\n      };\n    })\n  };\n  calcdata.columns.forEach(function (col) {\n    col.calcdata = calcdata;\n    col.x = xScale(col);\n  });\n  return calcdata;\n};\n\nfunction arrayMax(maybeArray) {\n  if (Array.isArray(maybeArray)) {\n    var max = 0;\n\n    for (var i = 0; i < maybeArray.length; i++) {\n      max = Math.max(max, arrayMax(maybeArray[i]));\n    }\n\n    return max;\n  }\n\n  return maybeArray;\n}\n\nfunction sum(a, b) {\n  return a + b;\n} // fill matrix in place to equal lengths\n// and ensure it's uniformly 2D\n\n\nfunction squareStringMatrix(matrixIn) {\n  var matrix = matrixIn.slice();\n  var minLen = Infinity;\n  var maxLen = 0;\n  var i;\n\n  for (i = 0; i < matrix.length; i++) {\n    if (!Array.isArray(matrix[i])) matrix[i] = [matrix[i]];\n    minLen = Math.min(minLen, matrix[i].length);\n    maxLen = Math.max(maxLen, matrix[i].length);\n  }\n\n  if (minLen !== maxLen) {\n    for (i = 0; i < matrix.length; i++) {\n      var padLen = maxLen - matrix[i].length;\n      if (padLen) matrix[i] = matrix[i].concat(emptyStrings(padLen));\n    }\n  }\n\n  return matrix;\n}\n\nfunction emptyStrings(len) {\n  var padArray = new Array(len);\n\n  for (var j = 0; j < len; j++) padArray[j] = '';\n\n  return padArray;\n}\n\nfunction xScale(d) {\n  return d.calcdata.columns.reduce(function (prev, next) {\n    return next.xIndex < d.xIndex ? prev + next.columnWidth : prev;\n  }, 0);\n}\n\nfunction makeRowBlock(anchorToRowBlock, auxiliary) {\n  var blockAnchorKeys = Object.keys(anchorToRowBlock);\n  return blockAnchorKeys.map(function (k) {\n    return extendFlat({}, anchorToRowBlock[k], {\n      auxiliaryBlocks: auxiliary\n    });\n  });\n}\n\nfunction makeAnchorToRowBlock(rowHeights, minimumFillHeight) {\n  var anchorToRowBlock = {};\n  var currentRowHeight;\n  var currentAnchor = 0;\n  var currentBlockHeight = 0;\n  var currentBlock = makeIdentity();\n  var currentFirstRowIndex = 0;\n  var blockCounter = 0;\n\n  for (var i = 0; i < rowHeights.length; i++) {\n    currentRowHeight = rowHeights[i];\n    currentBlock.rows.push({\n      rowIndex: i,\n      rowHeight: currentRowHeight\n    });\n    currentBlockHeight += currentRowHeight;\n\n    if (currentBlockHeight >= minimumFillHeight || i === rowHeights.length - 1) {\n      anchorToRowBlock[currentAnchor] = currentBlock;\n      currentBlock.key = blockCounter++;\n      currentBlock.firstRowIndex = currentFirstRowIndex;\n      currentBlock.lastRowIndex = i;\n      currentBlock = makeIdentity();\n      currentAnchor += currentBlockHeight;\n      currentFirstRowIndex = i + 1;\n      currentBlockHeight = 0;\n    }\n  }\n\n  return anchorToRowBlock;\n}\n\nfunction makeIdentity() {\n  return {\n    firstRowIndex: null,\n    lastRowIndex: null,\n    rows: []\n  };\n}","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/plotly.js/src/traces/table/data_preparation_helper.js"],"names":["c","require","extendFlat","isNumeric","module","exports","calc","gd","trace","cellsValues","squareStringMatrix","cells","values","slicer","a","slice","header","length","headerValuesIn","headerValues","concat","map","emptyStrings","domain","groupWidth","Math","floor","_fullLayout","_size","w","x","groupHeight","h","y","headerRowHeights","height","emptyHeaderHeight","rowHeights","headerHeight","reduce","sum","scrollHeight","minimumFillHeight","uplift","anchorToRowBlock","makeAnchorToRowBlock","anchorToHeaderRowBlock","headerRowBlocks","makeRowBlock","rowBlocks","uniqueKeys","columnOrder","_fullInput","columnorder","d","i","columnWidths","value","Array","isArray","columnwidth","min","Number","totalColumnWidths","maxLineWidth","max","arrayMax","line","width","calcdata","key","uid","_context","staticPlot","translateX","translateY","size","scrollY","headerCells","gdColumns","gdColumnsOriginalOrder","prevPages","scrollbarState","scrollbarScrollInProgress","columns","label","foundKey","specIndex","xIndex","xScale","undefined","columnWidth","forEach","col","maybeArray","b","matrixIn","matrix","minLen","Infinity","maxLen","padLen","len","padArray","j","prev","next","auxiliary","blockAnchorKeys","Object","keys","k","auxiliaryBlocks","currentRowHeight","currentAnchor","currentBlockHeight","currentBlock","makeIdentity","currentFirstRowIndex","blockCounter","rows","push","rowIndex","rowHeight","firstRowIndex","lastRowIndex"],"mappings":"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","sourcesContent":["'use strict';\n\nvar c = require('./constants');\nvar extendFlat = require('../../lib/extend').extendFlat;\nvar isNumeric = require('fast-isnumeric');\n\n// pure functions, don't alter but passes on `gd` and parts of `trace` without deep copying\nmodule.exports = function calc(gd, trace) {\n    var cellsValues = squareStringMatrix(trace.cells.values);\n    var slicer = function(a) {\n        return a.slice(trace.header.values.length, a.length);\n    };\n    var headerValuesIn = squareStringMatrix(trace.header.values);\n    if(headerValuesIn.length && !headerValuesIn[0].length) {\n        headerValuesIn[0] = [''];\n        headerValuesIn = squareStringMatrix(headerValuesIn);\n    }\n    var headerValues = headerValuesIn\n        .concat(slicer(cellsValues).map(function() {\n            return emptyStrings((headerValuesIn[0] || ['']).length);\n        }));\n\n    var domain = trace.domain;\n    var groupWidth = Math.floor(gd._fullLayout._size.w * (domain.x[1] - domain.x[0]));\n    var groupHeight = Math.floor(gd._fullLayout._size.h * (domain.y[1] - domain.y[0]));\n    var headerRowHeights = trace.header.values.length ?\n        headerValues[0].map(function() { return trace.header.height; }) :\n        [c.emptyHeaderHeight];\n    var rowHeights = cellsValues.length ? cellsValues[0].map(function() { return trace.cells.height; }) : [];\n    var headerHeight = headerRowHeights.reduce(sum, 0);\n    var scrollHeight = groupHeight - headerHeight;\n    var minimumFillHeight = scrollHeight + c.uplift;\n    var anchorToRowBlock = makeAnchorToRowBlock(rowHeights, minimumFillHeight);\n    var anchorToHeaderRowBlock = makeAnchorToRowBlock(headerRowHeights, headerHeight);\n    var headerRowBlocks = makeRowBlock(anchorToHeaderRowBlock, []);\n    var rowBlocks = makeRowBlock(anchorToRowBlock, headerRowBlocks);\n    var uniqueKeys = {};\n    var columnOrder = trace._fullInput.columnorder.concat(slicer(cellsValues.map(function(d, i) {return i;})));\n    var columnWidths = headerValues.map(function(d, i) {\n        var value = Array.isArray(trace.columnwidth) ?\n            trace.columnwidth[Math.min(i, trace.columnwidth.length - 1)] :\n            trace.columnwidth;\n        return isNumeric(value) ? Number(value) : 1;\n    });\n    var totalColumnWidths = columnWidths.reduce(sum, 0);\n\n    // fit columns in the available vertical space as there's no vertical scrolling now\n    columnWidths = columnWidths.map(function(d) { return d / totalColumnWidths * groupWidth; });\n\n    var maxLineWidth = Math.max(arrayMax(trace.header.line.width), arrayMax(trace.cells.line.width));\n\n    var calcdata = {\n        // include staticPlot in the key so if it changes we delete and redraw\n        key: trace.uid + gd._context.staticPlot,\n        translateX: domain.x[0] * gd._fullLayout._size.w,\n        translateY: gd._fullLayout._size.h * (1 - domain.y[1]),\n        size: gd._fullLayout._size,\n        width: groupWidth,\n        maxLineWidth: maxLineWidth,\n        height: groupHeight,\n        columnOrder: columnOrder, // will be mutated on column move, todo use in callback\n        groupHeight: groupHeight,\n        rowBlocks: rowBlocks,\n        headerRowBlocks: headerRowBlocks,\n        scrollY: 0, // will be mutated on scroll\n        cells: extendFlat({}, trace.cells, {values: cellsValues}),\n        headerCells: extendFlat({}, trace.header, {values: headerValues}),\n        gdColumns: headerValues.map(function(d) {return d[0];}),\n        gdColumnsOriginalOrder: headerValues.map(function(d) {return d[0];}),\n        prevPages: [0, 0],\n        scrollbarState: {scrollbarScrollInProgress: false},\n        columns: headerValues.map(function(label, i) {\n            var foundKey = uniqueKeys[label];\n            uniqueKeys[label] = (foundKey || 0) + 1;\n            var key = label + '__' + uniqueKeys[label];\n            return {\n                key: key,\n                label: label,\n                specIndex: i,\n                xIndex: columnOrder[i],\n                xScale: xScale,\n                x: undefined, // initialized below\n                calcdata: undefined, // initialized below\n                columnWidth: columnWidths[i]\n            };\n        })\n    };\n\n    calcdata.columns.forEach(function(col) {\n        col.calcdata = calcdata;\n        col.x = xScale(col);\n    });\n\n    return calcdata;\n};\n\nfunction arrayMax(maybeArray) {\n    if(Array.isArray(maybeArray)) {\n        var max = 0;\n        for(var i = 0; i < maybeArray.length; i++) {\n            max = Math.max(max, arrayMax(maybeArray[i]));\n        }\n        return max;\n    }\n    return maybeArray;\n}\n\nfunction sum(a, b) { return a + b; }\n\n// fill matrix in place to equal lengths\n// and ensure it's uniformly 2D\nfunction squareStringMatrix(matrixIn) {\n    var matrix = matrixIn.slice();\n    var minLen = Infinity;\n    var maxLen = 0;\n    var i;\n    for(i = 0; i < matrix.length; i++) {\n        if(!Array.isArray(matrix[i])) matrix[i] = [matrix[i]];\n        minLen = Math.min(minLen, matrix[i].length);\n        maxLen = Math.max(maxLen, matrix[i].length);\n    }\n\n    if(minLen !== maxLen) {\n        for(i = 0; i < matrix.length; i++) {\n            var padLen = maxLen - matrix[i].length;\n            if(padLen) matrix[i] = matrix[i].concat(emptyStrings(padLen));\n        }\n    }\n    return matrix;\n}\n\nfunction emptyStrings(len) {\n    var padArray = new Array(len);\n    for(var j = 0; j < len; j++) padArray[j] = '';\n    return padArray;\n}\n\nfunction xScale(d) {\n    return d.calcdata.columns.reduce(function(prev, next) {\n        return next.xIndex < d.xIndex ? prev + next.columnWidth : prev;\n    }, 0);\n}\n\nfunction makeRowBlock(anchorToRowBlock, auxiliary) {\n    var blockAnchorKeys = Object.keys(anchorToRowBlock);\n    return blockAnchorKeys.map(function(k) {return extendFlat({}, anchorToRowBlock[k], {auxiliaryBlocks: auxiliary});});\n}\n\nfunction makeAnchorToRowBlock(rowHeights, minimumFillHeight) {\n    var anchorToRowBlock = {};\n    var currentRowHeight;\n    var currentAnchor = 0;\n    var currentBlockHeight = 0;\n    var currentBlock = makeIdentity();\n    var currentFirstRowIndex = 0;\n    var blockCounter = 0;\n    for(var i = 0; i < rowHeights.length; i++) {\n        currentRowHeight = rowHeights[i];\n        currentBlock.rows.push({\n            rowIndex: i,\n            rowHeight: currentRowHeight\n        });\n        currentBlockHeight += currentRowHeight;\n        if(currentBlockHeight >= minimumFillHeight || i === rowHeights.length - 1) {\n            anchorToRowBlock[currentAnchor] = currentBlock;\n            currentBlock.key = blockCounter++;\n            currentBlock.firstRowIndex = currentFirstRowIndex;\n            currentBlock.lastRowIndex = i;\n            currentBlock = makeIdentity();\n            currentAnchor += currentBlockHeight;\n            currentFirstRowIndex = i + 1;\n            currentBlockHeight = 0;\n        }\n    }\n\n    return anchorToRowBlock;\n}\n\nfunction makeIdentity() {\n    return {\n        firstRowIndex: null,\n        lastRowIndex: null,\n        rows: []\n    };\n}\n"]},"metadata":{},"sourceType":"script"}