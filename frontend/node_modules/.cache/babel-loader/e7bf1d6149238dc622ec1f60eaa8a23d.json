{"ast":null,"code":"/*\n * World Calendars\n * https://github.com/alexcjohnson/world-calendars\n *\n * Batch-converted from kbwood/calendars\n * Many thanks to Keith Wood and all of the contributors to the original project!\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/* http://keith-wood.name/calendars.html\n  Taiwanese (Minguo) calendar for jQuery v2.0.2.\n  Written by Keith Wood (wood.keith{at}optusnet.com.au) February 2010.\n  Available under the MIT (http://keith-wood.name/licence.html) license. \n  Please attribute the author if you use it. */\nvar main = require('../main');\n\nvar assign = require('object-assign');\n\nvar gregorianCalendar = main.instance();\n/** Implementation of the Taiwanese calendar.\n    See http://en.wikipedia.org/wiki/Minguo_calendar.\n    @class TaiwanCalendar\n    @param [language=''] {string} The language code (default English) for localisation. */\n\nfunction TaiwanCalendar(language) {\n  this.local = this.regionalOptions[language || ''] || this.regionalOptions[''];\n}\n\nTaiwanCalendar.prototype = new main.baseCalendar();\nassign(TaiwanCalendar.prototype, {\n  /** The calendar name.\n      @memberof TaiwanCalendar */\n  name: 'Taiwan',\n\n  /** Julian date of start of Taiwan epoch: 1 January 1912 CE (Gregorian).\n      @memberof TaiwanCalendar */\n  jdEpoch: 2419402.5,\n\n  /** Difference in years between Taiwan and Gregorian calendars.\n      @memberof TaiwanCalendar */\n  yearsOffset: 1911,\n\n  /** Days per month in a common year.\n      @memberof TaiwanCalendar */\n  daysPerMonth: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n\n  /** <code>true</code> if has a year zero, <code>false</code> if not.\n      @memberof TaiwanCalendar */\n  hasYearZero: false,\n\n  /** The minimum month number.\n      @memberof TaiwanCalendar */\n  minMonth: 1,\n\n  /** The first month in the year.\n      @memberof TaiwanCalendar */\n  firstMonth: 1,\n\n  /** The minimum day number.\n      @memberof TaiwanCalendar */\n  minDay: 1,\n\n  /** Localisations for the plugin.\n      Entries are objects indexed by the language code ('' being the default US/English).\n      Each object has the following attributes.\n      @memberof TaiwanCalendar\n      @property name {string} The calendar name.\n      @property epochs {string[]} The epoch names.\n      @property monthNames {string[]} The long names of the months of the year.\n      @property monthNamesShort {string[]} The short names of the months of the year.\n      @property dayNames {string[]} The long names of the days of the week.\n      @property dayNamesShort {string[]} The short names of the days of the week.\n      @property dayNamesMin {string[]} The minimal names of the days of the week.\n      @property dateFormat {string} The date format for this calendar.\n              See the options on <a href=\"BaseCalendar.html#formatDate\"><code>formatDate</code></a> for details.\n      @property firstDay {number} The number of the first day of the week, starting at 0.\n      @property isRTL {number} <code>true</code> if this localisation reads right-to-left. */\n  regionalOptions: {\n    // Localisations\n    '': {\n      name: 'Taiwan',\n      epochs: ['BROC', 'ROC'],\n      monthNames: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n      monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n      dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n      dayNamesShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n      dayNamesMin: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],\n      digits: null,\n      dateFormat: 'yyyy/mm/dd',\n      firstDay: 1,\n      isRTL: false\n    }\n  },\n\n  /** Determine whether this date is in a leap year.\n      @memberof TaiwanCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @return {boolean} <code>true</code> if this is a leap year, <code>false</code> if not.\n      @throws Error if an invalid year or a different calendar used. */\n  leapYear: function leapYear(year) {\n    var date = this._validate(year, this.minMonth, this.minDay, main.local.invalidYear);\n\n    var year = this._t2gYear(date.year());\n\n    return gregorianCalendar.leapYear(year);\n  },\n\n  /** Determine the week of the year for a date - ISO 8601.\n      @memberof TaiwanCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @param [month] {number} The month to examine.\n      @param [day] {number} The day to examine.\n      @return {number} The week of the year.\n      @throws Error if an invalid date or a different calendar used. */\n  weekOfYear: function weekOfYear(year, month, day) {\n    var date = this._validate(year, this.minMonth, this.minDay, main.local.invalidYear);\n\n    var year = this._t2gYear(date.year());\n\n    return gregorianCalendar.weekOfYear(year, date.month(), date.day());\n  },\n\n  /** Retrieve the number of days in a month.\n      @memberof TaiwanCalendar\n      @param year {CDate|number} The date to examine or the year of the month.\n      @param [month] {number} The month.\n      @return {number} The number of days in this month.\n      @throws Error if an invalid month/year or a different calendar used. */\n  daysInMonth: function daysInMonth(year, month) {\n    var date = this._validate(year, month, this.minDay, main.local.invalidMonth);\n\n    return this.daysPerMonth[date.month() - 1] + (date.month() === 2 && this.leapYear(date.year()) ? 1 : 0);\n  },\n\n  /** Determine whether this date is a week day.\n      @memberof TaiwanCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @param [month] {number} The month to examine.\n      @param [day] {number} The day to examine.\n      @return {boolean} <code>true</code> if a week day, <code>false</code> if not.\n      @throws Error if an invalid date or a different calendar used. */\n  weekDay: function weekDay(year, month, day) {\n    return (this.dayOfWeek(year, month, day) || 7) < 6;\n  },\n\n  /** Retrieve the Julian date equivalent for this date,\n      i.e. days since January 1, 4713 BCE Greenwich noon.\n      @memberof TaiwanCalendar\n      @param year {CDate|number} The date to convert or the year to convert.\n      @param [month] {number} The month to convert.\n      @param [day] {number} The day to convert.\n      @return {number} The equivalent Julian date.\n      @throws Error if an invalid date or a different calendar used. */\n  toJD: function toJD(year, month, day) {\n    var date = this._validate(year, month, day, main.local.invalidDate);\n\n    var year = this._t2gYear(date.year());\n\n    return gregorianCalendar.toJD(year, date.month(), date.day());\n  },\n\n  /** Create a new date from a Julian date.\n      @memberof TaiwanCalendar\n      @param jd {number} The Julian date to convert.\n      @return {CDate} The equivalent date. */\n  fromJD: function fromJD(jd) {\n    var date = gregorianCalendar.fromJD(jd);\n\n    var year = this._g2tYear(date.year());\n\n    return this.newDate(year, date.month(), date.day());\n  },\n\n  /** Convert Taiwanese to Gregorian year.\n      @memberof TaiwanCalendar\n      @private\n      @param year {number} The Taiwanese year.\n      @return {number} The corresponding Gregorian year. */\n  _t2gYear: function _t2gYear(year) {\n    return year + this.yearsOffset + (year >= -this.yearsOffset && year <= -1 ? 1 : 0);\n  },\n\n  /** Convert Gregorian to Taiwanese year.\n      @memberof TaiwanCalendar\n      @private\n      @param year {number} The Gregorian year.\n      @return {number} The corresponding Taiwanese year. */\n  _g2tYear: function _g2tYear(year) {\n    return year - this.yearsOffset - (year >= 1 && year <= this.yearsOffset ? 1 : 0);\n  }\n}); // Taiwan calendar implementation\n\nmain.calendars.taiwan = TaiwanCalendar;","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/world-calendars/dist/calendars/taiwan.js"],"names":["main","require","assign","gregorianCalendar","instance","TaiwanCalendar","language","local","regionalOptions","prototype","baseCalendar","name","jdEpoch","yearsOffset","daysPerMonth","hasYearZero","minMonth","firstMonth","minDay","epochs","monthNames","monthNamesShort","dayNames","dayNamesShort","dayNamesMin","digits","dateFormat","firstDay","isRTL","leapYear","year","date","_validate","invalidYear","_t2gYear","weekOfYear","month","day","daysInMonth","invalidMonth","weekDay","dayOfWeek","toJD","invalidDate","fromJD","jd","_g2tYear","newDate","calendars","taiwan"],"mappings":"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","sourcesContent":["/*\n * World Calendars\n * https://github.com/alexcjohnson/world-calendars\n *\n * Batch-converted from kbwood/calendars\n * Many thanks to Keith Wood and all of the contributors to the original project!\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n﻿/* http://keith-wood.name/calendars.html\n   Taiwanese (Minguo) calendar for jQuery v2.0.2.\n   Written by Keith Wood (wood.keith{at}optusnet.com.au) February 2010.\n   Available under the MIT (http://keith-wood.name/licence.html) license. \n   Please attribute the author if you use it. */\n\nvar main = require('../main');\nvar assign = require('object-assign');\n\n\nvar gregorianCalendar = main.instance();\n\n/** Implementation of the Taiwanese calendar.\n    See http://en.wikipedia.org/wiki/Minguo_calendar.\n    @class TaiwanCalendar\n    @param [language=''] {string} The language code (default English) for localisation. */\nfunction TaiwanCalendar(language) {\n    this.local = this.regionalOptions[language || ''] || this.regionalOptions[''];\n}\n\nTaiwanCalendar.prototype = new main.baseCalendar;\n\nassign(TaiwanCalendar.prototype, {\n    /** The calendar name.\n        @memberof TaiwanCalendar */\n    name: 'Taiwan',\n    /** Julian date of start of Taiwan epoch: 1 January 1912 CE (Gregorian).\n        @memberof TaiwanCalendar */\n    jdEpoch: 2419402.5,\n    /** Difference in years between Taiwan and Gregorian calendars.\n        @memberof TaiwanCalendar */\n    yearsOffset: 1911,\n    /** Days per month in a common year.\n        @memberof TaiwanCalendar */\n    daysPerMonth: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n    /** <code>true</code> if has a year zero, <code>false</code> if not.\n        @memberof TaiwanCalendar */\n    hasYearZero: false,\n    /** The minimum month number.\n        @memberof TaiwanCalendar */\n    minMonth: 1,\n    /** The first month in the year.\n        @memberof TaiwanCalendar */\n    firstMonth: 1,\n    /** The minimum day number.\n        @memberof TaiwanCalendar */\n    minDay: 1,\n\n    /** Localisations for the plugin.\n        Entries are objects indexed by the language code ('' being the default US/English).\n        Each object has the following attributes.\n        @memberof TaiwanCalendar\n        @property name {string} The calendar name.\n        @property epochs {string[]} The epoch names.\n        @property monthNames {string[]} The long names of the months of the year.\n        @property monthNamesShort {string[]} The short names of the months of the year.\n        @property dayNames {string[]} The long names of the days of the week.\n        @property dayNamesShort {string[]} The short names of the days of the week.\n        @property dayNamesMin {string[]} The minimal names of the days of the week.\n        @property dateFormat {string} The date format for this calendar.\n                See the options on <a href=\"BaseCalendar.html#formatDate\"><code>formatDate</code></a> for details.\n        @property firstDay {number} The number of the first day of the week, starting at 0.\n        @property isRTL {number} <code>true</code> if this localisation reads right-to-left. */\n    regionalOptions: { // Localisations\n        '': {\n            name: 'Taiwan',\n            epochs: ['BROC', 'ROC'],\n            monthNames: ['January', 'February', 'March', 'April', 'May', 'June',\n            'July', 'August', 'September', 'October', 'November', 'December'],\n            monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n            dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n            dayNamesShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n            dayNamesMin: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],\n            digits: null,\n            dateFormat: 'yyyy/mm/dd',\n            firstDay: 1,\n            isRTL: false\n        }\n    },\n\n    /** Determine whether this date is in a leap year.\n        @memberof TaiwanCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @return {boolean} <code>true</code> if this is a leap year, <code>false</code> if not.\n        @throws Error if an invalid year or a different calendar used. */\n    leapYear: function(year) {\n        var date = this._validate(year, this.minMonth, this.minDay, main.local.invalidYear);\n        var year = this._t2gYear(date.year());\n        return gregorianCalendar.leapYear(year);\n    },\n\n    /** Determine the week of the year for a date - ISO 8601.\n        @memberof TaiwanCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @param [month] {number} The month to examine.\n        @param [day] {number} The day to examine.\n        @return {number} The week of the year.\n        @throws Error if an invalid date or a different calendar used. */\n    weekOfYear: function(year, month, day) {\n        var date = this._validate(year, this.minMonth, this.minDay, main.local.invalidYear);\n        var year = this._t2gYear(date.year());\n        return gregorianCalendar.weekOfYear(year, date.month(), date.day());\n    },\n\n    /** Retrieve the number of days in a month.\n        @memberof TaiwanCalendar\n        @param year {CDate|number} The date to examine or the year of the month.\n        @param [month] {number} The month.\n        @return {number} The number of days in this month.\n        @throws Error if an invalid month/year or a different calendar used. */\n    daysInMonth: function(year, month) {\n        var date = this._validate(year, month, this.minDay, main.local.invalidMonth);\n        return this.daysPerMonth[date.month() - 1] +\n            (date.month() === 2 && this.leapYear(date.year()) ? 1 : 0);\n    },\n\n    /** Determine whether this date is a week day.\n        @memberof TaiwanCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @param [month] {number} The month to examine.\n        @param [day] {number} The day to examine.\n        @return {boolean} <code>true</code> if a week day, <code>false</code> if not.\n        @throws Error if an invalid date or a different calendar used. */\n    weekDay: function(year, month, day) {\n        return (this.dayOfWeek(year, month, day) || 7) < 6;\n    },\n\n    /** Retrieve the Julian date equivalent for this date,\n        i.e. days since January 1, 4713 BCE Greenwich noon.\n        @memberof TaiwanCalendar\n        @param year {CDate|number} The date to convert or the year to convert.\n        @param [month] {number} The month to convert.\n        @param [day] {number} The day to convert.\n        @return {number} The equivalent Julian date.\n        @throws Error if an invalid date or a different calendar used. */\n    toJD: function(year, month, day) {\n        var date = this._validate(year, month, day, main.local.invalidDate);\n        var year = this._t2gYear(date.year());\n        return gregorianCalendar.toJD(year, date.month(), date.day());\n    },\n\n    /** Create a new date from a Julian date.\n        @memberof TaiwanCalendar\n        @param jd {number} The Julian date to convert.\n        @return {CDate} The equivalent date. */\n    fromJD: function(jd) {\n        var date = gregorianCalendar.fromJD(jd);\n        var year = this._g2tYear(date.year());\n        return this.newDate(year, date.month(), date.day());\n    },\n\n    /** Convert Taiwanese to Gregorian year.\n        @memberof TaiwanCalendar\n        @private\n        @param year {number} The Taiwanese year.\n        @return {number} The corresponding Gregorian year. */\n    _t2gYear: function(year) {\n        return year + this.yearsOffset + (year >= -this.yearsOffset && year <= -1 ? 1 : 0);\n    },\n\n    /** Convert Gregorian to Taiwanese year.\n        @memberof TaiwanCalendar\n        @private\n        @param year {number} The Gregorian year.\n        @return {number} The corresponding Taiwanese year. */\n    _g2tYear: function(year) {\n        return year - this.yearsOffset - (year >= 1 && year <= this.yearsOffset ? 1 : 0);\n    }\n});\n\n// Taiwan calendar implementation\nmain.calendars.taiwan = TaiwanCalendar;\n\n"]},"metadata":{},"sourceType":"script"}