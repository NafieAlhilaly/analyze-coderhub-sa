{"ast":null,"code":"\"use strict\";\n\nvar pool = require(\"typedarray-pool\");\n\nfunction getMallocFree(dtype) {\n  switch (dtype) {\n    case \"uint32\":\n      return [pool.mallocUint32, pool.freeUint32];\n\n    default:\n      return null;\n  }\n}\n\nvar CACHED_insertionSort = {\n  \"uint32,1,0\": function uint3210(malloc, free) {\n    return function ndarrayInsertionSort1d0uint32(left, right, data, offset, s0, s1, n0, n1, d1, e1, f1) {\n      var i,\n          j,\n          cptr,\n          ptr = left * s0 + offset,\n          i1,\n          scratch = malloc(n1),\n          dptr,\n          sptr,\n          a,\n          b;\n\n      for (i = left + 1; i <= right; ++i) {\n        j = i;\n        ptr += s0;\n        cptr = ptr;\n        dptr = 0;\n        sptr = ptr;\n\n        for (i1 = 0; i1 < n1; ++i1) {\n          scratch[dptr++] = data[sptr];\n          sptr += d1;\n        }\n\n        __g: while (j-- > left) {\n          dptr = 0;\n          sptr = cptr - s0;\n\n          __l: for (i1 = 0; i1 < n1; ++i1) {\n            a = data[sptr];\n            b = scratch[dptr];\n\n            if (a < b) {\n              break __g;\n            }\n\n            if (a > b) {\n              break __l;\n            }\n\n            sptr += e1;\n            dptr += f1;\n          }\n\n          dptr = cptr;\n          sptr = cptr - s0;\n\n          for (i1 = 0; i1 < n1; ++i1) {\n            data[dptr] = data[sptr];\n            dptr += d1;\n            sptr += d1;\n          }\n\n          cptr -= s0;\n        }\n\n        dptr = cptr;\n        sptr = 0;\n\n        for (i1 = 0; i1 < n1; ++i1) {\n          data[dptr] = scratch[sptr++];\n          dptr += d1;\n        }\n      }\n\n      free(scratch);\n    };\n  }\n};\n\nfunction createInsertionSort(order, dtype) {\n  var allocator = getMallocFree(dtype);\n  var key = [dtype, order].join(',');\n  var result = CACHED_insertionSort[key];\n\n  if (allocator) {\n    return result(allocator[0], allocator[1]);\n  } else {\n    return result();\n  }\n}\n\nvar CACHED_quickSort = {\n  \"uint32,1,0\": function uint3210(insertionSort, malloc, free) {\n    return function ndarrayQuickSort1d0uint32(left, right, data, offset, s0, s1, n0, n1, d1, e1, f1) {\n      var sixth = (right - left + 1) / 6 | 0,\n          index1 = left + sixth,\n          index5 = right - sixth,\n          index3 = left + right >> 1,\n          index2 = index3 - sixth,\n          index4 = index3 + sixth,\n          el1 = index1,\n          el2 = index2,\n          el3 = index3,\n          el4 = index4,\n          el5 = index5,\n          less = left + 1,\n          great = right - 1,\n          pivots_are_equal = true,\n          tmp,\n          tmp0,\n          x,\n          y,\n          z,\n          k,\n          ptr0,\n          ptr1,\n          ptr2,\n          comp_pivot1 = 0,\n          comp_pivot2 = 0,\n          comp = 0,\n          i1,\n          b_ptr0,\n          b_ptr1,\n          b_ptr2,\n          b_ptr3,\n          b_ptr4,\n          b_ptr5,\n          b_ptr6,\n          b_ptr7,\n          ptr3,\n          ptr4,\n          ptr5,\n          ptr6,\n          ptr7,\n          pivot_ptr,\n          ptr_shift,\n          elementSize = n1,\n          pivot1 = malloc(elementSize),\n          pivot2 = malloc(elementSize);\n      b_ptr0 = s0 * el1;\n      b_ptr1 = s0 * el2;\n      ptr_shift = offset;\n\n      __l1: for (i1 = 0; i1 < n1; ++i1) {\n        ptr0 = b_ptr0 + ptr_shift;\n        ptr1 = b_ptr1 + ptr_shift;\n        comp = data[ptr0] - data[ptr1];\n\n        if (comp > 0) {\n          tmp0 = el1;\n          el1 = el2;\n          el2 = tmp0;\n          break __l1;\n        }\n\n        if (comp < 0) {\n          break __l1;\n        }\n\n        ptr_shift += e1;\n      }\n\n      b_ptr0 = s0 * el4;\n      b_ptr1 = s0 * el5;\n      ptr_shift = offset;\n\n      __l2: for (i1 = 0; i1 < n1; ++i1) {\n        ptr0 = b_ptr0 + ptr_shift;\n        ptr1 = b_ptr1 + ptr_shift;\n        comp = data[ptr0] - data[ptr1];\n\n        if (comp > 0) {\n          tmp0 = el4;\n          el4 = el5;\n          el5 = tmp0;\n          break __l2;\n        }\n\n        if (comp < 0) {\n          break __l2;\n        }\n\n        ptr_shift += e1;\n      }\n\n      b_ptr0 = s0 * el1;\n      b_ptr1 = s0 * el3;\n      ptr_shift = offset;\n\n      __l3: for (i1 = 0; i1 < n1; ++i1) {\n        ptr0 = b_ptr0 + ptr_shift;\n        ptr1 = b_ptr1 + ptr_shift;\n        comp = data[ptr0] - data[ptr1];\n\n        if (comp > 0) {\n          tmp0 = el1;\n          el1 = el3;\n          el3 = tmp0;\n          break __l3;\n        }\n\n        if (comp < 0) {\n          break __l3;\n        }\n\n        ptr_shift += e1;\n      }\n\n      b_ptr0 = s0 * el2;\n      b_ptr1 = s0 * el3;\n      ptr_shift = offset;\n\n      __l4: for (i1 = 0; i1 < n1; ++i1) {\n        ptr0 = b_ptr0 + ptr_shift;\n        ptr1 = b_ptr1 + ptr_shift;\n        comp = data[ptr0] - data[ptr1];\n\n        if (comp > 0) {\n          tmp0 = el2;\n          el2 = el3;\n          el3 = tmp0;\n          break __l4;\n        }\n\n        if (comp < 0) {\n          break __l4;\n        }\n\n        ptr_shift += e1;\n      }\n\n      b_ptr0 = s0 * el1;\n      b_ptr1 = s0 * el4;\n      ptr_shift = offset;\n\n      __l5: for (i1 = 0; i1 < n1; ++i1) {\n        ptr0 = b_ptr0 + ptr_shift;\n        ptr1 = b_ptr1 + ptr_shift;\n        comp = data[ptr0] - data[ptr1];\n\n        if (comp > 0) {\n          tmp0 = el1;\n          el1 = el4;\n          el4 = tmp0;\n          break __l5;\n        }\n\n        if (comp < 0) {\n          break __l5;\n        }\n\n        ptr_shift += e1;\n      }\n\n      b_ptr0 = s0 * el3;\n      b_ptr1 = s0 * el4;\n      ptr_shift = offset;\n\n      __l6: for (i1 = 0; i1 < n1; ++i1) {\n        ptr0 = b_ptr0 + ptr_shift;\n        ptr1 = b_ptr1 + ptr_shift;\n        comp = data[ptr0] - data[ptr1];\n\n        if (comp > 0) {\n          tmp0 = el3;\n          el3 = el4;\n          el4 = tmp0;\n          break __l6;\n        }\n\n        if (comp < 0) {\n          break __l6;\n        }\n\n        ptr_shift += e1;\n      }\n\n      b_ptr0 = s0 * el2;\n      b_ptr1 = s0 * el5;\n      ptr_shift = offset;\n\n      __l7: for (i1 = 0; i1 < n1; ++i1) {\n        ptr0 = b_ptr0 + ptr_shift;\n        ptr1 = b_ptr1 + ptr_shift;\n        comp = data[ptr0] - data[ptr1];\n\n        if (comp > 0) {\n          tmp0 = el2;\n          el2 = el5;\n          el5 = tmp0;\n          break __l7;\n        }\n\n        if (comp < 0) {\n          break __l7;\n        }\n\n        ptr_shift += e1;\n      }\n\n      b_ptr0 = s0 * el2;\n      b_ptr1 = s0 * el3;\n      ptr_shift = offset;\n\n      __l8: for (i1 = 0; i1 < n1; ++i1) {\n        ptr0 = b_ptr0 + ptr_shift;\n        ptr1 = b_ptr1 + ptr_shift;\n        comp = data[ptr0] - data[ptr1];\n\n        if (comp > 0) {\n          tmp0 = el2;\n          el2 = el3;\n          el3 = tmp0;\n          break __l8;\n        }\n\n        if (comp < 0) {\n          break __l8;\n        }\n\n        ptr_shift += e1;\n      }\n\n      b_ptr0 = s0 * el4;\n      b_ptr1 = s0 * el5;\n      ptr_shift = offset;\n\n      __l9: for (i1 = 0; i1 < n1; ++i1) {\n        ptr0 = b_ptr0 + ptr_shift;\n        ptr1 = b_ptr1 + ptr_shift;\n        comp = data[ptr0] - data[ptr1];\n\n        if (comp > 0) {\n          tmp0 = el4;\n          el4 = el5;\n          el5 = tmp0;\n          break __l9;\n        }\n\n        if (comp < 0) {\n          break __l9;\n        }\n\n        ptr_shift += e1;\n      }\n\n      b_ptr0 = s0 * el1;\n      b_ptr1 = s0 * el2;\n      b_ptr2 = s0 * el3;\n      b_ptr3 = s0 * el4;\n      b_ptr4 = s0 * el5;\n      b_ptr5 = s0 * index1;\n      b_ptr6 = s0 * index3;\n      b_ptr7 = s0 * index5;\n      pivot_ptr = 0;\n      ptr_shift = offset;\n\n      for (i1 = 0; i1 < n1; ++i1) {\n        ptr0 = b_ptr0 + ptr_shift;\n        ptr1 = b_ptr1 + ptr_shift;\n        ptr2 = b_ptr2 + ptr_shift;\n        ptr3 = b_ptr3 + ptr_shift;\n        ptr4 = b_ptr4 + ptr_shift;\n        ptr5 = b_ptr5 + ptr_shift;\n        ptr6 = b_ptr6 + ptr_shift;\n        ptr7 = b_ptr7 + ptr_shift;\n        pivot1[pivot_ptr] = data[ptr1];\n        pivot2[pivot_ptr] = data[ptr3];\n        pivots_are_equal = pivots_are_equal && pivot1[pivot_ptr] === pivot2[pivot_ptr];\n        x = data[ptr0];\n        y = data[ptr2];\n        z = data[ptr4];\n        data[ptr5] = x;\n        data[ptr6] = y;\n        data[ptr7] = z;\n        ++pivot_ptr;\n        ptr_shift += d1;\n      }\n\n      b_ptr0 = s0 * index2;\n      b_ptr1 = s0 * left;\n      ptr_shift = offset;\n\n      for (i1 = 0; i1 < n1; ++i1) {\n        ptr0 = b_ptr0 + ptr_shift;\n        ptr1 = b_ptr1 + ptr_shift;\n        data[ptr0] = data[ptr1];\n        ptr_shift += d1;\n      }\n\n      b_ptr0 = s0 * index4;\n      b_ptr1 = s0 * right;\n      ptr_shift = offset;\n\n      for (i1 = 0; i1 < n1; ++i1) {\n        ptr0 = b_ptr0 + ptr_shift;\n        ptr1 = b_ptr1 + ptr_shift;\n        data[ptr0] = data[ptr1];\n        ptr_shift += d1;\n      }\n\n      if (pivots_are_equal) {\n        for (k = less; k <= great; ++k) {\n          ptr0 = offset + k * s0;\n          pivot_ptr = 0;\n\n          __l10: for (i1 = 0; i1 < n1; ++i1) {\n            comp = data[ptr0] - pivot1[pivot_ptr];\n\n            if (comp !== 0) {\n              break __l10;\n            }\n\n            pivot_ptr += f1;\n            ptr0 += e1;\n          }\n\n          if (comp === 0) {\n            continue;\n          }\n\n          if (comp < 0) {\n            if (k !== less) {\n              b_ptr0 = s0 * k;\n              b_ptr1 = s0 * less;\n              ptr_shift = offset;\n\n              for (i1 = 0; i1 < n1; ++i1) {\n                ptr0 = b_ptr0 + ptr_shift;\n                ptr1 = b_ptr1 + ptr_shift;\n                tmp = data[ptr0];\n                data[ptr0] = data[ptr1];\n                data[ptr1] = tmp;\n                ptr_shift += d1;\n              }\n            }\n\n            ++less;\n          } else {\n            while (true) {\n              ptr0 = offset + great * s0;\n              pivot_ptr = 0;\n\n              __l11: for (i1 = 0; i1 < n1; ++i1) {\n                comp = data[ptr0] - pivot1[pivot_ptr];\n\n                if (comp !== 0) {\n                  break __l11;\n                }\n\n                pivot_ptr += f1;\n                ptr0 += e1;\n              }\n\n              if (comp > 0) {\n                great--;\n              } else if (comp < 0) {\n                b_ptr0 = s0 * k;\n                b_ptr1 = s0 * less;\n                b_ptr2 = s0 * great;\n                ptr_shift = offset;\n\n                for (i1 = 0; i1 < n1; ++i1) {\n                  ptr0 = b_ptr0 + ptr_shift;\n                  ptr1 = b_ptr1 + ptr_shift;\n                  ptr2 = b_ptr2 + ptr_shift;\n                  tmp = data[ptr0];\n                  data[ptr0] = data[ptr1];\n                  data[ptr1] = data[ptr2];\n                  data[ptr2] = tmp;\n                  ptr_shift += d1;\n                }\n\n                ++less;\n                --great;\n                break;\n              } else {\n                b_ptr0 = s0 * k;\n                b_ptr1 = s0 * great;\n                ptr_shift = offset;\n\n                for (i1 = 0; i1 < n1; ++i1) {\n                  ptr0 = b_ptr0 + ptr_shift;\n                  ptr1 = b_ptr1 + ptr_shift;\n                  tmp = data[ptr0];\n                  data[ptr0] = data[ptr1];\n                  data[ptr1] = tmp;\n                  ptr_shift += d1;\n                }\n\n                --great;\n                break;\n              }\n            }\n          }\n        }\n      } else {\n        for (k = less; k <= great; ++k) {\n          ptr0 = offset + k * s0;\n          pivot_ptr = 0;\n\n          __l12: for (i1 = 0; i1 < n1; ++i1) {\n            comp_pivot1 = data[ptr0] - pivot1[pivot_ptr];\n\n            if (comp_pivot1 !== 0) {\n              break __l12;\n            }\n\n            pivot_ptr += f1;\n            ptr0 += e1;\n          }\n\n          if (comp_pivot1 < 0) {\n            if (k !== less) {\n              b_ptr0 = s0 * k;\n              b_ptr1 = s0 * less;\n              ptr_shift = offset;\n\n              for (i1 = 0; i1 < n1; ++i1) {\n                ptr0 = b_ptr0 + ptr_shift;\n                ptr1 = b_ptr1 + ptr_shift;\n                tmp = data[ptr0];\n                data[ptr0] = data[ptr1];\n                data[ptr1] = tmp;\n                ptr_shift += d1;\n              }\n            }\n\n            ++less;\n          } else {\n            ptr0 = offset + k * s0;\n            pivot_ptr = 0;\n\n            __l13: for (i1 = 0; i1 < n1; ++i1) {\n              comp_pivot2 = data[ptr0] - pivot2[pivot_ptr];\n\n              if (comp_pivot2 !== 0) {\n                break __l13;\n              }\n\n              pivot_ptr += f1;\n              ptr0 += e1;\n            }\n\n            if (comp_pivot2 > 0) {\n              while (true) {\n                ptr0 = offset + great * s0;\n                pivot_ptr = 0;\n\n                __l14: for (i1 = 0; i1 < n1; ++i1) {\n                  comp = data[ptr0] - pivot2[pivot_ptr];\n\n                  if (comp !== 0) {\n                    break __l14;\n                  }\n\n                  pivot_ptr += f1;\n                  ptr0 += e1;\n                }\n\n                if (comp > 0) {\n                  if (--great < k) {\n                    break;\n                  }\n\n                  continue;\n                } else {\n                  ptr0 = offset + great * s0;\n                  pivot_ptr = 0;\n\n                  __l15: for (i1 = 0; i1 < n1; ++i1) {\n                    comp = data[ptr0] - pivot1[pivot_ptr];\n\n                    if (comp !== 0) {\n                      break __l15;\n                    }\n\n                    pivot_ptr += f1;\n                    ptr0 += e1;\n                  }\n\n                  if (comp < 0) {\n                    b_ptr0 = s0 * k;\n                    b_ptr1 = s0 * less;\n                    b_ptr2 = s0 * great;\n                    ptr_shift = offset;\n\n                    for (i1 = 0; i1 < n1; ++i1) {\n                      ptr0 = b_ptr0 + ptr_shift;\n                      ptr1 = b_ptr1 + ptr_shift;\n                      ptr2 = b_ptr2 + ptr_shift;\n                      tmp = data[ptr0];\n                      data[ptr0] = data[ptr1];\n                      data[ptr1] = data[ptr2];\n                      data[ptr2] = tmp;\n                      ptr_shift += d1;\n                    }\n\n                    ++less;\n                    --great;\n                  } else {\n                    b_ptr0 = s0 * k;\n                    b_ptr1 = s0 * great;\n                    ptr_shift = offset;\n\n                    for (i1 = 0; i1 < n1; ++i1) {\n                      ptr0 = b_ptr0 + ptr_shift;\n                      ptr1 = b_ptr1 + ptr_shift;\n                      tmp = data[ptr0];\n                      data[ptr0] = data[ptr1];\n                      data[ptr1] = tmp;\n                      ptr_shift += d1;\n                    }\n\n                    --great;\n                  }\n\n                  break;\n                }\n              }\n            }\n          }\n        }\n      }\n\n      b_ptr0 = s0 * left;\n      b_ptr1 = s0 * (less - 1);\n      pivot_ptr = 0;\n      ptr_shift = offset;\n\n      for (i1 = 0; i1 < n1; ++i1) {\n        ptr0 = b_ptr0 + ptr_shift;\n        ptr1 = b_ptr1 + ptr_shift;\n        data[ptr0] = data[ptr1];\n        data[ptr1] = pivot1[pivot_ptr];\n        ++pivot_ptr;\n        ptr_shift += d1;\n      }\n\n      b_ptr0 = s0 * right;\n      b_ptr1 = s0 * (great + 1);\n      pivot_ptr = 0;\n      ptr_shift = offset;\n\n      for (i1 = 0; i1 < n1; ++i1) {\n        ptr0 = b_ptr0 + ptr_shift;\n        ptr1 = b_ptr1 + ptr_shift;\n        data[ptr0] = data[ptr1];\n        data[ptr1] = pivot2[pivot_ptr];\n        ++pivot_ptr;\n        ptr_shift += d1;\n      }\n\n      if (less - 2 - left <= 32) {\n        insertionSort(left, less - 2, data, offset, s0, s1, n0, n1, d1, e1, f1);\n      } else {\n        ndarrayQuickSort1d0uint32(left, less - 2, data, offset, s0, s1, n0, n1, d1, e1, f1);\n      }\n\n      if (right - (great + 2) <= 32) {\n        insertionSort(great + 2, right, data, offset, s0, s1, n0, n1, d1, e1, f1);\n      } else {\n        ndarrayQuickSort1d0uint32(great + 2, right, data, offset, s0, s1, n0, n1, d1, e1, f1);\n      }\n\n      if (pivots_are_equal) {\n        free(pivot1);\n        free(pivot2);\n        return;\n      }\n\n      if (less < index1 && great > index5) {\n        __l16: while (true) {\n          ptr0 = offset + less * s0;\n          pivot_ptr = 0;\n          ptr_shift = offset;\n\n          for (i1 = 0; i1 < n1; ++i1) {\n            if (data[ptr0] !== pivot1[pivot_ptr]) {\n              break __l16;\n            }\n\n            ++pivot_ptr;\n            ptr0 += d1;\n          }\n\n          ++less;\n        }\n\n        __l17: while (true) {\n          ptr0 = offset + great * s0;\n          pivot_ptr = 0;\n          ptr_shift = offset;\n\n          for (i1 = 0; i1 < n1; ++i1) {\n            if (data[ptr0] !== pivot2[pivot_ptr]) {\n              break __l17;\n            }\n\n            ++pivot_ptr;\n            ptr0 += d1;\n          }\n\n          --great;\n        }\n\n        for (k = less; k <= great; ++k) {\n          ptr0 = offset + k * s0;\n          pivot_ptr = 0;\n\n          __l18: for (i1 = 0; i1 < n1; ++i1) {\n            comp_pivot1 = data[ptr0] - pivot1[pivot_ptr];\n\n            if (comp_pivot1 !== 0) {\n              break __l18;\n            }\n\n            pivot_ptr += f1;\n            ptr0 += e1;\n          }\n\n          if (comp_pivot1 === 0) {\n            if (k !== less) {\n              b_ptr0 = s0 * k;\n              b_ptr1 = s0 * less;\n              ptr_shift = offset;\n\n              for (i1 = 0; i1 < n1; ++i1) {\n                ptr0 = b_ptr0 + ptr_shift;\n                ptr1 = b_ptr1 + ptr_shift;\n                tmp = data[ptr0];\n                data[ptr0] = data[ptr1];\n                data[ptr1] = tmp;\n                ptr_shift += d1;\n              }\n            }\n\n            ++less;\n          } else {\n            ptr0 = offset + k * s0;\n            pivot_ptr = 0;\n\n            __l19: for (i1 = 0; i1 < n1; ++i1) {\n              comp_pivot2 = data[ptr0] - pivot2[pivot_ptr];\n\n              if (comp_pivot2 !== 0) {\n                break __l19;\n              }\n\n              pivot_ptr += f1;\n              ptr0 += e1;\n            }\n\n            if (comp_pivot2 === 0) {\n              while (true) {\n                ptr0 = offset + great * s0;\n                pivot_ptr = 0;\n\n                __l20: for (i1 = 0; i1 < n1; ++i1) {\n                  comp = data[ptr0] - pivot2[pivot_ptr];\n\n                  if (comp !== 0) {\n                    break __l20;\n                  }\n\n                  pivot_ptr += f1;\n                  ptr0 += e1;\n                }\n\n                if (comp === 0) {\n                  if (--great < k) {\n                    break;\n                  }\n\n                  continue;\n                } else {\n                  ptr0 = offset + great * s0;\n                  pivot_ptr = 0;\n\n                  __l21: for (i1 = 0; i1 < n1; ++i1) {\n                    comp = data[ptr0] - pivot1[pivot_ptr];\n\n                    if (comp !== 0) {\n                      break __l21;\n                    }\n\n                    pivot_ptr += f1;\n                    ptr0 += e1;\n                  }\n\n                  if (comp < 0) {\n                    b_ptr0 = s0 * k;\n                    b_ptr1 = s0 * less;\n                    b_ptr2 = s0 * great;\n                    ptr_shift = offset;\n\n                    for (i1 = 0; i1 < n1; ++i1) {\n                      ptr0 = b_ptr0 + ptr_shift;\n                      ptr1 = b_ptr1 + ptr_shift;\n                      ptr2 = b_ptr2 + ptr_shift;\n                      tmp = data[ptr0];\n                      data[ptr0] = data[ptr1];\n                      data[ptr1] = data[ptr2];\n                      data[ptr2] = tmp;\n                      ptr_shift += d1;\n                    }\n\n                    ++less;\n                    --great;\n                  } else {\n                    b_ptr0 = s0 * k;\n                    b_ptr1 = s0 * great;\n                    ptr_shift = offset;\n\n                    for (i1 = 0; i1 < n1; ++i1) {\n                      ptr0 = b_ptr0 + ptr_shift;\n                      ptr1 = b_ptr1 + ptr_shift;\n                      tmp = data[ptr0];\n                      data[ptr0] = data[ptr1];\n                      data[ptr1] = tmp;\n                      ptr_shift += d1;\n                    }\n\n                    --great;\n                  }\n\n                  break;\n                }\n              }\n            }\n          }\n        }\n      }\n\n      free(pivot1);\n      free(pivot2);\n\n      if (great - less <= 32) {\n        insertionSort(less, great, data, offset, s0, s1, n0, n1, d1, e1, f1);\n      } else {\n        ndarrayQuickSort1d0uint32(less, great, data, offset, s0, s1, n0, n1, d1, e1, f1);\n      }\n    };\n  }\n};\n\nfunction createQuickSort(order, dtype, insertionSort) {\n  var allocator = getMallocFree(dtype);\n  var key = [dtype, order].join(',');\n  var result = CACHED_quickSort[key];\n\n  if (order.length > 1 && allocator) {\n    return result(insertionSort, allocator[0], allocator[1]);\n  } else {\n    return result(insertionSort);\n  }\n}\n\nvar CACHED_sort = {\n  \"uint32,1,0\": function uint3210(insertionSort, quickSort) {\n    return function (array) {\n      var data = array.data,\n          offset = array.offset | 0,\n          shape = array.shape,\n          stride = array.stride,\n          s0 = stride[0] | 0,\n          n0 = shape[0] | 0,\n          s1 = stride[1] | 0,\n          n1 = shape[1] | 0,\n          d1 = s1,\n          e1 = s1,\n          f1 = 1;\n\n      if (n0 <= 32) {\n        insertionSort(0, n0 - 1, data, offset, s0, s1, n0, n1, d1, e1, f1);\n      } else {\n        quickSort(0, n0 - 1, data, offset, s0, s1, n0, n1, d1, e1, f1);\n      }\n    };\n  }\n};\n\nfunction compileSort(order, dtype) {\n  var key = [dtype, order].join(',');\n  var result = CACHED_sort[key];\n  var insertionSort = createInsertionSort(order, dtype);\n  var quickSort = createQuickSort(order, dtype, insertionSort);\n  return result(insertionSort, quickSort);\n}\n\nmodule.exports = compileSort;","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/ndarray-sort/lib/compile_sort.js"],"names":["pool","require","getMallocFree","dtype","mallocUint32","freeUint32","CACHED_insertionSort","malloc","free","ndarrayInsertionSort1d0uint32","left","right","data","offset","s0","s1","n0","n1","d1","e1","f1","i","j","cptr","ptr","i1","scratch","dptr","sptr","a","b","__g","__l","createInsertionSort","order","allocator","key","join","result","CACHED_quickSort","insertionSort","ndarrayQuickSort1d0uint32","sixth","index1","index5","index3","index2","index4","el1","el2","el3","el4","el5","less","great","pivots_are_equal","tmp","tmp0","x","y","z","k","ptr0","ptr1","ptr2","comp_pivot1","comp_pivot2","comp","b_ptr0","b_ptr1","b_ptr2","b_ptr3","b_ptr4","b_ptr5","b_ptr6","b_ptr7","ptr3","ptr4","ptr5","ptr6","ptr7","pivot_ptr","ptr_shift","elementSize","pivot1","pivot2","__l1","__l2","__l3","__l4","__l5","__l6","__l7","__l8","__l9","__l10","__l11","__l12","__l13","__l14","__l15","__l16","__l17","__l18","__l19","__l20","__l21","createQuickSort","length","CACHED_sort","quickSort","array","shape","stride","compileSort","module","exports"],"mappings":"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","sourcesContent":["\"use strict\"\r\n\r\nvar pool = require(\"typedarray-pool\")\r\n\r\nfunction getMallocFree(dtype) {\r\n  switch(dtype) {\r\n    case \"uint32\":\r\n      return [pool.mallocUint32, pool.freeUint32]\r\n    default:\r\n      return null\r\n  }\r\n}\r\n\r\nvar CACHED_insertionSort = {\r\n  \"uint32,1,0\": function (malloc, free) {\r\n    return function ndarrayInsertionSort1d0uint32(left, right, data, offset, s0, s1, n0, n1, d1, e1, f1) {\r\n      var i,\r\n        j,\r\n        cptr,\r\n        ptr = left * s0 + offset,\r\n        i1,\r\n        scratch = malloc(n1),\r\n        dptr,\r\n        sptr,\r\n        a,\r\n        b\r\n      for (i = left + 1; i <= right; ++i) {\r\n        j = i\r\n        ptr += s0\r\n        cptr = ptr\r\n        dptr = 0\r\n        sptr = ptr\r\n        for (i1 = 0; i1 < n1; ++i1) {\r\n          scratch[dptr++] = data[sptr]\r\n          sptr += d1\r\n        }\r\n        __g: while (j-- > left) {\r\n          dptr = 0\r\n          sptr = cptr - s0\r\n          __l: for (i1 = 0; i1 < n1; ++i1) {\r\n            a = data[sptr]\r\n            b = scratch[dptr]\r\n            if (a < b) {\r\n              break __g\r\n            }\r\n            if (a > b) {\r\n              break __l\r\n            }\r\n            sptr += e1\r\n            dptr += f1\r\n          }\r\n          dptr = cptr\r\n          sptr = cptr - s0\r\n          for (i1 = 0; i1 < n1; ++i1) {\r\n            data[dptr] = data[sptr]\r\n            dptr += d1\r\n            sptr += d1\r\n          }\r\n          cptr -= s0\r\n        }\r\n        dptr = cptr\r\n        sptr = 0\r\n        for (i1 = 0; i1 < n1; ++i1) {\r\n          data[dptr] = scratch[sptr++]\r\n          dptr += d1\r\n        }\r\n      }\r\n      free(scratch)\r\n    }\r\n  },\r\n}\r\n\r\nfunction createInsertionSort(order, dtype) {\r\n  var allocator = getMallocFree(dtype)\r\n  var key = [dtype, order].join(',')\r\n  var result = CACHED_insertionSort[key]\r\n\r\n  if(allocator) {\r\n    return result(allocator[0], allocator[1])\r\n  } else {\r\n    return result()\r\n  }\r\n}\r\n\r\nvar CACHED_quickSort = {\r\n  \"uint32,1,0\": function (insertionSort, malloc, free) {\r\n    return function ndarrayQuickSort1d0uint32(left, right, data, offset, s0, s1, n0, n1, d1, e1, f1) {\r\n      var sixth = ((right - left + 1) / 6) | 0,\r\n        index1 = left + sixth,\r\n        index5 = right - sixth,\r\n        index3 = (left + right) >> 1,\r\n        index2 = index3 - sixth,\r\n        index4 = index3 + sixth,\r\n        el1 = index1,\r\n        el2 = index2,\r\n        el3 = index3,\r\n        el4 = index4,\r\n        el5 = index5,\r\n        less = left + 1,\r\n        great = right - 1,\r\n        pivots_are_equal = true,\r\n        tmp,\r\n        tmp0,\r\n        x,\r\n        y,\r\n        z,\r\n        k,\r\n        ptr0,\r\n        ptr1,\r\n        ptr2,\r\n        comp_pivot1 = 0,\r\n        comp_pivot2 = 0,\r\n        comp = 0,\r\n        i1,\r\n        b_ptr0,\r\n        b_ptr1,\r\n        b_ptr2,\r\n        b_ptr3,\r\n        b_ptr4,\r\n        b_ptr5,\r\n        b_ptr6,\r\n        b_ptr7,\r\n        ptr3,\r\n        ptr4,\r\n        ptr5,\r\n        ptr6,\r\n        ptr7,\r\n        pivot_ptr,\r\n        ptr_shift,\r\n        elementSize = n1,\r\n        pivot1 = malloc(elementSize),\r\n        pivot2 = malloc(elementSize)\r\n      b_ptr0 = s0 * el1\r\n      b_ptr1 = s0 * el2\r\n      ptr_shift = offset\r\n      __l1: for (i1 = 0; i1 < n1; ++i1) {\r\n        ptr0 = b_ptr0 + ptr_shift\r\n        ptr1 = b_ptr1 + ptr_shift\r\n        comp = data[ptr0] - data[ptr1]\r\n        if (comp > 0) {\r\n          tmp0 = el1\r\n          el1 = el2\r\n          el2 = tmp0\r\n          break __l1\r\n        }\r\n        if (comp < 0) {\r\n          break __l1\r\n        }\r\n        ptr_shift += e1\r\n      }\r\n      b_ptr0 = s0 * el4\r\n      b_ptr1 = s0 * el5\r\n      ptr_shift = offset\r\n      __l2: for (i1 = 0; i1 < n1; ++i1) {\r\n        ptr0 = b_ptr0 + ptr_shift\r\n        ptr1 = b_ptr1 + ptr_shift\r\n        comp = data[ptr0] - data[ptr1]\r\n        if (comp > 0) {\r\n          tmp0 = el4\r\n          el4 = el5\r\n          el5 = tmp0\r\n          break __l2\r\n        }\r\n        if (comp < 0) {\r\n          break __l2\r\n        }\r\n        ptr_shift += e1\r\n      }\r\n      b_ptr0 = s0 * el1\r\n      b_ptr1 = s0 * el3\r\n      ptr_shift = offset\r\n      __l3: for (i1 = 0; i1 < n1; ++i1) {\r\n        ptr0 = b_ptr0 + ptr_shift\r\n        ptr1 = b_ptr1 + ptr_shift\r\n        comp = data[ptr0] - data[ptr1]\r\n        if (comp > 0) {\r\n          tmp0 = el1\r\n          el1 = el3\r\n          el3 = tmp0\r\n          break __l3\r\n        }\r\n        if (comp < 0) {\r\n          break __l3\r\n        }\r\n        ptr_shift += e1\r\n      }\r\n      b_ptr0 = s0 * el2\r\n      b_ptr1 = s0 * el3\r\n      ptr_shift = offset\r\n      __l4: for (i1 = 0; i1 < n1; ++i1) {\r\n        ptr0 = b_ptr0 + ptr_shift\r\n        ptr1 = b_ptr1 + ptr_shift\r\n        comp = data[ptr0] - data[ptr1]\r\n        if (comp > 0) {\r\n          tmp0 = el2\r\n          el2 = el3\r\n          el3 = tmp0\r\n          break __l4\r\n        }\r\n        if (comp < 0) {\r\n          break __l4\r\n        }\r\n        ptr_shift += e1\r\n      }\r\n      b_ptr0 = s0 * el1\r\n      b_ptr1 = s0 * el4\r\n      ptr_shift = offset\r\n      __l5: for (i1 = 0; i1 < n1; ++i1) {\r\n        ptr0 = b_ptr0 + ptr_shift\r\n        ptr1 = b_ptr1 + ptr_shift\r\n        comp = data[ptr0] - data[ptr1]\r\n        if (comp > 0) {\r\n          tmp0 = el1\r\n          el1 = el4\r\n          el4 = tmp0\r\n          break __l5\r\n        }\r\n        if (comp < 0) {\r\n          break __l5\r\n        }\r\n        ptr_shift += e1\r\n      }\r\n      b_ptr0 = s0 * el3\r\n      b_ptr1 = s0 * el4\r\n      ptr_shift = offset\r\n      __l6: for (i1 = 0; i1 < n1; ++i1) {\r\n        ptr0 = b_ptr0 + ptr_shift\r\n        ptr1 = b_ptr1 + ptr_shift\r\n        comp = data[ptr0] - data[ptr1]\r\n        if (comp > 0) {\r\n          tmp0 = el3\r\n          el3 = el4\r\n          el4 = tmp0\r\n          break __l6\r\n        }\r\n        if (comp < 0) {\r\n          break __l6\r\n        }\r\n        ptr_shift += e1\r\n      }\r\n      b_ptr0 = s0 * el2\r\n      b_ptr1 = s0 * el5\r\n      ptr_shift = offset\r\n      __l7: for (i1 = 0; i1 < n1; ++i1) {\r\n        ptr0 = b_ptr0 + ptr_shift\r\n        ptr1 = b_ptr1 + ptr_shift\r\n        comp = data[ptr0] - data[ptr1]\r\n        if (comp > 0) {\r\n          tmp0 = el2\r\n          el2 = el5\r\n          el5 = tmp0\r\n          break __l7\r\n        }\r\n        if (comp < 0) {\r\n          break __l7\r\n        }\r\n        ptr_shift += e1\r\n      }\r\n      b_ptr0 = s0 * el2\r\n      b_ptr1 = s0 * el3\r\n      ptr_shift = offset\r\n      __l8: for (i1 = 0; i1 < n1; ++i1) {\r\n        ptr0 = b_ptr0 + ptr_shift\r\n        ptr1 = b_ptr1 + ptr_shift\r\n        comp = data[ptr0] - data[ptr1]\r\n        if (comp > 0) {\r\n          tmp0 = el2\r\n          el2 = el3\r\n          el3 = tmp0\r\n          break __l8\r\n        }\r\n        if (comp < 0) {\r\n          break __l8\r\n        }\r\n        ptr_shift += e1\r\n      }\r\n      b_ptr0 = s0 * el4\r\n      b_ptr1 = s0 * el5\r\n      ptr_shift = offset\r\n      __l9: for (i1 = 0; i1 < n1; ++i1) {\r\n        ptr0 = b_ptr0 + ptr_shift\r\n        ptr1 = b_ptr1 + ptr_shift\r\n        comp = data[ptr0] - data[ptr1]\r\n        if (comp > 0) {\r\n          tmp0 = el4\r\n          el4 = el5\r\n          el5 = tmp0\r\n          break __l9\r\n        }\r\n        if (comp < 0) {\r\n          break __l9\r\n        }\r\n        ptr_shift += e1\r\n      }\r\n      b_ptr0 = s0 * el1\r\n      b_ptr1 = s0 * el2\r\n      b_ptr2 = s0 * el3\r\n      b_ptr3 = s0 * el4\r\n      b_ptr4 = s0 * el5\r\n      b_ptr5 = s0 * index1\r\n      b_ptr6 = s0 * index3\r\n      b_ptr7 = s0 * index5\r\n      pivot_ptr = 0\r\n      ptr_shift = offset\r\n      for (i1 = 0; i1 < n1; ++i1) {\r\n        ptr0 = b_ptr0 + ptr_shift\r\n        ptr1 = b_ptr1 + ptr_shift\r\n        ptr2 = b_ptr2 + ptr_shift\r\n        ptr3 = b_ptr3 + ptr_shift\r\n        ptr4 = b_ptr4 + ptr_shift\r\n        ptr5 = b_ptr5 + ptr_shift\r\n        ptr6 = b_ptr6 + ptr_shift\r\n        ptr7 = b_ptr7 + ptr_shift\r\n        pivot1[pivot_ptr] = data[ptr1]\r\n        pivot2[pivot_ptr] = data[ptr3]\r\n        pivots_are_equal = pivots_are_equal && pivot1[pivot_ptr] === pivot2[pivot_ptr]\r\n        x = data[ptr0]\r\n        y = data[ptr2]\r\n        z = data[ptr4]\r\n        data[ptr5] = x\r\n        data[ptr6] = y\r\n        data[ptr7] = z\r\n        ++pivot_ptr\r\n        ptr_shift += d1\r\n      }\r\n      b_ptr0 = s0 * index2\r\n      b_ptr1 = s0 * left\r\n      ptr_shift = offset\r\n      for (i1 = 0; i1 < n1; ++i1) {\r\n        ptr0 = b_ptr0 + ptr_shift\r\n        ptr1 = b_ptr1 + ptr_shift\r\n        data[ptr0] = data[ptr1]\r\n        ptr_shift += d1\r\n      }\r\n      b_ptr0 = s0 * index4\r\n      b_ptr1 = s0 * right\r\n      ptr_shift = offset\r\n      for (i1 = 0; i1 < n1; ++i1) {\r\n        ptr0 = b_ptr0 + ptr_shift\r\n        ptr1 = b_ptr1 + ptr_shift\r\n        data[ptr0] = data[ptr1]\r\n        ptr_shift += d1\r\n      }\r\n      if (pivots_are_equal) {\r\n        for (k = less; k <= great; ++k) {\r\n          ptr0 = offset + k * s0\r\n          pivot_ptr = 0\r\n          __l10: for (i1 = 0; i1 < n1; ++i1) {\r\n            comp = data[ptr0] - pivot1[pivot_ptr]\r\n            if (comp !== 0) {\r\n              break __l10\r\n            }\r\n            pivot_ptr += f1\r\n            ptr0 += e1\r\n          }\r\n          if (comp === 0) {\r\n            continue\r\n          }\r\n          if (comp < 0) {\r\n            if (k !== less) {\r\n              b_ptr0 = s0 * k\r\n              b_ptr1 = s0 * less\r\n              ptr_shift = offset\r\n              for (i1 = 0; i1 < n1; ++i1) {\r\n                ptr0 = b_ptr0 + ptr_shift\r\n                ptr1 = b_ptr1 + ptr_shift\r\n                tmp = data[ptr0]\r\n                data[ptr0] = data[ptr1]\r\n                data[ptr1] = tmp\r\n                ptr_shift += d1\r\n              }\r\n            }\r\n            ++less\r\n          } else {\r\n            while (true) {\r\n              ptr0 = offset + great * s0\r\n              pivot_ptr = 0\r\n              __l11: for (i1 = 0; i1 < n1; ++i1) {\r\n                comp = data[ptr0] - pivot1[pivot_ptr]\r\n                if (comp !== 0) {\r\n                  break __l11\r\n                }\r\n                pivot_ptr += f1\r\n                ptr0 += e1\r\n              }\r\n              if (comp > 0) {\r\n                great--\r\n              } else if (comp < 0) {\r\n                b_ptr0 = s0 * k\r\n                b_ptr1 = s0 * less\r\n                b_ptr2 = s0 * great\r\n                ptr_shift = offset\r\n                for (i1 = 0; i1 < n1; ++i1) {\r\n                  ptr0 = b_ptr0 + ptr_shift\r\n                  ptr1 = b_ptr1 + ptr_shift\r\n                  ptr2 = b_ptr2 + ptr_shift\r\n                  tmp = data[ptr0]\r\n                  data[ptr0] = data[ptr1]\r\n                  data[ptr1] = data[ptr2]\r\n                  data[ptr2] = tmp\r\n                  ptr_shift += d1\r\n                }\r\n                ++less\r\n                --great\r\n                break\r\n              } else {\r\n                b_ptr0 = s0 * k\r\n                b_ptr1 = s0 * great\r\n                ptr_shift = offset\r\n                for (i1 = 0; i1 < n1; ++i1) {\r\n                  ptr0 = b_ptr0 + ptr_shift\r\n                  ptr1 = b_ptr1 + ptr_shift\r\n                  tmp = data[ptr0]\r\n                  data[ptr0] = data[ptr1]\r\n                  data[ptr1] = tmp\r\n                  ptr_shift += d1\r\n                }\r\n                --great\r\n                break\r\n              }\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        for (k = less; k <= great; ++k) {\r\n          ptr0 = offset + k * s0\r\n          pivot_ptr = 0\r\n          __l12: for (i1 = 0; i1 < n1; ++i1) {\r\n            comp_pivot1 = data[ptr0] - pivot1[pivot_ptr]\r\n            if (comp_pivot1 !== 0) {\r\n              break __l12\r\n            }\r\n            pivot_ptr += f1\r\n            ptr0 += e1\r\n          }\r\n          if (comp_pivot1 < 0) {\r\n            if (k !== less) {\r\n              b_ptr0 = s0 * k\r\n              b_ptr1 = s0 * less\r\n              ptr_shift = offset\r\n              for (i1 = 0; i1 < n1; ++i1) {\r\n                ptr0 = b_ptr0 + ptr_shift\r\n                ptr1 = b_ptr1 + ptr_shift\r\n                tmp = data[ptr0]\r\n                data[ptr0] = data[ptr1]\r\n                data[ptr1] = tmp\r\n                ptr_shift += d1\r\n              }\r\n            }\r\n            ++less\r\n          } else {\r\n            ptr0 = offset + k * s0\r\n            pivot_ptr = 0\r\n            __l13: for (i1 = 0; i1 < n1; ++i1) {\r\n              comp_pivot2 = data[ptr0] - pivot2[pivot_ptr]\r\n              if (comp_pivot2 !== 0) {\r\n                break __l13\r\n              }\r\n              pivot_ptr += f1\r\n              ptr0 += e1\r\n            }\r\n            if (comp_pivot2 > 0) {\r\n              while (true) {\r\n                ptr0 = offset + great * s0\r\n                pivot_ptr = 0\r\n                __l14: for (i1 = 0; i1 < n1; ++i1) {\r\n                  comp = data[ptr0] - pivot2[pivot_ptr]\r\n                  if (comp !== 0) {\r\n                    break __l14\r\n                  }\r\n                  pivot_ptr += f1\r\n                  ptr0 += e1\r\n                }\r\n                if (comp > 0) {\r\n                  if (--great < k) {\r\n                    break\r\n                  }\r\n                  continue\r\n                } else {\r\n                  ptr0 = offset + great * s0\r\n                  pivot_ptr = 0\r\n                  __l15: for (i1 = 0; i1 < n1; ++i1) {\r\n                    comp = data[ptr0] - pivot1[pivot_ptr]\r\n                    if (comp !== 0) {\r\n                      break __l15\r\n                    }\r\n                    pivot_ptr += f1\r\n                    ptr0 += e1\r\n                  }\r\n                  if (comp < 0) {\r\n                    b_ptr0 = s0 * k\r\n                    b_ptr1 = s0 * less\r\n                    b_ptr2 = s0 * great\r\n                    ptr_shift = offset\r\n                    for (i1 = 0; i1 < n1; ++i1) {\r\n                      ptr0 = b_ptr0 + ptr_shift\r\n                      ptr1 = b_ptr1 + ptr_shift\r\n                      ptr2 = b_ptr2 + ptr_shift\r\n                      tmp = data[ptr0]\r\n                      data[ptr0] = data[ptr1]\r\n                      data[ptr1] = data[ptr2]\r\n                      data[ptr2] = tmp\r\n                      ptr_shift += d1\r\n                    }\r\n                    ++less\r\n                    --great\r\n                  } else {\r\n                    b_ptr0 = s0 * k\r\n                    b_ptr1 = s0 * great\r\n                    ptr_shift = offset\r\n                    for (i1 = 0; i1 < n1; ++i1) {\r\n                      ptr0 = b_ptr0 + ptr_shift\r\n                      ptr1 = b_ptr1 + ptr_shift\r\n                      tmp = data[ptr0]\r\n                      data[ptr0] = data[ptr1]\r\n                      data[ptr1] = tmp\r\n                      ptr_shift += d1\r\n                    }\r\n                    --great\r\n                  }\r\n                  break\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      b_ptr0 = s0 * left\r\n      b_ptr1 = s0 * (less - 1)\r\n      pivot_ptr = 0\r\n      ptr_shift = offset\r\n      for (i1 = 0; i1 < n1; ++i1) {\r\n        ptr0 = b_ptr0 + ptr_shift\r\n        ptr1 = b_ptr1 + ptr_shift\r\n        data[ptr0] = data[ptr1]\r\n        data[ptr1] = pivot1[pivot_ptr]\r\n        ++pivot_ptr\r\n        ptr_shift += d1\r\n      }\r\n      b_ptr0 = s0 * right\r\n      b_ptr1 = s0 * (great + 1)\r\n      pivot_ptr = 0\r\n      ptr_shift = offset\r\n      for (i1 = 0; i1 < n1; ++i1) {\r\n        ptr0 = b_ptr0 + ptr_shift\r\n        ptr1 = b_ptr1 + ptr_shift\r\n        data[ptr0] = data[ptr1]\r\n        data[ptr1] = pivot2[pivot_ptr]\r\n        ++pivot_ptr\r\n        ptr_shift += d1\r\n      }\r\n      if (less - 2 - left <= 32) {\r\n        insertionSort(left, less - 2, data, offset, s0, s1, n0, n1, d1, e1, f1)\r\n      } else {\r\n        ndarrayQuickSort1d0uint32(left, less - 2, data, offset, s0, s1, n0, n1, d1, e1, f1)\r\n      }\r\n      if (right - (great + 2) <= 32) {\r\n        insertionSort(great + 2, right, data, offset, s0, s1, n0, n1, d1, e1, f1)\r\n      } else {\r\n        ndarrayQuickSort1d0uint32(great + 2, right, data, offset, s0, s1, n0, n1, d1, e1, f1)\r\n      }\r\n      if (pivots_are_equal) {\r\n        free(pivot1)\r\n        free(pivot2)\r\n        return\r\n      }\r\n      if (less < index1 && great > index5) {\r\n        __l16: while (true) {\r\n          ptr0 = offset + less * s0\r\n          pivot_ptr = 0\r\n          ptr_shift = offset\r\n          for (i1 = 0; i1 < n1; ++i1) {\r\n            if (data[ptr0] !== pivot1[pivot_ptr]) {\r\n              break __l16\r\n            }\r\n            ++pivot_ptr\r\n            ptr0 += d1\r\n          }\r\n          ++less\r\n        }\r\n        __l17: while (true) {\r\n          ptr0 = offset + great * s0\r\n          pivot_ptr = 0\r\n          ptr_shift = offset\r\n          for (i1 = 0; i1 < n1; ++i1) {\r\n            if (data[ptr0] !== pivot2[pivot_ptr]) {\r\n              break __l17\r\n            }\r\n            ++pivot_ptr\r\n            ptr0 += d1\r\n          }\r\n          --great\r\n        }\r\n        for (k = less; k <= great; ++k) {\r\n          ptr0 = offset + k * s0\r\n          pivot_ptr = 0\r\n          __l18: for (i1 = 0; i1 < n1; ++i1) {\r\n            comp_pivot1 = data[ptr0] - pivot1[pivot_ptr]\r\n            if (comp_pivot1 !== 0) {\r\n              break __l18\r\n            }\r\n            pivot_ptr += f1\r\n            ptr0 += e1\r\n          }\r\n          if (comp_pivot1 === 0) {\r\n            if (k !== less) {\r\n              b_ptr0 = s0 * k\r\n              b_ptr1 = s0 * less\r\n              ptr_shift = offset\r\n              for (i1 = 0; i1 < n1; ++i1) {\r\n                ptr0 = b_ptr0 + ptr_shift\r\n                ptr1 = b_ptr1 + ptr_shift\r\n                tmp = data[ptr0]\r\n                data[ptr0] = data[ptr1]\r\n                data[ptr1] = tmp\r\n                ptr_shift += d1\r\n              }\r\n            }\r\n            ++less\r\n          } else {\r\n            ptr0 = offset + k * s0\r\n            pivot_ptr = 0\r\n            __l19: for (i1 = 0; i1 < n1; ++i1) {\r\n              comp_pivot2 = data[ptr0] - pivot2[pivot_ptr]\r\n              if (comp_pivot2 !== 0) {\r\n                break __l19\r\n              }\r\n              pivot_ptr += f1\r\n              ptr0 += e1\r\n            }\r\n            if (comp_pivot2 === 0) {\r\n              while (true) {\r\n                ptr0 = offset + great * s0\r\n                pivot_ptr = 0\r\n                __l20: for (i1 = 0; i1 < n1; ++i1) {\r\n                  comp = data[ptr0] - pivot2[pivot_ptr]\r\n                  if (comp !== 0) {\r\n                    break __l20\r\n                  }\r\n                  pivot_ptr += f1\r\n                  ptr0 += e1\r\n                }\r\n                if (comp === 0) {\r\n                  if (--great < k) {\r\n                    break\r\n                  }\r\n                  continue\r\n                } else {\r\n                  ptr0 = offset + great * s0\r\n                  pivot_ptr = 0\r\n                  __l21: for (i1 = 0; i1 < n1; ++i1) {\r\n                    comp = data[ptr0] - pivot1[pivot_ptr]\r\n                    if (comp !== 0) {\r\n                      break __l21\r\n                    }\r\n                    pivot_ptr += f1\r\n                    ptr0 += e1\r\n                  }\r\n                  if (comp < 0) {\r\n                    b_ptr0 = s0 * k\r\n                    b_ptr1 = s0 * less\r\n                    b_ptr2 = s0 * great\r\n                    ptr_shift = offset\r\n                    for (i1 = 0; i1 < n1; ++i1) {\r\n                      ptr0 = b_ptr0 + ptr_shift\r\n                      ptr1 = b_ptr1 + ptr_shift\r\n                      ptr2 = b_ptr2 + ptr_shift\r\n                      tmp = data[ptr0]\r\n                      data[ptr0] = data[ptr1]\r\n                      data[ptr1] = data[ptr2]\r\n                      data[ptr2] = tmp\r\n                      ptr_shift += d1\r\n                    }\r\n                    ++less\r\n                    --great\r\n                  } else {\r\n                    b_ptr0 = s0 * k\r\n                    b_ptr1 = s0 * great\r\n                    ptr_shift = offset\r\n                    for (i1 = 0; i1 < n1; ++i1) {\r\n                      ptr0 = b_ptr0 + ptr_shift\r\n                      ptr1 = b_ptr1 + ptr_shift\r\n                      tmp = data[ptr0]\r\n                      data[ptr0] = data[ptr1]\r\n                      data[ptr1] = tmp\r\n                      ptr_shift += d1\r\n                    }\r\n                    --great\r\n                  }\r\n                  break\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      free(pivot1)\r\n      free(pivot2)\r\n      if (great - less <= 32) {\r\n        insertionSort(less, great, data, offset, s0, s1, n0, n1, d1, e1, f1)\r\n      } else {\r\n        ndarrayQuickSort1d0uint32(less, great, data, offset, s0, s1, n0, n1, d1, e1, f1)\r\n      }\r\n    }\r\n  },\r\n}\r\n\r\nfunction createQuickSort(order, dtype, insertionSort) {\r\n  var allocator = getMallocFree(dtype)\r\n  var key = [dtype, order].join(',')\r\n  var result = CACHED_quickSort[key]\r\n\r\n  if(order.length > 1 && allocator) {\r\n    return result(insertionSort, allocator[0], allocator[1])\r\n  } else {\r\n    return result(insertionSort)\r\n  }\r\n}\r\n\r\nvar CACHED_sort = {\r\n  \"uint32,1,0\": function (insertionSort, quickSort) {\r\n    return function (array) {\r\n      var data = array.data,\r\n        offset = array.offset | 0,\r\n        shape = array.shape,\r\n        stride = array.stride,\r\n        s0 = stride[0] | 0,\r\n        n0 = shape[0] | 0,\r\n        s1 = stride[1] | 0,\r\n        n1 = shape[1] | 0,\r\n        d1 = s1,\r\n        e1 = s1,\r\n        f1 = 1\r\n      if (n0 <= 32) {\r\n        insertionSort(0, n0 - 1, data, offset, s0, s1, n0, n1, d1, e1, f1)\r\n      } else {\r\n        quickSort(0, n0 - 1, data, offset, s0, s1, n0, n1, d1, e1, f1)\r\n      }\r\n    }\r\n  },\r\n}\r\n\r\nfunction compileSort(order, dtype) {\r\n  var key = [dtype, order].join(',')\r\n  var result = CACHED_sort[key]\r\n\r\n  var insertionSort = createInsertionSort(order, dtype)\r\n  var quickSort = createQuickSort(order, dtype, insertionSort)\r\n  return result(insertionSort, quickSort)\r\n}\r\n\r\nmodule.exports = compileSort"]},"metadata":{},"sourceType":"script"}