{"ast":null,"code":"'use strict';\n\nvar colorscaleCalc = require('../../components/colorscale/calc');\n\nvar processGrid = require('../streamtube/calc').processGrid;\n\nvar filter = require('../streamtube/calc').filter;\n\nmodule.exports = function calc(gd, trace) {\n  trace._len = Math.min(trace.x.length, trace.y.length, trace.z.length, trace.value.length);\n  trace._x = filter(trace.x, trace._len);\n  trace._y = filter(trace.y, trace._len);\n  trace._z = filter(trace.z, trace._len);\n  trace._value = filter(trace.value, trace._len);\n  var grid = processGrid(trace);\n  trace._gridFill = grid.fill;\n  trace._Xs = grid.Xs;\n  trace._Ys = grid.Ys;\n  trace._Zs = grid.Zs;\n  trace._len = grid.len;\n  var min = Infinity;\n  var max = -Infinity;\n\n  for (var i = 0; i < trace._len; i++) {\n    var v = trace._value[i];\n    min = Math.min(min, v);\n    max = Math.max(max, v);\n  }\n\n  trace._minValues = min;\n  trace._maxValues = max;\n  trace._vMin = trace.isomin === undefined || trace.isomin === null ? min : trace.isomin;\n  trace._vMax = trace.isomax === undefined || trace.isomin === null ? max : trace.isomax;\n  colorscaleCalc(gd, trace, {\n    vals: [trace._vMin, trace._vMax],\n    containerStr: '',\n    cLetter: 'c'\n  });\n};","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/plotly.js/src/traces/isosurface/calc.js"],"names":["colorscaleCalc","require","processGrid","filter","module","exports","calc","gd","trace","_len","Math","min","x","length","y","z","value","_x","_y","_z","_value","grid","_gridFill","fill","_Xs","Xs","_Ys","Ys","_Zs","Zs","len","Infinity","max","i","v","_minValues","_maxValues","_vMin","isomin","undefined","_vMax","isomax","vals","containerStr","cLetter"],"mappings":"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","sourcesContent":["'use strict';\n\nvar colorscaleCalc = require('../../components/colorscale/calc');\nvar processGrid = require('../streamtube/calc').processGrid;\nvar filter = require('../streamtube/calc').filter;\n\nmodule.exports = function calc(gd, trace) {\n    trace._len = Math.min(\n        trace.x.length,\n        trace.y.length,\n        trace.z.length,\n        trace.value.length\n    );\n\n    trace._x = filter(trace.x, trace._len);\n    trace._y = filter(trace.y, trace._len);\n    trace._z = filter(trace.z, trace._len);\n    trace._value = filter(trace.value, trace._len);\n\n    var grid = processGrid(trace);\n    trace._gridFill = grid.fill;\n    trace._Xs = grid.Xs;\n    trace._Ys = grid.Ys;\n    trace._Zs = grid.Zs;\n    trace._len = grid.len;\n\n    var min = Infinity;\n    var max = -Infinity;\n    for(var i = 0; i < trace._len; i++) {\n        var v = trace._value[i];\n        min = Math.min(min, v);\n        max = Math.max(max, v);\n    }\n\n    trace._minValues = min;\n    trace._maxValues = max;\n    trace._vMin = (trace.isomin === undefined || trace.isomin === null) ? min : trace.isomin;\n    trace._vMax = (trace.isomax === undefined || trace.isomin === null) ? max : trace.isomax;\n\n    colorscaleCalc(gd, trace, {\n        vals: [trace._vMin, trace._vMax],\n        containerStr: '',\n        cLetter: 'c'\n    });\n};\n"]},"metadata":{},"sourceType":"script"}