{"ast":null,"code":"'use strict';\n\nvar cleanTicks = require('./clean_ticks');\n\nvar isArrayOrTypedArray = require('../../lib').isArrayOrTypedArray;\n\nmodule.exports = function handleTickValueDefaults(containerIn, containerOut, coerce, axType) {\n  function readInput(attr) {\n    var v = containerIn[attr];\n    return v !== undefined ? v : (containerOut._template || {})[attr];\n  }\n\n  var _tick0 = readInput('tick0');\n\n  var _dtick = readInput('dtick');\n\n  var _tickvals = readInput('tickvals');\n\n  var tickmodeDefault = isArrayOrTypedArray(_tickvals) ? 'array' : _dtick ? 'linear' : 'auto';\n  var tickmode = coerce('tickmode', tickmodeDefault);\n  if (tickmode === 'auto') coerce('nticks');else if (tickmode === 'linear') {\n    // dtick is usually a positive number, but there are some\n    // special strings available for log or date axes\n    // tick0 also has special logic\n    var dtick = containerOut.dtick = cleanTicks.dtick(_dtick, axType);\n    containerOut.tick0 = cleanTicks.tick0(_tick0, axType, containerOut.calendar, dtick);\n  } else if (axType !== 'multicategory') {\n    var tickvals = coerce('tickvals');\n    if (tickvals === undefined) containerOut.tickmode = 'auto';else coerce('ticktext');\n  }\n};","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/plotly.js/src/plots/cartesian/tick_value_defaults.js"],"names":["cleanTicks","require","isArrayOrTypedArray","module","exports","handleTickValueDefaults","containerIn","containerOut","coerce","axType","readInput","attr","v","undefined","_template","_tick0","_dtick","_tickvals","tickmodeDefault","tickmode","dtick","tick0","calendar","tickvals"],"mappings":"AAAA;;AAEA,IAAIA,UAAU,GAAGC,OAAO,CAAC,eAAD,CAAxB;;AACA,IAAIC,mBAAmB,GAAGD,OAAO,CAAC,WAAD,CAAP,CAAqBC,mBAA/C;;AAEAC,MAAM,CAACC,OAAP,GAAiB,SAASC,uBAAT,CAAiCC,WAAjC,EAA8CC,YAA9C,EAA4DC,MAA5D,EAAoEC,MAApE,EAA4E;AACzF,WAASC,SAAT,CAAmBC,IAAnB,EAAyB;AACrB,QAAIC,CAAC,GAAGN,WAAW,CAACK,IAAD,CAAnB;AACA,WACIC,CAAC,KAAKC,SADH,GAEHD,CAFG,GAEC,CAACL,YAAY,CAACO,SAAb,IAA0B,EAA3B,EAA+BH,IAA/B,CAFR;AAGH;;AAED,MAAII,MAAM,GAAGL,SAAS,CAAC,OAAD,CAAtB;;AACA,MAAIM,MAAM,GAAGN,SAAS,CAAC,OAAD,CAAtB;;AACA,MAAIO,SAAS,GAAGP,SAAS,CAAC,UAAD,CAAzB;;AAEA,MAAIQ,eAAe,GAAGhB,mBAAmB,CAACe,SAAD,CAAnB,GAAiC,OAAjC,GAClBD,MAAM,GAAG,QAAH,GACN,MAFJ;AAGA,MAAIG,QAAQ,GAAGX,MAAM,CAAC,UAAD,EAAaU,eAAb,CAArB;AAEA,MAAGC,QAAQ,KAAK,MAAhB,EAAwBX,MAAM,CAAC,QAAD,CAAN,CAAxB,KACK,IAAGW,QAAQ,KAAK,QAAhB,EAA0B;AAC3B;AACA;AACA;AACA,QAAIC,KAAK,GAAGb,YAAY,CAACa,KAAb,GAAqBpB,UAAU,CAACoB,KAAX,CAC7BJ,MAD6B,EACrBP,MADqB,CAAjC;AAEAF,IAAAA,YAAY,CAACc,KAAb,GAAqBrB,UAAU,CAACqB,KAAX,CACjBN,MADiB,EACTN,MADS,EACDF,YAAY,CAACe,QADZ,EACsBF,KADtB,CAArB;AAEH,GARI,MAQE,IAAGX,MAAM,KAAK,eAAd,EAA+B;AAClC,QAAIc,QAAQ,GAAGf,MAAM,CAAC,UAAD,CAArB;AACA,QAAGe,QAAQ,KAAKV,SAAhB,EAA2BN,YAAY,CAACY,QAAb,GAAwB,MAAxB,CAA3B,KACKX,MAAM,CAAC,UAAD,CAAN;AACR;AACJ,CA/BD","sourcesContent":["'use strict';\n\nvar cleanTicks = require('./clean_ticks');\nvar isArrayOrTypedArray = require('../../lib').isArrayOrTypedArray;\n\nmodule.exports = function handleTickValueDefaults(containerIn, containerOut, coerce, axType) {\n    function readInput(attr) {\n        var v = containerIn[attr];\n        return (\n            v !== undefined\n        ) ? v : (containerOut._template || {})[attr];\n    }\n\n    var _tick0 = readInput('tick0');\n    var _dtick = readInput('dtick');\n    var _tickvals = readInput('tickvals');\n\n    var tickmodeDefault = isArrayOrTypedArray(_tickvals) ? 'array' :\n        _dtick ? 'linear' :\n        'auto';\n    var tickmode = coerce('tickmode', tickmodeDefault);\n\n    if(tickmode === 'auto') coerce('nticks');\n    else if(tickmode === 'linear') {\n        // dtick is usually a positive number, but there are some\n        // special strings available for log or date axes\n        // tick0 also has special logic\n        var dtick = containerOut.dtick = cleanTicks.dtick(\n            _dtick, axType);\n        containerOut.tick0 = cleanTicks.tick0(\n            _tick0, axType, containerOut.calendar, dtick);\n    } else if(axType !== 'multicategory') {\n        var tickvals = coerce('tickvals');\n        if(tickvals === undefined) containerOut.tickmode = 'auto';\n        else coerce('ticktext');\n    }\n};\n"]},"metadata":{},"sourceType":"script"}