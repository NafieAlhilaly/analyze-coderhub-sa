{"ast":null,"code":"module.exports = tokenize;\n\nvar literals100 = require('./lib/literals'),\n    operators = require('./lib/operators'),\n    builtins100 = require('./lib/builtins'),\n    literals300es = require('./lib/literals-300es'),\n    builtins300es = require('./lib/builtins-300es');\n\nvar NORMAL = 999 // <-- never emitted\n,\n    TOKEN = 9999 // <-- never emitted\n,\n    BLOCK_COMMENT = 0,\n    LINE_COMMENT = 1,\n    PREPROCESSOR = 2,\n    OPERATOR = 3,\n    INTEGER = 4,\n    FLOAT = 5,\n    IDENT = 6,\n    BUILTIN = 7,\n    KEYWORD = 8,\n    WHITESPACE = 9,\n    EOF = 10,\n    HEX = 11;\nvar map = ['block-comment', 'line-comment', 'preprocessor', 'operator', 'integer', 'float', 'ident', 'builtin', 'keyword', 'whitespace', 'eof', 'integer'];\n\nfunction tokenize(opt) {\n  var i = 0,\n      total = 0,\n      mode = NORMAL,\n      c,\n      last,\n      content = [],\n      tokens = [],\n      token_idx = 0,\n      token_offs = 0,\n      line = 1,\n      col = 0,\n      start = 0,\n      isnum = false,\n      isoperator = false,\n      input = '',\n      len;\n  opt = opt || {};\n  var allBuiltins = builtins100;\n  var allLiterals = literals100;\n\n  if (opt.version === '300 es') {\n    allBuiltins = builtins300es;\n    allLiterals = literals300es;\n  } // cache by name\n\n\n  var builtinsDict = {},\n      literalsDict = {};\n\n  for (var i = 0; i < allBuiltins.length; i++) {\n    builtinsDict[allBuiltins[i]] = true;\n  }\n\n  for (var i = 0; i < allLiterals.length; i++) {\n    literalsDict[allLiterals[i]] = true;\n  }\n\n  return function (data) {\n    tokens = [];\n    if (data !== null) return write(data);\n    return end();\n  };\n\n  function token(data) {\n    if (data.length) {\n      tokens.push({\n        type: map[mode],\n        data: data,\n        position: start,\n        line: line,\n        column: col\n      });\n    }\n  }\n\n  function write(chunk) {\n    i = 0;\n    if (chunk.toString) chunk = chunk.toString();\n    input += chunk.replace(/\\r\\n/g, '\\n');\n    len = input.length;\n    var last;\n\n    while (c = input[i], i < len) {\n      last = i;\n\n      switch (mode) {\n        case BLOCK_COMMENT:\n          i = block_comment();\n          break;\n\n        case LINE_COMMENT:\n          i = line_comment();\n          break;\n\n        case PREPROCESSOR:\n          i = preprocessor();\n          break;\n\n        case OPERATOR:\n          i = operator();\n          break;\n\n        case INTEGER:\n          i = integer();\n          break;\n\n        case HEX:\n          i = hex();\n          break;\n\n        case FLOAT:\n          i = decimal();\n          break;\n\n        case TOKEN:\n          i = readtoken();\n          break;\n\n        case WHITESPACE:\n          i = whitespace();\n          break;\n\n        case NORMAL:\n          i = normal();\n          break;\n      }\n\n      if (last !== i) {\n        switch (input[last]) {\n          case '\\n':\n            col = 0;\n            ++line;\n            break;\n\n          default:\n            ++col;\n            break;\n        }\n      }\n    }\n\n    total += i;\n    input = input.slice(i);\n    return tokens;\n  }\n\n  function end(chunk) {\n    if (content.length) {\n      token(content.join(''));\n    }\n\n    mode = EOF;\n    token('(eof)');\n    return tokens;\n  }\n\n  function normal() {\n    content = content.length ? [] : content;\n\n    if (last === '/' && c === '*') {\n      start = total + i - 1;\n      mode = BLOCK_COMMENT;\n      last = c;\n      return i + 1;\n    }\n\n    if (last === '/' && c === '/') {\n      start = total + i - 1;\n      mode = LINE_COMMENT;\n      last = c;\n      return i + 1;\n    }\n\n    if (c === '#') {\n      mode = PREPROCESSOR;\n      start = total + i;\n      return i;\n    }\n\n    if (/\\s/.test(c)) {\n      mode = WHITESPACE;\n      start = total + i;\n      return i;\n    }\n\n    isnum = /\\d/.test(c);\n    isoperator = /[^\\w_]/.test(c);\n    start = total + i;\n    mode = isnum ? INTEGER : isoperator ? OPERATOR : TOKEN;\n    return i;\n  }\n\n  function whitespace() {\n    if (/[^\\s]/g.test(c)) {\n      token(content.join(''));\n      mode = NORMAL;\n      return i;\n    }\n\n    content.push(c);\n    last = c;\n    return i + 1;\n  }\n\n  function preprocessor() {\n    if ((c === '\\r' || c === '\\n') && last !== '\\\\') {\n      token(content.join(''));\n      mode = NORMAL;\n      return i;\n    }\n\n    content.push(c);\n    last = c;\n    return i + 1;\n  }\n\n  function line_comment() {\n    return preprocessor();\n  }\n\n  function block_comment() {\n    if (c === '/' && last === '*') {\n      content.push(c);\n      token(content.join(''));\n      mode = NORMAL;\n      return i + 1;\n    }\n\n    content.push(c);\n    last = c;\n    return i + 1;\n  }\n\n  function operator() {\n    if (last === '.' && /\\d/.test(c)) {\n      mode = FLOAT;\n      return i;\n    }\n\n    if (last === '/' && c === '*') {\n      mode = BLOCK_COMMENT;\n      return i;\n    }\n\n    if (last === '/' && c === '/') {\n      mode = LINE_COMMENT;\n      return i;\n    }\n\n    if (c === '.' && content.length) {\n      while (determine_operator(content)) {\n        ;\n      }\n\n      mode = FLOAT;\n      return i;\n    }\n\n    if (c === ';' || c === ')' || c === '(') {\n      if (content.length) while (determine_operator(content)) {\n        ;\n      }\n      token(c);\n      mode = NORMAL;\n      return i + 1;\n    }\n\n    var is_composite_operator = content.length === 2 && c !== '=';\n\n    if (/[\\w_\\d\\s]/.test(c) || is_composite_operator) {\n      while (determine_operator(content)) {\n        ;\n      }\n\n      mode = NORMAL;\n      return i;\n    }\n\n    content.push(c);\n    last = c;\n    return i + 1;\n  }\n\n  function determine_operator(buf) {\n    var j = 0,\n        idx,\n        res;\n\n    do {\n      idx = operators.indexOf(buf.slice(0, buf.length + j).join(''));\n      res = operators[idx];\n\n      if (idx === -1) {\n        if (j-- + buf.length > 0) continue;\n        res = buf.slice(0, 1).join('');\n      }\n\n      token(res);\n      start += res.length;\n      content = content.slice(res.length);\n      return content.length;\n    } while (1);\n  }\n\n  function hex() {\n    if (/[^a-fA-F0-9]/.test(c)) {\n      token(content.join(''));\n      mode = NORMAL;\n      return i;\n    }\n\n    content.push(c);\n    last = c;\n    return i + 1;\n  }\n\n  function integer() {\n    if (c === '.') {\n      content.push(c);\n      mode = FLOAT;\n      last = c;\n      return i + 1;\n    }\n\n    if (/[eE]/.test(c)) {\n      content.push(c);\n      mode = FLOAT;\n      last = c;\n      return i + 1;\n    }\n\n    if (c === 'x' && content.length === 1 && content[0] === '0') {\n      mode = HEX;\n      content.push(c);\n      last = c;\n      return i + 1;\n    }\n\n    if (/[^\\d]/.test(c)) {\n      token(content.join(''));\n      mode = NORMAL;\n      return i;\n    }\n\n    content.push(c);\n    last = c;\n    return i + 1;\n  }\n\n  function decimal() {\n    if (c === 'f') {\n      content.push(c);\n      last = c;\n      i += 1;\n    }\n\n    if (/[eE]/.test(c)) {\n      content.push(c);\n      last = c;\n      return i + 1;\n    }\n\n    if ((c === '-' || c === '+') && /[eE]/.test(last)) {\n      content.push(c);\n      last = c;\n      return i + 1;\n    }\n\n    if (/[^\\d]/.test(c)) {\n      token(content.join(''));\n      mode = NORMAL;\n      return i;\n    }\n\n    content.push(c);\n    last = c;\n    return i + 1;\n  }\n\n  function readtoken() {\n    if (/[^\\d\\w_]/.test(c)) {\n      var contentstr = content.join('');\n\n      if (literalsDict[contentstr]) {\n        mode = KEYWORD;\n      } else if (builtinsDict[contentstr]) {\n        mode = BUILTIN;\n      } else {\n        mode = IDENT;\n      }\n\n      token(content.join(''));\n      mode = NORMAL;\n      return i;\n    }\n\n    content.push(c);\n    last = c;\n    return i + 1;\n  }\n}","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/glsl-tokenizer/index.js"],"names":["module","exports","tokenize","literals100","require","operators","builtins100","literals300es","builtins300es","NORMAL","TOKEN","BLOCK_COMMENT","LINE_COMMENT","PREPROCESSOR","OPERATOR","INTEGER","FLOAT","IDENT","BUILTIN","KEYWORD","WHITESPACE","EOF","HEX","map","opt","i","total","mode","c","last","content","tokens","token_idx","token_offs","line","col","start","isnum","isoperator","input","len","allBuiltins","allLiterals","version","builtinsDict","literalsDict","length","data","write","end","token","push","type","position","column","chunk","toString","replace","block_comment","line_comment","preprocessor","operator","integer","hex","decimal","readtoken","whitespace","normal","slice","join","test","determine_operator","is_composite_operator","buf","j","idx","res","indexOf","contentstr"],"mappings":"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","sourcesContent":["module.exports = tokenize\r\n\r\nvar literals100 = require('./lib/literals')\r\n  , operators = require('./lib/operators')\r\n  , builtins100 = require('./lib/builtins')\r\n  , literals300es = require('./lib/literals-300es')\r\n  , builtins300es = require('./lib/builtins-300es')\r\n\r\nvar NORMAL = 999          // <-- never emitted\r\n  , TOKEN = 9999          // <-- never emitted\r\n  , BLOCK_COMMENT = 0\r\n  , LINE_COMMENT = 1\r\n  , PREPROCESSOR = 2\r\n  , OPERATOR = 3\r\n  , INTEGER = 4\r\n  , FLOAT = 5\r\n  , IDENT = 6\r\n  , BUILTIN = 7\r\n  , KEYWORD = 8\r\n  , WHITESPACE = 9\r\n  , EOF = 10\r\n  , HEX = 11\r\n\r\nvar map = [\r\n    'block-comment'\r\n  , 'line-comment'\r\n  , 'preprocessor'\r\n  , 'operator'\r\n  , 'integer'\r\n  , 'float'\r\n  , 'ident'\r\n  , 'builtin'\r\n  , 'keyword'\r\n  , 'whitespace'\r\n  , 'eof'\r\n  , 'integer'\r\n]\r\n\r\nfunction tokenize(opt) {\r\n  var i = 0\r\n    , total = 0\r\n    , mode = NORMAL\r\n    , c\r\n    , last\r\n    , content = []\r\n    , tokens = []\r\n    , token_idx = 0\r\n    , token_offs = 0\r\n    , line = 1\r\n    , col = 0\r\n    , start = 0\r\n    , isnum = false\r\n    , isoperator = false\r\n    , input = ''\r\n    , len\r\n\r\n  opt = opt || {}\r\n  var allBuiltins = builtins100\r\n  var allLiterals = literals100\r\n  if (opt.version === '300 es') {\r\n    allBuiltins = builtins300es\r\n    allLiterals = literals300es\r\n  }\r\n\r\n  // cache by name\r\n  var builtinsDict = {}, literalsDict = {}\r\n  for (var i = 0; i < allBuiltins.length; i++) {\r\n    builtinsDict[allBuiltins[i]] = true\r\n  }\r\n  for (var i = 0; i < allLiterals.length; i++) {\r\n    literalsDict[allLiterals[i]] = true\r\n  }\r\n\r\n  return function(data) {\r\n    tokens = []\r\n    if (data !== null) return write(data)\r\n    return end()\r\n  }\r\n\r\n  function token(data) {\r\n    if (data.length) {\r\n      tokens.push({\r\n        type: map[mode]\r\n      , data: data\r\n      , position: start\r\n      , line: line\r\n      , column: col\r\n      })\r\n    }\r\n  }\r\n\r\n  function write(chunk) {\r\n    i = 0\r\n\r\n    if (chunk.toString) chunk = chunk.toString()\r\n\r\n    input += chunk.replace(/\\r\\n/g, '\\n')\r\n    len = input.length\r\n\r\n\r\n    var last\r\n\r\n    while(c = input[i], i < len) {\r\n      last = i\r\n\r\n      switch(mode) {\r\n        case BLOCK_COMMENT: i = block_comment(); break\r\n        case LINE_COMMENT: i = line_comment(); break\r\n        case PREPROCESSOR: i = preprocessor(); break\r\n        case OPERATOR: i = operator(); break\r\n        case INTEGER: i = integer(); break\r\n        case HEX: i = hex(); break\r\n        case FLOAT: i = decimal(); break\r\n        case TOKEN: i = readtoken(); break\r\n        case WHITESPACE: i = whitespace(); break\r\n        case NORMAL: i = normal(); break\r\n      }\r\n\r\n      if(last !== i) {\r\n        switch(input[last]) {\r\n          case '\\n': col = 0; ++line; break\r\n          default: ++col; break\r\n        }\r\n      }\r\n    }\r\n\r\n    total += i\r\n    input = input.slice(i)\r\n    return tokens\r\n  }\r\n\r\n  function end(chunk) {\r\n    if(content.length) {\r\n      token(content.join(''))\r\n    }\r\n\r\n    mode = EOF\r\n    token('(eof)')\r\n    return tokens\r\n  }\r\n\r\n  function normal() {\r\n    content = content.length ? [] : content\r\n\r\n    if(last === '/' && c === '*') {\r\n      start = total + i - 1\r\n      mode = BLOCK_COMMENT\r\n      last = c\r\n      return i + 1\r\n    }\r\n\r\n    if(last === '/' && c === '/') {\r\n      start = total + i - 1\r\n      mode = LINE_COMMENT\r\n      last = c\r\n      return i + 1\r\n    }\r\n\r\n    if(c === '#') {\r\n      mode = PREPROCESSOR\r\n      start = total + i\r\n      return i\r\n    }\r\n\r\n    if(/\\s/.test(c)) {\r\n      mode = WHITESPACE\r\n      start = total + i\r\n      return i\r\n    }\r\n\r\n    isnum = /\\d/.test(c)\r\n    isoperator = /[^\\w_]/.test(c)\r\n\r\n    start = total + i\r\n    mode = isnum ? INTEGER : isoperator ? OPERATOR : TOKEN\r\n    return i\r\n  }\r\n\r\n  function whitespace() {\r\n    if(/[^\\s]/g.test(c)) {\r\n      token(content.join(''))\r\n      mode = NORMAL\r\n      return i\r\n    }\r\n    content.push(c)\r\n    last = c\r\n    return i + 1\r\n  }\r\n\r\n  function preprocessor() {\r\n    if((c === '\\r' || c === '\\n') && last !== '\\\\') {\r\n      token(content.join(''))\r\n      mode = NORMAL\r\n      return i\r\n    }\r\n    content.push(c)\r\n    last = c\r\n    return i + 1\r\n  }\r\n\r\n  function line_comment() {\r\n    return preprocessor()\r\n  }\r\n\r\n  function block_comment() {\r\n    if(c === '/' && last === '*') {\r\n      content.push(c)\r\n      token(content.join(''))\r\n      mode = NORMAL\r\n      return i + 1\r\n    }\r\n\r\n    content.push(c)\r\n    last = c\r\n    return i + 1\r\n  }\r\n\r\n  function operator() {\r\n    if(last === '.' && /\\d/.test(c)) {\r\n      mode = FLOAT\r\n      return i\r\n    }\r\n\r\n    if(last === '/' && c === '*') {\r\n      mode = BLOCK_COMMENT\r\n      return i\r\n    }\r\n\r\n    if(last === '/' && c === '/') {\r\n      mode = LINE_COMMENT\r\n      return i\r\n    }\r\n\r\n    if(c === '.' && content.length) {\r\n      while(determine_operator(content));\r\n\r\n      mode = FLOAT\r\n      return i\r\n    }\r\n\r\n    if(c === ';' || c === ')' || c === '(') {\r\n      if(content.length) while(determine_operator(content));\r\n      token(c)\r\n      mode = NORMAL\r\n      return i + 1\r\n    }\r\n\r\n    var is_composite_operator = content.length === 2 && c !== '='\r\n    if(/[\\w_\\d\\s]/.test(c) || is_composite_operator) {\r\n      while(determine_operator(content));\r\n      mode = NORMAL\r\n      return i\r\n    }\r\n\r\n    content.push(c)\r\n    last = c\r\n    return i + 1\r\n  }\r\n\r\n  function determine_operator(buf) {\r\n    var j = 0\r\n      , idx\r\n      , res\r\n\r\n    do {\r\n      idx = operators.indexOf(buf.slice(0, buf.length + j).join(''))\r\n      res = operators[idx]\r\n\r\n      if(idx === -1) {\r\n        if(j-- + buf.length > 0) continue\r\n        res = buf.slice(0, 1).join('')\r\n      }\r\n\r\n      token(res)\r\n\r\n      start += res.length\r\n      content = content.slice(res.length)\r\n      return content.length\r\n    } while(1)\r\n  }\r\n\r\n  function hex() {\r\n    if(/[^a-fA-F0-9]/.test(c)) {\r\n      token(content.join(''))\r\n      mode = NORMAL\r\n      return i\r\n    }\r\n\r\n    content.push(c)\r\n    last = c\r\n    return i + 1\r\n  }\r\n\r\n  function integer() {\r\n    if(c === '.') {\r\n      content.push(c)\r\n      mode = FLOAT\r\n      last = c\r\n      return i + 1\r\n    }\r\n\r\n    if(/[eE]/.test(c)) {\r\n      content.push(c)\r\n      mode = FLOAT\r\n      last = c\r\n      return i + 1\r\n    }\r\n\r\n    if(c === 'x' && content.length === 1 && content[0] === '0') {\r\n      mode = HEX\r\n      content.push(c)\r\n      last = c\r\n      return i + 1\r\n    }\r\n\r\n    if(/[^\\d]/.test(c)) {\r\n      token(content.join(''))\r\n      mode = NORMAL\r\n      return i\r\n    }\r\n\r\n    content.push(c)\r\n    last = c\r\n    return i + 1\r\n  }\r\n\r\n  function decimal() {\r\n    if(c === 'f') {\r\n      content.push(c)\r\n      last = c\r\n      i += 1\r\n    }\r\n\r\n    if(/[eE]/.test(c)) {\r\n      content.push(c)\r\n      last = c\r\n      return i + 1\r\n    }\r\n\r\n    if ((c === '-' || c === '+') && /[eE]/.test(last)) {\r\n      content.push(c)\r\n      last = c\r\n      return i + 1\r\n    }\r\n\r\n    if(/[^\\d]/.test(c)) {\r\n      token(content.join(''))\r\n      mode = NORMAL\r\n      return i\r\n    }\r\n\r\n    content.push(c)\r\n    last = c\r\n    return i + 1\r\n  }\r\n\r\n  function readtoken() {\r\n    if(/[^\\d\\w_]/.test(c)) {\r\n      var contentstr = content.join('')\r\n      if(literalsDict[contentstr]) {\r\n        mode = KEYWORD\r\n      } else if(builtinsDict[contentstr]) {\r\n        mode = BUILTIN\r\n      } else {\r\n        mode = IDENT\r\n      }\r\n      token(content.join(''))\r\n      mode = NORMAL\r\n      return i\r\n    }\r\n    content.push(c)\r\n    last = c\r\n    return i + 1\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}