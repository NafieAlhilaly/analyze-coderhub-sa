{"ast":null,"code":"'use strict';\n\nvar isArray = Array.isArray;\nvar ab = ArrayBuffer;\nvar dv = DataView;\n\nfunction isTypedArray(a) {\n  return ab.isView(a) && !(a instanceof dv);\n}\n\nexports.isTypedArray = isTypedArray;\n\nfunction isArrayOrTypedArray(a) {\n  return isArray(a) || isTypedArray(a);\n}\n\nexports.isArrayOrTypedArray = isArrayOrTypedArray;\n/*\n * Test whether an input object is 1D.\n *\n * Assumes we already know the object is an array.\n *\n * Looks only at the first element, if the dimensionality is\n * not consistent we won't figure that out here.\n */\n\nfunction isArray1D(a) {\n  return !isArrayOrTypedArray(a[0]);\n}\n\nexports.isArray1D = isArray1D;\n/*\n * Ensures an array has the right amount of storage space. If it doesn't\n * exist, it creates an array. If it does exist, it returns it if too\n * short or truncates it in-place.\n *\n * The goal is to just reuse memory to avoid a bit of excessive garbage\n * collection.\n */\n\nexports.ensureArray = function (out, n) {\n  // TODO: typed array support here? This is only used in\n  // traces/carpet/compute_control_points\n  if (!isArray(out)) out = []; // If too long, truncate. (If too short, it will grow\n  // automatically so we don't care about that case)\n\n  out.length = n;\n  return out;\n};\n/*\n * TypedArray-compatible concatenation of n arrays\n * if all arrays are the same type it will preserve that type,\n * otherwise it falls back on Array.\n * Also tries to avoid copying, in case one array has zero length\n * But never mutates an existing array\n */\n\n\nexports.concat = function () {\n  var args = [];\n  var allArray = true;\n  var totalLen = 0;\n\n  var _constructor, arg0, i, argi, posi, leni, out, j;\n\n  for (i = 0; i < arguments.length; i++) {\n    argi = arguments[i];\n    leni = argi.length;\n\n    if (leni) {\n      if (arg0) args.push(argi);else {\n        arg0 = argi;\n        posi = leni;\n      }\n\n      if (isArray(argi)) {\n        _constructor = false;\n      } else {\n        allArray = false;\n\n        if (!totalLen) {\n          _constructor = argi.constructor;\n        } else if (_constructor !== argi.constructor) {\n          // TODO: in principle we could upgrade here,\n          // ie keep typed array but convert all to Float64Array?\n          _constructor = false;\n        }\n      }\n\n      totalLen += leni;\n    }\n  }\n\n  if (!totalLen) return [];\n  if (!args.length) return arg0;\n  if (allArray) return arg0.concat.apply(arg0, args);\n\n  if (_constructor) {\n    // matching typed arrays\n    out = new _constructor(totalLen);\n    out.set(arg0);\n\n    for (i = 0; i < args.length; i++) {\n      argi = args[i];\n      out.set(argi, posi);\n      posi += argi.length;\n    }\n\n    return out;\n  } // mismatched types or Array + typed\n\n\n  out = new Array(totalLen);\n\n  for (j = 0; j < arg0.length; j++) out[j] = arg0[j];\n\n  for (i = 0; i < args.length; i++) {\n    argi = args[i];\n\n    for (j = 0; j < argi.length; j++) out[posi + j] = argi[j];\n\n    posi += j;\n  }\n\n  return out;\n};\n\nexports.maxRowLength = function (z) {\n  return _rowLength(z, Math.max, 0);\n};\n\nexports.minRowLength = function (z) {\n  return _rowLength(z, Math.min, Infinity);\n};\n\nfunction _rowLength(z, fn, len0) {\n  if (isArrayOrTypedArray(z)) {\n    if (isArrayOrTypedArray(z[0])) {\n      var len = len0;\n\n      for (var i = 0; i < z.length; i++) {\n        len = fn(len, z[i].length);\n      }\n\n      return len;\n    } else {\n      return z.length;\n    }\n  }\n\n  return 0;\n}","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/plotly.js/src/lib/array.js"],"names":["isArray","Array","ab","ArrayBuffer","dv","DataView","isTypedArray","a","isView","exports","isArrayOrTypedArray","isArray1D","ensureArray","out","n","length","concat","args","allArray","totalLen","_constructor","arg0","i","argi","posi","leni","j","arguments","push","constructor","apply","set","maxRowLength","z","_rowLength","Math","max","minRowLength","min","Infinity","fn","len0","len"],"mappings":"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","sourcesContent":["'use strict';\n\nvar isArray = Array.isArray;\n\nvar ab = ArrayBuffer;\nvar dv = DataView;\n\nfunction isTypedArray(a) {\n    return ab.isView(a) && !(a instanceof dv);\n}\nexports.isTypedArray = isTypedArray;\n\nfunction isArrayOrTypedArray(a) {\n    return isArray(a) || isTypedArray(a);\n}\nexports.isArrayOrTypedArray = isArrayOrTypedArray;\n\n/*\n * Test whether an input object is 1D.\n *\n * Assumes we already know the object is an array.\n *\n * Looks only at the first element, if the dimensionality is\n * not consistent we won't figure that out here.\n */\nfunction isArray1D(a) {\n    return !isArrayOrTypedArray(a[0]);\n}\nexports.isArray1D = isArray1D;\n\n/*\n * Ensures an array has the right amount of storage space. If it doesn't\n * exist, it creates an array. If it does exist, it returns it if too\n * short or truncates it in-place.\n *\n * The goal is to just reuse memory to avoid a bit of excessive garbage\n * collection.\n */\nexports.ensureArray = function(out, n) {\n    // TODO: typed array support here? This is only used in\n    // traces/carpet/compute_control_points\n    if(!isArray(out)) out = [];\n\n    // If too long, truncate. (If too short, it will grow\n    // automatically so we don't care about that case)\n    out.length = n;\n\n    return out;\n};\n\n/*\n * TypedArray-compatible concatenation of n arrays\n * if all arrays are the same type it will preserve that type,\n * otherwise it falls back on Array.\n * Also tries to avoid copying, in case one array has zero length\n * But never mutates an existing array\n */\nexports.concat = function() {\n    var args = [];\n    var allArray = true;\n    var totalLen = 0;\n\n    var _constructor, arg0, i, argi, posi, leni, out, j;\n\n    for(i = 0; i < arguments.length; i++) {\n        argi = arguments[i];\n        leni = argi.length;\n        if(leni) {\n            if(arg0) args.push(argi);\n            else {\n                arg0 = argi;\n                posi = leni;\n            }\n\n            if(isArray(argi)) {\n                _constructor = false;\n            } else {\n                allArray = false;\n                if(!totalLen) {\n                    _constructor = argi.constructor;\n                } else if(_constructor !== argi.constructor) {\n                    // TODO: in principle we could upgrade here,\n                    // ie keep typed array but convert all to Float64Array?\n                    _constructor = false;\n                }\n            }\n\n            totalLen += leni;\n        }\n    }\n\n    if(!totalLen) return [];\n    if(!args.length) return arg0;\n\n    if(allArray) return arg0.concat.apply(arg0, args);\n    if(_constructor) {\n        // matching typed arrays\n        out = new _constructor(totalLen);\n        out.set(arg0);\n        for(i = 0; i < args.length; i++) {\n            argi = args[i];\n            out.set(argi, posi);\n            posi += argi.length;\n        }\n        return out;\n    }\n\n    // mismatched types or Array + typed\n    out = new Array(totalLen);\n    for(j = 0; j < arg0.length; j++) out[j] = arg0[j];\n    for(i = 0; i < args.length; i++) {\n        argi = args[i];\n        for(j = 0; j < argi.length; j++) out[posi + j] = argi[j];\n        posi += j;\n    }\n    return out;\n};\n\nexports.maxRowLength = function(z) {\n    return _rowLength(z, Math.max, 0);\n};\n\nexports.minRowLength = function(z) {\n    return _rowLength(z, Math.min, Infinity);\n};\n\nfunction _rowLength(z, fn, len0) {\n    if(isArrayOrTypedArray(z)) {\n        if(isArrayOrTypedArray(z[0])) {\n            var len = len0;\n            for(var i = 0; i < z.length; i++) {\n                len = fn(len, z[i].length);\n            }\n            return len;\n        } else {\n            return z.length;\n        }\n    }\n    return 0;\n}\n"]},"metadata":{},"sourceType":"script"}