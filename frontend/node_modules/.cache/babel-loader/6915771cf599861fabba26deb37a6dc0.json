{"ast":null,"code":"'use strict';\n\nvar Lib = require('../../lib');\n\nvar BADNUM = require('../../constants/numerical').BADNUM;\n\nvar alignPeriod = require('../../plots/cartesian/align_period');\n\nmodule.exports = function convertColumnData(trace, ax1, ax2, var1Name, var2Name, arrayVarNames) {\n  var colLen = trace._length;\n  var col1 = ax1.makeCalcdata(trace, var1Name);\n  var col2 = ax2.makeCalcdata(trace, var2Name);\n  col1 = alignPeriod(trace, ax1, var1Name, col1).vals;\n  col2 = alignPeriod(trace, ax2, var2Name, col2).vals;\n  var textCol = trace.text;\n  var hasColumnText = textCol !== undefined && Lib.isArray1D(textCol);\n  var hoverTextCol = trace.hovertext;\n  var hasColumnHoverText = hoverTextCol !== undefined && Lib.isArray1D(hoverTextCol);\n  var i, j;\n  var col1dv = Lib.distinctVals(col1);\n  var col1vals = col1dv.vals;\n  var col2dv = Lib.distinctVals(col2);\n  var col2vals = col2dv.vals;\n  var newArrays = [];\n  var text;\n  var hovertext;\n  var nI = col2vals.length;\n  var nJ = col1vals.length;\n\n  for (i = 0; i < arrayVarNames.length; i++) {\n    newArrays[i] = Lib.init2dArray(nI, nJ);\n  }\n\n  if (hasColumnText) {\n    text = Lib.init2dArray(nI, nJ);\n  }\n\n  if (hasColumnHoverText) {\n    hovertext = Lib.init2dArray(nI, nJ);\n  }\n\n  var after2before = Lib.init2dArray(nI, nJ);\n\n  for (i = 0; i < colLen; i++) {\n    if (col1[i] !== BADNUM && col2[i] !== BADNUM) {\n      var i1 = Lib.findBin(col1[i] + col1dv.minDiff / 2, col1vals);\n      var i2 = Lib.findBin(col2[i] + col2dv.minDiff / 2, col2vals);\n\n      for (j = 0; j < arrayVarNames.length; j++) {\n        var arrayVarName = arrayVarNames[j];\n        var arrayVar = trace[arrayVarName];\n        var newArray = newArrays[j];\n        newArray[i2][i1] = arrayVar[i];\n        after2before[i2][i1] = i;\n      }\n\n      if (hasColumnText) text[i2][i1] = textCol[i];\n      if (hasColumnHoverText) hovertext[i2][i1] = hoverTextCol[i];\n    }\n  }\n\n  trace['_' + var1Name] = col1vals;\n  trace['_' + var2Name] = col2vals;\n\n  for (j = 0; j < arrayVarNames.length; j++) {\n    trace['_' + arrayVarNames[j]] = newArrays[j];\n  }\n\n  if (hasColumnText) trace._text = text;\n  if (hasColumnHoverText) trace._hovertext = hovertext;\n\n  if (ax1 && ax1.type === 'category') {\n    trace['_' + var1Name + 'CategoryMap'] = col1vals.map(function (v) {\n      return ax1._categories[v];\n    });\n  }\n\n  if (ax2 && ax2.type === 'category') {\n    trace['_' + var2Name + 'CategoryMap'] = col2vals.map(function (v) {\n      return ax2._categories[v];\n    });\n  }\n\n  trace._after2before = after2before;\n};","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/plotly.js/src/traces/heatmap/convert_column_xyz.js"],"names":["Lib","require","BADNUM","alignPeriod","module","exports","convertColumnData","trace","ax1","ax2","var1Name","var2Name","arrayVarNames","colLen","_length","col1","makeCalcdata","col2","vals","textCol","text","hasColumnText","undefined","isArray1D","hoverTextCol","hovertext","hasColumnHoverText","i","j","col1dv","distinctVals","col1vals","col2dv","col2vals","newArrays","nI","length","nJ","init2dArray","after2before","i1","findBin","minDiff","i2","arrayVarName","arrayVar","newArray","_text","_hovertext","type","map","v","_categories","_after2before"],"mappings":"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","sourcesContent":["'use strict';\n\nvar Lib = require('../../lib');\nvar BADNUM = require('../../constants/numerical').BADNUM;\nvar alignPeriod = require('../../plots/cartesian/align_period');\n\nmodule.exports = function convertColumnData(trace, ax1, ax2, var1Name, var2Name, arrayVarNames) {\n    var colLen = trace._length;\n    var col1 = ax1.makeCalcdata(trace, var1Name);\n    var col2 = ax2.makeCalcdata(trace, var2Name);\n    col1 = alignPeriod(trace, ax1, var1Name, col1).vals;\n    col2 = alignPeriod(trace, ax2, var2Name, col2).vals;\n\n    var textCol = trace.text;\n    var hasColumnText = (textCol !== undefined && Lib.isArray1D(textCol));\n    var hoverTextCol = trace.hovertext;\n    var hasColumnHoverText = (hoverTextCol !== undefined && Lib.isArray1D(hoverTextCol));\n    var i, j;\n\n    var col1dv = Lib.distinctVals(col1);\n    var col1vals = col1dv.vals;\n    var col2dv = Lib.distinctVals(col2);\n    var col2vals = col2dv.vals;\n    var newArrays = [];\n    var text;\n    var hovertext;\n\n    var nI = col2vals.length;\n    var nJ = col1vals.length;\n\n    for(i = 0; i < arrayVarNames.length; i++) {\n        newArrays[i] = Lib.init2dArray(nI, nJ);\n    }\n\n    if(hasColumnText) {\n        text = Lib.init2dArray(nI, nJ);\n    }\n    if(hasColumnHoverText) {\n        hovertext = Lib.init2dArray(nI, nJ);\n    }\n\n    var after2before = Lib.init2dArray(nI, nJ);\n\n    for(i = 0; i < colLen; i++) {\n        if(col1[i] !== BADNUM && col2[i] !== BADNUM) {\n            var i1 = Lib.findBin(col1[i] + col1dv.minDiff / 2, col1vals);\n            var i2 = Lib.findBin(col2[i] + col2dv.minDiff / 2, col2vals);\n\n            for(j = 0; j < arrayVarNames.length; j++) {\n                var arrayVarName = arrayVarNames[j];\n                var arrayVar = trace[arrayVarName];\n                var newArray = newArrays[j];\n                newArray[i2][i1] = arrayVar[i];\n                after2before[i2][i1] = i;\n            }\n\n            if(hasColumnText) text[i2][i1] = textCol[i];\n            if(hasColumnHoverText) hovertext[i2][i1] = hoverTextCol[i];\n        }\n    }\n\n    trace['_' + var1Name] = col1vals;\n    trace['_' + var2Name] = col2vals;\n    for(j = 0; j < arrayVarNames.length; j++) {\n        trace['_' + arrayVarNames[j]] = newArrays[j];\n    }\n    if(hasColumnText) trace._text = text;\n    if(hasColumnHoverText) trace._hovertext = hovertext;\n\n    if(ax1 && ax1.type === 'category') {\n        trace['_' + var1Name + 'CategoryMap'] = col1vals.map(function(v) { return ax1._categories[v];});\n    }\n\n    if(ax2 && ax2.type === 'category') {\n        trace['_' + var2Name + 'CategoryMap'] = col2vals.map(function(v) { return ax2._categories[v];});\n    }\n\n    trace._after2before = after2before;\n};\n"]},"metadata":{},"sourceType":"script"}