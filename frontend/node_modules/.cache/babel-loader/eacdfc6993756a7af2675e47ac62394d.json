{"ast":null,"code":"'use strict';\n\nvar d3 = require('@plotly/d3');\n\nvar Color = require('../../components/color');\n\nvar Lib = require('../../lib');\n\nvar helpers = require('../sunburst/helpers');\n\nvar resizeText = require('../bar/uniform_text').resizeText;\n\nfunction style(gd) {\n  var s = gd._fullLayout._treemaplayer.selectAll('.trace');\n\n  resizeText(gd, s, 'treemap');\n  s.each(function (cd) {\n    var gTrace = d3.select(this);\n    var cd0 = cd[0];\n    var trace = cd0.trace;\n    gTrace.style('opacity', trace.opacity);\n    gTrace.selectAll('path.surface').each(function (pt) {\n      d3.select(this).call(styleOne, pt, trace, {\n        hovered: false\n      });\n    });\n  });\n}\n\nfunction styleOne(s, pt, trace, opts) {\n  var hovered = (opts || {}).hovered;\n  var cdi = pt.data.data;\n  var ptNumber = cdi.i;\n  var lineColor;\n  var lineWidth;\n  var fillColor = cdi.color;\n  var isRoot = helpers.isHierarchyRoot(pt);\n  var opacity = 1;\n\n  if (hovered) {\n    lineColor = trace._hovered.marker.line.color;\n    lineWidth = trace._hovered.marker.line.width;\n  } else {\n    if (isRoot && fillColor === trace.root.color) {\n      opacity = 100;\n      lineColor = 'rgba(0,0,0,0)';\n      lineWidth = 0;\n    } else {\n      lineColor = Lib.castOption(trace, ptNumber, 'marker.line.color') || Color.defaultLine;\n      lineWidth = Lib.castOption(trace, ptNumber, 'marker.line.width') || 0;\n\n      if (!trace._hasColorscale && !pt.onPathbar) {\n        var depthfade = trace.marker.depthfade;\n\n        if (depthfade) {\n          var fadedColor = Color.combine(Color.addOpacity(trace._backgroundColor, 0.75), fillColor);\n          var n;\n\n          if (depthfade === true) {\n            var maxDepth = helpers.getMaxDepth(trace);\n\n            if (isFinite(maxDepth)) {\n              if (helpers.isLeaf(pt)) {\n                n = 0;\n              } else {\n                n = trace._maxVisibleLayers - (pt.data.depth - trace._entryDepth);\n              }\n            } else {\n              n = pt.data.height + 1;\n            }\n          } else {\n            // i.e. case of depthfade === 'reversed'\n            n = pt.data.depth - trace._entryDepth;\n            if (!trace._atRootLevel) n++;\n          }\n\n          if (n > 0) {\n            for (var i = 0; i < n; i++) {\n              var ratio = 0.5 * i / n;\n              fillColor = Color.combine(Color.addOpacity(fadedColor, ratio), fillColor);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  s.style('stroke-width', lineWidth).call(Color.fill, fillColor).call(Color.stroke, lineColor).style('opacity', opacity);\n}\n\nmodule.exports = {\n  style: style,\n  styleOne: styleOne\n};","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/plotly.js/src/traces/treemap/style.js"],"names":["d3","require","Color","Lib","helpers","resizeText","style","gd","s","_fullLayout","_treemaplayer","selectAll","each","cd","gTrace","select","cd0","trace","opacity","pt","call","styleOne","hovered","opts","cdi","data","ptNumber","i","lineColor","lineWidth","fillColor","color","isRoot","isHierarchyRoot","_hovered","marker","line","width","root","castOption","defaultLine","_hasColorscale","onPathbar","depthfade","fadedColor","combine","addOpacity","_backgroundColor","n","maxDepth","getMaxDepth","isFinite","isLeaf","_maxVisibleLayers","depth","_entryDepth","height","_atRootLevel","ratio","fill","stroke","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar d3 = require('@plotly/d3');\nvar Color = require('../../components/color');\nvar Lib = require('../../lib');\nvar helpers = require('../sunburst/helpers');\nvar resizeText = require('../bar/uniform_text').resizeText;\n\nfunction style(gd) {\n    var s = gd._fullLayout._treemaplayer.selectAll('.trace');\n    resizeText(gd, s, 'treemap');\n\n    s.each(function(cd) {\n        var gTrace = d3.select(this);\n        var cd0 = cd[0];\n        var trace = cd0.trace;\n\n        gTrace.style('opacity', trace.opacity);\n\n        gTrace.selectAll('path.surface').each(function(pt) {\n            d3.select(this).call(styleOne, pt, trace, {\n                hovered: false\n            });\n        });\n    });\n}\n\nfunction styleOne(s, pt, trace, opts) {\n    var hovered = (opts || {}).hovered;\n    var cdi = pt.data.data;\n    var ptNumber = cdi.i;\n    var lineColor;\n    var lineWidth;\n    var fillColor = cdi.color;\n    var isRoot = helpers.isHierarchyRoot(pt);\n    var opacity = 1;\n\n    if(hovered) {\n        lineColor = trace._hovered.marker.line.color;\n        lineWidth = trace._hovered.marker.line.width;\n    } else {\n        if(isRoot && fillColor === trace.root.color) {\n            opacity = 100;\n            lineColor = 'rgba(0,0,0,0)';\n            lineWidth = 0;\n        } else {\n            lineColor = Lib.castOption(trace, ptNumber, 'marker.line.color') || Color.defaultLine;\n            lineWidth = Lib.castOption(trace, ptNumber, 'marker.line.width') || 0;\n\n            if(!trace._hasColorscale && !pt.onPathbar) {\n                var depthfade = trace.marker.depthfade;\n                if(depthfade) {\n                    var fadedColor = Color.combine(Color.addOpacity(trace._backgroundColor, 0.75), fillColor);\n                    var n;\n\n                    if(depthfade === true) {\n                        var maxDepth = helpers.getMaxDepth(trace);\n                        if(isFinite(maxDepth)) {\n                            if(helpers.isLeaf(pt)) {\n                                n = 0;\n                            } else {\n                                n = (trace._maxVisibleLayers) - (pt.data.depth - trace._entryDepth);\n                            }\n                        } else {\n                            n = pt.data.height + 1;\n                        }\n                    } else { // i.e. case of depthfade === 'reversed'\n                        n = pt.data.depth - trace._entryDepth;\n                        if(!trace._atRootLevel) n++;\n                    }\n\n                    if(n > 0) {\n                        for(var i = 0; i < n; i++) {\n                            var ratio = 0.5 * i / n;\n                            fillColor = Color.combine(Color.addOpacity(fadedColor, ratio), fillColor);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    s.style('stroke-width', lineWidth)\n        .call(Color.fill, fillColor)\n        .call(Color.stroke, lineColor)\n        .style('opacity', opacity);\n}\n\nmodule.exports = {\n    style: style,\n    styleOne: styleOne\n};\n"]},"metadata":{},"sourceType":"script"}