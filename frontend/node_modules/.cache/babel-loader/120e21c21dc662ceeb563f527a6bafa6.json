{"ast":null,"code":"'use strict';\n\nvar isNumeric = require('fast-isnumeric');\n/**\n * convert a linear value into a logged value, folding negative numbers into\n * the given range\n */\n\n\nmodule.exports = function toLogRange(val, range) {\n  if (val > 0) return Math.log(val) / Math.LN10; // move a negative value reference to a log axis - just put the\n  // result at the lowest range value on the plot (or if the range also went negative,\n  // one millionth of the top of the range)\n\n  var newVal = Math.log(Math.min(range[0], range[1])) / Math.LN10;\n  if (!isNumeric(newVal)) newVal = Math.log(Math.max(range[0], range[1])) / Math.LN10 - 6;\n  return newVal;\n};","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/plotly.js/src/lib/to_log_range.js"],"names":["isNumeric","require","module","exports","toLogRange","val","range","Math","log","LN10","newVal","min","max"],"mappings":"AAAA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,gBAAD,CAAvB;AAEA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,SAASC,UAAT,CAAoBC,GAApB,EAAyBC,KAAzB,EAAgC;AAC7C,MAAGD,GAAG,GAAG,CAAT,EAAY,OAAOE,IAAI,CAACC,GAAL,CAASH,GAAT,IAAgBE,IAAI,CAACE,IAA5B,CADiC,CAG7C;AACA;AACA;;AACA,MAAIC,MAAM,GAAGH,IAAI,CAACC,GAAL,CAASD,IAAI,CAACI,GAAL,CAASL,KAAK,CAAC,CAAD,CAAd,EAAmBA,KAAK,CAAC,CAAD,CAAxB,CAAT,IAAyCC,IAAI,CAACE,IAA3D;AACA,MAAG,CAACT,SAAS,CAACU,MAAD,CAAb,EAAuBA,MAAM,GAAGH,IAAI,CAACC,GAAL,CAASD,IAAI,CAACK,GAAL,CAASN,KAAK,CAAC,CAAD,CAAd,EAAmBA,KAAK,CAAC,CAAD,CAAxB,CAAT,IAAyCC,IAAI,CAACE,IAA9C,GAAqD,CAA9D;AACvB,SAAOC,MAAP;AACH,CATD","sourcesContent":["'use strict';\n\nvar isNumeric = require('fast-isnumeric');\n\n/**\n * convert a linear value into a logged value, folding negative numbers into\n * the given range\n */\nmodule.exports = function toLogRange(val, range) {\n    if(val > 0) return Math.log(val) / Math.LN10;\n\n    // move a negative value reference to a log axis - just put the\n    // result at the lowest range value on the plot (or if the range also went negative,\n    // one millionth of the top of the range)\n    var newVal = Math.log(Math.min(range[0], range[1])) / Math.LN10;\n    if(!isNumeric(newVal)) newVal = Math.log(Math.max(range[0], range[1])) / Math.LN10 - 6;\n    return newVal;\n};\n"]},"metadata":{},"sourceType":"script"}