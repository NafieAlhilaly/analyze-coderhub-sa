{"ast":null,"code":"'use strict';\n\nvar dragHelpers = require('../../dragelement/helpers');\n\nvar drawMode = dragHelpers.drawMode;\nvar openMode = dragHelpers.openMode;\n\nvar constants = require('./constants');\n\nvar i000 = constants.i000;\nvar i090 = constants.i090;\nvar i180 = constants.i180;\nvar i270 = constants.i270;\nvar cos45 = constants.cos45;\nvar sin45 = constants.sin45;\n\nvar cartesianHelpers = require('../../../plots/cartesian/helpers');\n\nvar p2r = cartesianHelpers.p2r;\nvar r2p = cartesianHelpers.r2p;\n\nvar handleOutline = require('../../../plots/cartesian/handle_outline');\n\nvar clearSelect = handleOutline.clearSelect;\n\nvar helpers = require('./helpers');\n\nvar readPaths = helpers.readPaths;\nvar writePaths = helpers.writePaths;\nvar ellipseOver = helpers.ellipseOver;\n\nmodule.exports = function newShapes(outlines, dragOptions) {\n  if (!outlines.length) return;\n  var e = outlines[0][0]; // pick first\n\n  if (!e) return;\n  var d = e.getAttribute('d');\n  var gd = dragOptions.gd;\n  var drwStyle = gd._fullLayout.newshape;\n  var plotinfo = dragOptions.plotinfo;\n  var xaxis = plotinfo.xaxis;\n  var yaxis = plotinfo.yaxis;\n  var xPaper = !!plotinfo.domain || !plotinfo.xaxis;\n  var yPaper = !!plotinfo.domain || !plotinfo.yaxis;\n  var isActiveShape = dragOptions.isActiveShape;\n  var dragmode = dragOptions.dragmode;\n  var shapes = (gd.layout || {}).shapes || [];\n\n  if (!drawMode(dragmode) && isActiveShape !== undefined) {\n    var id = gd._fullLayout._activeShapeIndex;\n\n    if (id < shapes.length) {\n      switch (gd._fullLayout.shapes[id].type) {\n        case 'rect':\n          dragmode = 'drawrect';\n          break;\n\n        case 'circle':\n          dragmode = 'drawcircle';\n          break;\n\n        case 'line':\n          dragmode = 'drawline';\n          break;\n\n        case 'path':\n          var path = shapes[id].path || '';\n\n          if (path[path.length - 1] === 'Z') {\n            dragmode = 'drawclosedpath';\n          } else {\n            dragmode = 'drawopenpath';\n          }\n\n          break;\n      }\n    }\n  }\n\n  var isOpenMode = openMode(dragmode);\n  var polygons = readPaths(d, gd, plotinfo, isActiveShape);\n  var newShape = {\n    editable: true,\n    xref: xPaper ? 'paper' : xaxis._id,\n    yref: yPaper ? 'paper' : yaxis._id,\n    layer: drwStyle.layer,\n    opacity: drwStyle.opacity,\n    line: {\n      color: drwStyle.line.color,\n      width: drwStyle.line.width,\n      dash: drwStyle.line.dash\n    }\n  };\n\n  if (!isOpenMode) {\n    newShape.fillcolor = drwStyle.fillcolor;\n    newShape.fillrule = drwStyle.fillrule;\n  }\n\n  var cell; // line, rect and circle can be in one cell\n  // only define cell if there is single cell\n\n  if (polygons.length === 1) cell = polygons[0];\n\n  if (cell && dragmode === 'drawrect') {\n    newShape.type = 'rect';\n    newShape.x0 = cell[0][1];\n    newShape.y0 = cell[0][2];\n    newShape.x1 = cell[2][1];\n    newShape.y1 = cell[2][2];\n  } else if (cell && dragmode === 'drawline') {\n    newShape.type = 'line';\n    newShape.x0 = cell[0][1];\n    newShape.y0 = cell[0][2];\n    newShape.x1 = cell[1][1];\n    newShape.y1 = cell[1][2];\n  } else if (cell && dragmode === 'drawcircle') {\n    newShape.type = 'circle'; // an ellipse!\n\n    var xA = cell[i000][1];\n    var xB = cell[i090][1];\n    var xC = cell[i180][1];\n    var xD = cell[i270][1];\n    var yA = cell[i000][2];\n    var yB = cell[i090][2];\n    var yC = cell[i180][2];\n    var yD = cell[i270][2];\n    var xDateOrLog = plotinfo.xaxis && (plotinfo.xaxis.type === 'date' || plotinfo.xaxis.type === 'log');\n    var yDateOrLog = plotinfo.yaxis && (plotinfo.yaxis.type === 'date' || plotinfo.yaxis.type === 'log');\n\n    if (xDateOrLog) {\n      xA = r2p(plotinfo.xaxis, xA);\n      xB = r2p(plotinfo.xaxis, xB);\n      xC = r2p(plotinfo.xaxis, xC);\n      xD = r2p(plotinfo.xaxis, xD);\n    }\n\n    if (yDateOrLog) {\n      yA = r2p(plotinfo.yaxis, yA);\n      yB = r2p(plotinfo.yaxis, yB);\n      yC = r2p(plotinfo.yaxis, yC);\n      yD = r2p(plotinfo.yaxis, yD);\n    }\n\n    var x0 = (xB + xD) / 2;\n    var y0 = (yA + yC) / 2;\n    var rx = (xD - xB + xC - xA) / 2;\n    var ry = (yD - yB + yC - yA) / 2;\n    var pos = ellipseOver({\n      x0: x0,\n      y0: y0,\n      x1: x0 + rx * cos45,\n      y1: y0 + ry * sin45\n    });\n\n    if (xDateOrLog) {\n      pos.x0 = p2r(plotinfo.xaxis, pos.x0);\n      pos.x1 = p2r(plotinfo.xaxis, pos.x1);\n    }\n\n    if (yDateOrLog) {\n      pos.y0 = p2r(plotinfo.yaxis, pos.y0);\n      pos.y1 = p2r(plotinfo.yaxis, pos.y1);\n    }\n\n    newShape.x0 = pos.x0;\n    newShape.y0 = pos.y0;\n    newShape.x1 = pos.x1;\n    newShape.y1 = pos.y1;\n  } else {\n    newShape.type = 'path';\n    if (xaxis && yaxis) fixDatesForPaths(polygons, xaxis, yaxis);\n    newShape.path = writePaths(polygons);\n    cell = null;\n  }\n\n  clearSelect(gd);\n  var editHelpers = dragOptions.editHelpers;\n  var modifyItem = (editHelpers || {}).modifyItem;\n  var allShapes = [];\n\n  for (var q = 0; q < shapes.length; q++) {\n    var beforeEdit = gd._fullLayout.shapes[q];\n    allShapes[q] = beforeEdit._input;\n\n    if (isActiveShape !== undefined && q === gd._fullLayout._activeShapeIndex) {\n      var afterEdit = newShape;\n\n      switch (beforeEdit.type) {\n        case 'line':\n        case 'rect':\n        case 'circle':\n          modifyItem('x0', afterEdit.x0);\n          modifyItem('x1', afterEdit.x1);\n          modifyItem('y0', afterEdit.y0);\n          modifyItem('y1', afterEdit.y1);\n          break;\n\n        case 'path':\n          modifyItem('path', afterEdit.path);\n          break;\n      }\n    }\n  }\n\n  if (isActiveShape === undefined) {\n    allShapes.push(newShape); // add new shape\n\n    return allShapes;\n  }\n\n  return editHelpers ? editHelpers.getUpdateObj() : {};\n};\n\nfunction fixDatesForPaths(polygons, xaxis, yaxis) {\n  var xIsDate = xaxis.type === 'date';\n  var yIsDate = yaxis.type === 'date';\n  if (!xIsDate && !yIsDate) return polygons;\n\n  for (var i = 0; i < polygons.length; i++) {\n    for (var j = 0; j < polygons[i].length; j++) {\n      for (var k = 0; k + 2 < polygons[i][j].length; k += 2) {\n        if (xIsDate) polygons[i][j][k + 1] = polygons[i][j][k + 1].replace(' ', '_');\n        if (yIsDate) polygons[i][j][k + 2] = polygons[i][j][k + 2].replace(' ', '_');\n      }\n    }\n  }\n\n  return polygons;\n}","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/plotly.js/src/components/shapes/draw_newshape/newshapes.js"],"names":["dragHelpers","require","drawMode","openMode","constants","i000","i090","i180","i270","cos45","sin45","cartesianHelpers","p2r","r2p","handleOutline","clearSelect","helpers","readPaths","writePaths","ellipseOver","module","exports","newShapes","outlines","dragOptions","length","e","d","getAttribute","gd","drwStyle","_fullLayout","newshape","plotinfo","xaxis","yaxis","xPaper","domain","yPaper","isActiveShape","dragmode","shapes","layout","undefined","id","_activeShapeIndex","type","path","isOpenMode","polygons","newShape","editable","xref","_id","yref","layer","opacity","line","color","width","dash","fillcolor","fillrule","cell","x0","y0","x1","y1","xA","xB","xC","xD","yA","yB","yC","yD","xDateOrLog","yDateOrLog","rx","ry","pos","fixDatesForPaths","editHelpers","modifyItem","allShapes","q","beforeEdit","_input","afterEdit","push","getUpdateObj","xIsDate","yIsDate","i","j","k","replace"],"mappings":"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","sourcesContent":["'use strict';\n\nvar dragHelpers = require('../../dragelement/helpers');\nvar drawMode = dragHelpers.drawMode;\nvar openMode = dragHelpers.openMode;\n\nvar constants = require('./constants');\nvar i000 = constants.i000;\nvar i090 = constants.i090;\nvar i180 = constants.i180;\nvar i270 = constants.i270;\nvar cos45 = constants.cos45;\nvar sin45 = constants.sin45;\n\nvar cartesianHelpers = require('../../../plots/cartesian/helpers');\nvar p2r = cartesianHelpers.p2r;\nvar r2p = cartesianHelpers.r2p;\n\nvar handleOutline = require('../../../plots/cartesian/handle_outline');\nvar clearSelect = handleOutline.clearSelect;\n\nvar helpers = require('./helpers');\nvar readPaths = helpers.readPaths;\nvar writePaths = helpers.writePaths;\nvar ellipseOver = helpers.ellipseOver;\n\n\nmodule.exports = function newShapes(outlines, dragOptions) {\n    if(!outlines.length) return;\n    var e = outlines[0][0]; // pick first\n    if(!e) return;\n    var d = e.getAttribute('d');\n\n    var gd = dragOptions.gd;\n    var drwStyle = gd._fullLayout.newshape;\n\n    var plotinfo = dragOptions.plotinfo;\n    var xaxis = plotinfo.xaxis;\n    var yaxis = plotinfo.yaxis;\n    var xPaper = !!plotinfo.domain || !plotinfo.xaxis;\n    var yPaper = !!plotinfo.domain || !plotinfo.yaxis;\n\n    var isActiveShape = dragOptions.isActiveShape;\n    var dragmode = dragOptions.dragmode;\n\n    var shapes = (gd.layout || {}).shapes || [];\n\n    if(!drawMode(dragmode) && isActiveShape !== undefined) {\n        var id = gd._fullLayout._activeShapeIndex;\n        if(id < shapes.length) {\n            switch(gd._fullLayout.shapes[id].type) {\n                case 'rect':\n                    dragmode = 'drawrect';\n                    break;\n                case 'circle':\n                    dragmode = 'drawcircle';\n                    break;\n                case 'line':\n                    dragmode = 'drawline';\n                    break;\n                case 'path':\n                    var path = shapes[id].path || '';\n                    if(path[path.length - 1] === 'Z') {\n                        dragmode = 'drawclosedpath';\n                    } else {\n                        dragmode = 'drawopenpath';\n                    }\n                    break;\n            }\n        }\n    }\n\n    var isOpenMode = openMode(dragmode);\n\n    var polygons = readPaths(d, gd, plotinfo, isActiveShape);\n\n    var newShape = {\n        editable: true,\n\n        xref: xPaper ? 'paper' : xaxis._id,\n        yref: yPaper ? 'paper' : yaxis._id,\n\n        layer: drwStyle.layer,\n        opacity: drwStyle.opacity,\n        line: {\n            color: drwStyle.line.color,\n            width: drwStyle.line.width,\n            dash: drwStyle.line.dash\n        }\n    };\n\n    if(!isOpenMode) {\n        newShape.fillcolor = drwStyle.fillcolor;\n        newShape.fillrule = drwStyle.fillrule;\n    }\n\n    var cell;\n    // line, rect and circle can be in one cell\n    // only define cell if there is single cell\n    if(polygons.length === 1) cell = polygons[0];\n\n    if(\n        cell &&\n        dragmode === 'drawrect'\n    ) {\n        newShape.type = 'rect';\n        newShape.x0 = cell[0][1];\n        newShape.y0 = cell[0][2];\n        newShape.x1 = cell[2][1];\n        newShape.y1 = cell[2][2];\n    } else if(\n        cell &&\n        dragmode === 'drawline'\n    ) {\n        newShape.type = 'line';\n        newShape.x0 = cell[0][1];\n        newShape.y0 = cell[0][2];\n        newShape.x1 = cell[1][1];\n        newShape.y1 = cell[1][2];\n    } else if(\n        cell &&\n        dragmode === 'drawcircle'\n    ) {\n        newShape.type = 'circle'; // an ellipse!\n\n        var xA = cell[i000][1];\n        var xB = cell[i090][1];\n        var xC = cell[i180][1];\n        var xD = cell[i270][1];\n\n        var yA = cell[i000][2];\n        var yB = cell[i090][2];\n        var yC = cell[i180][2];\n        var yD = cell[i270][2];\n\n        var xDateOrLog = plotinfo.xaxis && (\n            plotinfo.xaxis.type === 'date' ||\n            plotinfo.xaxis.type === 'log'\n        );\n\n        var yDateOrLog = plotinfo.yaxis && (\n            plotinfo.yaxis.type === 'date' ||\n            plotinfo.yaxis.type === 'log'\n        );\n\n        if(xDateOrLog) {\n            xA = r2p(plotinfo.xaxis, xA);\n            xB = r2p(plotinfo.xaxis, xB);\n            xC = r2p(plotinfo.xaxis, xC);\n            xD = r2p(plotinfo.xaxis, xD);\n        }\n\n        if(yDateOrLog) {\n            yA = r2p(plotinfo.yaxis, yA);\n            yB = r2p(plotinfo.yaxis, yB);\n            yC = r2p(plotinfo.yaxis, yC);\n            yD = r2p(plotinfo.yaxis, yD);\n        }\n\n        var x0 = (xB + xD) / 2;\n        var y0 = (yA + yC) / 2;\n        var rx = (xD - xB + xC - xA) / 2;\n        var ry = (yD - yB + yC - yA) / 2;\n        var pos = ellipseOver({\n            x0: x0,\n            y0: y0,\n            x1: x0 + rx * cos45,\n            y1: y0 + ry * sin45\n        });\n\n        if(xDateOrLog) {\n            pos.x0 = p2r(plotinfo.xaxis, pos.x0);\n            pos.x1 = p2r(plotinfo.xaxis, pos.x1);\n        }\n\n        if(yDateOrLog) {\n            pos.y0 = p2r(plotinfo.yaxis, pos.y0);\n            pos.y1 = p2r(plotinfo.yaxis, pos.y1);\n        }\n\n        newShape.x0 = pos.x0;\n        newShape.y0 = pos.y0;\n        newShape.x1 = pos.x1;\n        newShape.y1 = pos.y1;\n    } else {\n        newShape.type = 'path';\n        if(xaxis && yaxis) fixDatesForPaths(polygons, xaxis, yaxis);\n        newShape.path = writePaths(polygons);\n        cell = null;\n    }\n\n    clearSelect(gd);\n\n    var editHelpers = dragOptions.editHelpers;\n    var modifyItem = (editHelpers || {}).modifyItem;\n\n    var allShapes = [];\n    for(var q = 0; q < shapes.length; q++) {\n        var beforeEdit = gd._fullLayout.shapes[q];\n        allShapes[q] = beforeEdit._input;\n\n        if(\n            isActiveShape !== undefined &&\n            q === gd._fullLayout._activeShapeIndex\n        ) {\n            var afterEdit = newShape;\n\n            switch(beforeEdit.type) {\n                case 'line':\n                case 'rect':\n                case 'circle':\n                    modifyItem('x0', afterEdit.x0);\n                    modifyItem('x1', afterEdit.x1);\n                    modifyItem('y0', afterEdit.y0);\n                    modifyItem('y1', afterEdit.y1);\n                    break;\n\n                case 'path':\n                    modifyItem('path', afterEdit.path);\n                    break;\n            }\n        }\n    }\n\n    if(isActiveShape === undefined) {\n        allShapes.push(newShape); // add new shape\n        return allShapes;\n    }\n\n    return editHelpers ? editHelpers.getUpdateObj() : {};\n};\n\nfunction fixDatesForPaths(polygons, xaxis, yaxis) {\n    var xIsDate = xaxis.type === 'date';\n    var yIsDate = yaxis.type === 'date';\n    if(!xIsDate && !yIsDate) return polygons;\n\n    for(var i = 0; i < polygons.length; i++) {\n        for(var j = 0; j < polygons[i].length; j++) {\n            for(var k = 0; k + 2 < polygons[i][j].length; k += 2) {\n                if(xIsDate) polygons[i][j][k + 1] = polygons[i][j][k + 1].replace(' ', '_');\n                if(yIsDate) polygons[i][j][k + 2] = polygons[i][j][k + 2].replace(' ', '_');\n            }\n        }\n    }\n\n    return polygons;\n}\n"]},"metadata":{},"sourceType":"script"}