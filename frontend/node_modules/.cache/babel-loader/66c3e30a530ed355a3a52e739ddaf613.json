{"ast":null,"code":"'use strict';\n\nvar Lib = require('../../lib');\n\nvar Axes = require('../../plots/cartesian/axes');\n\nvar handleArrayContainerDefaults = require('../../plots/array_container_defaults');\n\nvar handleAnnotationCommonDefaults = require('../annotations/common_defaults');\n\nvar attributes = require('./attributes');\n\nmodule.exports = function handleDefaults(sceneLayoutIn, sceneLayoutOut, opts) {\n  handleArrayContainerDefaults(sceneLayoutIn, sceneLayoutOut, {\n    name: 'annotations',\n    handleItemDefaults: handleAnnotationDefaults,\n    fullLayout: opts.fullLayout\n  });\n};\n\nfunction handleAnnotationDefaults(annIn, annOut, sceneLayout, opts) {\n  function coerce(attr, dflt) {\n    return Lib.coerce(annIn, annOut, attributes, attr, dflt);\n  }\n\n  function coercePosition(axLetter) {\n    var axName = axLetter + 'axis'; // mock in such way that getFromId grabs correct 3D axis\n\n    var gdMock = {\n      _fullLayout: {}\n    };\n    gdMock._fullLayout[axName] = sceneLayout[axName];\n    return Axes.coercePosition(annOut, gdMock, coerce, axLetter, axLetter, 0.5);\n  }\n\n  var visible = coerce('visible');\n  if (!visible) return;\n  handleAnnotationCommonDefaults(annIn, annOut, opts.fullLayout, coerce);\n  coercePosition('x');\n  coercePosition('y');\n  coercePosition('z'); // if you have one coordinate you should all three\n\n  Lib.noneOrAll(annIn, annOut, ['x', 'y', 'z']); // hard-set here for completeness\n\n  annOut.xref = 'x';\n  annOut.yref = 'y';\n  annOut.zref = 'z';\n  coerce('xanchor');\n  coerce('yanchor');\n  coerce('xshift');\n  coerce('yshift');\n\n  if (annOut.showarrow) {\n    annOut.axref = 'pixel';\n    annOut.ayref = 'pixel'; // TODO maybe default values should be bigger than the 2D case?\n\n    coerce('ax', -10);\n    coerce('ay', -30); // if you have one part of arrow length you should have both\n\n    Lib.noneOrAll(annIn, annOut, ['ax', 'ay']);\n  }\n}","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/plotly.js/src/components/annotations3d/defaults.js"],"names":["Lib","require","Axes","handleArrayContainerDefaults","handleAnnotationCommonDefaults","attributes","module","exports","handleDefaults","sceneLayoutIn","sceneLayoutOut","opts","name","handleItemDefaults","handleAnnotationDefaults","fullLayout","annIn","annOut","sceneLayout","coerce","attr","dflt","coercePosition","axLetter","axName","gdMock","_fullLayout","visible","noneOrAll","xref","yref","zref","showarrow","axref","ayref"],"mappings":"AAAA;;AAEA,IAAIA,GAAG,GAAGC,OAAO,CAAC,WAAD,CAAjB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,4BAAD,CAAlB;;AACA,IAAIE,4BAA4B,GAAGF,OAAO,CAAC,sCAAD,CAA1C;;AACA,IAAIG,8BAA8B,GAAGH,OAAO,CAAC,gCAAD,CAA5C;;AACA,IAAII,UAAU,GAAGJ,OAAO,CAAC,cAAD,CAAxB;;AAEAK,MAAM,CAACC,OAAP,GAAiB,SAASC,cAAT,CAAwBC,aAAxB,EAAuCC,cAAvC,EAAuDC,IAAvD,EAA6D;AAC1ER,EAAAA,4BAA4B,CAACM,aAAD,EAAgBC,cAAhB,EAAgC;AACxDE,IAAAA,IAAI,EAAE,aADkD;AAExDC,IAAAA,kBAAkB,EAAEC,wBAFoC;AAGxDC,IAAAA,UAAU,EAAEJ,IAAI,CAACI;AAHuC,GAAhC,CAA5B;AAKH,CAND;;AAQA,SAASD,wBAAT,CAAkCE,KAAlC,EAAyCC,MAAzC,EAAiDC,WAAjD,EAA8DP,IAA9D,EAAoE;AAChE,WAASQ,MAAT,CAAgBC,IAAhB,EAAsBC,IAAtB,EAA4B;AACxB,WAAOrB,GAAG,CAACmB,MAAJ,CAAWH,KAAX,EAAkBC,MAAlB,EAA0BZ,UAA1B,EAAsCe,IAAtC,EAA4CC,IAA5C,CAAP;AACH;;AAED,WAASC,cAAT,CAAwBC,QAAxB,EAAkC;AAC9B,QAAIC,MAAM,GAAGD,QAAQ,GAAG,MAAxB,CAD8B,CAG9B;;AACA,QAAIE,MAAM,GAAG;AAAEC,MAAAA,WAAW,EAAE;AAAf,KAAb;AACAD,IAAAA,MAAM,CAACC,WAAP,CAAmBF,MAAnB,IAA6BN,WAAW,CAACM,MAAD,CAAxC;AAEA,WAAOtB,IAAI,CAACoB,cAAL,CAAoBL,MAApB,EAA4BQ,MAA5B,EAAoCN,MAApC,EAA4CI,QAA5C,EAAsDA,QAAtD,EAAgE,GAAhE,CAAP;AACH;;AAGD,MAAII,OAAO,GAAGR,MAAM,CAAC,SAAD,CAApB;AACA,MAAG,CAACQ,OAAJ,EAAa;AAEbvB,EAAAA,8BAA8B,CAACY,KAAD,EAAQC,MAAR,EAAgBN,IAAI,CAACI,UAArB,EAAiCI,MAAjC,CAA9B;AAEAG,EAAAA,cAAc,CAAC,GAAD,CAAd;AACAA,EAAAA,cAAc,CAAC,GAAD,CAAd;AACAA,EAAAA,cAAc,CAAC,GAAD,CAAd,CAvBgE,CAyBhE;;AACAtB,EAAAA,GAAG,CAAC4B,SAAJ,CAAcZ,KAAd,EAAqBC,MAArB,EAA6B,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAA7B,EA1BgE,CA4BhE;;AACAA,EAAAA,MAAM,CAACY,IAAP,GAAc,GAAd;AACAZ,EAAAA,MAAM,CAACa,IAAP,GAAc,GAAd;AACAb,EAAAA,MAAM,CAACc,IAAP,GAAc,GAAd;AAEAZ,EAAAA,MAAM,CAAC,SAAD,CAAN;AACAA,EAAAA,MAAM,CAAC,SAAD,CAAN;AACAA,EAAAA,MAAM,CAAC,QAAD,CAAN;AACAA,EAAAA,MAAM,CAAC,QAAD,CAAN;;AAEA,MAAGF,MAAM,CAACe,SAAV,EAAqB;AACjBf,IAAAA,MAAM,CAACgB,KAAP,GAAe,OAAf;AACAhB,IAAAA,MAAM,CAACiB,KAAP,GAAe,OAAf,CAFiB,CAIjB;;AACAf,IAAAA,MAAM,CAAC,IAAD,EAAO,CAAC,EAAR,CAAN;AACAA,IAAAA,MAAM,CAAC,IAAD,EAAO,CAAC,EAAR,CAAN,CANiB,CAQjB;;AACAnB,IAAAA,GAAG,CAAC4B,SAAJ,CAAcZ,KAAd,EAAqBC,MAArB,EAA6B,CAAC,IAAD,EAAO,IAAP,CAA7B;AACH;AACJ","sourcesContent":["'use strict';\n\nvar Lib = require('../../lib');\nvar Axes = require('../../plots/cartesian/axes');\nvar handleArrayContainerDefaults = require('../../plots/array_container_defaults');\nvar handleAnnotationCommonDefaults = require('../annotations/common_defaults');\nvar attributes = require('./attributes');\n\nmodule.exports = function handleDefaults(sceneLayoutIn, sceneLayoutOut, opts) {\n    handleArrayContainerDefaults(sceneLayoutIn, sceneLayoutOut, {\n        name: 'annotations',\n        handleItemDefaults: handleAnnotationDefaults,\n        fullLayout: opts.fullLayout\n    });\n};\n\nfunction handleAnnotationDefaults(annIn, annOut, sceneLayout, opts) {\n    function coerce(attr, dflt) {\n        return Lib.coerce(annIn, annOut, attributes, attr, dflt);\n    }\n\n    function coercePosition(axLetter) {\n        var axName = axLetter + 'axis';\n\n        // mock in such way that getFromId grabs correct 3D axis\n        var gdMock = { _fullLayout: {} };\n        gdMock._fullLayout[axName] = sceneLayout[axName];\n\n        return Axes.coercePosition(annOut, gdMock, coerce, axLetter, axLetter, 0.5);\n    }\n\n\n    var visible = coerce('visible');\n    if(!visible) return;\n\n    handleAnnotationCommonDefaults(annIn, annOut, opts.fullLayout, coerce);\n\n    coercePosition('x');\n    coercePosition('y');\n    coercePosition('z');\n\n    // if you have one coordinate you should all three\n    Lib.noneOrAll(annIn, annOut, ['x', 'y', 'z']);\n\n    // hard-set here for completeness\n    annOut.xref = 'x';\n    annOut.yref = 'y';\n    annOut.zref = 'z';\n\n    coerce('xanchor');\n    coerce('yanchor');\n    coerce('xshift');\n    coerce('yshift');\n\n    if(annOut.showarrow) {\n        annOut.axref = 'pixel';\n        annOut.ayref = 'pixel';\n\n        // TODO maybe default values should be bigger than the 2D case?\n        coerce('ax', -10);\n        coerce('ay', -30);\n\n        // if you have one part of arrow length you should have both\n        Lib.noneOrAll(annIn, annOut, ['ax', 'ay']);\n    }\n}\n"]},"metadata":{},"sourceType":"script"}