{"ast":null,"code":"'use strict';\n\nvar Lib = require('../../lib');\n\nvar Template = require('../../plot_api/plot_template');\n\nvar axisIds = require('../../plots/cartesian/axis_ids');\n\nvar attributes = require('./attributes');\n\nvar oppAxisAttrs = require('./oppaxis_attributes');\n\nmodule.exports = function handleDefaults(layoutIn, layoutOut, axName) {\n  var axIn = layoutIn[axName];\n  var axOut = layoutOut[axName];\n  if (!(axIn.rangeslider || layoutOut._requestRangeslider[axOut._id])) return; // not super proud of this (maybe store _ in axis object instead\n\n  if (!Lib.isPlainObject(axIn.rangeslider)) {\n    axIn.rangeslider = {};\n  }\n\n  var containerIn = axIn.rangeslider;\n  var containerOut = Template.newContainer(axOut, 'rangeslider');\n\n  function coerce(attr, dflt) {\n    return Lib.coerce(containerIn, containerOut, attributes, attr, dflt);\n  }\n\n  var rangeContainerIn, rangeContainerOut;\n\n  function coerceRange(attr, dflt) {\n    return Lib.coerce(rangeContainerIn, rangeContainerOut, oppAxisAttrs, attr, dflt);\n  }\n\n  var visible = coerce('visible');\n  if (!visible) return;\n  coerce('bgcolor', layoutOut.plot_bgcolor);\n  coerce('bordercolor');\n  coerce('borderwidth');\n  coerce('thickness');\n  coerce('autorange', !axOut.isValidRange(containerIn.range));\n  coerce('range');\n  var subplots = layoutOut._subplots;\n\n  if (subplots) {\n    var yIds = subplots.cartesian.filter(function (subplotId) {\n      return subplotId.substr(0, subplotId.indexOf('y')) === axisIds.name2id(axName);\n    }).map(function (subplotId) {\n      return subplotId.substr(subplotId.indexOf('y'), subplotId.length);\n    });\n    var yNames = Lib.simpleMap(yIds, axisIds.id2name);\n\n    for (var i = 0; i < yNames.length; i++) {\n      var yName = yNames[i];\n      rangeContainerIn = containerIn[yName] || {};\n      rangeContainerOut = Template.newContainer(containerOut, yName, 'yaxis');\n      var yAxOut = layoutOut[yName];\n      var rangemodeDflt;\n\n      if (rangeContainerIn.range && yAxOut.isValidRange(rangeContainerIn.range)) {\n        rangemodeDflt = 'fixed';\n      }\n\n      var rangeMode = coerceRange('rangemode', rangemodeDflt);\n\n      if (rangeMode !== 'match') {\n        coerceRange('range', yAxOut.range.slice());\n      }\n    }\n  } // to map back range slider (auto) range\n\n\n  containerOut._input = containerIn;\n};","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/plotly.js/src/components/rangeslider/defaults.js"],"names":["Lib","require","Template","axisIds","attributes","oppAxisAttrs","module","exports","handleDefaults","layoutIn","layoutOut","axName","axIn","axOut","rangeslider","_requestRangeslider","_id","isPlainObject","containerIn","containerOut","newContainer","coerce","attr","dflt","rangeContainerIn","rangeContainerOut","coerceRange","visible","plot_bgcolor","isValidRange","range","subplots","_subplots","yIds","cartesian","filter","subplotId","substr","indexOf","name2id","map","length","yNames","simpleMap","id2name","i","yName","yAxOut","rangemodeDflt","rangeMode","slice","_input"],"mappings":"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","sourcesContent":["'use strict';\n\nvar Lib = require('../../lib');\nvar Template = require('../../plot_api/plot_template');\nvar axisIds = require('../../plots/cartesian/axis_ids');\n\nvar attributes = require('./attributes');\nvar oppAxisAttrs = require('./oppaxis_attributes');\n\nmodule.exports = function handleDefaults(layoutIn, layoutOut, axName) {\n    var axIn = layoutIn[axName];\n    var axOut = layoutOut[axName];\n\n    if(!(axIn.rangeslider || layoutOut._requestRangeslider[axOut._id])) return;\n\n    // not super proud of this (maybe store _ in axis object instead\n    if(!Lib.isPlainObject(axIn.rangeslider)) {\n        axIn.rangeslider = {};\n    }\n\n    var containerIn = axIn.rangeslider;\n    var containerOut = Template.newContainer(axOut, 'rangeslider');\n\n    function coerce(attr, dflt) {\n        return Lib.coerce(containerIn, containerOut, attributes, attr, dflt);\n    }\n\n    var rangeContainerIn, rangeContainerOut;\n    function coerceRange(attr, dflt) {\n        return Lib.coerce(rangeContainerIn, rangeContainerOut, oppAxisAttrs, attr, dflt);\n    }\n\n    var visible = coerce('visible');\n    if(!visible) return;\n\n    coerce('bgcolor', layoutOut.plot_bgcolor);\n    coerce('bordercolor');\n    coerce('borderwidth');\n    coerce('thickness');\n\n    coerce('autorange', !axOut.isValidRange(containerIn.range));\n    coerce('range');\n\n    var subplots = layoutOut._subplots;\n    if(subplots) {\n        var yIds = subplots.cartesian\n            .filter(function(subplotId) {\n                return subplotId.substr(0, subplotId.indexOf('y')) === axisIds.name2id(axName);\n            })\n            .map(function(subplotId) {\n                return subplotId.substr(subplotId.indexOf('y'), subplotId.length);\n            });\n        var yNames = Lib.simpleMap(yIds, axisIds.id2name);\n        for(var i = 0; i < yNames.length; i++) {\n            var yName = yNames[i];\n\n            rangeContainerIn = containerIn[yName] || {};\n            rangeContainerOut = Template.newContainer(containerOut, yName, 'yaxis');\n\n            var yAxOut = layoutOut[yName];\n\n            var rangemodeDflt;\n            if(rangeContainerIn.range && yAxOut.isValidRange(rangeContainerIn.range)) {\n                rangemodeDflt = 'fixed';\n            }\n\n            var rangeMode = coerceRange('rangemode', rangemodeDflt);\n            if(rangeMode !== 'match') {\n                coerceRange('range', yAxOut.range.slice());\n            }\n        }\n    }\n\n    // to map back range slider (auto) range\n    containerOut._input = containerIn;\n};\n"]},"metadata":{},"sourceType":"script"}