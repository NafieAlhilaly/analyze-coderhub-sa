{"ast":null,"code":"'use strict';\n\nvar extendFlat = require('../lib/extend').extendFlat;\n/**\n * Make a xy domain attribute group\n *\n * @param {object} opts\n *   @param {string}\n *     opts.name: name to be inserted in the default description\n *   @param {boolean}\n *     opts.trace: set to true for trace containers\n *   @param {string}\n *     opts.editType: editType for all pieces\n *   @param {boolean}\n *     opts.noGridCell: set to true to omit `row` and `column`\n *\n * @param {object} extra\n *   @param {string}\n *     extra.description: extra description. N.B we use\n *     a separate extra container to make it compatible with\n *     the compress_attributes transform.\n *\n * @return {object} attributes object containing {x,y} as specified\n */\n\n\nexports.attributes = function (opts, extra) {\n  opts = opts || {};\n  extra = extra || {};\n  var base = {\n    valType: 'info_array',\n    editType: opts.editType,\n    items: [{\n      valType: 'number',\n      min: 0,\n      max: 1,\n      editType: opts.editType\n    }, {\n      valType: 'number',\n      min: 0,\n      max: 1,\n      editType: opts.editType\n    }],\n    dflt: [0, 1]\n  };\n  var namePart = opts.name ? opts.name + ' ' : '';\n  var contPart = opts.trace ? 'trace ' : 'subplot ';\n  var descPart = extra.description ? ' ' + extra.description : '';\n  var out = {\n    x: extendFlat({}, base, {\n      description: ['Sets the horizontal domain of this ', namePart, contPart, '(in plot fraction).', descPart].join('')\n    }),\n    y: extendFlat({}, base, {\n      description: ['Sets the vertical domain of this ', namePart, contPart, '(in plot fraction).', descPart].join('')\n    }),\n    editType: opts.editType\n  };\n\n  if (!opts.noGridCell) {\n    out.row = {\n      valType: 'integer',\n      min: 0,\n      dflt: 0,\n      editType: opts.editType,\n      description: ['If there is a layout grid, use the domain ', 'for this row in the grid for this ', namePart, contPart, '.', descPart].join('')\n    };\n    out.column = {\n      valType: 'integer',\n      min: 0,\n      dflt: 0,\n      editType: opts.editType,\n      description: ['If there is a layout grid, use the domain ', 'for this column in the grid for this ', namePart, contPart, '.', descPart].join('')\n    };\n  }\n\n  return out;\n};\n\nexports.defaults = function (containerOut, layout, coerce, dfltDomains) {\n  var dfltX = dfltDomains && dfltDomains.x || [0, 1];\n  var dfltY = dfltDomains && dfltDomains.y || [0, 1];\n  var grid = layout.grid;\n\n  if (grid) {\n    var column = coerce('domain.column');\n\n    if (column !== undefined) {\n      if (column < grid.columns) dfltX = grid._domains.x[column];else delete containerOut.domain.column;\n    }\n\n    var row = coerce('domain.row');\n\n    if (row !== undefined) {\n      if (row < grid.rows) dfltY = grid._domains.y[row];else delete containerOut.domain.row;\n    }\n  }\n\n  var x = coerce('domain.x', dfltX);\n  var y = coerce('domain.y', dfltY); // don't accept bad input data\n\n  if (!(x[0] < x[1])) containerOut.domain.x = dfltX.slice();\n  if (!(y[0] < y[1])) containerOut.domain.y = dfltY.slice();\n};","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/plotly.js/src/plots/domain.js"],"names":["extendFlat","require","exports","attributes","opts","extra","base","valType","editType","items","min","max","dflt","namePart","name","contPart","trace","descPart","description","out","x","join","y","noGridCell","row","column","defaults","containerOut","layout","coerce","dfltDomains","dfltX","dfltY","grid","undefined","columns","_domains","domain","rows","slice"],"mappings":"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","sourcesContent":["'use strict';\n\nvar extendFlat = require('../lib/extend').extendFlat;\n\n/**\n * Make a xy domain attribute group\n *\n * @param {object} opts\n *   @param {string}\n *     opts.name: name to be inserted in the default description\n *   @param {boolean}\n *     opts.trace: set to true for trace containers\n *   @param {string}\n *     opts.editType: editType for all pieces\n *   @param {boolean}\n *     opts.noGridCell: set to true to omit `row` and `column`\n *\n * @param {object} extra\n *   @param {string}\n *     extra.description: extra description. N.B we use\n *     a separate extra container to make it compatible with\n *     the compress_attributes transform.\n *\n * @return {object} attributes object containing {x,y} as specified\n */\nexports.attributes = function(opts, extra) {\n    opts = opts || {};\n    extra = extra || {};\n\n    var base = {\n        valType: 'info_array',\n        editType: opts.editType,\n        items: [\n            {valType: 'number', min: 0, max: 1, editType: opts.editType},\n            {valType: 'number', min: 0, max: 1, editType: opts.editType}\n        ],\n        dflt: [0, 1]\n    };\n\n    var namePart = opts.name ? opts.name + ' ' : '';\n    var contPart = opts.trace ? 'trace ' : 'subplot ';\n    var descPart = extra.description ? ' ' + extra.description : '';\n\n    var out = {\n        x: extendFlat({}, base, {\n            description: [\n                'Sets the horizontal domain of this ',\n                namePart,\n                contPart,\n                '(in plot fraction).',\n                descPart\n            ].join('')\n        }),\n        y: extendFlat({}, base, {\n            description: [\n                'Sets the vertical domain of this ',\n                namePart,\n                contPart,\n                '(in plot fraction).',\n                descPart\n            ].join('')\n        }),\n        editType: opts.editType\n    };\n\n    if(!opts.noGridCell) {\n        out.row = {\n            valType: 'integer',\n            min: 0,\n            dflt: 0,\n            editType: opts.editType,\n            description: [\n                'If there is a layout grid, use the domain ',\n                'for this row in the grid for this ',\n                namePart,\n                contPart,\n                '.',\n                descPart\n            ].join('')\n        };\n        out.column = {\n            valType: 'integer',\n            min: 0,\n            dflt: 0,\n            editType: opts.editType,\n            description: [\n                'If there is a layout grid, use the domain ',\n                'for this column in the grid for this ',\n                namePart,\n                contPart,\n                '.',\n                descPart\n            ].join('')\n        };\n    }\n\n    return out;\n};\n\nexports.defaults = function(containerOut, layout, coerce, dfltDomains) {\n    var dfltX = (dfltDomains && dfltDomains.x) || [0, 1];\n    var dfltY = (dfltDomains && dfltDomains.y) || [0, 1];\n\n    var grid = layout.grid;\n    if(grid) {\n        var column = coerce('domain.column');\n        if(column !== undefined) {\n            if(column < grid.columns) dfltX = grid._domains.x[column];\n            else delete containerOut.domain.column;\n        }\n\n        var row = coerce('domain.row');\n        if(row !== undefined) {\n            if(row < grid.rows) dfltY = grid._domains.y[row];\n            else delete containerOut.domain.row;\n        }\n    }\n\n    var x = coerce('domain.x', dfltX);\n    var y = coerce('domain.y', dfltY);\n\n    // don't accept bad input data\n    if(!(x[0] < x[1])) containerOut.domain.x = dfltX.slice();\n    if(!(y[0] < y[1])) containerOut.domain.y = dfltY.slice();\n};\n"]},"metadata":{},"sourceType":"script"}