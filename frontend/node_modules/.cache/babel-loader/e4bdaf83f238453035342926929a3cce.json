{"ast":null,"code":"'use strict';\n\nvar makeControlPoints = require('./catmull_rom');\n\nvar ensureArray = require('../../lib').ensureArray;\n/*\n * Turns a coarse grid into a fine grid with control points.\n *\n * Here's an ASCII representation:\n *\n *       o ----- o ----- o ----- o\n *       |       |       |       |\n *       |       |       |       |\n *       |       |       |       |\n *       o ----- o ----- o ----- o\n *       |       |       |       |\n *       |       |       |       |\n *    ^  |       |       |       |\n *    |  o ----- o ----- o ----- o\n *  b |  |       |       |       |\n *    |  |       |       |       |\n *    |  |       |       |       |\n *       o ----- o ----- o ----- o\n *         ------>\n *           a\n *\n * First of all, note that we want to do this in *cartesian* space. This means\n * we might run into problems when there are extreme differences in x/y scaling,\n * but the alternative is that the topology of the contours might actually be\n * view-dependent, which seems worse. As a fallback, the only parameter that\n * actually affects the result is the *aspect ratio*, so that we can at least\n * improve the situation a bit without going all the way to screen coordinates.\n *\n * This function flattens the points + tangents  into a slightly denser grid of\n * *control points*. The resulting grid looks like this:\n *\n *       9 +--o-o--+ -o-o--+--o-o--+\n *       8 o  o o  o  o o  o  o o  o\n *         |       |       |       |\n *       7 o  o o  o  o o  o  o o  o\n *       6 +--o-o--+ -o-o--+--o-o--+\n *       5 o  o o  o  o o  o  o o  o\n *         |       |       |       |\n *    ^  4 o  o o  o  o o  o  o o  o\n *    |  3 +--o-o--+ -o-o--+--o-o--+\n *  b |  2 o  o o  o  o o  o  o o  o\n *    |    |       |       |       |\n *    |  1 o  o o  o  o o  o  o o  o\n *       0 +--o-o--+ -o-o--+--o-o--+\n *         0  1 2  3  4 5  6  7 8  9\n *         ------>\n *           a\n *\n * where `o`s represent newly-computed control points. the resulting dimension is\n *\n *     (m - 1) * 3 + 1\n *   = 3 * m - 2\n *\n * We could simply store the tangents separately, but that's a nightmare to organize\n * in two dimensions since we'll be slicing grid lines in both directions and since\n * that basically requires very nearly just as much storage as just storing the dense\n * grid.\n *\n * Wow!\n */\n\n/*\n * Catmull-rom is biased at the boundaries toward the interior and we actually\n * can't use catmull-rom to compute the control point closest to (but inside)\n * the boundary.\n *\n * A note on plotly's spline interpolation. It uses the catmull rom control point\n * closest to the boundary *as* a quadratic control point. This seems incorrect,\n * so I've elected not to follow that. Given control points 0 and 1, regular plotly\n * splines give *equivalent* cubic control points:\n *\n * Input:\n *\n *   boundary\n *     |                    |\n *     p0           p2      p3    --> interior\n *     0.0          0.667   1.0\n *     |                    |\n *\n * Cubic-equivalent of what plotly splines draw::\n *\n *   boundary\n *     |                    |\n *     p0   p1      p2      p3    --> interior\n *     0.0  0.4444  0.8888  1.0\n *     |                    |\n *\n * What this function fills in:\n *\n *   boundary\n *     |                    |\n *     p0    p1     p2      p3    --> interior\n *     0.0   0.333  0.667   1.0\n *     |                    |\n *\n * Parameters:\n *   p0: boundary point\n *   p2: catmull rom point based on computation at p3\n *   p3: first grid point\n *\n * Of course it works whichever way it's oriented; you just need to interpret the\n * input/output accordingly.\n */\n\n\nfunction inferCubicControlPoint(p0, p2, p3) {\n  // Extend p1 away from p0 by 50%. This is the equivalent quadratic point that\n  // would give the same slope as catmull rom at p0.\n  var p2e0 = -0.5 * p3[0] + 1.5 * p2[0];\n  var p2e1 = -0.5 * p3[1] + 1.5 * p2[1];\n  return [(2 * p2e0 + p0[0]) / 3, (2 * p2e1 + p0[1]) / 3];\n}\n\nmodule.exports = function computeControlPoints(xe, ye, x, y, asmoothing, bsmoothing) {\n  var i, j, ie, je, xej, yej, xj, yj, cp, p1; // At this point, we know these dimensions are correct and representative of\n  // the whole 2D arrays:\n\n  var na = x[0].length;\n  var nb = x.length; // (n)umber of (e)xpanded points:\n\n  var nea = asmoothing ? 3 * na - 2 : na;\n  var neb = bsmoothing ? 3 * nb - 2 : nb;\n  xe = ensureArray(xe, neb);\n  ye = ensureArray(ye, neb);\n\n  for (ie = 0; ie < neb; ie++) {\n    xe[ie] = ensureArray(xe[ie], nea);\n    ye[ie] = ensureArray(ye[ie], nea);\n  } // This loop fills in the X'd points:\n  //\n  //    .       .       .       .\n  //    .       .       .       .\n  //    |       |       |       |\n  //    |       |       |       |\n  //    X ----- X ----- X ----- X\n  //    |       |       |       |\n  //    |       |       |       |\n  //    |       |       |       |\n  //    X ----- X ----- X ----- X\n  //\n  //\n  // ie = (i) (e)xpanded:\n\n\n  for (j = 0, je = 0; j < nb; j++, je += bsmoothing ? 3 : 1) {\n    xej = xe[je];\n    yej = ye[je];\n    xj = x[j];\n    yj = y[j]; // je = (j) (e)xpanded:\n\n    for (i = 0, ie = 0; i < na; i++, ie += asmoothing ? 3 : 1) {\n      xej[ie] = xj[i];\n      yej[ie] = yj[i];\n    }\n  }\n\n  if (asmoothing) {\n    // If there's a-smoothing, this loop fills in the X'd points with catmull-rom\n    // control points computed along the a-axis:\n    //     .       .       .       .\n    //     .       .       .       .\n    //     |       |       |       |\n    //     |       |       |       |\n    //     o -Y-X- o -X-X- o -X-Y- o\n    //     |       |       |       |\n    //     |       |       |       |\n    //     |       |       |       |\n    //     o -Y-X- o -X-X- o -X-Y- o\n    //\n    // i:  0       1       2       3\n    // ie: 0  1 3  3  4 5  6  7 8  9\n    //\n    //           ------>\n    //             a\n    //\n    for (j = 0, je = 0; j < nb; j++, je += bsmoothing ? 3 : 1) {\n      // Fill in the points marked X for this a-row:\n      for (i = 1, ie = 3; i < na - 1; i++, ie += 3) {\n        cp = makeControlPoints([x[j][i - 1], y[j][i - 1]], [x[j][i], y[j][i]], [x[j][i + 1], y[j][i + 1]], asmoothing);\n        xe[je][ie - 1] = cp[0][0];\n        ye[je][ie - 1] = cp[0][1];\n        xe[je][ie + 1] = cp[1][0];\n        ye[je][ie + 1] = cp[1][1];\n      } // The very first cubic interpolation point (to the left for i = 1 above) is\n      // used as a *quadratic* interpolation point by the spline drawing function\n      // which isn't really correct. But for the sake of consistency, we'll use it\n      // as such. Since we're using cubic splines, that means we need to shorten the\n      // tangent by 1/3 and also construct a new cubic spline control point 1/3 from\n      // the original to the i = 0 point.\n\n\n      p1 = inferCubicControlPoint([xe[je][0], ye[je][0]], [xe[je][2], ye[je][2]], [xe[je][3], ye[je][3]]);\n      xe[je][1] = p1[0];\n      ye[je][1] = p1[1]; // Ditto last points, sans explanation:\n\n      p1 = inferCubicControlPoint([xe[je][nea - 1], ye[je][nea - 1]], [xe[je][nea - 3], ye[je][nea - 3]], [xe[je][nea - 4], ye[je][nea - 4]]);\n      xe[je][nea - 2] = p1[0];\n      ye[je][nea - 2] = p1[1];\n    }\n  }\n\n  if (bsmoothing) {\n    // If there's a-smoothing, this loop fills in the X'd points with catmull-rom\n    // control points computed along the b-axis:\n    //     .       .       .       .\n    //     X  X X  X  X X  X  X X  X\n    //     |       |       |       |\n    //     X  X X  X  X X  X  X X  X\n    //     o -o-o- o -o-o- o -o-o- o\n    //     X  X X  X  X X  X  X X  X\n    //     |       |       |       |\n    //     Y  Y Y  Y  Y Y  Y  Y Y  Y\n    //     o -o-o- o -o-o- o -o-o- o\n    //\n    // i:  0       1       2       3\n    // ie: 0  1 3  3  4 5  6  7 8  9\n    //\n    //           ------>\n    //             a\n    //\n    for (ie = 0; ie < nea; ie++) {\n      for (je = 3; je < neb - 3; je += 3) {\n        cp = makeControlPoints([xe[je - 3][ie], ye[je - 3][ie]], [xe[je][ie], ye[je][ie]], [xe[je + 3][ie], ye[je + 3][ie]], bsmoothing);\n        xe[je - 1][ie] = cp[0][0];\n        ye[je - 1][ie] = cp[0][1];\n        xe[je + 1][ie] = cp[1][0];\n        ye[je + 1][ie] = cp[1][1];\n      } // Do the same boundary condition magic for these control points marked Y above:\n\n\n      p1 = inferCubicControlPoint([xe[0][ie], ye[0][ie]], [xe[2][ie], ye[2][ie]], [xe[3][ie], ye[3][ie]]);\n      xe[1][ie] = p1[0];\n      ye[1][ie] = p1[1];\n      p1 = inferCubicControlPoint([xe[neb - 1][ie], ye[neb - 1][ie]], [xe[neb - 3][ie], ye[neb - 3][ie]], [xe[neb - 4][ie], ye[neb - 4][ie]]);\n      xe[neb - 2][ie] = p1[0];\n      ye[neb - 2][ie] = p1[1];\n    }\n  }\n\n  if (asmoothing && bsmoothing) {\n    // Do one more pass, this time recomputing exactly what we just computed.\n    // It's overdetermined since we're peforming catmull-rom in two directions,\n    // so we'll just average the overdetermined. These points don't lie along the\n    // grid lines, so note that only grid lines will follow normal plotly spline\n    // interpolation.\n    //\n    // Unless of course there was no b smoothing. Then these intermediate points\n    // don't actually exist and this section is bypassed.\n    //     .       .       .       .\n    //     o  X X  o  X X  o  X X  o\n    //     |       |       |       |\n    //     o  X X  o  X X  o  X X  o\n    //     o -o-o- o -o-o- o -o-o- o\n    //     o  X X  o  X X  o  X X  o\n    //     |       |       |       |\n    //     o  Y Y  o  Y Y  o  Y Y  o\n    //     o -o-o- o -o-o- o -o-o- o\n    //\n    // i:  0       1       2       3\n    // ie: 0  1 3  3  4 5  6  7 8  9\n    //\n    //           ------>\n    //             a\n    //\n    for (je = 1; je < neb; je += (je + 1) % 3 === 0 ? 2 : 1) {\n      // Fill in the points marked X for this a-row:\n      for (ie = 3; ie < nea - 3; ie += 3) {\n        cp = makeControlPoints([xe[je][ie - 3], ye[je][ie - 3]], [xe[je][ie], ye[je][ie]], [xe[je][ie + 3], ye[je][ie + 3]], asmoothing);\n        xe[je][ie - 1] = 0.5 * (xe[je][ie - 1] + cp[0][0]);\n        ye[je][ie - 1] = 0.5 * (ye[je][ie - 1] + cp[0][1]);\n        xe[je][ie + 1] = 0.5 * (xe[je][ie + 1] + cp[1][0]);\n        ye[je][ie + 1] = 0.5 * (ye[je][ie + 1] + cp[1][1]);\n      } // This case is just slightly different. The computation is the same,\n      // but having computed this, we'll average with the existing result.\n\n\n      p1 = inferCubicControlPoint([xe[je][0], ye[je][0]], [xe[je][2], ye[je][2]], [xe[je][3], ye[je][3]]);\n      xe[je][1] = 0.5 * (xe[je][1] + p1[0]);\n      ye[je][1] = 0.5 * (ye[je][1] + p1[1]);\n      p1 = inferCubicControlPoint([xe[je][nea - 1], ye[je][nea - 1]], [xe[je][nea - 3], ye[je][nea - 3]], [xe[je][nea - 4], ye[je][nea - 4]]);\n      xe[je][nea - 2] = 0.5 * (xe[je][nea - 2] + p1[0]);\n      ye[je][nea - 2] = 0.5 * (ye[je][nea - 2] + p1[1]);\n    }\n  }\n\n  return [xe, ye];\n};","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/plotly.js/src/traces/carpet/compute_control_points.js"],"names":["makeControlPoints","require","ensureArray","inferCubicControlPoint","p0","p2","p3","p2e0","p2e1","module","exports","computeControlPoints","xe","ye","x","y","asmoothing","bsmoothing","i","j","ie","je","xej","yej","xj","yj","cp","p1","na","length","nb","nea","neb"],"mappings":"AAAA;;AAEA,IAAIA,iBAAiB,GAAGC,OAAO,CAAC,eAAD,CAA/B;;AACA,IAAIC,WAAW,GAAGD,OAAO,CAAC,WAAD,CAAP,CAAqBC,WAAvC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,sBAAT,CAAgCC,EAAhC,EAAoCC,EAApC,EAAwCC,EAAxC,EAA4C;AACxC;AACA;AACA,MAAIC,IAAI,GAAG,CAAC,GAAD,GAAOD,EAAE,CAAC,CAAD,CAAT,GAAe,MAAMD,EAAE,CAAC,CAAD,CAAlC;AACA,MAAIG,IAAI,GAAG,CAAC,GAAD,GAAOF,EAAE,CAAC,CAAD,CAAT,GAAe,MAAMD,EAAE,CAAC,CAAD,CAAlC;AAEA,SAAO,CACH,CAAC,IAAIE,IAAJ,GAAWH,EAAE,CAAC,CAAD,CAAd,IAAqB,CADlB,EAEH,CAAC,IAAII,IAAJ,GAAWJ,EAAE,CAAC,CAAD,CAAd,IAAqB,CAFlB,CAAP;AAIH;;AAEDK,MAAM,CAACC,OAAP,GAAiB,SAASC,oBAAT,CAA8BC,EAA9B,EAAkCC,EAAlC,EAAsCC,CAAtC,EAAyCC,CAAzC,EAA4CC,UAA5C,EAAwDC,UAAxD,EAAoE;AACjF,MAAIC,CAAJ,EAAOC,CAAP,EAAUC,EAAV,EAAcC,EAAd,EAAkBC,GAAlB,EAA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","sourcesContent":["'use strict';\n\nvar makeControlPoints = require('./catmull_rom');\nvar ensureArray = require('../../lib').ensureArray;\n\n/*\n * Turns a coarse grid into a fine grid with control points.\n *\n * Here's an ASCII representation:\n *\n *       o ----- o ----- o ----- o\n *       |       |       |       |\n *       |       |       |       |\n *       |       |       |       |\n *       o ----- o ----- o ----- o\n *       |       |       |       |\n *       |       |       |       |\n *    ^  |       |       |       |\n *    |  o ----- o ----- o ----- o\n *  b |  |       |       |       |\n *    |  |       |       |       |\n *    |  |       |       |       |\n *       o ----- o ----- o ----- o\n *         ------>\n *           a\n *\n * First of all, note that we want to do this in *cartesian* space. This means\n * we might run into problems when there are extreme differences in x/y scaling,\n * but the alternative is that the topology of the contours might actually be\n * view-dependent, which seems worse. As a fallback, the only parameter that\n * actually affects the result is the *aspect ratio*, so that we can at least\n * improve the situation a bit without going all the way to screen coordinates.\n *\n * This function flattens the points + tangents  into a slightly denser grid of\n * *control points*. The resulting grid looks like this:\n *\n *       9 +--o-o--+ -o-o--+--o-o--+\n *       8 o  o o  o  o o  o  o o  o\n *         |       |       |       |\n *       7 o  o o  o  o o  o  o o  o\n *       6 +--o-o--+ -o-o--+--o-o--+\n *       5 o  o o  o  o o  o  o o  o\n *         |       |       |       |\n *    ^  4 o  o o  o  o o  o  o o  o\n *    |  3 +--o-o--+ -o-o--+--o-o--+\n *  b |  2 o  o o  o  o o  o  o o  o\n *    |    |       |       |       |\n *    |  1 o  o o  o  o o  o  o o  o\n *       0 +--o-o--+ -o-o--+--o-o--+\n *         0  1 2  3  4 5  6  7 8  9\n *         ------>\n *           a\n *\n * where `o`s represent newly-computed control points. the resulting dimension is\n *\n *     (m - 1) * 3 + 1\n *   = 3 * m - 2\n *\n * We could simply store the tangents separately, but that's a nightmare to organize\n * in two dimensions since we'll be slicing grid lines in both directions and since\n * that basically requires very nearly just as much storage as just storing the dense\n * grid.\n *\n * Wow!\n */\n\n\n/*\n * Catmull-rom is biased at the boundaries toward the interior and we actually\n * can't use catmull-rom to compute the control point closest to (but inside)\n * the boundary.\n *\n * A note on plotly's spline interpolation. It uses the catmull rom control point\n * closest to the boundary *as* a quadratic control point. This seems incorrect,\n * so I've elected not to follow that. Given control points 0 and 1, regular plotly\n * splines give *equivalent* cubic control points:\n *\n * Input:\n *\n *   boundary\n *     |                    |\n *     p0           p2      p3    --> interior\n *     0.0          0.667   1.0\n *     |                    |\n *\n * Cubic-equivalent of what plotly splines draw::\n *\n *   boundary\n *     |                    |\n *     p0   p1      p2      p3    --> interior\n *     0.0  0.4444  0.8888  1.0\n *     |                    |\n *\n * What this function fills in:\n *\n *   boundary\n *     |                    |\n *     p0    p1     p2      p3    --> interior\n *     0.0   0.333  0.667   1.0\n *     |                    |\n *\n * Parameters:\n *   p0: boundary point\n *   p2: catmull rom point based on computation at p3\n *   p3: first grid point\n *\n * Of course it works whichever way it's oriented; you just need to interpret the\n * input/output accordingly.\n */\nfunction inferCubicControlPoint(p0, p2, p3) {\n    // Extend p1 away from p0 by 50%. This is the equivalent quadratic point that\n    // would give the same slope as catmull rom at p0.\n    var p2e0 = -0.5 * p3[0] + 1.5 * p2[0];\n    var p2e1 = -0.5 * p3[1] + 1.5 * p2[1];\n\n    return [\n        (2 * p2e0 + p0[0]) / 3,\n        (2 * p2e1 + p0[1]) / 3,\n    ];\n}\n\nmodule.exports = function computeControlPoints(xe, ye, x, y, asmoothing, bsmoothing) {\n    var i, j, ie, je, xej, yej, xj, yj, cp, p1;\n    // At this point, we know these dimensions are correct and representative of\n    // the whole 2D arrays:\n    var na = x[0].length;\n    var nb = x.length;\n\n    // (n)umber of (e)xpanded points:\n    var nea = asmoothing ? 3 * na - 2 : na;\n    var neb = bsmoothing ? 3 * nb - 2 : nb;\n\n    xe = ensureArray(xe, neb);\n    ye = ensureArray(ye, neb);\n\n    for(ie = 0; ie < neb; ie++) {\n        xe[ie] = ensureArray(xe[ie], nea);\n        ye[ie] = ensureArray(ye[ie], nea);\n    }\n\n    // This loop fills in the X'd points:\n    //\n    //    .       .       .       .\n    //    .       .       .       .\n    //    |       |       |       |\n    //    |       |       |       |\n    //    X ----- X ----- X ----- X\n    //    |       |       |       |\n    //    |       |       |       |\n    //    |       |       |       |\n    //    X ----- X ----- X ----- X\n    //\n    //\n    // ie = (i) (e)xpanded:\n    for(j = 0, je = 0; j < nb; j++, je += bsmoothing ? 3 : 1) {\n        xej = xe[je];\n        yej = ye[je];\n        xj = x[j];\n        yj = y[j];\n\n        // je = (j) (e)xpanded:\n        for(i = 0, ie = 0; i < na; i++, ie += asmoothing ? 3 : 1) {\n            xej[ie] = xj[i];\n            yej[ie] = yj[i];\n        }\n    }\n\n    if(asmoothing) {\n        // If there's a-smoothing, this loop fills in the X'd points with catmull-rom\n        // control points computed along the a-axis:\n        //     .       .       .       .\n        //     .       .       .       .\n        //     |       |       |       |\n        //     |       |       |       |\n        //     o -Y-X- o -X-X- o -X-Y- o\n        //     |       |       |       |\n        //     |       |       |       |\n        //     |       |       |       |\n        //     o -Y-X- o -X-X- o -X-Y- o\n        //\n        // i:  0       1       2       3\n        // ie: 0  1 3  3  4 5  6  7 8  9\n        //\n        //           ------>\n        //             a\n        //\n        for(j = 0, je = 0; j < nb; j++, je += bsmoothing ? 3 : 1) {\n            // Fill in the points marked X for this a-row:\n            for(i = 1, ie = 3; i < na - 1; i++, ie += 3) {\n                cp = makeControlPoints(\n                    [x[j][i - 1], y[j][i - 1]],\n                    [x[j][i ], y[j][i]],\n                    [x[j][i + 1], y[j][i + 1]],\n                    asmoothing\n                );\n\n                xe[je][ie - 1] = cp[0][0];\n                ye[je][ie - 1] = cp[0][1];\n                xe[je][ie + 1] = cp[1][0];\n                ye[je][ie + 1] = cp[1][1];\n            }\n\n            // The very first cubic interpolation point (to the left for i = 1 above) is\n            // used as a *quadratic* interpolation point by the spline drawing function\n            // which isn't really correct. But for the sake of consistency, we'll use it\n            // as such. Since we're using cubic splines, that means we need to shorten the\n            // tangent by 1/3 and also construct a new cubic spline control point 1/3 from\n            // the original to the i = 0 point.\n            p1 = inferCubicControlPoint(\n                [xe[je][0], ye[je][0]],\n                [xe[je][2], ye[je][2]],\n                [xe[je][3], ye[je][3]]\n            );\n            xe[je][1] = p1[0];\n            ye[je][1] = p1[1];\n\n            // Ditto last points, sans explanation:\n            p1 = inferCubicControlPoint(\n                [xe[je][nea - 1], ye[je][nea - 1]],\n                [xe[je][nea - 3], ye[je][nea - 3]],\n                [xe[je][nea - 4], ye[je][nea - 4]]\n            );\n            xe[je][nea - 2] = p1[0];\n            ye[je][nea - 2] = p1[1];\n        }\n    }\n\n    if(bsmoothing) {\n        // If there's a-smoothing, this loop fills in the X'd points with catmull-rom\n        // control points computed along the b-axis:\n        //     .       .       .       .\n        //     X  X X  X  X X  X  X X  X\n        //     |       |       |       |\n        //     X  X X  X  X X  X  X X  X\n        //     o -o-o- o -o-o- o -o-o- o\n        //     X  X X  X  X X  X  X X  X\n        //     |       |       |       |\n        //     Y  Y Y  Y  Y Y  Y  Y Y  Y\n        //     o -o-o- o -o-o- o -o-o- o\n        //\n        // i:  0       1       2       3\n        // ie: 0  1 3  3  4 5  6  7 8  9\n        //\n        //           ------>\n        //             a\n        //\n        for(ie = 0; ie < nea; ie++) {\n            for(je = 3; je < neb - 3; je += 3) {\n                cp = makeControlPoints(\n                    [xe[je - 3][ie], ye[je - 3][ie]],\n                    [xe[je][ie], ye[je][ie]],\n                    [xe[je + 3][ie], ye[je + 3][ie]],\n                    bsmoothing\n                );\n\n                xe[je - 1][ie] = cp[0][0];\n                ye[je - 1][ie] = cp[0][1];\n                xe[je + 1][ie] = cp[1][0];\n                ye[je + 1][ie] = cp[1][1];\n            }\n            // Do the same boundary condition magic for these control points marked Y above:\n            p1 = inferCubicControlPoint(\n                [xe[0][ie], ye[0][ie]],\n                [xe[2][ie], ye[2][ie]],\n                [xe[3][ie], ye[3][ie]]\n            );\n            xe[1][ie] = p1[0];\n            ye[1][ie] = p1[1];\n\n            p1 = inferCubicControlPoint(\n                [xe[neb - 1][ie], ye[neb - 1][ie]],\n                [xe[neb - 3][ie], ye[neb - 3][ie]],\n                [xe[neb - 4][ie], ye[neb - 4][ie]]\n            );\n            xe[neb - 2][ie] = p1[0];\n            ye[neb - 2][ie] = p1[1];\n        }\n    }\n\n    if(asmoothing && bsmoothing) {\n        // Do one more pass, this time recomputing exactly what we just computed.\n        // It's overdetermined since we're peforming catmull-rom in two directions,\n        // so we'll just average the overdetermined. These points don't lie along the\n        // grid lines, so note that only grid lines will follow normal plotly spline\n        // interpolation.\n        //\n        // Unless of course there was no b smoothing. Then these intermediate points\n        // don't actually exist and this section is bypassed.\n        //     .       .       .       .\n        //     o  X X  o  X X  o  X X  o\n        //     |       |       |       |\n        //     o  X X  o  X X  o  X X  o\n        //     o -o-o- o -o-o- o -o-o- o\n        //     o  X X  o  X X  o  X X  o\n        //     |       |       |       |\n        //     o  Y Y  o  Y Y  o  Y Y  o\n        //     o -o-o- o -o-o- o -o-o- o\n        //\n        // i:  0       1       2       3\n        // ie: 0  1 3  3  4 5  6  7 8  9\n        //\n        //           ------>\n        //             a\n        //\n        for(je = 1; je < neb; je += (je + 1) % 3 === 0 ? 2 : 1) {\n            // Fill in the points marked X for this a-row:\n            for(ie = 3; ie < nea - 3; ie += 3) {\n                cp = makeControlPoints(\n                    [xe[je][ie - 3], ye[je][ie - 3]],\n                    [xe[je][ie], ye[je][ie]],\n                    [xe[je][ie + 3], ye[je][ie + 3]],\n                    asmoothing\n                );\n\n                xe[je][ie - 1] = 0.5 * (xe[je][ie - 1] + cp[0][0]);\n                ye[je][ie - 1] = 0.5 * (ye[je][ie - 1] + cp[0][1]);\n                xe[je][ie + 1] = 0.5 * (xe[je][ie + 1] + cp[1][0]);\n                ye[je][ie + 1] = 0.5 * (ye[je][ie + 1] + cp[1][1]);\n            }\n\n            // This case is just slightly different. The computation is the same,\n            // but having computed this, we'll average with the existing result.\n            p1 = inferCubicControlPoint(\n                [xe[je][0], ye[je][0]],\n                [xe[je][2], ye[je][2]],\n                [xe[je][3], ye[je][3]]\n            );\n            xe[je][1] = 0.5 * (xe[je][1] + p1[0]);\n            ye[je][1] = 0.5 * (ye[je][1] + p1[1]);\n\n            p1 = inferCubicControlPoint(\n                [xe[je][nea - 1], ye[je][nea - 1]],\n                [xe[je][nea - 3], ye[je][nea - 3]],\n                [xe[je][nea - 4], ye[je][nea - 4]]\n            );\n            xe[je][nea - 2] = 0.5 * (xe[je][nea - 2] + p1[0]);\n            ye[je][nea - 2] = 0.5 * (ye[je][nea - 2] + p1[1]);\n        }\n    }\n\n    return [xe, ye];\n};\n"]},"metadata":{},"sourceType":"script"}