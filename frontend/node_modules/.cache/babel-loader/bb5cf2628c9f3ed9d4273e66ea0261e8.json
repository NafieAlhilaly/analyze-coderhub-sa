{"ast":null,"code":"\"use strict\";\n\nvar ch = require(\"incremental-convex-hull\");\n\nvar uniq = require(\"uniq\");\n\nmodule.exports = triangulate;\n\nfunction LiftedPoint(p, i) {\n  this.point = p;\n  this.index = i;\n}\n\nfunction compareLifted(a, b) {\n  var ap = a.point;\n  var bp = b.point;\n  var d = ap.length;\n\n  for (var i = 0; i < d; ++i) {\n    var s = bp[i] - ap[i];\n\n    if (s) {\n      return s;\n    }\n  }\n\n  return 0;\n}\n\nfunction triangulate1D(n, points, includePointAtInfinity) {\n  if (n === 1) {\n    if (includePointAtInfinity) {\n      return [[-1, 0]];\n    } else {\n      return [];\n    }\n  }\n\n  var lifted = points.map(function (p, i) {\n    return [p[0], i];\n  });\n  lifted.sort(function (a, b) {\n    return a[0] - b[0];\n  });\n  var cells = new Array(n - 1);\n\n  for (var i = 1; i < n; ++i) {\n    var a = lifted[i - 1];\n    var b = lifted[i];\n    cells[i - 1] = [a[1], b[1]];\n  }\n\n  if (includePointAtInfinity) {\n    cells.push([-1, cells[0][1]], [cells[n - 1][1], -1]);\n  }\n\n  return cells;\n}\n\nfunction triangulate(points, includePointAtInfinity) {\n  var n = points.length;\n\n  if (n === 0) {\n    return [];\n  }\n\n  var d = points[0].length;\n\n  if (d < 1) {\n    return [];\n  } //Special case:  For 1D we can just sort the points\n\n\n  if (d === 1) {\n    return triangulate1D(n, points, includePointAtInfinity);\n  } //Lift points, sort\n\n\n  var lifted = new Array(n);\n  var upper = 1.0;\n\n  for (var i = 0; i < n; ++i) {\n    var p = points[i];\n    var x = new Array(d + 1);\n    var l = 0.0;\n\n    for (var j = 0; j < d; ++j) {\n      var v = p[j];\n      x[j] = v;\n      l += v * v;\n    }\n\n    x[d] = l;\n    lifted[i] = new LiftedPoint(x, i);\n    upper = Math.max(l, upper);\n  }\n\n  uniq(lifted, compareLifted); //Double points\n\n  n = lifted.length; //Create new list of points\n\n  var dpoints = new Array(n + d + 1);\n  var dindex = new Array(n + d + 1); //Add steiner points at top\n\n  var u = (d + 1) * (d + 1) * upper;\n  var y = new Array(d + 1);\n\n  for (var i = 0; i <= d; ++i) {\n    y[i] = 0.0;\n  }\n\n  y[d] = u;\n  dpoints[0] = y.slice();\n  dindex[0] = -1;\n\n  for (var i = 0; i <= d; ++i) {\n    var x = y.slice();\n    x[i] = 1;\n    dpoints[i + 1] = x;\n    dindex[i + 1] = -1;\n  } //Copy rest of the points over\n\n\n  for (var i = 0; i < n; ++i) {\n    var h = lifted[i];\n    dpoints[i + d + 1] = h.point;\n    dindex[i + d + 1] = h.index;\n  } //Construct convex hull\n\n\n  var hull = ch(dpoints, false);\n\n  if (includePointAtInfinity) {\n    hull = hull.filter(function (cell) {\n      var count = 0;\n\n      for (var j = 0; j <= d; ++j) {\n        var v = dindex[cell[j]];\n\n        if (v < 0) {\n          if (++count >= 2) {\n            return false;\n          }\n        }\n\n        cell[j] = v;\n      }\n\n      return true;\n    });\n  } else {\n    hull = hull.filter(function (cell) {\n      for (var i = 0; i <= d; ++i) {\n        var v = dindex[cell[i]];\n\n        if (v < 0) {\n          return false;\n        }\n\n        cell[i] = v;\n      }\n\n      return true;\n    });\n  }\n\n  if (d & 1) {\n    for (var i = 0; i < hull.length; ++i) {\n      var h = hull[i];\n      var x = h[0];\n      h[0] = h[1];\n      h[1] = x;\n    }\n  }\n\n  return hull;\n}","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/delaunay-triangulate/triangulate.js"],"names":["ch","require","uniq","module","exports","triangulate","LiftedPoint","p","i","point","index","compareLifted","a","b","ap","bp","d","length","s","triangulate1D","n","points","includePointAtInfinity","lifted","map","sort","cells","Array","push","upper","x","l","j","v","Math","max","dpoints","dindex","u","y","slice","h","hull","filter","cell","count"],"mappings":"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","sourcesContent":["\"use strict\"\n\nvar ch = require(\"incremental-convex-hull\")\nvar uniq = require(\"uniq\")\n\nmodule.exports = triangulate\n\nfunction LiftedPoint(p, i) {\n  this.point = p\n  this.index = i\n}\n\nfunction compareLifted(a, b) {\n  var ap = a.point\n  var bp = b.point\n  var d = ap.length\n  for(var i=0; i<d; ++i) {\n    var s = bp[i] - ap[i]\n    if(s) {\n      return s\n    }\n  }\n  return 0\n}\n\nfunction triangulate1D(n, points, includePointAtInfinity) {\n  if(n === 1) {\n    if(includePointAtInfinity) {\n      return [ [-1, 0] ]\n    } else {\n      return []\n    }\n  }\n  var lifted = points.map(function(p, i) {\n    return [ p[0], i ]\n  })\n  lifted.sort(function(a,b) {\n    return a[0] - b[0]\n  })\n  var cells = new Array(n - 1)\n  for(var i=1; i<n; ++i) {\n    var a = lifted[i-1]\n    var b = lifted[i]\n    cells[i-1] = [ a[1], b[1] ]\n  }\n  if(includePointAtInfinity) {\n    cells.push(\n      [ -1, cells[0][1], ],\n      [ cells[n-1][1], -1 ])\n  }\n  return cells\n}\n\nfunction triangulate(points, includePointAtInfinity) {\n  var n = points.length\n  if(n === 0) {\n    return []\n  }\n  \n  var d = points[0].length\n  if(d < 1) {\n    return []\n  }\n\n  //Special case:  For 1D we can just sort the points\n  if(d === 1) {\n    return triangulate1D(n, points, includePointAtInfinity)\n  }\n  \n  //Lift points, sort\n  var lifted = new Array(n)\n  var upper = 1.0\n  for(var i=0; i<n; ++i) {\n    var p = points[i]\n    var x = new Array(d+1)\n    var l = 0.0\n    for(var j=0; j<d; ++j) {\n      var v = p[j]\n      x[j] = v\n      l += v * v\n    }\n    x[d] = l\n    lifted[i] = new LiftedPoint(x, i)\n    upper = Math.max(l, upper)\n  }\n  uniq(lifted, compareLifted)\n  \n  //Double points\n  n = lifted.length\n\n  //Create new list of points\n  var dpoints = new Array(n + d + 1)\n  var dindex = new Array(n + d + 1)\n\n  //Add steiner points at top\n  var u = (d+1) * (d+1) * upper\n  var y = new Array(d+1)\n  for(var i=0; i<=d; ++i) {\n    y[i] = 0.0\n  }\n  y[d] = u\n\n  dpoints[0] = y.slice()\n  dindex[0] = -1\n\n  for(var i=0; i<=d; ++i) {\n    var x = y.slice()\n    x[i] = 1\n    dpoints[i+1] = x\n    dindex[i+1] = -1\n  }\n\n  //Copy rest of the points over\n  for(var i=0; i<n; ++i) {\n    var h = lifted[i]\n    dpoints[i + d + 1] = h.point\n    dindex[i + d + 1] =  h.index\n  }\n\n  //Construct convex hull\n  var hull = ch(dpoints, false)\n  if(includePointAtInfinity) {\n    hull = hull.filter(function(cell) {\n      var count = 0\n      for(var j=0; j<=d; ++j) {\n        var v = dindex[cell[j]]\n        if(v < 0) {\n          if(++count >= 2) {\n            return false\n          }\n        }\n        cell[j] = v\n      }\n      return true\n    })\n  } else {\n    hull = hull.filter(function(cell) {\n      for(var i=0; i<=d; ++i) {\n        var v = dindex[cell[i]]\n        if(v < 0) {\n          return false\n        }\n        cell[i] = v\n      }\n      return true\n    })\n  }\n\n  if(d & 1) {\n    for(var i=0; i<hull.length; ++i) {\n      var h = hull[i]\n      var x = h[0]\n      h[0] = h[1]\n      h[1] = x\n    }\n  }\n\n  return hull\n}"]},"metadata":{},"sourceType":"script"}