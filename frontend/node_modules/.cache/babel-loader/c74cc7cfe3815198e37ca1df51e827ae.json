{"ast":null,"code":"import { ascending, min, max, sum } from \"d3-array\";\nimport { map, nest } from \"d3-collection\";\nimport { justify } from \"./align\";\nimport constant from \"./constant\";\n\nfunction ascendingSourceBreadth(a, b) {\n  return ascendingBreadth(a.source, b.source) || a.index - b.index;\n}\n\nfunction ascendingTargetBreadth(a, b) {\n  return ascendingBreadth(a.target, b.target) || a.index - b.index;\n}\n\nfunction ascendingBreadth(a, b) {\n  return a.y0 - b.y0;\n}\n\nfunction value(d) {\n  return d.value;\n}\n\nfunction nodeCenter(node) {\n  return (node.y0 + node.y1) / 2;\n}\n\nfunction weightedSource(link) {\n  return nodeCenter(link.source) * link.value;\n}\n\nfunction weightedTarget(link) {\n  return nodeCenter(link.target) * link.value;\n}\n\nfunction defaultId(d) {\n  return d.index;\n}\n\nfunction defaultNodes(graph) {\n  return graph.nodes;\n}\n\nfunction defaultLinks(graph) {\n  return graph.links;\n}\n\nfunction find(nodeById, id) {\n  var node = nodeById.get(id);\n  if (!node) throw new Error(\"missing: \" + id);\n  return node;\n}\n\nexport default function () {\n  var x0 = 0,\n      y0 = 0,\n      x1 = 1,\n      y1 = 1,\n      // extent\n  dx = 24,\n      // nodeWidth\n  py = 8,\n      // nodePadding\n  id = defaultId,\n      align = justify,\n      nodes = defaultNodes,\n      links = defaultLinks,\n      iterations = 32,\n      maxPaddedSpace = 2 / 3; // Defined as a fraction of the total available space\n\n  function sankey() {\n    var graph = {\n      nodes: nodes.apply(null, arguments),\n      links: links.apply(null, arguments)\n    };\n    computeNodeLinks(graph);\n    computeNodeValues(graph);\n    computeNodeDepths(graph);\n    computeNodeBreadths(graph, iterations);\n    computeLinkBreadths(graph);\n    return graph;\n  }\n\n  sankey.update = function (graph) {\n    computeLinkBreadths(graph);\n    return graph;\n  };\n\n  sankey.nodeId = function (_) {\n    return arguments.length ? (id = typeof _ === \"function\" ? _ : constant(_), sankey) : id;\n  };\n\n  sankey.nodeAlign = function (_) {\n    return arguments.length ? (align = typeof _ === \"function\" ? _ : constant(_), sankey) : align;\n  };\n\n  sankey.nodeWidth = function (_) {\n    return arguments.length ? (dx = +_, sankey) : dx;\n  };\n\n  sankey.nodePadding = function (_) {\n    return arguments.length ? (py = +_, sankey) : py;\n  };\n\n  sankey.nodes = function (_) {\n    return arguments.length ? (nodes = typeof _ === \"function\" ? _ : constant(_), sankey) : nodes;\n  };\n\n  sankey.links = function (_) {\n    return arguments.length ? (links = typeof _ === \"function\" ? _ : constant(_), sankey) : links;\n  };\n\n  sankey.size = function (_) {\n    return arguments.length ? (x0 = y0 = 0, x1 = +_[0], y1 = +_[1], sankey) : [x1 - x0, y1 - y0];\n  };\n\n  sankey.extent = function (_) {\n    return arguments.length ? (x0 = +_[0][0], x1 = +_[1][0], y0 = +_[0][1], y1 = +_[1][1], sankey) : [[x0, y0], [x1, y1]];\n  };\n\n  sankey.iterations = function (_) {\n    return arguments.length ? (iterations = +_, sankey) : iterations;\n  }; // Populate the sourceLinks and targetLinks for each node.\n  // Also, if the source and target are not objects, assume they are indices.\n\n\n  function computeNodeLinks(graph) {\n    graph.nodes.forEach(function (node, i) {\n      node.index = i;\n      node.sourceLinks = [];\n      node.targetLinks = [];\n    });\n    var nodeById = map(graph.nodes, id);\n    graph.links.forEach(function (link, i) {\n      link.index = i;\n      var source = link.source,\n          target = link.target;\n      if (typeof source !== \"object\") source = link.source = find(nodeById, source);\n      if (typeof target !== \"object\") target = link.target = find(nodeById, target);\n      source.sourceLinks.push(link);\n      target.targetLinks.push(link);\n    });\n  } // Compute the value (size) of each node by summing the associated links.\n\n\n  function computeNodeValues(graph) {\n    graph.nodes.forEach(function (node) {\n      node.value = Math.max(sum(node.sourceLinks, value), sum(node.targetLinks, value));\n    });\n  } // Iteratively assign the depth (x-position) for each node.\n  // Nodes are assigned the maximum depth of incoming neighbors plus one;\n  // nodes with no incoming links are assigned depth zero, while\n  // nodes with no outgoing links are assigned the maximum depth.\n\n\n  function computeNodeDepths(graph) {\n    var nodes, next, x;\n\n    for (nodes = graph.nodes, next = [], x = 0; nodes.length; ++x, nodes = next, next = []) {\n      nodes.forEach(function (node) {\n        node.depth = x;\n        node.sourceLinks.forEach(function (link) {\n          if (next.indexOf(link.target) < 0) {\n            next.push(link.target);\n          }\n        });\n      });\n    }\n\n    for (nodes = graph.nodes, next = [], x = 0; nodes.length; ++x, nodes = next, next = []) {\n      nodes.forEach(function (node) {\n        node.height = x;\n        node.targetLinks.forEach(function (link) {\n          if (next.indexOf(link.source) < 0) {\n            next.push(link.source);\n          }\n        });\n      });\n    }\n\n    var kx = (x1 - x0 - dx) / (x - 1);\n    graph.nodes.forEach(function (node) {\n      node.x1 = (node.x0 = x0 + Math.max(0, Math.min(x - 1, Math.floor(align.call(null, node, x)))) * kx) + dx;\n    });\n  }\n\n  function computeNodeBreadths(graph) {\n    var columns = nest().key(function (d) {\n      return d.x0;\n    }).sortKeys(ascending).entries(graph.nodes).map(function (d) {\n      return d.values;\n    }); //\n\n    initializeNodeBreadth();\n    resolveCollisions();\n\n    for (var alpha = 1, n = iterations; n > 0; --n) {\n      relaxRightToLeft(alpha *= 0.99);\n      resolveCollisions();\n      relaxLeftToRight(alpha);\n      resolveCollisions();\n    }\n\n    function initializeNodeBreadth() {\n      var L = max(columns, function (nodes) {\n        return nodes.length;\n      });\n      var maxNodePadding = maxPaddedSpace * (y1 - y0) / (L - 1);\n      if (py > maxNodePadding) py = maxNodePadding;\n      var ky = min(columns, function (nodes) {\n        return (y1 - y0 - (nodes.length - 1) * py) / sum(nodes, value);\n      });\n      columns.forEach(function (nodes) {\n        nodes.forEach(function (node, i) {\n          node.y1 = (node.y0 = i) + node.value * ky;\n        });\n      });\n      graph.links.forEach(function (link) {\n        link.width = link.value * ky;\n      });\n    }\n\n    function relaxLeftToRight(alpha) {\n      columns.forEach(function (nodes) {\n        nodes.forEach(function (node) {\n          if (node.targetLinks.length) {\n            var dy = (sum(node.targetLinks, weightedSource) / sum(node.targetLinks, value) - nodeCenter(node)) * alpha;\n            node.y0 += dy, node.y1 += dy;\n          }\n        });\n      });\n    }\n\n    function relaxRightToLeft(alpha) {\n      columns.slice().reverse().forEach(function (nodes) {\n        nodes.forEach(function (node) {\n          if (node.sourceLinks.length) {\n            var dy = (sum(node.sourceLinks, weightedTarget) / sum(node.sourceLinks, value) - nodeCenter(node)) * alpha;\n            node.y0 += dy, node.y1 += dy;\n          }\n        });\n      });\n    }\n\n    function resolveCollisions() {\n      columns.forEach(function (nodes) {\n        var node,\n            dy,\n            y = y0,\n            n = nodes.length,\n            i; // Push any overlapping nodes down.\n\n        nodes.sort(ascendingBreadth);\n\n        for (i = 0; i < n; ++i) {\n          node = nodes[i];\n          dy = y - node.y0;\n          if (dy > 0) node.y0 += dy, node.y1 += dy;\n          y = node.y1 + py;\n        } // If the bottommost node goes outside the bounds, push it back up.\n\n\n        dy = y - py - y1;\n\n        if (dy > 0) {\n          y = node.y0 -= dy, node.y1 -= dy; // Push any overlapping nodes back up.\n\n          for (i = n - 2; i >= 0; --i) {\n            node = nodes[i];\n            dy = node.y1 + py - y;\n            if (dy > 0) node.y0 -= dy, node.y1 -= dy;\n            y = node.y0;\n          }\n        }\n      });\n    }\n  }\n\n  function computeLinkBreadths(graph) {\n    graph.nodes.forEach(function (node) {\n      node.sourceLinks.sort(ascendingTargetBreadth);\n      node.targetLinks.sort(ascendingSourceBreadth);\n    });\n    graph.nodes.forEach(function (node) {\n      var y0 = node.y0,\n          y1 = y0;\n      node.sourceLinks.forEach(function (link) {\n        link.y0 = y0 + link.width / 2, y0 += link.width;\n      });\n      node.targetLinks.forEach(function (link) {\n        link.y1 = y1 + link.width / 2, y1 += link.width;\n      });\n    });\n  }\n\n  return sankey;\n}","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/@plotly/d3-sankey/src/sankey.js"],"names":["ascending","min","max","sum","map","nest","justify","constant","ascendingSourceBreadth","a","b","ascendingBreadth","source","index","ascendingTargetBreadth","target","y0","value","d","nodeCenter","node","y1","weightedSource","link","weightedTarget","defaultId","defaultNodes","graph","nodes","defaultLinks","links","find","nodeById","id","get","Error","x0","x1","dx","py","align","iterations","maxPaddedSpace","sankey","apply","arguments","computeNodeLinks","computeNodeValues","computeNodeDepths","computeNodeBreadths","computeLinkBreadths","update","nodeId","_","length","nodeAlign","nodeWidth","nodePadding","size","extent","forEach","i","sourceLinks","targetLinks","push","Math","next","x","depth","indexOf","height","kx","floor","call","columns","key","sortKeys","entries","values","initializeNodeBreadth","resolveCollisions","alpha","n","relaxRightToLeft","relaxLeftToRight","L","maxNodePadding","ky","width","dy","slice","reverse","y","sort"],"mappings":"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","sourcesContent":["import {ascending, min, max, sum} from \"d3-array\";\nimport {map, nest} from \"d3-collection\";\nimport {justify} from \"./align\";\nimport constant from \"./constant\";\n\nfunction ascendingSourceBreadth(a, b) {\n  return ascendingBreadth(a.source, b.source) || a.index - b.index;\n}\n\nfunction ascendingTargetBreadth(a, b) {\n  return ascendingBreadth(a.target, b.target) || a.index - b.index;\n}\n\nfunction ascendingBreadth(a, b) {\n  return a.y0 - b.y0;\n}\n\nfunction value(d) {\n  return d.value;\n}\n\nfunction nodeCenter(node) {\n  return (node.y0 + node.y1) / 2;\n}\n\nfunction weightedSource(link) {\n  return nodeCenter(link.source) * link.value;\n}\n\nfunction weightedTarget(link) {\n  return nodeCenter(link.target) * link.value;\n}\n\nfunction defaultId(d) {\n  return d.index;\n}\n\nfunction defaultNodes(graph) {\n  return graph.nodes;\n}\n\nfunction defaultLinks(graph) {\n  return graph.links;\n}\n\nfunction find(nodeById, id) {\n  var node = nodeById.get(id);\n  if (!node) throw new Error(\"missing: \" + id);\n  return node;\n}\n\nexport default function() {\n  var x0 = 0, y0 = 0, x1 = 1, y1 = 1, // extent\n      dx = 24, // nodeWidth\n      py = 8, // nodePadding\n      id = defaultId,\n      align = justify,\n      nodes = defaultNodes,\n      links = defaultLinks,\n      iterations = 32,\n      maxPaddedSpace = 2 / 3; // Defined as a fraction of the total available space\n\n  function sankey() {\n    var graph = {nodes: nodes.apply(null, arguments), links: links.apply(null, arguments)};\n    computeNodeLinks(graph);\n    computeNodeValues(graph);\n    computeNodeDepths(graph);\n    computeNodeBreadths(graph, iterations);\n    computeLinkBreadths(graph);\n    return graph;\n  }\n\n  sankey.update = function(graph) {\n    computeLinkBreadths(graph);\n    return graph;\n  };\n\n  sankey.nodeId = function(_) {\n    return arguments.length ? (id = typeof _ === \"function\" ? _ : constant(_), sankey) : id;\n  };\n\n  sankey.nodeAlign = function(_) {\n    return arguments.length ? (align = typeof _ === \"function\" ? _ : constant(_), sankey) : align;\n  };\n\n  sankey.nodeWidth = function(_) {\n    return arguments.length ? (dx = +_, sankey) : dx;\n  };\n\n  sankey.nodePadding = function(_) {\n    return arguments.length ? (py = +_, sankey) : py;\n  };\n\n  sankey.nodes = function(_) {\n    return arguments.length ? (nodes = typeof _ === \"function\" ? _ : constant(_), sankey) : nodes;\n  };\n\n  sankey.links = function(_) {\n    return arguments.length ? (links = typeof _ === \"function\" ? _ : constant(_), sankey) : links;\n  };\n\n  sankey.size = function(_) {\n    return arguments.length ? (x0 = y0 = 0, x1 = +_[0], y1 = +_[1], sankey) : [x1 - x0, y1 - y0];\n  };\n\n  sankey.extent = function(_) {\n    return arguments.length ? (x0 = +_[0][0], x1 = +_[1][0], y0 = +_[0][1], y1 = +_[1][1], sankey) : [[x0, y0], [x1, y1]];\n  };\n\n  sankey.iterations = function(_) {\n    return arguments.length ? (iterations = +_, sankey) : iterations;\n  };\n\n  // Populate the sourceLinks and targetLinks for each node.\n  // Also, if the source and target are not objects, assume they are indices.\n  function computeNodeLinks(graph) {\n    graph.nodes.forEach(function(node, i) {\n      node.index = i;\n      node.sourceLinks = [];\n      node.targetLinks = [];\n    });\n\n    var nodeById = map(graph.nodes, id);\n    graph.links.forEach(function(link, i) {\n      link.index = i;\n      var source = link.source, target = link.target;\n      if (typeof source !== \"object\") source = link.source = find(nodeById, source);\n      if (typeof target !== \"object\") target = link.target = find(nodeById, target);\n      source.sourceLinks.push(link);\n      target.targetLinks.push(link);\n    });\n  }\n\n  // Compute the value (size) of each node by summing the associated links.\n  function computeNodeValues(graph) {\n    graph.nodes.forEach(function(node) {\n      node.value = Math.max(\n        sum(node.sourceLinks, value),\n        sum(node.targetLinks, value)\n      );\n    });\n  }\n\n  // Iteratively assign the depth (x-position) for each node.\n  // Nodes are assigned the maximum depth of incoming neighbors plus one;\n  // nodes with no incoming links are assigned depth zero, while\n  // nodes with no outgoing links are assigned the maximum depth.\n  function computeNodeDepths(graph) {\n    var nodes, next, x;\n\n    for (nodes = graph.nodes, next = [], x = 0; nodes.length; ++x, nodes = next, next = []) {\n      nodes.forEach(function(node) {\n        node.depth = x;\n        node.sourceLinks.forEach(function(link) {\n          if (next.indexOf(link.target) < 0) {\n            next.push(link.target);\n          }\n        });\n      });\n    }\n\n    for (nodes = graph.nodes, next = [], x = 0; nodes.length; ++x, nodes = next, next = []) {\n      nodes.forEach(function(node) {\n        node.height = x;\n        node.targetLinks.forEach(function(link) {\n          if (next.indexOf(link.source) < 0) {\n            next.push(link.source);\n          }\n        });\n      });\n    }\n\n    var kx = (x1 - x0 - dx) / (x - 1);\n    graph.nodes.forEach(function(node) {\n      node.x1 = (node.x0 = x0 + Math.max(0, Math.min(x - 1, Math.floor(align.call(null, node, x)))) * kx) + dx;\n    });\n  }\n\n  function computeNodeBreadths(graph) {\n    var columns = nest()\n        .key(function(d) { return d.x0; })\n        .sortKeys(ascending)\n        .entries(graph.nodes)\n        .map(function(d) { return d.values; });\n\n    //\n    initializeNodeBreadth();\n    resolveCollisions();\n    for (var alpha = 1, n = iterations; n > 0; --n) {\n      relaxRightToLeft(alpha *= 0.99);\n      resolveCollisions();\n      relaxLeftToRight(alpha);\n      resolveCollisions();\n    }\n\n    function initializeNodeBreadth() {\n      var L = max(columns, function(nodes) {\n        return nodes.length;\n      });\n      var maxNodePadding = maxPaddedSpace * (y1 - y0) / (L - 1);\n      if(py > maxNodePadding) py = maxNodePadding;\n      var ky = min(columns, function(nodes) {\n        return (y1 - y0 - (nodes.length - 1) * py) / sum(nodes, value);\n      });\n\n      columns.forEach(function(nodes) {\n        nodes.forEach(function(node, i) {\n          node.y1 = (node.y0 = i) + node.value * ky;\n        });\n      });\n\n      graph.links.forEach(function(link) {\n        link.width = link.value * ky;\n      });\n    }\n\n    function relaxLeftToRight(alpha) {\n      columns.forEach(function(nodes) {\n        nodes.forEach(function(node) {\n          if (node.targetLinks.length) {\n            var dy = (sum(node.targetLinks, weightedSource) / sum(node.targetLinks, value) - nodeCenter(node)) * alpha;\n            node.y0 += dy, node.y1 += dy;\n          }\n        });\n      });\n    }\n\n    function relaxRightToLeft(alpha) {\n      columns.slice().reverse().forEach(function(nodes) {\n        nodes.forEach(function(node) {\n          if (node.sourceLinks.length) {\n            var dy = (sum(node.sourceLinks, weightedTarget) / sum(node.sourceLinks, value) - nodeCenter(node)) * alpha;\n            node.y0 += dy, node.y1 += dy;\n          }\n        });\n      });\n    }\n\n    function resolveCollisions() {\n      columns.forEach(function(nodes) {\n        var node,\n            dy,\n            y = y0,\n            n = nodes.length,\n            i;\n\n        // Push any overlapping nodes down.\n        nodes.sort(ascendingBreadth);\n        for (i = 0; i < n; ++i) {\n          node = nodes[i];\n          dy = y - node.y0;\n          if (dy > 0) node.y0 += dy, node.y1 += dy;\n          y = node.y1 + py;\n        }\n\n        // If the bottommost node goes outside the bounds, push it back up.\n        dy = y - py - y1;\n        if (dy > 0) {\n          y = (node.y0 -= dy), node.y1 -= dy;\n\n          // Push any overlapping nodes back up.\n          for (i = n - 2; i >= 0; --i) {\n            node = nodes[i];\n            dy = node.y1 + py - y;\n            if (dy > 0) node.y0 -= dy, node.y1 -= dy;\n            y = node.y0;\n          }\n        }\n      });\n    }\n  }\n\n  function computeLinkBreadths(graph) {\n    graph.nodes.forEach(function(node) {\n      node.sourceLinks.sort(ascendingTargetBreadth);\n      node.targetLinks.sort(ascendingSourceBreadth);\n    });\n    graph.nodes.forEach(function(node) {\n      var y0 = node.y0, y1 = y0;\n      node.sourceLinks.forEach(function(link) {\n        link.y0 = y0 + link.width / 2, y0 += link.width;\n      });\n      node.targetLinks.forEach(function(link) {\n        link.y1 = y1 + link.width / 2, y1 += link.width;\n      });\n    });\n  }\n\n  return sankey;\n}\n"]},"metadata":{},"sourceType":"module"}