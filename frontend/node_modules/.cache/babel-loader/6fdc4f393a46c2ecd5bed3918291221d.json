{"ast":null,"code":"\"use strict\";\n\nfunction doBind(gl, elements, attributes) {\n  if (elements) {\n    elements.bind();\n  } else {\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n  }\n\n  var nattribs = gl.getParameter(gl.MAX_VERTEX_ATTRIBS) | 0;\n\n  if (attributes) {\n    if (attributes.length > nattribs) {\n      throw new Error(\"gl-vao: Too many vertex attributes\");\n    }\n\n    for (var i = 0; i < attributes.length; ++i) {\n      var attrib = attributes[i];\n\n      if (attrib.buffer) {\n        var buffer = attrib.buffer;\n        var size = attrib.size || 4;\n        var type = attrib.type || gl.FLOAT;\n        var normalized = !!attrib.normalized;\n        var stride = attrib.stride || 0;\n        var offset = attrib.offset || 0;\n        buffer.bind();\n        gl.enableVertexAttribArray(i);\n        gl.vertexAttribPointer(i, size, type, normalized, stride, offset);\n      } else {\n        if (typeof attrib === \"number\") {\n          gl.vertexAttrib1f(i, attrib);\n        } else if (attrib.length === 1) {\n          gl.vertexAttrib1f(i, attrib[0]);\n        } else if (attrib.length === 2) {\n          gl.vertexAttrib2f(i, attrib[0], attrib[1]);\n        } else if (attrib.length === 3) {\n          gl.vertexAttrib3f(i, attrib[0], attrib[1], attrib[2]);\n        } else if (attrib.length === 4) {\n          gl.vertexAttrib4f(i, attrib[0], attrib[1], attrib[2], attrib[3]);\n        } else {\n          throw new Error(\"gl-vao: Invalid vertex attribute\");\n        }\n\n        gl.disableVertexAttribArray(i);\n      }\n    }\n\n    for (; i < nattribs; ++i) {\n      gl.disableVertexAttribArray(i);\n    }\n  } else {\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n    for (var i = 0; i < nattribs; ++i) {\n      gl.disableVertexAttribArray(i);\n    }\n  }\n}\n\nmodule.exports = doBind;","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/gl-vao/lib/do-bind.js"],"names":["doBind","gl","elements","attributes","bind","bindBuffer","ELEMENT_ARRAY_BUFFER","nattribs","getParameter","MAX_VERTEX_ATTRIBS","length","Error","i","attrib","buffer","size","type","FLOAT","normalized","stride","offset","enableVertexAttribArray","vertexAttribPointer","vertexAttrib1f","vertexAttrib2f","vertexAttrib3f","vertexAttrib4f","disableVertexAttribArray","ARRAY_BUFFER","module","exports"],"mappings":"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","sourcesContent":["\"use strict\"\n\nfunction doBind(gl, elements, attributes) {\n  if(elements) {\n    elements.bind()\n  } else {\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null)\n  }\n  var nattribs = gl.getParameter(gl.MAX_VERTEX_ATTRIBS)|0\n  if(attributes) {\n    if(attributes.length > nattribs) {\n      throw new Error(\"gl-vao: Too many vertex attributes\")\n    }\n    for(var i=0; i<attributes.length; ++i) {\n      var attrib = attributes[i]\n      if(attrib.buffer) {\n        var buffer = attrib.buffer\n        var size = attrib.size || 4\n        var type = attrib.type || gl.FLOAT\n        var normalized = !!attrib.normalized\n        var stride = attrib.stride || 0\n        var offset = attrib.offset || 0\n        buffer.bind()\n        gl.enableVertexAttribArray(i)\n        gl.vertexAttribPointer(i, size, type, normalized, stride, offset)\n      } else {\n        if(typeof attrib === \"number\") {\n          gl.vertexAttrib1f(i, attrib)\n        } else if(attrib.length === 1) {\n          gl.vertexAttrib1f(i, attrib[0])\n        } else if(attrib.length === 2) {\n          gl.vertexAttrib2f(i, attrib[0], attrib[1])\n        } else if(attrib.length === 3) {\n          gl.vertexAttrib3f(i, attrib[0], attrib[1], attrib[2])\n        } else if(attrib.length === 4) {\n          gl.vertexAttrib4f(i, attrib[0], attrib[1], attrib[2], attrib[3])\n        } else {\n          throw new Error(\"gl-vao: Invalid vertex attribute\")\n        }\n        gl.disableVertexAttribArray(i)\n      }\n    }\n    for(; i<nattribs; ++i) {\n      gl.disableVertexAttribArray(i)\n    }\n  } else {\n    gl.bindBuffer(gl.ARRAY_BUFFER, null)\n    for(var i=0; i<nattribs; ++i) {\n      gl.disableVertexAttribArray(i)\n    }\n  }\n}\n\nmodule.exports = doBind"]},"metadata":{},"sourceType":"script"}