{"ast":null,"code":"'use strict';\n\nvar gl3dAxisAttrs = require('./axis_attributes');\n\nvar domainAttrs = require('../../domain').attributes;\n\nvar extendFlat = require('../../../lib/extend').extendFlat;\n\nvar counterRegex = require('../../../lib').counterRegex;\n\nfunction makeCameraVector(x, y, z) {\n  return {\n    x: {\n      valType: 'number',\n      dflt: x,\n      editType: 'camera'\n    },\n    y: {\n      valType: 'number',\n      dflt: y,\n      editType: 'camera'\n    },\n    z: {\n      valType: 'number',\n      dflt: z,\n      editType: 'camera'\n    },\n    editType: 'camera'\n  };\n}\n\nmodule.exports = {\n  _arrayAttrRegexps: [counterRegex('scene', '.annotations', true)],\n  bgcolor: {\n    valType: 'color',\n    dflt: 'rgba(0,0,0,0)',\n    editType: 'plot'\n  },\n  camera: {\n    up: extendFlat(makeCameraVector(0, 0, 1), {\n      description: ['Sets the (x,y,z) components of the \\'up\\' camera vector.', 'This vector determines the up direction of this scene', 'with respect to the page.', 'The default is *{x: 0, y: 0, z: 1}* which means that', 'the z axis points up.'].join(' ')\n    }),\n    center: extendFlat(makeCameraVector(0, 0, 0), {\n      description: ['Sets the (x,y,z) components of the \\'center\\' camera vector', 'This vector determines the translation (x,y,z) space', 'about the center of this scene.', 'By default, there is no such translation.'].join(' ')\n    }),\n    eye: extendFlat(makeCameraVector(1.25, 1.25, 1.25), {\n      description: ['Sets the (x,y,z) components of the \\'eye\\' camera vector.', 'This vector determines the view point about the origin', 'of this scene.'].join(' ')\n    }),\n    projection: {\n      type: {\n        valType: 'enumerated',\n        values: ['perspective', 'orthographic'],\n        dflt: 'perspective',\n        editType: 'calc',\n        description: ['Sets the projection type. The projection type could be', 'either *perspective* or *orthographic*. The default is', '*perspective*.'].join(' ')\n      },\n      editType: 'calc'\n    },\n    editType: 'camera'\n  },\n  domain: domainAttrs({\n    name: 'scene',\n    editType: 'plot'\n  }),\n  aspectmode: {\n    valType: 'enumerated',\n    values: ['auto', 'cube', 'data', 'manual'],\n    dflt: 'auto',\n    editType: 'plot',\n    impliedEdits: {\n      'aspectratio.x': undefined,\n      'aspectratio.y': undefined,\n      'aspectratio.z': undefined\n    },\n    description: ['If *cube*, this scene\\'s axes are drawn as a cube,', 'regardless of the axes\\' ranges.', 'If *data*, this scene\\'s axes are drawn', 'in proportion with the axes\\' ranges.', 'If *manual*, this scene\\'s axes are drawn', 'in proportion with the input of *aspectratio*', '(the default behavior if *aspectratio* is provided).', 'If *auto*, this scene\\'s axes are drawn', 'using the results of *data* except when one axis', 'is more than four times the size of the two others,', 'where in that case the results of *cube* are used.'].join(' ')\n  },\n  aspectratio: {\n    // must be positive (0's are coerced to 1)\n    x: {\n      valType: 'number',\n      min: 0,\n      editType: 'plot',\n      impliedEdits: {\n        '^aspectmode': 'manual'\n      }\n    },\n    y: {\n      valType: 'number',\n      min: 0,\n      editType: 'plot',\n      impliedEdits: {\n        '^aspectmode': 'manual'\n      }\n    },\n    z: {\n      valType: 'number',\n      min: 0,\n      editType: 'plot',\n      impliedEdits: {\n        '^aspectmode': 'manual'\n      }\n    },\n    editType: 'plot',\n    impliedEdits: {\n      aspectmode: 'manual'\n    },\n    description: ['Sets this scene\\'s axis aspectratio.'].join(' ')\n  },\n  xaxis: gl3dAxisAttrs,\n  yaxis: gl3dAxisAttrs,\n  zaxis: gl3dAxisAttrs,\n  dragmode: {\n    valType: 'enumerated',\n    values: ['orbit', 'turntable', 'zoom', 'pan', false],\n    editType: 'plot',\n    description: ['Determines the mode of drag interactions for this scene.'].join(' ')\n  },\n  hovermode: {\n    valType: 'enumerated',\n    values: ['closest', false],\n    dflt: 'closest',\n    editType: 'modebar',\n    description: ['Determines the mode of hover interactions for this scene.'].join(' ')\n  },\n  uirevision: {\n    valType: 'any',\n    editType: 'none',\n    description: ['Controls persistence of user-driven changes in camera attributes.', 'Defaults to `layout.uirevision`.'].join(' ')\n  },\n  editType: 'plot',\n  _deprecated: {\n    cameraposition: {\n      valType: 'info_array',\n      editType: 'camera',\n      description: 'Obsolete. Use `camera` instead.'\n    }\n  }\n};","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/plotly.js/src/plots/gl3d/layout/layout_attributes.js"],"names":["gl3dAxisAttrs","require","domainAttrs","attributes","extendFlat","counterRegex","makeCameraVector","x","y","z","valType","dflt","editType","module","exports","_arrayAttrRegexps","bgcolor","camera","up","description","join","center","eye","projection","type","values","domain","name","aspectmode","impliedEdits","undefined","aspectratio","min","xaxis","yaxis","zaxis","dragmode","hovermode","uirevision","_deprecated","cameraposition"],"mappings":"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","sourcesContent":["'use strict';\n\nvar gl3dAxisAttrs = require('./axis_attributes');\nvar domainAttrs = require('../../domain').attributes;\nvar extendFlat = require('../../../lib/extend').extendFlat;\nvar counterRegex = require('../../../lib').counterRegex;\n\nfunction makeCameraVector(x, y, z) {\n    return {\n        x: {\n            valType: 'number',\n            dflt: x,\n            editType: 'camera'\n        },\n        y: {\n            valType: 'number',\n            dflt: y,\n            editType: 'camera'\n        },\n        z: {\n            valType: 'number',\n            dflt: z,\n            editType: 'camera'\n        },\n        editType: 'camera'\n    };\n}\n\nmodule.exports = {\n    _arrayAttrRegexps: [counterRegex('scene', '.annotations', true)],\n\n    bgcolor: {\n        valType: 'color',\n        dflt: 'rgba(0,0,0,0)',\n        editType: 'plot'\n    },\n    camera: {\n        up: extendFlat(makeCameraVector(0, 0, 1), {\n            description: [\n                'Sets the (x,y,z) components of the \\'up\\' camera vector.',\n                'This vector determines the up direction of this scene',\n                'with respect to the page.',\n                'The default is *{x: 0, y: 0, z: 1}* which means that',\n                'the z axis points up.'\n            ].join(' ')\n        }),\n        center: extendFlat(makeCameraVector(0, 0, 0), {\n            description: [\n                'Sets the (x,y,z) components of the \\'center\\' camera vector',\n                'This vector determines the translation (x,y,z) space',\n                'about the center of this scene.',\n                'By default, there is no such translation.'\n            ].join(' ')\n        }),\n        eye: extendFlat(makeCameraVector(1.25, 1.25, 1.25), {\n            description: [\n                'Sets the (x,y,z) components of the \\'eye\\' camera vector.',\n                'This vector determines the view point about the origin',\n                'of this scene.'\n            ].join(' ')\n        }),\n        projection: {\n            type: {\n                valType: 'enumerated',\n                values: ['perspective', 'orthographic'],\n                dflt: 'perspective',\n                editType: 'calc',\n                description: [\n                    'Sets the projection type. The projection type could be',\n                    'either *perspective* or *orthographic*. The default is',\n                    '*perspective*.'\n                ].join(' ')\n            },\n            editType: 'calc'\n        },\n        editType: 'camera'\n    },\n    domain: domainAttrs({name: 'scene', editType: 'plot'}),\n    aspectmode: {\n        valType: 'enumerated',\n        values: ['auto', 'cube', 'data', 'manual'],\n        dflt: 'auto',\n        editType: 'plot',\n        impliedEdits: {\n            'aspectratio.x': undefined,\n            'aspectratio.y': undefined,\n            'aspectratio.z': undefined\n        },\n        description: [\n            'If *cube*, this scene\\'s axes are drawn as a cube,',\n            'regardless of the axes\\' ranges.',\n\n            'If *data*, this scene\\'s axes are drawn',\n            'in proportion with the axes\\' ranges.',\n\n            'If *manual*, this scene\\'s axes are drawn',\n            'in proportion with the input of *aspectratio*',\n            '(the default behavior if *aspectratio* is provided).',\n\n            'If *auto*, this scene\\'s axes are drawn',\n            'using the results of *data* except when one axis',\n            'is more than four times the size of the two others,',\n            'where in that case the results of *cube* are used.'\n        ].join(' ')\n    },\n    aspectratio: { // must be positive (0's are coerced to 1)\n        x: {\n            valType: 'number',\n            min: 0,\n            editType: 'plot',\n            impliedEdits: {'^aspectmode': 'manual'}\n        },\n        y: {\n            valType: 'number',\n            min: 0,\n            editType: 'plot',\n            impliedEdits: {'^aspectmode': 'manual'}\n        },\n        z: {\n            valType: 'number',\n            min: 0,\n            editType: 'plot',\n            impliedEdits: {'^aspectmode': 'manual'}\n        },\n        editType: 'plot',\n        impliedEdits: {aspectmode: 'manual'},\n        description: [\n            'Sets this scene\\'s axis aspectratio.'\n        ].join(' ')\n    },\n\n    xaxis: gl3dAxisAttrs,\n    yaxis: gl3dAxisAttrs,\n    zaxis: gl3dAxisAttrs,\n\n    dragmode: {\n        valType: 'enumerated',\n        values: ['orbit', 'turntable', 'zoom', 'pan', false],\n        editType: 'plot',\n        description: [\n            'Determines the mode of drag interactions for this scene.'\n        ].join(' ')\n    },\n    hovermode: {\n        valType: 'enumerated',\n        values: ['closest', false],\n        dflt: 'closest',\n        editType: 'modebar',\n        description: [\n            'Determines the mode of hover interactions for this scene.'\n        ].join(' ')\n    },\n    uirevision: {\n        valType: 'any',\n        editType: 'none',\n        description: [\n            'Controls persistence of user-driven changes in camera attributes.',\n            'Defaults to `layout.uirevision`.'\n        ].join(' ')\n    },\n    editType: 'plot',\n\n    _deprecated: {\n        cameraposition: {\n            valType: 'info_array',\n            editType: 'camera',\n            description: 'Obsolete. Use `camera` instead.'\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}