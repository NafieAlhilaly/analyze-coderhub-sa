{"ast":null,"code":"//Optimized version for triangle closest point\n// Based on Eberly's WildMagick codes\n// http://www.geometrictools.com/LibMathematics/Distance/Distance.html\n\"use strict\";\n\nvar diff = new Float64Array(4);\nvar edge0 = new Float64Array(4);\nvar edge1 = new Float64Array(4);\n\nfunction closestPoint2d(V0, V1, V2, point, result) {\n  //Reallocate buffers if necessary\n  if (diff.length < point.length) {\n    diff = new Float64Array(point.length);\n    edge0 = new Float64Array(point.length);\n    edge1 = new Float64Array(point.length);\n  } //Compute edges\n\n\n  for (var i = 0; i < point.length; ++i) {\n    diff[i] = V0[i] - point[i];\n    edge0[i] = V1[i] - V0[i];\n    edge1[i] = V2[i] - V0[i];\n  } //Compute coefficients for quadratic func\n\n\n  var a00 = 0.0,\n      a01 = 0.0,\n      a11 = 0.0,\n      b0 = 0.0,\n      b1 = 0.0,\n      c = 0.0;\n\n  for (var i = 0; i < point.length; ++i) {\n    var e0 = edge0[i],\n        e1 = edge1[i],\n        d = diff[i];\n    a00 += e0 * e0;\n    a01 += e0 * e1;\n    a11 += e1 * e1;\n    b0 += d * e0;\n    b1 += d * e1;\n    c += d * d;\n  } //Compute determinant/coeffs\n\n\n  var det = Math.abs(a00 * a11 - a01 * a01);\n  var s = a01 * b1 - a11 * b0;\n  var t = a01 * b0 - a00 * b1;\n  var sqrDistance; //Hardcoded Voronoi diagram classification\n\n  if (s + t <= det) {\n    if (s < 0) {\n      if (t < 0) {\n        // region 4\n        if (b0 < 0) {\n          t = 0;\n\n          if (-b0 >= a00) {\n            s = 1.0;\n            sqrDistance = a00 + 2.0 * b0 + c;\n          } else {\n            s = -b0 / a00;\n            sqrDistance = b0 * s + c;\n          }\n        } else {\n          s = 0;\n\n          if (b1 >= 0) {\n            t = 0;\n            sqrDistance = c;\n          } else if (-b1 >= a11) {\n            t = 1;\n            sqrDistance = a11 + 2.0 * b1 + c;\n          } else {\n            t = -b1 / a11;\n            sqrDistance = b1 * t + c;\n          }\n        }\n      } else {\n        // region 3\n        s = 0;\n\n        if (b1 >= 0) {\n          t = 0;\n          sqrDistance = c;\n        } else if (-b1 >= a11) {\n          t = 1;\n          sqrDistance = a11 + 2.0 * b1 + c;\n        } else {\n          t = -b1 / a11;\n          sqrDistance = b1 * t + c;\n        }\n      }\n    } else if (t < 0) {\n      // region 5\n      t = 0;\n\n      if (b0 >= 0) {\n        s = 0;\n        sqrDistance = c;\n      } else if (-b0 >= a00) {\n        s = 1;\n        sqrDistance = a00 + 2.0 * b0 + c;\n      } else {\n        s = -b0 / a00;\n        sqrDistance = b0 * s + c;\n      }\n    } else {\n      // region 0\n      // minimum at interior point\n      var invDet = 1.0 / det;\n      s *= invDet;\n      t *= invDet;\n      sqrDistance = s * (a00 * s + a01 * t + 2.0 * b0) + t * (a01 * s + a11 * t + 2.0 * b1) + c;\n    }\n  } else {\n    var tmp0, tmp1, numer, denom;\n\n    if (s < 0) {\n      // region 2\n      tmp0 = a01 + b0;\n      tmp1 = a11 + b1;\n\n      if (tmp1 > tmp0) {\n        numer = tmp1 - tmp0;\n        denom = a00 - 2.0 * a01 + a11;\n\n        if (numer >= denom) {\n          s = 1;\n          t = 0;\n          sqrDistance = a00 + 2.0 * b0 + c;\n        } else {\n          s = numer / denom;\n          t = 1 - s;\n          sqrDistance = s * (a00 * s + a01 * t + 2.0 * b0) + t * (a01 * s + a11 * t + 2.0 * b1) + c;\n        }\n      } else {\n        s = 0;\n\n        if (tmp1 <= 0) {\n          t = 1;\n          sqrDistance = a11 + 2.0 * b1 + c;\n        } else if (b1 >= 0) {\n          t = 0;\n          sqrDistance = c;\n        } else {\n          t = -b1 / a11;\n          sqrDistance = b1 * t + c;\n        }\n      }\n    } else if (t < 0) {\n      // region 6\n      tmp0 = a01 + b1;\n      tmp1 = a00 + b0;\n\n      if (tmp1 > tmp0) {\n        numer = tmp1 - tmp0;\n        denom = a00 - 2.0 * a01 + a11;\n\n        if (numer >= denom) {\n          t = 1;\n          s = 0;\n          sqrDistance = a11 + 2.0 * b1 + c;\n        } else {\n          t = numer / denom;\n          s = 1 - t;\n          sqrDistance = s * (a00 * s + a01 * t + 2.0 * b0) + t * (a01 * s + a11 * t + 2.0 * b1) + c;\n        }\n      } else {\n        t = 0;\n\n        if (tmp1 <= 0) {\n          s = 1;\n          sqrDistance = a00 + 2.0 * b0 + c;\n        } else if (b0 >= 0) {\n          s = 0;\n          sqrDistance = c;\n        } else {\n          s = -b0 / a00;\n          sqrDistance = b0 * s + c;\n        }\n      }\n    } else {\n      // region 1\n      numer = a11 + b1 - a01 - b0;\n\n      if (numer <= 0) {\n        s = 0;\n        t = 1;\n        sqrDistance = a11 + 2.0 * b1 + c;\n      } else {\n        denom = a00 - 2.0 * a01 + a11;\n\n        if (numer >= denom) {\n          s = 1;\n          t = 0;\n          sqrDistance = a00 + 2.0 * b0 + c;\n        } else {\n          s = numer / denom;\n          t = 1 - s;\n          sqrDistance = s * (a00 * s + a01 * t + 2.0 * b0) + t * (a01 * s + a11 * t + 2.0 * b1) + c;\n        }\n      }\n    }\n  }\n\n  var u = 1.0 - s - t;\n\n  for (var i = 0; i < point.length; ++i) {\n    result[i] = u * V0[i] + s * V1[i] + t * V2[i];\n  }\n\n  if (sqrDistance < 0) {\n    return 0;\n  }\n\n  return sqrDistance;\n}\n\nmodule.exports = closestPoint2d;","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/polytope-closest-point/lib/closest_point_2d.js"],"names":["diff","Float64Array","edge0","edge1","closestPoint2d","V0","V1","V2","point","result","length","i","a00","a01","a11","b0","b1","c","e0","e1","d","det","Math","abs","s","t","sqrDistance","invDet","tmp0","tmp1","numer","denom","u","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,IAAIA,IAAI,GAAG,IAAIC,YAAJ,CAAiB,CAAjB,CAAX;AACA,IAAIC,KAAK,GAAG,IAAID,YAAJ,CAAiB,CAAjB,CAAZ;AACA,IAAIE,KAAK,GAAG,IAAIF,YAAJ,CAAiB,CAAjB,CAAZ;;AAEA,SAASG,cAAT,CAAwBC,EAAxB,EAA4BC,EAA5B,EAAgCC,EAAhC,EAAoCC,KAApC,EAA2CC,MAA3C,EAAmD;AACjD;AACA,MAAGT,IAAI,CAACU,MAAL,GAAcF,KAAK,CAACE,MAAvB,EAA+B;AAC7BV,IAAAA,IAAI,GAAG,IAAIC,YAAJ,CAAiBO,KAAK,CAACE,MAAvB,CAAP;AACAR,IAAAA,KAAK,GAAG,IAAID,YAAJ,CAAiBO,KAAK,CAACE,MAAvB,CAAR;AACAP,IAAAA,KAAK,GAAG,IAAIF,YAAJ,CAAiBO,KAAK,CAACE,MAAvB,CAAR;AACD,GANgD,CAOjD;;;AACA,OAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACH,KAAK,CAACE,MAArB,EAA6B,EAAEC,CAA/B,EAAkC;AAChCX,IAAAA,IAAI,CAACW,CAAD,CAAJ,GAAWN,EAAE,CAACM,CAAD,CAAF,GAAQH,KAAK,CAACG,CAAD,CAAxB;AACAT,IAAAA,KAAK,CAACS,CAAD,CAAL,GAAWL,EAAE,CAACK,CAAD,CAAF,GAAQN,EAAE,CAACM,CAAD,CAArB;AACAR,IAAAA,KAAK,CAACQ,CAAD,CAAL,GAAWJ,EAAE,CAACI,CAAD,CAAF,GAAQN,EAAE,CAACM,CAAD,CAArB;AACD,GAZgD,CAajD;;;AACA,MAAIC,GAAG,GAAG,GAAV;AAAA,MACIC,GAAG,GAAG,GADV;AAAA,MAEIC,GAAG,GAAG,GAFV;AAAA,MAGIC,EAAE,GAAI,GAHV;AAAA,MAIIC,EAAE,GAAI,GAJV;AAAA,MAKIC,CAAC,GAAK,GALV;;AAMA,OAAI,IAAIN,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACH,KAAK,CAACE,MAArB,EAA6B,EAAEC,CAA/B,EAAkC;AAChC,QAAIO,EAAE,GAAGhB,KAAK,CAACS,CAAD,CAAd;AAAA,QACIQ,EAAE,GAAGhB,KAAK,CAACQ,CAAD,CADd;AAAA,QAEIS,CAAC,GAAIpB,IAAI,CAACW,CAAD,CAFb;AAGAC,IAAAA,GAAG,IAAIM,EAAE,GAAGA,EAAZ;AACAL,IAAAA,GAAG,IAAIK,EAAE,GAAGC,EAAZ;AACAL,IAAAA,GAAG,IAAIK,EAAE,GAAGA,EAAZ;AACAJ,IAAAA,EAAE,IAAKK,CAAC,GAAGF,EAAX;AACAF,IAAAA,EAAE,IAAKI,CAAC,GAAGD,EAAX;AACAF,IAAAA,CAAC,IAAMG,CAAC,GAAGA,CAAX;AACD,GA9BgD,CA+BjD;;;AACA,MAAIC,GAAG,GAAGC,IAAI,CAACC,GAAL,CAASX,GAAG,GAACE,GAAJ,GAAUD,GAAG,GAACA,GAAvB,CAAV;AACA,MAAIW,CAAC,GAAKX,GAAG,GAACG,EAAJ,GAASF,GAAG,GAACC,EAAvB;AACA,MAAIU,CAAC,GAAKZ,GAAG,GAACE,EAAJ,GAASH,GAAG,GAACI,EAAvB;AACA,MAAIU,WAAJ,CAnCiD,CAoCjD;;AACA,MAAIF,CAAC,GAAGC,CAAJ,IAASJ,GAAb,EAAkB;AAChB,QAAIG,CAAC,GAAG,CAAR,EAAW;AACT,UAAIC,CAAC,GAAG,CAAR,EAAW;AAAE;AACX,YAAIV,EAAE,GAAG,CAAT,EAAY;AACVU,UAAAA,CAAC,GAAG,CAAJ;;AACA,cAAI,CAACV,EAAD,IAAOH,GAAX,EAAgB;AACdY,YAAAA,CAAC,GAAG,GAAJ;AACAE,YAAAA,WAAW,GAAGd,GAAG,GAAG,MAAIG,EAAV,GAAeE,CAA7B;AACD,WAHD,MAGO;AACLO,YAAAA,CAAC,GAAG,CAACT,EAAD,GAAIH,GAAR;AACAc,YAAAA,WAAW,GAAGX,EAAE,GAACS,CAAH,GAAOP,CAArB;AACD;AACF,SATD,MASO;AACLO,UAAAA,CAAC,GAAG,CAAJ;;AACA,cAAIR,EAAE,IAAI,CAAV,EAAa;AACXS,YAAAA,CAAC,GAAG,CAAJ;AACAC,YAAAA,WAAW,GAAGT,CAAd;AACD,WAHD,MAGO,IAAI,CAACD,EAAD,IAAOF,GAAX,EAAgB;AACrBW,YAAAA,CAAC,GAAG,CAAJ;AACAC,YAAAA,WAAW,GAAGZ,GAAG,GAAG,MAAIE,EAAV,GAAeC,CAA7B;AACD,WAHM,MAGA;AACLQ,YAAAA,CAAC,GAAG,CAACT,EAAD,GAAIF,GAAR;AACAY,YAAAA,WAAW,GAAGV,EAAE,GAACS,CAAH,GAAOR,CAArB;AACD;AACF;AACF,OAvBD,MAuBO;AAAG;AACRO,QAAAA,CAAC,GAAG,CAAJ;;AACA,YAAIR,EAAE,IAAI,CAAV,EAAa;AACXS,UAAAA,CAAC,GAAG,CAAJ;AACAC,UAAAA,WAAW,GAAGT,CAAd;AACD,SAHD,MAGO,IAAI,CAACD,EAAD,IAAOF,GAAX,EAAgB;AACrBW,UAAAA,CAAC,GAAG,CAAJ;AACAC,UAAAA,WAAW,GAAGZ,GAAG,GAAG,MAAIE,EAAV,GAAeC,CAA7B;AACD,SAHM,MAGA;AACLQ,UAAAA,CAAC,GAAG,CAACT,EAAD,GAAIF,GAAR;AACAY,UAAAA,WAAW,GAAGV,EAAE,GAACS,CAAH,GAAOR,CAArB;AACD;AACF;AACF,KArCD,MAqCO,IAAIQ,CAAC,GAAG,CAAR,EAAW;AAAE;AAClBA,MAAAA,CAAC,GAAG,CAAJ;;AACA,UAAIV,EAAE,IAAI,CAAV,EAAa;AACXS,QAAAA,CAAC,GAAG,CAAJ;AACAE,QAAAA,WAAW,GAAGT,CAAd;AACD,OAHD,MAGO,IAAI,CAACF,EAAD,IAAOH,GAAX,EAAgB;AACrBY,QAAAA,CAAC,GAAG,CAAJ;AACAE,QAAAA,WAAW,GAAGd,GAAG,GAAG,MAAIG,EAAV,GAAeE,CAA7B;AACD,OAHM,MAGA;AACLO,QAAAA,CAAC,GAAG,CAACT,EAAD,GAAIH,GAAR;AACAc,QAAAA,WAAW,GAAGX,EAAE,GAACS,CAAH,GAAOP,CAArB;AACD;AACF,KAZM,MAYA;AAAG;AACR;AACA,UAAIU,MAAM,GAAG,MAAMN,GAAnB;AACAG,MAAAA,CAAC,IAAIG,MAAL;AACAF,MAAAA,CAAC,IAAIE,MAAL;AACAD,MAAAA,WAAW,GAAGF,CAAC,IAAEZ,GAAG,GAACY,CAAJ,GAAQX,GAAG,GAACY,CAAZ,GAAgB,MAAIV,EAAtB,CAAD,GAA6BU,CAAC,IAAEZ,GAAG,GAACW,CAAJ,GAAQV,GAAG,GAACW,CAAZ,GAAgB,MAAIT,EAAtB,CAA9B,GAA0DC,CAAxE;AACD;AACF,GAzDD,MAyDO;AACL,QAAIW,IAAJ,EAAUC,IAAV,EAAgBC,KAAhB,EAAuBC,KAAvB;;AAEA,QAAIP,CAAC,GAAG,CAAR,EAAW;AAAG;AACZI,MAAAA,IAAI,GAAGf,GAAG,GAAGE,EAAb;AACAc,MAAAA,IAAI,GAAGf,GAAG,GAAGE,EAAb;;AACA,UAAIa,IAAI,GAAGD,IAAX,EAAiB;AACfE,QAAAA,KAAK,GAAGD,IAAI,GAAGD,IAAf;AACAG,QAAAA,KAAK,GAAGnB,GAAG,GAAG,MAAIC,GAAV,GAAgBC,GAAxB;;AACA,YAAIgB,KAAK,IAAIC,KAAb,EAAoB;AAClBP,UAAAA,CAAC,GAAG,CAAJ;AACAC,UAAAA,CAAC,GAAG,CAAJ;AACAC,UAAAA,WAAW,GAAGd,GAAG,GAAG,MAAIG,EAAV,GAAeE,CAA7B;AACD,SAJD,MAIO;AACLO,UAAAA,CAAC,GAAGM,KAAK,GAACC,KAAV;AACAN,UAAAA,CAAC,GAAG,IAAID,CAAR;AACAE,UAAAA,WAAW,GAAGF,CAAC,IAAEZ,GAAG,GAACY,CAAJ,GAAQX,GAAG,GAACY,CAAZ,GAAgB,MAAIV,EAAtB,CAAD,GACdU,CAAC,IAAEZ,GAAG,GAACW,CAAJ,GAAQV,GAAG,GAACW,CAAZ,GAAgB,MAAIT,EAAtB,CADa,GACeC,CAD7B;AAED;AACF,OAbD,MAaO;AACLO,QAAAA,CAAC,GAAG,CAAJ;;AACA,YAAIK,IAAI,IAAI,CAAZ,EAAe;AACbJ,UAAAA,CAAC,GAAG,CAAJ;AACAC,UAAAA,WAAW,GAAGZ,GAAG,GAAG,MAAIE,EAAV,GAAeC,CAA7B;AACD,SAHD,MAGO,IAAID,EAAE,IAAI,CAAV,EAAa;AAClBS,UAAAA,CAAC,GAAG,CAAJ;AACAC,UAAAA,WAAW,GAAGT,CAAd;AACD,SAHM,MAGA;AACLQ,UAAAA,CAAC,GAAG,CAACT,EAAD,GAAIF,GAAR;AACAY,UAAAA,WAAW,GAAGV,EAAE,GAACS,CAAH,GAAOR,CAArB;AACD;AACF;AACF,KA7BD,MA6BO,IAAIQ,CAAC,GAAG,CAAR,EAAW;AAAG;AACnBG,MAAAA,IAAI,GAAGf,GAAG,GAAGG,EAAb;AACAa,MAAAA,IAAI,GAAGjB,GAAG,GAAGG,EAAb;;AACA,UAAIc,IAAI,GAAGD,IAAX,EAAiB;AACfE,QAAAA,KAAK,GAAGD,IAAI,GAAGD,IAAf;AACAG,QAAAA,KAAK,GAAGnB,GAAG,GAAG,MAAIC,GAAV,GAAgBC,GAAxB;;AACA,YAAIgB,KAAK,IAAIC,KAAb,EAAoB;AAClBN,UAAAA,CAAC,GAAG,CAAJ;AACAD,UAAAA,CAAC,GAAG,CAAJ;AACAE,UAAAA,WAAW,GAAGZ,GAAG,GAAG,MAAIE,EAAV,GAAeC,CAA7B;AACD,SAJD,MAIO;AACLQ,UAAAA,CAAC,GAAGK,KAAK,GAACC,KAAV;AACAP,UAAAA,CAAC,GAAG,IAAIC,CAAR;AACAC,UAAAA,WAAW,GAAGF,CAAC,IAAEZ,GAAG,GAACY,CAAJ,GAAQX,GAAG,GAACY,CAAZ,GAAgB,MAAIV,EAAtB,CAAD,GACdU,CAAC,IAAEZ,GAAG,GAACW,CAAJ,GAAQV,GAAG,GAACW,CAAZ,GAAgB,MAAIT,EAAtB,CADa,GACeC,CAD7B;AAED;AACF,OAbD,MAaO;AACLQ,QAAAA,CAAC,GAAG,CAAJ;;AACA,YAAII,IAAI,IAAI,CAAZ,EAAe;AACbL,UAAAA,CAAC,GAAG,CAAJ;AACAE,UAAAA,WAAW,GAAGd,GAAG,GAAG,MAAIG,EAAV,GAAeE,CAA7B;AACD,SAHD,MAGO,IAAIF,EAAE,IAAI,CAAV,EAAa;AAClBS,UAAAA,CAAC,GAAG,CAAJ;AACAE,UAAAA,WAAW,GAAGT,CAAd;AACD,SAHM,MAGA;AACLO,UAAAA,CAAC,GAAG,CAACT,EAAD,GAAIH,GAAR;AACAc,UAAAA,WAAW,GAAGX,EAAE,GAACS,CAAH,GAAOP,CAArB;AACD;AACF;AACF,KA7BM,MA6BA;AAAG;AACRa,MAAAA,KAAK,GAAGhB,GAAG,GAAGE,EAAN,GAAWH,GAAX,GAAiBE,EAAzB;;AACA,UAAIe,KAAK,IAAI,CAAb,EAAgB;AACdN,QAAAA,CAAC,GAAG,CAAJ;AACAC,QAAAA,CAAC,GAAG,CAAJ;AACAC,QAAAA,WAAW,GAAGZ,GAAG,GAAG,MAAIE,EAAV,GAAeC,CAA7B;AACD,OAJD,MAIO;AACLc,QAAAA,KAAK,GAAGnB,GAAG,GAAG,MAAIC,GAAV,GAAgBC,GAAxB;;AACA,YAAIgB,KAAK,IAAIC,KAAb,EAAoB;AAClBP,UAAAA,CAAC,GAAG,CAAJ;AACAC,UAAAA,CAAC,GAAG,CAAJ;AACAC,UAAAA,WAAW,GAAGd,GAAG,GAAG,MAAIG,EAAV,GAAeE,CAA7B;AACD,SAJD,MAIO;AACLO,UAAAA,CAAC,GAAGM,KAAK,GAACC,KAAV;AACAN,UAAAA,CAAC,GAAG,IAAID,CAAR;AACAE,UAAAA,WAAW,GAAGF,CAAC,IAAEZ,GAAG,GAACY,CAAJ,GAAQX,GAAG,GAACY,CAAZ,GAAgB,MAAIV,EAAtB,CAAD,GACdU,CAAC,IAAEZ,GAAG,GAACW,CAAJ,GAAQV,GAAG,GAACW,CAAZ,GAAgB,MAAIT,EAAtB,CADa,GACeC,CAD7B;AAED;AACF;AACF;AACF;;AACD,MAAIe,CAAC,GAAG,MAAMR,CAAN,GAAUC,CAAlB;;AACA,OAAI,IAAId,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACH,KAAK,CAACE,MAArB,EAA6B,EAAEC,CAA/B,EAAkC;AAChCF,IAAAA,MAAM,CAACE,CAAD,CAAN,GAAYqB,CAAC,GAAG3B,EAAE,CAACM,CAAD,CAAN,GAAYa,CAAC,GAAGlB,EAAE,CAACK,CAAD,CAAlB,GAAwBc,CAAC,GAAGlB,EAAE,CAACI,CAAD,CAA1C;AACD;;AACD,MAAGe,WAAW,GAAG,CAAjB,EAAoB;AAClB,WAAO,CAAP;AACD;;AACD,SAAOA,WAAP;AACD;;AAEDO,MAAM,CAACC,OAAP,GAAiB9B,cAAjB","sourcesContent":["//Optimized version for triangle closest point\n// Based on Eberly's WildMagick codes\n// http://www.geometrictools.com/LibMathematics/Distance/Distance.html\n\"use strict\";\n\nvar diff = new Float64Array(4);\nvar edge0 = new Float64Array(4);\nvar edge1 = new Float64Array(4);\n\nfunction closestPoint2d(V0, V1, V2, point, result) {\n  //Reallocate buffers if necessary\n  if(diff.length < point.length) {\n    diff = new Float64Array(point.length);\n    edge0 = new Float64Array(point.length);\n    edge1 = new Float64Array(point.length);\n  }\n  //Compute edges\n  for(var i=0; i<point.length; ++i) {\n    diff[i]  = V0[i] - point[i];\n    edge0[i] = V1[i] - V0[i];\n    edge1[i] = V2[i] - V0[i];\n  }\n  //Compute coefficients for quadratic func\n  var a00 = 0.0\n    , a01 = 0.0\n    , a11 = 0.0\n    , b0  = 0.0\n    , b1  = 0.0\n    , c   = 0.0;\n  for(var i=0; i<point.length; ++i) {\n    var e0 = edge0[i]\n      , e1 = edge1[i]\n      , d  = diff[i];\n    a00 += e0 * e0;\n    a01 += e0 * e1;\n    a11 += e1 * e1;\n    b0  += d * e0;\n    b1  += d * e1;\n    c   += d * d;\n  }\n  //Compute determinant/coeffs\n  var det = Math.abs(a00*a11 - a01*a01);\n  var s   = a01*b1 - a11*b0;\n  var t   = a01*b0 - a00*b1;\n  var sqrDistance;\n  //Hardcoded Voronoi diagram classification\n  if (s + t <= det) {\n    if (s < 0) {\n      if (t < 0) { // region 4\n        if (b0 < 0) {\n          t = 0;\n          if (-b0 >= a00) {\n            s = 1.0;\n            sqrDistance = a00 + 2.0*b0 + c;\n          } else {\n            s = -b0/a00;\n            sqrDistance = b0*s + c;\n          }\n        } else {\n          s = 0;\n          if (b1 >= 0) {\n            t = 0;\n            sqrDistance = c;\n          } else if (-b1 >= a11) {\n            t = 1;\n            sqrDistance = a11 + 2.0*b1 + c;\n          } else {\n            t = -b1/a11;\n            sqrDistance = b1*t + c;\n          }\n        }\n      } else {  // region 3\n        s = 0;\n        if (b1 >= 0) {\n          t = 0;\n          sqrDistance = c;\n        } else if (-b1 >= a11) {\n          t = 1;\n          sqrDistance = a11 + 2.0*b1 + c;\n        } else {\n          t = -b1/a11;\n          sqrDistance = b1*t + c;\n        }\n      }\n    } else if (t < 0) { // region 5\n      t = 0;\n      if (b0 >= 0) {\n        s = 0;\n        sqrDistance = c;\n      } else if (-b0 >= a00) {\n        s = 1;\n        sqrDistance = a00 + 2.0*b0 + c;\n      } else {\n        s = -b0/a00;\n        sqrDistance = b0*s + c;\n      }\n    } else {  // region 0\n      // minimum at interior point\n      var invDet = 1.0 / det;\n      s *= invDet;\n      t *= invDet;\n      sqrDistance = s*(a00*s + a01*t + 2.0*b0) + t*(a01*s + a11*t + 2.0*b1) + c;\n    }\n  } else {\n    var tmp0, tmp1, numer, denom;\n    \n    if (s < 0) {  // region 2\n      tmp0 = a01 + b0;\n      tmp1 = a11 + b1;\n      if (tmp1 > tmp0) {\n        numer = tmp1 - tmp0;\n        denom = a00 - 2.0*a01 + a11;\n        if (numer >= denom) {\n          s = 1;\n          t = 0;\n          sqrDistance = a00 + 2.0*b0 + c;\n        } else {\n          s = numer/denom;\n          t = 1 - s;\n          sqrDistance = s*(a00*s + a01*t + 2.0*b0) +\n          t*(a01*s + a11*t + 2.0*b1) + c;\n        }\n      } else {\n        s = 0;\n        if (tmp1 <= 0) {\n          t = 1;\n          sqrDistance = a11 + 2.0*b1 + c;\n        } else if (b1 >= 0) {\n          t = 0;\n          sqrDistance = c;\n        } else {\n          t = -b1/a11;\n          sqrDistance = b1*t + c;\n        }\n      }\n    } else if (t < 0) {  // region 6\n      tmp0 = a01 + b1;\n      tmp1 = a00 + b0;\n      if (tmp1 > tmp0) {\n        numer = tmp1 - tmp0;\n        denom = a00 - 2.0*a01 + a11;\n        if (numer >= denom) {\n          t = 1;\n          s = 0;\n          sqrDistance = a11 + 2.0*b1 + c;\n        } else {\n          t = numer/denom;\n          s = 1 - t;\n          sqrDistance = s*(a00*s + a01*t + 2.0*b0) +\n          t*(a01*s + a11*t + 2.0*b1) + c;\n        }\n      } else {\n        t = 0;\n        if (tmp1 <= 0) {\n          s = 1;\n          sqrDistance = a00 + 2.0*b0 + c;\n        } else if (b0 >= 0) {\n          s = 0;\n          sqrDistance = c;\n        } else {\n          s = -b0/a00;\n          sqrDistance = b0*s + c;\n        }\n      }\n    } else {  // region 1\n      numer = a11 + b1 - a01 - b0;\n      if (numer <= 0) {\n        s = 0;\n        t = 1;\n        sqrDistance = a11 + 2.0*b1 + c;\n      } else {\n        denom = a00 - 2.0*a01 + a11;\n        if (numer >= denom) {\n          s = 1;\n          t = 0;\n          sqrDistance = a00 + 2.0*b0 + c;\n        } else {\n          s = numer/denom;\n          t = 1 - s;\n          sqrDistance = s*(a00*s + a01*t + 2.0*b0) +\n          t*(a01*s + a11*t + 2.0*b1) + c;\n        }\n      }\n    }\n  }\n  var u = 1.0 - s - t;\n  for(var i=0; i<point.length; ++i) {\n    result[i] = u * V0[i] + s * V1[i] + t * V2[i];\n  }\n  if(sqrDistance < 0) {\n    return 0;\n  }\n  return sqrDistance;\n}\n\nmodule.exports = closestPoint2d;\n"]},"metadata":{},"sourceType":"script"}