{"ast":null,"code":"/*\n * @copyright 2016 Sean Connelly (@voidqk), http://syntheti.cc\n * @license MIT\n * @preserve Project Home: https://github.com/voidqk/polybooljs\n */\nvar BuildLog = require('./lib/build-log');\n\nvar Epsilon = require('./lib/epsilon');\n\nvar Intersecter = require('./lib/intersecter');\n\nvar SegmentChainer = require('./lib/segment-chainer');\n\nvar SegmentSelector = require('./lib/segment-selector');\n\nvar GeoJSON = require('./lib/geojson');\n\nvar _buildLog = false;\n\nvar _epsilon = Epsilon();\n\nvar PolyBool;\nPolyBool = {\n  // getter/setter for buildLog\n  buildLog: function buildLog(bl) {\n    if (bl === true) _buildLog = BuildLog();else if (bl === false) _buildLog = false;\n    return _buildLog === false ? false : _buildLog.list;\n  },\n  // getter/setter for epsilon\n  epsilon: function epsilon(v) {\n    return _epsilon.epsilon(v);\n  },\n  // core API\n  segments: function segments(poly) {\n    var i = Intersecter(true, _epsilon, _buildLog);\n    poly.regions.forEach(i.addRegion);\n    return {\n      segments: i.calculate(poly.inverted),\n      inverted: poly.inverted\n    };\n  },\n  combine: function combine(segments1, segments2) {\n    var i3 = Intersecter(false, _epsilon, _buildLog);\n    return {\n      combined: i3.calculate(segments1.segments, segments1.inverted, segments2.segments, segments2.inverted),\n      inverted1: segments1.inverted,\n      inverted2: segments2.inverted\n    };\n  },\n  selectUnion: function selectUnion(combined) {\n    return {\n      segments: SegmentSelector.union(combined.combined, _buildLog),\n      inverted: combined.inverted1 || combined.inverted2\n    };\n  },\n  selectIntersect: function selectIntersect(combined) {\n    return {\n      segments: SegmentSelector.intersect(combined.combined, _buildLog),\n      inverted: combined.inverted1 && combined.inverted2\n    };\n  },\n  selectDifference: function selectDifference(combined) {\n    return {\n      segments: SegmentSelector.difference(combined.combined, _buildLog),\n      inverted: combined.inverted1 && !combined.inverted2\n    };\n  },\n  selectDifferenceRev: function selectDifferenceRev(combined) {\n    return {\n      segments: SegmentSelector.differenceRev(combined.combined, _buildLog),\n      inverted: !combined.inverted1 && combined.inverted2\n    };\n  },\n  selectXor: function selectXor(combined) {\n    return {\n      segments: SegmentSelector.xor(combined.combined, _buildLog),\n      inverted: combined.inverted1 !== combined.inverted2\n    };\n  },\n  polygon: function polygon(segments) {\n    return {\n      regions: SegmentChainer(segments.segments, _epsilon, _buildLog),\n      inverted: segments.inverted\n    };\n  },\n  // GeoJSON converters\n  polygonFromGeoJSON: function polygonFromGeoJSON(geojson) {\n    return GeoJSON.toPolygon(PolyBool, geojson);\n  },\n  polygonToGeoJSON: function polygonToGeoJSON(poly) {\n    return GeoJSON.fromPolygon(PolyBool, _epsilon, poly);\n  },\n  // helper functions for common operations\n  union: function union(poly1, poly2) {\n    return operate(poly1, poly2, PolyBool.selectUnion);\n  },\n  intersect: function intersect(poly1, poly2) {\n    return operate(poly1, poly2, PolyBool.selectIntersect);\n  },\n  difference: function difference(poly1, poly2) {\n    return operate(poly1, poly2, PolyBool.selectDifference);\n  },\n  differenceRev: function differenceRev(poly1, poly2) {\n    return operate(poly1, poly2, PolyBool.selectDifferenceRev);\n  },\n  xor: function xor(poly1, poly2) {\n    return operate(poly1, poly2, PolyBool.selectXor);\n  }\n};\n\nfunction operate(poly1, poly2, selector) {\n  var seg1 = PolyBool.segments(poly1);\n  var seg2 = PolyBool.segments(poly2);\n  var comb = PolyBool.combine(seg1, seg2);\n  var seg3 = selector(comb);\n  return PolyBool.polygon(seg3);\n}\n\nif (typeof window === 'object') window.PolyBool = PolyBool;\nmodule.exports = PolyBool;","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/polybooljs/index.js"],"names":["BuildLog","require","Epsilon","Intersecter","SegmentChainer","SegmentSelector","GeoJSON","buildLog","epsilon","PolyBool","bl","list","v","segments","poly","i","regions","forEach","addRegion","calculate","inverted","combine","segments1","segments2","i3","combined","inverted1","inverted2","selectUnion","union","selectIntersect","intersect","selectDifference","difference","selectDifferenceRev","differenceRev","selectXor","xor","polygon","polygonFromGeoJSON","geojson","toPolygon","polygonToGeoJSON","fromPolygon","poly1","poly2","operate","selector","seg1","seg2","comb","seg3","window","module","exports"],"mappings":"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","sourcesContent":["/*\n * @copyright 2016 Sean Connelly (@voidqk), http://syntheti.cc\n * @license MIT\n * @preserve Project Home: https://github.com/voidqk/polybooljs\n */\n\nvar BuildLog = require('./lib/build-log');\nvar Epsilon = require('./lib/epsilon');\nvar Intersecter = require('./lib/intersecter');\nvar SegmentChainer = require('./lib/segment-chainer');\nvar SegmentSelector = require('./lib/segment-selector');\nvar GeoJSON = require('./lib/geojson');\n\nvar buildLog = false;\nvar epsilon = Epsilon();\n\nvar PolyBool;\nPolyBool = {\n\t// getter/setter for buildLog\n\tbuildLog: function(bl){\n\t\tif (bl === true)\n\t\t\tbuildLog = BuildLog();\n\t\telse if (bl === false)\n\t\t\tbuildLog = false;\n\t\treturn buildLog === false ? false : buildLog.list;\n\t},\n\t// getter/setter for epsilon\n\tepsilon: function(v){\n\t\treturn epsilon.epsilon(v);\n\t},\n\n\t// core API\n\tsegments: function(poly){\n\t\tvar i = Intersecter(true, epsilon, buildLog);\n\t\tpoly.regions.forEach(i.addRegion);\n\t\treturn {\n\t\t\tsegments: i.calculate(poly.inverted),\n\t\t\tinverted: poly.inverted\n\t\t};\n\t},\n\tcombine: function(segments1, segments2){\n\t\tvar i3 = Intersecter(false, epsilon, buildLog);\n\t\treturn {\n\t\t\tcombined: i3.calculate(\n\t\t\t\tsegments1.segments, segments1.inverted,\n\t\t\t\tsegments2.segments, segments2.inverted\n\t\t\t),\n\t\t\tinverted1: segments1.inverted,\n\t\t\tinverted2: segments2.inverted\n\t\t};\n\t},\n\tselectUnion: function(combined){\n\t\treturn {\n\t\t\tsegments: SegmentSelector.union(combined.combined, buildLog),\n\t\t\tinverted: combined.inverted1 || combined.inverted2\n\t\t}\n\t},\n\tselectIntersect: function(combined){\n\t\treturn {\n\t\t\tsegments: SegmentSelector.intersect(combined.combined, buildLog),\n\t\t\tinverted: combined.inverted1 && combined.inverted2\n\t\t}\n\t},\n\tselectDifference: function(combined){\n\t\treturn {\n\t\t\tsegments: SegmentSelector.difference(combined.combined, buildLog),\n\t\t\tinverted: combined.inverted1 && !combined.inverted2\n\t\t}\n\t},\n\tselectDifferenceRev: function(combined){\n\t\treturn {\n\t\t\tsegments: SegmentSelector.differenceRev(combined.combined, buildLog),\n\t\t\tinverted: !combined.inverted1 && combined.inverted2\n\t\t}\n\t},\n\tselectXor: function(combined){\n\t\treturn {\n\t\t\tsegments: SegmentSelector.xor(combined.combined, buildLog),\n\t\t\tinverted: combined.inverted1 !== combined.inverted2\n\t\t}\n\t},\n\tpolygon: function(segments){\n\t\treturn {\n\t\t\tregions: SegmentChainer(segments.segments, epsilon, buildLog),\n\t\t\tinverted: segments.inverted\n\t\t};\n\t},\n\n\t// GeoJSON converters\n\tpolygonFromGeoJSON: function(geojson){\n\t\treturn GeoJSON.toPolygon(PolyBool, geojson);\n\t},\n\tpolygonToGeoJSON: function(poly){\n\t\treturn GeoJSON.fromPolygon(PolyBool, epsilon, poly);\n\t},\n\n\t// helper functions for common operations\n\tunion: function(poly1, poly2){\n\t\treturn operate(poly1, poly2, PolyBool.selectUnion);\n\t},\n\tintersect: function(poly1, poly2){\n\t\treturn operate(poly1, poly2, PolyBool.selectIntersect);\n\t},\n\tdifference: function(poly1, poly2){\n\t\treturn operate(poly1, poly2, PolyBool.selectDifference);\n\t},\n\tdifferenceRev: function(poly1, poly2){\n\t\treturn operate(poly1, poly2, PolyBool.selectDifferenceRev);\n\t},\n\txor: function(poly1, poly2){\n\t\treturn operate(poly1, poly2, PolyBool.selectXor);\n\t}\n};\n\nfunction operate(poly1, poly2, selector){\n\tvar seg1 = PolyBool.segments(poly1);\n\tvar seg2 = PolyBool.segments(poly2);\n\tvar comb = PolyBool.combine(seg1, seg2);\n\tvar seg3 = selector(comb);\n\treturn PolyBool.polygon(seg3);\n}\n\nif (typeof window === 'object')\n\twindow.PolyBool = PolyBool;\n\nmodule.exports = PolyBool;\n"]},"metadata":{},"sourceType":"script"}