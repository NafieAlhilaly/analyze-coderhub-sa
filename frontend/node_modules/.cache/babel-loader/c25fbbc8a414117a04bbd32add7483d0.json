{"ast":null,"code":"'use strict';\n\nvar calendars = require('./calendars');\n\nvar Lib = require('../../lib');\n\nvar constants = require('../../constants/numerical');\n\nvar EPOCHJD = constants.EPOCHJD;\nvar ONEDAY = constants.ONEDAY;\nvar attributes = {\n  valType: 'enumerated',\n  values: Lib.sortObjectKeys(calendars.calendars),\n  editType: 'calc',\n  dflt: 'gregorian'\n};\n\nvar handleDefaults = function (contIn, contOut, attr, dflt) {\n  var attrs = {};\n  attrs[attr] = attributes;\n  return Lib.coerce(contIn, contOut, attrs, attr, dflt);\n};\n\nvar handleTraceDefaults = function (traceIn, traceOut, coords, layout) {\n  for (var i = 0; i < coords.length; i++) {\n    handleDefaults(traceIn, traceOut, coords[i] + 'calendar', layout.calendar);\n  }\n}; // each calendar needs its own default canonical tick. I would love to use\n// 2000-01-01 (or even 0000-01-01) for them all but they don't necessarily\n// all support either of those dates. Instead I'll use the most significant\n// number they *do* support, biased toward the present day.\n\n\nvar CANONICAL_TICK = {\n  chinese: '2000-01-01',\n  coptic: '2000-01-01',\n  discworld: '2000-01-01',\n  ethiopian: '2000-01-01',\n  hebrew: '5000-01-01',\n  islamic: '1000-01-01',\n  julian: '2000-01-01',\n  mayan: '5000-01-01',\n  nanakshahi: '1000-01-01',\n  nepali: '2000-01-01',\n  persian: '1000-01-01',\n  jalali: '1000-01-01',\n  taiwan: '1000-01-01',\n  thai: '2000-01-01',\n  ummalqura: '1400-01-01'\n}; // Start on a Sunday - for week ticks\n// Discworld and Mayan calendars don't have 7-day weeks but we're going to give them\n// 7-day week ticks so start on our Sundays.\n// If anyone really cares we can customize the auto tick spacings for these calendars.\n\nvar CANONICAL_SUNDAY = {\n  chinese: '2000-01-02',\n  coptic: '2000-01-03',\n  discworld: '2000-01-03',\n  ethiopian: '2000-01-05',\n  hebrew: '5000-01-01',\n  islamic: '1000-01-02',\n  julian: '2000-01-03',\n  mayan: '5000-01-01',\n  nanakshahi: '1000-01-05',\n  nepali: '2000-01-05',\n  persian: '1000-01-01',\n  jalali: '1000-01-01',\n  taiwan: '1000-01-04',\n  thai: '2000-01-04',\n  ummalqura: '1400-01-06'\n};\nvar DFLTRANGE = {\n  chinese: ['2000-01-01', '2001-01-01'],\n  coptic: ['1700-01-01', '1701-01-01'],\n  discworld: ['1800-01-01', '1801-01-01'],\n  ethiopian: ['2000-01-01', '2001-01-01'],\n  hebrew: ['5700-01-01', '5701-01-01'],\n  islamic: ['1400-01-01', '1401-01-01'],\n  julian: ['2000-01-01', '2001-01-01'],\n  mayan: ['5200-01-01', '5201-01-01'],\n  nanakshahi: ['0500-01-01', '0501-01-01'],\n  nepali: ['2000-01-01', '2001-01-01'],\n  persian: ['1400-01-01', '1401-01-01'],\n  jalali: ['1400-01-01', '1401-01-01'],\n  taiwan: ['0100-01-01', '0101-01-01'],\n  thai: ['2500-01-01', '2501-01-01'],\n  ummalqura: ['1400-01-01', '1401-01-01']\n};\n/*\n * convert d3 templates to world-calendars templates, so our users only need\n * to know d3's specifiers. Map space padding to no padding, and unknown fields\n * to an ugly placeholder\n */\n\nvar UNKNOWN = '##';\nvar d3ToWorldCalendars = {\n  'd': {\n    '0': 'dd',\n    '-': 'd'\n  },\n  // 2-digit or unpadded day of month\n  'e': {\n    '0': 'd',\n    '-': 'd'\n  },\n  // alternate, always unpadded day of month\n  'a': {\n    '0': 'D',\n    '-': 'D'\n  },\n  // short weekday name\n  'A': {\n    '0': 'DD',\n    '-': 'DD'\n  },\n  // full weekday name\n  'j': {\n    '0': 'oo',\n    '-': 'o'\n  },\n  // 3-digit or unpadded day of the year\n  'W': {\n    '0': 'ww',\n    '-': 'w'\n  },\n  // 2-digit or unpadded week of the year (Monday first)\n  'm': {\n    '0': 'mm',\n    '-': 'm'\n  },\n  // 2-digit or unpadded month number\n  'b': {\n    '0': 'M',\n    '-': 'M'\n  },\n  // short month name\n  'B': {\n    '0': 'MM',\n    '-': 'MM'\n  },\n  // full month name\n  'y': {\n    '0': 'yy',\n    '-': 'yy'\n  },\n  // 2-digit year (map unpadded to zero-padded)\n  'Y': {\n    '0': 'yyyy',\n    '-': 'yyyy'\n  },\n  // 4-digit year (map unpadded to zero-padded)\n  'U': UNKNOWN,\n  // Sunday-first week of the year\n  'w': UNKNOWN,\n  // day of the week [0(sunday),6]\n  // combined format, we replace the date part with the world-calendar version\n  // and the %X stays there for d3 to handle with time parts\n  'c': {\n    '0': 'D M d %X yyyy',\n    '-': 'D M d %X yyyy'\n  },\n  'x': {\n    '0': 'mm/dd/yyyy',\n    '-': 'mm/dd/yyyy'\n  }\n};\n\nfunction worldCalFmt(fmt, x, calendar) {\n  var dateJD = Math.floor((x + 0.05) / ONEDAY) + EPOCHJD;\n  var cDate = getCal(calendar).fromJD(dateJD);\n  var i = 0;\n  var modifier, directive, directiveLen, directiveObj, replacementPart;\n\n  while ((i = fmt.indexOf('%', i)) !== -1) {\n    modifier = fmt.charAt(i + 1);\n\n    if (modifier === '0' || modifier === '-' || modifier === '_') {\n      directiveLen = 3;\n      directive = fmt.charAt(i + 2);\n      if (modifier === '_') modifier = '-';\n    } else {\n      directive = modifier;\n      modifier = '0';\n      directiveLen = 2;\n    }\n\n    directiveObj = d3ToWorldCalendars[directive];\n\n    if (!directiveObj) {\n      i += directiveLen;\n    } else {\n      // code is recognized as a date part but world-calendars doesn't support it\n      if (directiveObj === UNKNOWN) replacementPart = UNKNOWN; // format the cDate according to the translated directive\n      else replacementPart = cDate.formatDate(directiveObj[modifier]);\n      fmt = fmt.substr(0, i) + replacementPart + fmt.substr(i + directiveLen);\n      i += replacementPart.length;\n    }\n  }\n\n  return fmt;\n} // cache world calendars, so we don't have to reinstantiate\n// during each date-time conversion\n\n\nvar allCals = {};\n\nfunction getCal(calendar) {\n  var calendarObj = allCals[calendar];\n  if (calendarObj) return calendarObj;\n  calendarObj = allCals[calendar] = calendars.instance(calendar);\n  return calendarObj;\n}\n\nfunction makeAttrs(description) {\n  return Lib.extendFlat({}, attributes, {\n    description: description\n  });\n}\n\nfunction makeTraceAttrsDescription(coord) {\n  return 'Sets the calendar system to use with `' + coord + '` date data.';\n}\n\nvar xAttrs = {\n  xcalendar: makeAttrs(makeTraceAttrsDescription('x'))\n};\nvar xyAttrs = Lib.extendFlat({}, xAttrs, {\n  ycalendar: makeAttrs(makeTraceAttrsDescription('y'))\n});\nvar xyzAttrs = Lib.extendFlat({}, xyAttrs, {\n  zcalendar: makeAttrs(makeTraceAttrsDescription('z'))\n});\nvar axisAttrs = makeAttrs(['Sets the calendar system to use for `range` and `tick0`', 'if this is a date axis. This does not set the calendar for', 'interpreting data on this axis, that\\'s specified in the trace', 'or via the global `layout.calendar`'].join(' '));\nmodule.exports = {\n  moduleType: 'component',\n  name: 'calendars',\n  schema: {\n    traces: {\n      scatter: xyAttrs,\n      bar: xyAttrs,\n      box: xyAttrs,\n      heatmap: xyAttrs,\n      contour: xyAttrs,\n      histogram: xyAttrs,\n      histogram2d: xyAttrs,\n      histogram2dcontour: xyAttrs,\n      scatter3d: xyzAttrs,\n      surface: xyzAttrs,\n      mesh3d: xyzAttrs,\n      scattergl: xyAttrs,\n      ohlc: xAttrs,\n      candlestick: xAttrs\n    },\n    layout: {\n      calendar: makeAttrs(['Sets the default calendar system to use for interpreting and', 'displaying dates throughout the plot.'].join(' '))\n    },\n    subplots: {\n      xaxis: {\n        calendar: axisAttrs\n      },\n      yaxis: {\n        calendar: axisAttrs\n      },\n      scene: {\n        xaxis: {\n          calendar: axisAttrs\n        },\n        // TODO: it's actually redundant to include yaxis and zaxis here\n        // because in the scene attributes these are the same object so merging\n        // into one merges into them all. However, I left them in for parity with\n        // cartesian, where yaxis is unused until we Plotschema.get() when we\n        // use its presence or absence to determine whether to delete attributes\n        // from yaxis if they only apply to x (rangeselector/rangeslider)\n        yaxis: {\n          calendar: axisAttrs\n        },\n        zaxis: {\n          calendar: axisAttrs\n        }\n      },\n      polar: {\n        radialaxis: {\n          calendar: axisAttrs\n        }\n      }\n    },\n    transforms: {\n      filter: {\n        valuecalendar: makeAttrs(['WARNING: All transforms are deprecated and may be removed from the API in next major version.', 'Sets the calendar system to use for `value`, if it is a date.'].join(' ')),\n        targetcalendar: makeAttrs(['WARNING: All transforms are deprecated and may be removed from the API in next major version.', 'Sets the calendar system to use for `target`, if it is an', 'array of dates. If `target` is a string (eg *x*) we use the', 'corresponding trace attribute (eg `xcalendar`) if it exists,', 'even if `targetcalendar` is provided.'].join(' '))\n      }\n    }\n  },\n  layoutAttributes: attributes,\n  handleDefaults: handleDefaults,\n  handleTraceDefaults: handleTraceDefaults,\n  CANONICAL_SUNDAY: CANONICAL_SUNDAY,\n  CANONICAL_TICK: CANONICAL_TICK,\n  DFLTRANGE: DFLTRANGE,\n  getCal: getCal,\n  worldCalFmt: worldCalFmt\n};","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/plotly.js/src/components/calendars/index.js"],"names":["calendars","require","Lib","constants","EPOCHJD","ONEDAY","attributes","valType","values","sortObjectKeys","editType","dflt","handleDefaults","contIn","contOut","attr","attrs","coerce","handleTraceDefaults","traceIn","traceOut","coords","layout","i","length","calendar","CANONICAL_TICK","chinese","coptic","discworld","ethiopian","hebrew","islamic","julian","mayan","nanakshahi","nepali","persian","jalali","taiwan","thai","ummalqura","CANONICAL_SUNDAY","DFLTRANGE","UNKNOWN","d3ToWorldCalendars","worldCalFmt","fmt","x","dateJD","Math","floor","cDate","getCal","fromJD","modifier","directive","directiveLen","directiveObj","replacementPart","indexOf","charAt","formatDate","substr","allCals","calendarObj","instance","makeAttrs","description","extendFlat","makeTraceAttrsDescription","coord","xAttrs","xcalendar","xyAttrs","ycalendar","xyzAttrs","zcalendar","axisAttrs","join","module","exports","moduleType","name","schema","traces","scatter","bar","box","heatmap","contour","histogram","histogram2d","histogram2dcontour","scatter3d","surface","mesh3d","scattergl","ohlc","candlestick","subplots","xaxis","yaxis","scene","zaxis","polar","radialaxis","transforms","filter","valuecalendar","targetcalendar","layoutAttributes"],"mappings":"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","sourcesContent":["'use strict';\n\nvar calendars = require('./calendars');\n\nvar Lib = require('../../lib');\nvar constants = require('../../constants/numerical');\n\nvar EPOCHJD = constants.EPOCHJD;\nvar ONEDAY = constants.ONEDAY;\n\nvar attributes = {\n    valType: 'enumerated',\n    values: Lib.sortObjectKeys(calendars.calendars),\n    editType: 'calc',\n    dflt: 'gregorian'\n};\n\nvar handleDefaults = function(contIn, contOut, attr, dflt) {\n    var attrs = {};\n    attrs[attr] = attributes;\n\n    return Lib.coerce(contIn, contOut, attrs, attr, dflt);\n};\n\nvar handleTraceDefaults = function(traceIn, traceOut, coords, layout) {\n    for(var i = 0; i < coords.length; i++) {\n        handleDefaults(traceIn, traceOut, coords[i] + 'calendar', layout.calendar);\n    }\n};\n\n// each calendar needs its own default canonical tick. I would love to use\n// 2000-01-01 (or even 0000-01-01) for them all but they don't necessarily\n// all support either of those dates. Instead I'll use the most significant\n// number they *do* support, biased toward the present day.\nvar CANONICAL_TICK = {\n    chinese: '2000-01-01',\n    coptic: '2000-01-01',\n    discworld: '2000-01-01',\n    ethiopian: '2000-01-01',\n    hebrew: '5000-01-01',\n    islamic: '1000-01-01',\n    julian: '2000-01-01',\n    mayan: '5000-01-01',\n    nanakshahi: '1000-01-01',\n    nepali: '2000-01-01',\n    persian: '1000-01-01',\n    jalali: '1000-01-01',\n    taiwan: '1000-01-01',\n    thai: '2000-01-01',\n    ummalqura: '1400-01-01'\n};\n\n// Start on a Sunday - for week ticks\n// Discworld and Mayan calendars don't have 7-day weeks but we're going to give them\n// 7-day week ticks so start on our Sundays.\n// If anyone really cares we can customize the auto tick spacings for these calendars.\nvar CANONICAL_SUNDAY = {\n    chinese: '2000-01-02',\n    coptic: '2000-01-03',\n    discworld: '2000-01-03',\n    ethiopian: '2000-01-05',\n    hebrew: '5000-01-01',\n    islamic: '1000-01-02',\n    julian: '2000-01-03',\n    mayan: '5000-01-01',\n    nanakshahi: '1000-01-05',\n    nepali: '2000-01-05',\n    persian: '1000-01-01',\n    jalali: '1000-01-01',\n    taiwan: '1000-01-04',\n    thai: '2000-01-04',\n    ummalqura: '1400-01-06'\n};\n\nvar DFLTRANGE = {\n    chinese: ['2000-01-01', '2001-01-01'],\n    coptic: ['1700-01-01', '1701-01-01'],\n    discworld: ['1800-01-01', '1801-01-01'],\n    ethiopian: ['2000-01-01', '2001-01-01'],\n    hebrew: ['5700-01-01', '5701-01-01'],\n    islamic: ['1400-01-01', '1401-01-01'],\n    julian: ['2000-01-01', '2001-01-01'],\n    mayan: ['5200-01-01', '5201-01-01'],\n    nanakshahi: ['0500-01-01', '0501-01-01'],\n    nepali: ['2000-01-01', '2001-01-01'],\n    persian: ['1400-01-01', '1401-01-01'],\n    jalali: ['1400-01-01', '1401-01-01'],\n    taiwan: ['0100-01-01', '0101-01-01'],\n    thai: ['2500-01-01', '2501-01-01'],\n    ummalqura: ['1400-01-01', '1401-01-01']\n};\n\n/*\n * convert d3 templates to world-calendars templates, so our users only need\n * to know d3's specifiers. Map space padding to no padding, and unknown fields\n * to an ugly placeholder\n */\nvar UNKNOWN = '##';\nvar d3ToWorldCalendars = {\n    'd': {'0': 'dd', '-': 'd'}, // 2-digit or unpadded day of month\n    'e': {'0': 'd', '-': 'd'}, // alternate, always unpadded day of month\n    'a': {'0': 'D', '-': 'D'}, // short weekday name\n    'A': {'0': 'DD', '-': 'DD'}, // full weekday name\n    'j': {'0': 'oo', '-': 'o'}, // 3-digit or unpadded day of the year\n    'W': {'0': 'ww', '-': 'w'}, // 2-digit or unpadded week of the year (Monday first)\n    'm': {'0': 'mm', '-': 'm'}, // 2-digit or unpadded month number\n    'b': {'0': 'M', '-': 'M'}, // short month name\n    'B': {'0': 'MM', '-': 'MM'}, // full month name\n    'y': {'0': 'yy', '-': 'yy'}, // 2-digit year (map unpadded to zero-padded)\n    'Y': {'0': 'yyyy', '-': 'yyyy'}, // 4-digit year (map unpadded to zero-padded)\n    'U': UNKNOWN, // Sunday-first week of the year\n    'w': UNKNOWN, // day of the week [0(sunday),6]\n    // combined format, we replace the date part with the world-calendar version\n    // and the %X stays there for d3 to handle with time parts\n    'c': {'0': 'D M d %X yyyy', '-': 'D M d %X yyyy'},\n    'x': {'0': 'mm/dd/yyyy', '-': 'mm/dd/yyyy'}\n};\n\nfunction worldCalFmt(fmt, x, calendar) {\n    var dateJD = Math.floor((x + 0.05) / ONEDAY) + EPOCHJD;\n    var cDate = getCal(calendar).fromJD(dateJD);\n    var i = 0;\n    var modifier, directive, directiveLen, directiveObj, replacementPart;\n\n    while((i = fmt.indexOf('%', i)) !== -1) {\n        modifier = fmt.charAt(i + 1);\n        if(modifier === '0' || modifier === '-' || modifier === '_') {\n            directiveLen = 3;\n            directive = fmt.charAt(i + 2);\n            if(modifier === '_') modifier = '-';\n        } else {\n            directive = modifier;\n            modifier = '0';\n            directiveLen = 2;\n        }\n        directiveObj = d3ToWorldCalendars[directive];\n        if(!directiveObj) {\n            i += directiveLen;\n        } else {\n            // code is recognized as a date part but world-calendars doesn't support it\n            if(directiveObj === UNKNOWN) replacementPart = UNKNOWN;\n\n            // format the cDate according to the translated directive\n            else replacementPart = cDate.formatDate(directiveObj[modifier]);\n\n            fmt = fmt.substr(0, i) + replacementPart + fmt.substr(i + directiveLen);\n            i += replacementPart.length;\n        }\n    }\n    return fmt;\n}\n\n// cache world calendars, so we don't have to reinstantiate\n// during each date-time conversion\nvar allCals = {};\nfunction getCal(calendar) {\n    var calendarObj = allCals[calendar];\n    if(calendarObj) return calendarObj;\n\n    calendarObj = allCals[calendar] = calendars.instance(calendar);\n    return calendarObj;\n}\n\nfunction makeAttrs(description) {\n    return Lib.extendFlat({}, attributes, { description: description });\n}\n\nfunction makeTraceAttrsDescription(coord) {\n    return 'Sets the calendar system to use with `' + coord + '` date data.';\n}\n\nvar xAttrs = {\n    xcalendar: makeAttrs(makeTraceAttrsDescription('x'))\n};\n\nvar xyAttrs = Lib.extendFlat({}, xAttrs, {\n    ycalendar: makeAttrs(makeTraceAttrsDescription('y'))\n});\n\nvar xyzAttrs = Lib.extendFlat({}, xyAttrs, {\n    zcalendar: makeAttrs(makeTraceAttrsDescription('z'))\n});\n\nvar axisAttrs = makeAttrs([\n    'Sets the calendar system to use for `range` and `tick0`',\n    'if this is a date axis. This does not set the calendar for',\n    'interpreting data on this axis, that\\'s specified in the trace',\n    'or via the global `layout.calendar`'\n].join(' '));\n\nmodule.exports = {\n    moduleType: 'component',\n    name: 'calendars',\n\n    schema: {\n        traces: {\n            scatter: xyAttrs,\n            bar: xyAttrs,\n            box: xyAttrs,\n            heatmap: xyAttrs,\n            contour: xyAttrs,\n            histogram: xyAttrs,\n            histogram2d: xyAttrs,\n            histogram2dcontour: xyAttrs,\n            scatter3d: xyzAttrs,\n            surface: xyzAttrs,\n            mesh3d: xyzAttrs,\n            scattergl: xyAttrs,\n            ohlc: xAttrs,\n            candlestick: xAttrs\n        },\n        layout: {\n            calendar: makeAttrs([\n                'Sets the default calendar system to use for interpreting and',\n                'displaying dates throughout the plot.'\n            ].join(' '))\n        },\n        subplots: {\n            xaxis: {calendar: axisAttrs},\n            yaxis: {calendar: axisAttrs},\n            scene: {\n                xaxis: {calendar: axisAttrs},\n                // TODO: it's actually redundant to include yaxis and zaxis here\n                // because in the scene attributes these are the same object so merging\n                // into one merges into them all. However, I left them in for parity with\n                // cartesian, where yaxis is unused until we Plotschema.get() when we\n                // use its presence or absence to determine whether to delete attributes\n                // from yaxis if they only apply to x (rangeselector/rangeslider)\n                yaxis: {calendar: axisAttrs},\n                zaxis: {calendar: axisAttrs}\n            },\n            polar: {\n                radialaxis: {calendar: axisAttrs}\n            }\n        },\n        transforms: {\n            filter: {\n                valuecalendar: makeAttrs([\n                    'WARNING: All transforms are deprecated and may be removed from the API in next major version.',\n                    'Sets the calendar system to use for `value`, if it is a date.'\n                ].join(' ')),\n                targetcalendar: makeAttrs([\n                    'WARNING: All transforms are deprecated and may be removed from the API in next major version.',\n                    'Sets the calendar system to use for `target`, if it is an',\n                    'array of dates. If `target` is a string (eg *x*) we use the',\n                    'corresponding trace attribute (eg `xcalendar`) if it exists,',\n                    'even if `targetcalendar` is provided.'\n                ].join(' '))\n            }\n        }\n    },\n\n    layoutAttributes: attributes,\n\n    handleDefaults: handleDefaults,\n    handleTraceDefaults: handleTraceDefaults,\n\n    CANONICAL_SUNDAY: CANONICAL_SUNDAY,\n    CANONICAL_TICK: CANONICAL_TICK,\n    DFLTRANGE: DFLTRANGE,\n\n    getCal: getCal,\n    worldCalFmt: worldCalFmt\n};\n"]},"metadata":{},"sourceType":"script"}