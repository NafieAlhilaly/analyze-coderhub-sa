{"ast":null,"code":"'use strict';\n\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\n\nvar getModuleCalcData = require('../../plots/get_data').getModuleCalcData;\n\nvar plot = require('./plot');\n\nvar fxAttrs = require('../../components/fx/layout_attributes');\n\nvar setCursor = require('../../lib/setcursor');\n\nvar dragElement = require('../../components/dragelement');\n\nvar prepSelect = require('../../plots/cartesian/select').prepSelect;\n\nvar Lib = require('../../lib');\n\nvar Registry = require('../../registry');\n\nvar SANKEY = 'sankey';\nexports.name = SANKEY;\nexports.baseLayoutAttrOverrides = overrideAll({\n  hoverlabel: fxAttrs.hoverlabel\n}, 'plot', 'nested');\n\nexports.plot = function (gd) {\n  var calcData = getModuleCalcData(gd.calcdata, SANKEY)[0];\n  plot(gd, calcData);\n  exports.updateFx(gd);\n};\n\nexports.clean = function (newFullData, newFullLayout, oldFullData, oldFullLayout) {\n  var hadPlot = oldFullLayout._has && oldFullLayout._has(SANKEY);\n\n  var hasPlot = newFullLayout._has && newFullLayout._has(SANKEY);\n\n  if (hadPlot && !hasPlot) {\n    oldFullLayout._paperdiv.selectAll('.sankey').remove();\n\n    oldFullLayout._paperdiv.selectAll('.bgsankey').remove();\n  }\n};\n\nexports.updateFx = function (gd) {\n  for (var i = 0; i < gd._fullData.length; i++) {\n    subplotUpdateFx(gd, i);\n  }\n};\n\nfunction subplotUpdateFx(gd, index) {\n  var trace = gd._fullData[index];\n  var fullLayout = gd._fullLayout;\n  var dragMode = fullLayout.dragmode;\n  var cursor = fullLayout.dragmode === 'pan' ? 'move' : 'crosshair';\n  var bgRect = trace._bgRect;\n  if (dragMode === 'pan' || dragMode === 'zoom') return;\n  setCursor(bgRect, cursor);\n  var xaxis = {\n    _id: 'x',\n    c2p: Lib.identity,\n    _offset: trace._sankey.translateX,\n    _length: trace._sankey.width\n  };\n  var yaxis = {\n    _id: 'y',\n    c2p: Lib.identity,\n    _offset: trace._sankey.translateY,\n    _length: trace._sankey.height\n  }; // Note: dragOptions is needed to be declared for all dragmodes because\n  // it's the object that holds persistent selection state.\n\n  var dragOptions = {\n    gd: gd,\n    element: bgRect.node(),\n    plotinfo: {\n      id: index,\n      xaxis: xaxis,\n      yaxis: yaxis,\n      fillRangeItems: Lib.noop\n    },\n    subplot: index,\n    // create mock x/y axes for hover routine\n    xaxes: [xaxis],\n    yaxes: [yaxis],\n    doneFnCompleted: function (selection) {\n      var traceNow = gd._fullData[index];\n      var newGroups;\n      var oldGroups = traceNow.node.groups.slice();\n      var newGroup = [];\n\n      function findNode(pt) {\n        var nodes = traceNow._sankey.graph.nodes;\n\n        for (var i = 0; i < nodes.length; i++) {\n          if (nodes[i].pointNumber === pt) return nodes[i];\n        }\n      }\n\n      for (var j = 0; j < selection.length; j++) {\n        var node = findNode(selection[j].pointNumber);\n        if (!node) continue; // If the node represents a group\n\n        if (node.group) {\n          // Add all its children to the current selection\n          for (var k = 0; k < node.childrenNodes.length; k++) {\n            newGroup.push(node.childrenNodes[k].pointNumber);\n          } // Flag group for removal from existing list of groups\n\n\n          oldGroups[node.pointNumber - traceNow.node._count] = false;\n        } else {\n          newGroup.push(node.pointNumber);\n        }\n      }\n\n      newGroups = oldGroups.filter(Boolean).concat([newGroup]);\n      Registry.call('_guiRestyle', gd, {\n        'node.groups': [newGroups]\n      }, index);\n    }\n  };\n\n  dragOptions.prepFn = function (e, startX, startY) {\n    prepSelect(e, startX, startY, dragOptions, dragMode);\n  };\n\n  dragElement.init(dragOptions);\n}","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/plotly.js/src/traces/sankey/base_plot.js"],"names":["overrideAll","require","getModuleCalcData","plot","fxAttrs","setCursor","dragElement","prepSelect","Lib","Registry","SANKEY","exports","name","baseLayoutAttrOverrides","hoverlabel","gd","calcData","calcdata","updateFx","clean","newFullData","newFullLayout","oldFullData","oldFullLayout","hadPlot","_has","hasPlot","_paperdiv","selectAll","remove","i","_fullData","length","subplotUpdateFx","index","trace","fullLayout","_fullLayout","dragMode","dragmode","cursor","bgRect","_bgRect","xaxis","_id","c2p","identity","_offset","_sankey","translateX","_length","width","yaxis","translateY","height","dragOptions","element","node","plotinfo","id","fillRangeItems","noop","subplot","xaxes","yaxes","doneFnCompleted","selection","traceNow","newGroups","oldGroups","groups","slice","newGroup","findNode","pt","nodes","graph","pointNumber","j","group","k","childrenNodes","push","_count","filter","Boolean","concat","call","prepFn","e","startX","startY","init"],"mappings":"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","sourcesContent":["'use strict';\n\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\nvar getModuleCalcData = require('../../plots/get_data').getModuleCalcData;\nvar plot = require('./plot');\nvar fxAttrs = require('../../components/fx/layout_attributes');\n\nvar setCursor = require('../../lib/setcursor');\nvar dragElement = require('../../components/dragelement');\nvar prepSelect = require('../../plots/cartesian/select').prepSelect;\nvar Lib = require('../../lib');\nvar Registry = require('../../registry');\n\nvar SANKEY = 'sankey';\n\nexports.name = SANKEY;\n\nexports.baseLayoutAttrOverrides = overrideAll({\n    hoverlabel: fxAttrs.hoverlabel\n}, 'plot', 'nested');\n\nexports.plot = function(gd) {\n    var calcData = getModuleCalcData(gd.calcdata, SANKEY)[0];\n    plot(gd, calcData);\n    exports.updateFx(gd);\n};\n\nexports.clean = function(newFullData, newFullLayout, oldFullData, oldFullLayout) {\n    var hadPlot = (oldFullLayout._has && oldFullLayout._has(SANKEY));\n    var hasPlot = (newFullLayout._has && newFullLayout._has(SANKEY));\n\n    if(hadPlot && !hasPlot) {\n        oldFullLayout._paperdiv.selectAll('.sankey').remove();\n        oldFullLayout._paperdiv.selectAll('.bgsankey').remove();\n    }\n};\n\nexports.updateFx = function(gd) {\n    for(var i = 0; i < gd._fullData.length; i++) {\n        subplotUpdateFx(gd, i);\n    }\n};\n\nfunction subplotUpdateFx(gd, index) {\n    var trace = gd._fullData[index];\n    var fullLayout = gd._fullLayout;\n\n    var dragMode = fullLayout.dragmode;\n    var cursor = fullLayout.dragmode === 'pan' ? 'move' : 'crosshair';\n    var bgRect = trace._bgRect;\n\n    if(dragMode === 'pan' || dragMode === 'zoom') return;\n\n    setCursor(bgRect, cursor);\n\n    var xaxis = {\n        _id: 'x',\n        c2p: Lib.identity,\n        _offset: trace._sankey.translateX,\n        _length: trace._sankey.width\n    };\n    var yaxis = {\n        _id: 'y',\n        c2p: Lib.identity,\n        _offset: trace._sankey.translateY,\n        _length: trace._sankey.height\n    };\n\n    // Note: dragOptions is needed to be declared for all dragmodes because\n    // it's the object that holds persistent selection state.\n    var dragOptions = {\n        gd: gd,\n        element: bgRect.node(),\n        plotinfo: {\n            id: index,\n            xaxis: xaxis,\n            yaxis: yaxis,\n            fillRangeItems: Lib.noop\n        },\n        subplot: index,\n        // create mock x/y axes for hover routine\n        xaxes: [xaxis],\n        yaxes: [yaxis],\n        doneFnCompleted: function(selection) {\n            var traceNow = gd._fullData[index];\n            var newGroups;\n            var oldGroups = traceNow.node.groups.slice();\n            var newGroup = [];\n\n            function findNode(pt) {\n                var nodes = traceNow._sankey.graph.nodes;\n                for(var i = 0; i < nodes.length; i++) {\n                    if(nodes[i].pointNumber === pt) return nodes[i];\n                }\n            }\n\n            for(var j = 0; j < selection.length; j++) {\n                var node = findNode(selection[j].pointNumber);\n                if(!node) continue;\n\n                // If the node represents a group\n                if(node.group) {\n                    // Add all its children to the current selection\n                    for(var k = 0; k < node.childrenNodes.length; k++) {\n                        newGroup.push(node.childrenNodes[k].pointNumber);\n                    }\n                    // Flag group for removal from existing list of groups\n                    oldGroups[node.pointNumber - traceNow.node._count] = false;\n                } else {\n                    newGroup.push(node.pointNumber);\n                }\n            }\n\n            newGroups = oldGroups\n                .filter(Boolean)\n                .concat([newGroup]);\n\n            Registry.call('_guiRestyle', gd, {\n                'node.groups': [ newGroups ]\n            }, index);\n        }\n    };\n\n    dragOptions.prepFn = function(e, startX, startY) {\n        prepSelect(e, startX, startY, dragOptions, dragMode);\n    };\n\n    dragElement.init(dragOptions);\n}\n"]},"metadata":{},"sourceType":"script"}