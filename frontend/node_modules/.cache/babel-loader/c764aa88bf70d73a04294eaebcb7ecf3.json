{"ast":null,"code":"'use strict';\n\nvar Lib = require('../../lib');\n\nvar AxisIDs = require('../../plots/cartesian/axis_ids');\n\nvar calcMarkerSize = require('../scatter/calc').calcMarkerSize;\n\nvar calcAxisExpansion = require('../scatter/calc').calcAxisExpansion;\n\nvar calcColorscale = require('../scatter/colorscale_calc');\n\nvar convertMarkerSelection = require('../scattergl/convert').markerSelection;\n\nvar convertMarkerStyle = require('../scattergl/convert').markerStyle;\n\nvar sceneUpdate = require('./scene_update');\n\nvar BADNUM = require('../../constants/numerical').BADNUM;\n\nvar TOO_MANY_POINTS = require('../scattergl/constants').TOO_MANY_POINTS;\n\nmodule.exports = function calc(gd, trace) {\n  var dimensions = trace.dimensions;\n  var commonLength = trace._length;\n  var opts = {}; // 'c' for calculated, 'l' for linear,\n  // only differ here for log axes, pass ldata to createMatrix as 'data'\n\n  var cdata = opts.cdata = [];\n  var ldata = opts.data = []; // keep track of visible dimensions\n\n  var visibleDims = trace._visibleDims = [];\n  var i, k, dim, xa, ya;\n\n  function makeCalcdata(ax, dim) {\n    // call makeCalcdata with fake input\n    var ccol = ax.makeCalcdata({\n      v: dim.values,\n      vcalendar: trace.calendar\n    }, 'v');\n\n    for (var j = 0; j < ccol.length; j++) {\n      ccol[j] = ccol[j] === BADNUM ? NaN : ccol[j];\n    }\n\n    cdata.push(ccol);\n    ldata.push(ax.type === 'log' ? Lib.simpleMap(ccol, ax.c2l) : ccol);\n  }\n\n  for (i = 0; i < dimensions.length; i++) {\n    dim = dimensions[i];\n\n    if (dim.visible) {\n      xa = AxisIDs.getFromId(gd, trace._diag[i][0]);\n      ya = AxisIDs.getFromId(gd, trace._diag[i][1]); // if corresponding x & y axes don't have matching types, skip dim\n\n      if (xa && ya && xa.type !== ya.type) {\n        Lib.log('Skipping splom dimension ' + i + ' with conflicting axis types');\n        continue;\n      }\n\n      if (xa) {\n        makeCalcdata(xa, dim);\n\n        if (ya && ya.type === 'category') {\n          ya._categories = xa._categories.slice();\n        }\n      } else {\n        // should not make it here, if both xa and ya undefined\n        makeCalcdata(ya, dim);\n      }\n\n      visibleDims.push(i);\n    }\n  }\n\n  calcColorscale(gd, trace);\n  Lib.extendFlat(opts, convertMarkerStyle(trace));\n  var visibleLength = cdata.length;\n  var hasTooManyPoints = visibleLength * commonLength > TOO_MANY_POINTS; // Reuse SVG scatter axis expansion routine.\n  // For graphs with very large number of points and array marker.size,\n  // use average marker size instead to speed things up.\n\n  var ppad;\n\n  if (hasTooManyPoints) {\n    ppad = opts.sizeAvg || Math.max(opts.size, 3);\n  } else {\n    ppad = calcMarkerSize(trace, commonLength);\n  }\n\n  for (k = 0; k < visibleDims.length; k++) {\n    i = visibleDims[k];\n    dim = dimensions[i];\n    xa = AxisIDs.getFromId(gd, trace._diag[i][0]) || {};\n    ya = AxisIDs.getFromId(gd, trace._diag[i][1]) || {};\n    calcAxisExpansion(gd, trace, xa, ya, cdata[k], cdata[k], ppad);\n  }\n\n  var scene = sceneUpdate(gd, trace);\n  if (!scene.matrix) scene.matrix = true;\n  scene.matrixOptions = opts;\n  scene.selectedOptions = convertMarkerSelection(trace, trace.selected);\n  scene.unselectedOptions = convertMarkerSelection(trace, trace.unselected);\n  return [{\n    x: false,\n    y: false,\n    t: {},\n    trace: trace\n  }];\n};","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/plotly.js/src/traces/splom/calc.js"],"names":["Lib","require","AxisIDs","calcMarkerSize","calcAxisExpansion","calcColorscale","convertMarkerSelection","markerSelection","convertMarkerStyle","markerStyle","sceneUpdate","BADNUM","TOO_MANY_POINTS","module","exports","calc","gd","trace","dimensions","commonLength","_length","opts","cdata","ldata","data","visibleDims","_visibleDims","i","k","dim","xa","ya","makeCalcdata","ax","ccol","v","values","vcalendar","calendar","j","length","NaN","push","type","simpleMap","c2l","visible","getFromId","_diag","log","_categories","slice","extendFlat","visibleLength","hasTooManyPoints","ppad","sizeAvg","Math","max","size","scene","matrix","matrixOptions","selectedOptions","selected","unselectedOptions","unselected","x","y","t"],"mappings":"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","sourcesContent":["'use strict';\n\nvar Lib = require('../../lib');\nvar AxisIDs = require('../../plots/cartesian/axis_ids');\n\nvar calcMarkerSize = require('../scatter/calc').calcMarkerSize;\nvar calcAxisExpansion = require('../scatter/calc').calcAxisExpansion;\nvar calcColorscale = require('../scatter/colorscale_calc');\nvar convertMarkerSelection = require('../scattergl/convert').markerSelection;\nvar convertMarkerStyle = require('../scattergl/convert').markerStyle;\nvar sceneUpdate = require('./scene_update');\n\nvar BADNUM = require('../../constants/numerical').BADNUM;\nvar TOO_MANY_POINTS = require('../scattergl/constants').TOO_MANY_POINTS;\n\nmodule.exports = function calc(gd, trace) {\n    var dimensions = trace.dimensions;\n    var commonLength = trace._length;\n    var opts = {};\n    // 'c' for calculated, 'l' for linear,\n    // only differ here for log axes, pass ldata to createMatrix as 'data'\n    var cdata = opts.cdata = [];\n    var ldata = opts.data = [];\n    // keep track of visible dimensions\n    var visibleDims = trace._visibleDims = [];\n    var i, k, dim, xa, ya;\n\n    function makeCalcdata(ax, dim) {\n        // call makeCalcdata with fake input\n        var ccol = ax.makeCalcdata({\n            v: dim.values,\n            vcalendar: trace.calendar\n        }, 'v');\n\n        for(var j = 0; j < ccol.length; j++) {\n            ccol[j] = ccol[j] === BADNUM ? NaN : ccol[j];\n        }\n        cdata.push(ccol);\n        ldata.push(ax.type === 'log' ? Lib.simpleMap(ccol, ax.c2l) : ccol);\n    }\n\n    for(i = 0; i < dimensions.length; i++) {\n        dim = dimensions[i];\n\n        if(dim.visible) {\n            xa = AxisIDs.getFromId(gd, trace._diag[i][0]);\n            ya = AxisIDs.getFromId(gd, trace._diag[i][1]);\n\n            // if corresponding x & y axes don't have matching types, skip dim\n            if(xa && ya && xa.type !== ya.type) {\n                Lib.log('Skipping splom dimension ' + i + ' with conflicting axis types');\n                continue;\n            }\n\n            if(xa) {\n                makeCalcdata(xa, dim);\n                if(ya && ya.type === 'category') {\n                    ya._categories = xa._categories.slice();\n                }\n            } else {\n                // should not make it here, if both xa and ya undefined\n                makeCalcdata(ya, dim);\n            }\n\n            visibleDims.push(i);\n        }\n    }\n\n    calcColorscale(gd, trace);\n    Lib.extendFlat(opts, convertMarkerStyle(trace));\n\n    var visibleLength = cdata.length;\n    var hasTooManyPoints = (visibleLength * commonLength) > TOO_MANY_POINTS;\n\n    // Reuse SVG scatter axis expansion routine.\n    // For graphs with very large number of points and array marker.size,\n    // use average marker size instead to speed things up.\n    var ppad;\n    if(hasTooManyPoints) {\n        ppad = opts.sizeAvg || Math.max(opts.size, 3);\n    } else {\n        ppad = calcMarkerSize(trace, commonLength);\n    }\n\n    for(k = 0; k < visibleDims.length; k++) {\n        i = visibleDims[k];\n        dim = dimensions[i];\n        xa = AxisIDs.getFromId(gd, trace._diag[i][0]) || {};\n        ya = AxisIDs.getFromId(gd, trace._diag[i][1]) || {};\n        calcAxisExpansion(gd, trace, xa, ya, cdata[k], cdata[k], ppad);\n    }\n\n    var scene = sceneUpdate(gd, trace);\n    if(!scene.matrix) scene.matrix = true;\n    scene.matrixOptions = opts;\n\n    scene.selectedOptions = convertMarkerSelection(trace, trace.selected);\n    scene.unselectedOptions = convertMarkerSelection(trace, trace.unselected);\n\n    return [{x: false, y: false, t: {}, trace: trace}];\n};\n"]},"metadata":{},"sourceType":"script"}