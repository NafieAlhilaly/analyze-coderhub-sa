{"ast":null,"code":"'use strict';\n\nmodule.exports = {\n  /**\n   * Standardize all missing data in calcdata to use undefined\n   * never null or NaN.\n   * That way we can use !==undefined, or !== BADNUM,\n   * to test for real data\n   */\n  BADNUM: undefined,\n\n  /*\n   * Limit certain operations to well below floating point max value\n   * to avoid glitches: Make sure that even when you multiply it by the\n   * number of pixels on a giant screen it still works\n   */\n  FP_SAFE: Number.MAX_VALUE * 1e-4,\n\n  /*\n   * conversion of date units to milliseconds\n   * year and month constants are marked \"AVG\"\n   * to remind us that not all years and months\n   * have the same length\n   */\n  ONEMAXYEAR: 31622400000,\n  // 366 * ONEDAY\n  ONEAVGYEAR: 31557600000,\n  // 365.25 days\n  ONEMINYEAR: 31536000000,\n  // 365 * ONEDAY\n  ONEMAXQUARTER: 7948800000,\n  // 92 * ONEDAY\n  ONEAVGQUARTER: 7889400000,\n  // 1/4 of ONEAVGYEAR\n  ONEMINQUARTER: 7689600000,\n  // 89 * ONEDAY\n  ONEMAXMONTH: 2678400000,\n  // 31 * ONEDAY\n  ONEAVGMONTH: 2629800000,\n  // 1/12 of ONEAVGYEAR\n  ONEMINMONTH: 2419200000,\n  // 28 * ONEDAY\n  ONEWEEK: 604800000,\n  // 7 * ONEDAY\n  ONEDAY: 86400000,\n  // 24 * ONEHOUR\n  ONEHOUR: 3600000,\n  ONEMIN: 60000,\n  ONESEC: 1000,\n\n  /*\n   * For fast conversion btwn world calendars and epoch ms, the Julian Day Number\n   * of the unix epoch. From calendars.instance().newDate(1970, 1, 1).toJD()\n   */\n  EPOCHJD: 2440587.5,\n\n  /*\n   * Are two values nearly equal? Compare to 1PPM\n   */\n  ALMOST_EQUAL: 1 - 1e-6,\n\n  /*\n   * If we're asked to clip a non-positive log value, how far off-screen\n   * do we put it?\n   */\n  LOG_CLIP: 10,\n\n  /*\n   * not a number, but for displaying numbers: the \"minus sign\" symbol is\n   * wider than the regular ascii dash \"-\"\n   */\n  MINUS_SIGN: '\\u2212'\n};","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/plotly.js/src/constants/numerical.js"],"names":["module","exports","BADNUM","undefined","FP_SAFE","Number","MAX_VALUE","ONEMAXYEAR","ONEAVGYEAR","ONEMINYEAR","ONEMAXQUARTER","ONEAVGQUARTER","ONEMINQUARTER","ONEMAXMONTH","ONEAVGMONTH","ONEMINMONTH","ONEWEEK","ONEDAY","ONEHOUR","ONEMIN","ONESEC","EPOCHJD","ALMOST_EQUAL","LOG_CLIP","MINUS_SIGN"],"mappings":"AAAA;;AAGAA,MAAM,CAACC,OAAP,GAAiB;AACb;AACJ;AACA;AACA;AACA;AACA;AACIC,EAAAA,MAAM,EAAEC,SAPK;;AASb;AACJ;AACA;AACA;AACA;AACIC,EAAAA,OAAO,EAAEC,MAAM,CAACC,SAAP,GAAmB,IAdf;;AAgBb;AACJ;AACA;AACA;AACA;AACA;AACIC,EAAAA,UAAU,EAAE,WAtBC;AAsBY;AACzBC,EAAAA,UAAU,EAAE,WAvBC;AAuBY;AACzBC,EAAAA,UAAU,EAAE,WAxBC;AAwBY;AACzBC,EAAAA,aAAa,EAAE,UAzBF;AAyBc;AAC3BC,EAAAA,aAAa,EAAE,UA1BF;AA0Bc;AAC3BC,EAAAA,aAAa,EAAE,UA3BF;AA2Bc;AAC3BC,EAAAA,WAAW,EAAE,UA5BA;AA4BY;AACzBC,EAAAA,WAAW,EAAE,UA7BA;AA6BY;AACzBC,EAAAA,WAAW,EAAE,UA9BA;AA8BY;AACzBC,EAAAA,OAAO,EAAE,SA/BI;AA+BO;AACpBC,EAAAA,MAAM,EAAE,QAhCK;AAgCK;AAClBC,EAAAA,OAAO,EAAE,OAjCI;AAkCbC,EAAAA,MAAM,EAAE,KAlCK;AAmCbC,EAAAA,MAAM,EAAE,IAnCK;;AAqCb;AACJ;AACA;AACA;AACIC,EAAAA,OAAO,EAAE,SAzCI;;AA2Cb;AACJ;AACA;AACIC,EAAAA,YAAY,EAAE,IAAI,IA9CL;;AAgDb;AACJ;AACA;AACA;AACIC,EAAAA,QAAQ,EAAE,EApDG;;AAsDb;AACJ;AACA;AACA;AACIC,EAAAA,UAAU,EAAE;AA1DC,CAAjB","sourcesContent":["'use strict';\n\n\nmodule.exports = {\n    /**\n     * Standardize all missing data in calcdata to use undefined\n     * never null or NaN.\n     * That way we can use !==undefined, or !== BADNUM,\n     * to test for real data\n     */\n    BADNUM: undefined,\n\n    /*\n     * Limit certain operations to well below floating point max value\n     * to avoid glitches: Make sure that even when you multiply it by the\n     * number of pixels on a giant screen it still works\n     */\n    FP_SAFE: Number.MAX_VALUE * 1e-4,\n\n    /*\n     * conversion of date units to milliseconds\n     * year and month constants are marked \"AVG\"\n     * to remind us that not all years and months\n     * have the same length\n     */\n    ONEMAXYEAR: 31622400000, // 366 * ONEDAY\n    ONEAVGYEAR: 31557600000, // 365.25 days\n    ONEMINYEAR: 31536000000, // 365 * ONEDAY\n    ONEMAXQUARTER: 7948800000, // 92 * ONEDAY\n    ONEAVGQUARTER: 7889400000, // 1/4 of ONEAVGYEAR\n    ONEMINQUARTER: 7689600000, // 89 * ONEDAY\n    ONEMAXMONTH: 2678400000, // 31 * ONEDAY\n    ONEAVGMONTH: 2629800000, // 1/12 of ONEAVGYEAR\n    ONEMINMONTH: 2419200000, // 28 * ONEDAY\n    ONEWEEK: 604800000, // 7 * ONEDAY\n    ONEDAY: 86400000, // 24 * ONEHOUR\n    ONEHOUR: 3600000,\n    ONEMIN: 60000,\n    ONESEC: 1000,\n\n    /*\n     * For fast conversion btwn world calendars and epoch ms, the Julian Day Number\n     * of the unix epoch. From calendars.instance().newDate(1970, 1, 1).toJD()\n     */\n    EPOCHJD: 2440587.5,\n\n    /*\n     * Are two values nearly equal? Compare to 1PPM\n     */\n    ALMOST_EQUAL: 1 - 1e-6,\n\n    /*\n     * If we're asked to clip a non-positive log value, how far off-screen\n     * do we put it?\n     */\n    LOG_CLIP: 10,\n\n    /*\n     * not a number, but for displaying numbers: the \"minus sign\" symbol is\n     * wider than the regular ascii dash \"-\"\n     */\n    MINUS_SIGN: '\\u2212'\n};\n"]},"metadata":{},"sourceType":"script"}