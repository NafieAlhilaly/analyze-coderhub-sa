{"ast":null,"code":"/*\n * World Calendars\n * https://github.com/alexcjohnson/world-calendars\n *\n * Batch-converted from kbwood/calendars\n * Many thanks to Keith Wood and all of the contributors to the original project!\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/* http://keith-wood.name/calendars.html\n  Islamic calendar for jQuery v2.0.2.\n  Written by Keith Wood (wood.keith{at}optusnet.com.au) August 2009.\n  Available under the MIT (http://keith-wood.name/licence.html) license. \n  Please attribute the author if you use it. */\nvar main = require('../main');\n\nvar assign = require('object-assign');\n/** Implementation of the Islamic or '16 civil' calendar.\n    Based on code from <a href=\"http://www.iranchamber.com/calendar/converter/iranian_calendar_converter.php\">http://www.iranchamber.com/calendar/converter/iranian_calendar_converter.php</a>.\n    See also <a href=\"http://en.wikipedia.org/wiki/Islamic_calendar\">http://en.wikipedia.org/wiki/Islamic_calendar</a>.\n    @class IslamicCalendar\n    @param [language=''] {string} The language code (default English) for localisation. */\n\n\nfunction IslamicCalendar(language) {\n  this.local = this.regionalOptions[language || ''] || this.regionalOptions[''];\n}\n\nIslamicCalendar.prototype = new main.baseCalendar();\nassign(IslamicCalendar.prototype, {\n  /** The calendar name.\n      @memberof IslamicCalendar */\n  name: 'Islamic',\n\n  /** Julian date of start of Islamic epoch: 16 July 622 CE.\n      @memberof IslamicCalendar */\n  jdEpoch: 1948439.5,\n\n  /** Days per month in a common year.\n      @memberof IslamicCalendar */\n  daysPerMonth: [30, 29, 30, 29, 30, 29, 30, 29, 30, 29, 30, 29],\n\n  /** <code>true</code> if has a year zero, <code>false</code> if not.\n      @memberof IslamicCalendar */\n  hasYearZero: false,\n\n  /** The minimum month number.\n      @memberof IslamicCalendar */\n  minMonth: 1,\n\n  /** The first month in the year.\n      @memberof IslamicCalendar */\n  firstMonth: 1,\n\n  /** The minimum day number.\n      @memberof IslamicCalendar */\n  minDay: 1,\n\n  /** Localisations for the plugin.\n      Entries are objects indexed by the language code ('' being the default US/English).\n      Each object has the following attributes.\n      @memberof IslamicCalendar\n      @property name {string} The calendar name.\n      @property epochs {string[]} The epoch names.\n      @property monthNames {string[]} The long names of the months of the year.\n      @property monthNamesShort {string[]} The short names of the months of the year.\n      @property dayNames {string[]} The long names of the days of the week.\n      @property dayNamesShort {string[]} The short names of the days of the week.\n      @property dayNamesMin {string[]} The minimal names of the days of the week.\n      @property dateFormat {string} The date format for this calendar.\n              See the options on <a href=\"BaseCalendar.html#formatDate\"><code>formatDate</code></a> for details.\n      @property firstDay {number} The number of the first day of the week, starting at 0.\n      @property isRTL {number} <code>true</code> if this localisation reads right-to-left. */\n  regionalOptions: {\n    // Localisations\n    '': {\n      name: 'Islamic',\n      epochs: ['BH', 'AH'],\n      monthNames: ['Muharram', 'Safar', 'Rabi\\' al-awwal', 'Rabi\\' al-thani', 'Jumada al-awwal', 'Jumada al-thani', 'Rajab', 'Sha\\'aban', 'Ramadan', 'Shawwal', 'Dhu al-Qi\\'dah', 'Dhu al-Hijjah'],\n      monthNamesShort: ['Muh', 'Saf', 'Rab1', 'Rab2', 'Jum1', 'Jum2', 'Raj', 'Sha\\'', 'Ram', 'Shaw', 'DhuQ', 'DhuH'],\n      dayNames: ['Yawm al-ahad', 'Yawm al-ithnayn', 'Yawm ath-thulaathaa\\'', 'Yawm al-arbi\\'aa\\'', 'Yawm al-khamÄ«s', 'Yawm al-jum\\'a', 'Yawm as-sabt'],\n      dayNamesShort: ['Aha', 'Ith', 'Thu', 'Arb', 'Kha', 'Jum', 'Sab'],\n      dayNamesMin: ['Ah', 'It', 'Th', 'Ar', 'Kh', 'Ju', 'Sa'],\n      digits: null,\n      dateFormat: 'yyyy/mm/dd',\n      firstDay: 6,\n      isRTL: false\n    }\n  },\n\n  /** Determine whether this date is in a leap year.\n      @memberof IslamicCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @return {boolean} <code>true</code> if this is a leap year, <code>false</code> if not.\n      @throws Error if an invalid year or a different calendar used. */\n  leapYear: function (year) {\n    var date = this._validate(year, this.minMonth, this.minDay, main.local.invalidYear);\n\n    return (date.year() * 11 + 14) % 30 < 11;\n  },\n\n  /** Determine the week of the year for a date.\n      @memberof IslamicCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @param [month] {number} The month to examine.\n      @param [day] {number} The day to examine.\n      @return {number} The week of the year.\n      @throws Error if an invalid date or a different calendar used. */\n  weekOfYear: function (year, month, day) {\n    // Find Sunday of this week starting on Sunday\n    var checkDate = this.newDate(year, month, day);\n    checkDate.add(-checkDate.dayOfWeek(), 'd');\n    return Math.floor((checkDate.dayOfYear() - 1) / 7) + 1;\n  },\n\n  /** Retrieve the number of days in a year.\n      @memberof IslamicCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @return {number} The number of days.\n      @throws Error if an invalid year or a different calendar used. */\n  daysInYear: function (year) {\n    return this.leapYear(year) ? 355 : 354;\n  },\n\n  /** Retrieve the number of days in a month.\n      @memberof IslamicCalendar\n      @param year {CDate|number} The date to examine or the year of the month.\n      @param [month] {number} The month.\n      @return {number} The number of days in this month.\n      @throws Error if an invalid month/year or a different calendar used. */\n  daysInMonth: function (year, month) {\n    var date = this._validate(year, month, this.minDay, main.local.invalidMonth);\n\n    return this.daysPerMonth[date.month() - 1] + (date.month() === 12 && this.leapYear(date.year()) ? 1 : 0);\n  },\n\n  /** Determine whether this date is a week day.\n      @memberof IslamicCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @param [month] {number} The month to examine.\n      @param [day] {number} The day to examine.\n      @return {boolean} <code>true</code> if a week day, <code>false</code> if not.\n      @throws Error if an invalid date or a different calendar used. */\n  weekDay: function (year, month, day) {\n    return this.dayOfWeek(year, month, day) !== 5;\n  },\n\n  /** Retrieve the Julian date equivalent for this date,\n      i.e. days since January 1, 4713 BCE Greenwich noon.\n      @memberof IslamicCalendar\n      @param year {CDate|number} The date to convert or the year to convert.\n      @param [month] {number} The month to convert.\n      @param [day] {number} The day to convert.\n      @return {number} The equivalent Julian date.\n      @throws Error if an invalid date or a different calendar used. */\n  toJD: function (year, month, day) {\n    var date = this._validate(year, month, day, main.local.invalidDate);\n\n    year = date.year();\n    month = date.month();\n    day = date.day();\n    year = year <= 0 ? year + 1 : year;\n    return day + Math.ceil(29.5 * (month - 1)) + (year - 1) * 354 + Math.floor((3 + 11 * year) / 30) + this.jdEpoch - 1;\n  },\n\n  /** Create a new date from a Julian date.\n      @memberof IslamicCalendar\n      @param jd {number} The Julian date to convert.\n      @return {CDate} The equivalent date. */\n  fromJD: function (jd) {\n    jd = Math.floor(jd) + 0.5;\n    var year = Math.floor((30 * (jd - this.jdEpoch) + 10646) / 10631);\n    year = year <= 0 ? year - 1 : year;\n    var month = Math.min(12, Math.ceil((jd - 29 - this.toJD(year, 1, 1)) / 29.5) + 1);\n    var day = jd - this.toJD(year, month, 1) + 1;\n    return this.newDate(year, month, day);\n  }\n}); // Islamic (16 civil) calendar implementation\n\nmain.calendars.islamic = IslamicCalendar;","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/world-calendars/dist/calendars/islamic.js"],"names":["main","require","assign","IslamicCalendar","language","local","regionalOptions","prototype","baseCalendar","name","jdEpoch","daysPerMonth","hasYearZero","minMonth","firstMonth","minDay","epochs","monthNames","monthNamesShort","dayNames","dayNamesShort","dayNamesMin","digits","dateFormat","firstDay","isRTL","leapYear","year","date","_validate","invalidYear","weekOfYear","month","day","checkDate","newDate","add","dayOfWeek","Math","floor","dayOfYear","daysInYear","daysInMonth","invalidMonth","weekDay","toJD","invalidDate","ceil","fromJD","jd","min","calendars","islamic"],"mappings":"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","sourcesContent":["/*\n * World Calendars\n * https://github.com/alexcjohnson/world-calendars\n *\n * Batch-converted from kbwood/calendars\n * Many thanks to Keith Wood and all of the contributors to the original project!\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nï»¿/* http://keith-wood.name/calendars.html\n   Islamic calendar for jQuery v2.0.2.\n   Written by Keith Wood (wood.keith{at}optusnet.com.au) August 2009.\n   Available under the MIT (http://keith-wood.name/licence.html) license. \n   Please attribute the author if you use it. */\n\nvar main = require('../main');\nvar assign = require('object-assign');\n\n\n/** Implementation of the Islamic or '16 civil' calendar.\n    Based on code from <a href=\"http://www.iranchamber.com/calendar/converter/iranian_calendar_converter.php\">http://www.iranchamber.com/calendar/converter/iranian_calendar_converter.php</a>.\n    See also <a href=\"http://en.wikipedia.org/wiki/Islamic_calendar\">http://en.wikipedia.org/wiki/Islamic_calendar</a>.\n    @class IslamicCalendar\n    @param [language=''] {string} The language code (default English) for localisation. */\nfunction IslamicCalendar(language) {\n    this.local = this.regionalOptions[language || ''] || this.regionalOptions[''];\n}\n\nIslamicCalendar.prototype = new main.baseCalendar;\n\nassign(IslamicCalendar.prototype, {\n    /** The calendar name.\n        @memberof IslamicCalendar */\n    name: 'Islamic',\n    /** Julian date of start of Islamic epoch: 16 July 622 CE.\n        @memberof IslamicCalendar */\n    jdEpoch: 1948439.5,\n    /** Days per month in a common year.\n        @memberof IslamicCalendar */\n    daysPerMonth: [30, 29, 30, 29, 30, 29, 30, 29, 30, 29, 30, 29],\n    /** <code>true</code> if has a year zero, <code>false</code> if not.\n        @memberof IslamicCalendar */\n    hasYearZero: false,\n    /** The minimum month number.\n        @memberof IslamicCalendar */\n    minMonth: 1,\n    /** The first month in the year.\n        @memberof IslamicCalendar */\n    firstMonth: 1,\n    /** The minimum day number.\n        @memberof IslamicCalendar */\n    minDay: 1,\n\n    /** Localisations for the plugin.\n        Entries are objects indexed by the language code ('' being the default US/English).\n        Each object has the following attributes.\n        @memberof IslamicCalendar\n        @property name {string} The calendar name.\n        @property epochs {string[]} The epoch names.\n        @property monthNames {string[]} The long names of the months of the year.\n        @property monthNamesShort {string[]} The short names of the months of the year.\n        @property dayNames {string[]} The long names of the days of the week.\n        @property dayNamesShort {string[]} The short names of the days of the week.\n        @property dayNamesMin {string[]} The minimal names of the days of the week.\n        @property dateFormat {string} The date format for this calendar.\n                See the options on <a href=\"BaseCalendar.html#formatDate\"><code>formatDate</code></a> for details.\n        @property firstDay {number} The number of the first day of the week, starting at 0.\n        @property isRTL {number} <code>true</code> if this localisation reads right-to-left. */\n    regionalOptions: { // Localisations\n        '': {\n            name: 'Islamic',\n            epochs: ['BH', 'AH'],\n            monthNames: ['Muharram', 'Safar', 'Rabi\\' al-awwal', 'Rabi\\' al-thani', 'Jumada al-awwal', 'Jumada al-thani',\n            'Rajab', 'Sha\\'aban', 'Ramadan', 'Shawwal', 'Dhu al-Qi\\'dah', 'Dhu al-Hijjah'],\n            monthNamesShort: ['Muh', 'Saf', 'Rab1', 'Rab2', 'Jum1', 'Jum2', 'Raj', 'Sha\\'', 'Ram', 'Shaw', 'DhuQ', 'DhuH'],\n            dayNames: ['Yawm al-ahad', 'Yawm al-ithnayn', 'Yawm ath-thulaathaa\\'',\n            'Yawm al-arbi\\'aa\\'', 'Yawm al-khamÄ«s', 'Yawm al-jum\\'a', 'Yawm as-sabt'],\n            dayNamesShort: ['Aha', 'Ith', 'Thu', 'Arb', 'Kha', 'Jum', 'Sab'],\n            dayNamesMin: ['Ah','It','Th','Ar','Kh','Ju','Sa'],\n            digits: null,\n            dateFormat: 'yyyy/mm/dd',\n            firstDay: 6,\n            isRTL: false\n        }\n    },\n\n    /** Determine whether this date is in a leap year.\n        @memberof IslamicCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @return {boolean} <code>true</code> if this is a leap year, <code>false</code> if not.\n        @throws Error if an invalid year or a different calendar used. */\n    leapYear: function(year) {\n        var date = this._validate(year, this.minMonth, this.minDay, main.local.invalidYear);\n        return (date.year() * 11 + 14) % 30 < 11;\n    },\n\n    /** Determine the week of the year for a date.\n        @memberof IslamicCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @param [month] {number} The month to examine.\n        @param [day] {number} The day to examine.\n        @return {number} The week of the year.\n        @throws Error if an invalid date or a different calendar used. */\n    weekOfYear: function(year, month, day) {\n        // Find Sunday of this week starting on Sunday\n        var checkDate = this.newDate(year, month, day);\n        checkDate.add(-checkDate.dayOfWeek(), 'd');\n        return Math.floor((checkDate.dayOfYear() - 1) / 7) + 1;\n    },\n\n    /** Retrieve the number of days in a year.\n        @memberof IslamicCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @return {number} The number of days.\n        @throws Error if an invalid year or a different calendar used. */\n    daysInYear: function(year) {\n        return (this.leapYear(year) ? 355 : 354);\n    },\n\n    /** Retrieve the number of days in a month.\n        @memberof IslamicCalendar\n        @param year {CDate|number} The date to examine or the year of the month.\n        @param [month] {number} The month.\n        @return {number} The number of days in this month.\n        @throws Error if an invalid month/year or a different calendar used. */\n    daysInMonth: function(year, month) {\n        var date = this._validate(year, month, this.minDay, main.local.invalidMonth);\n        return this.daysPerMonth[date.month() - 1] +\n            (date.month() === 12 && this.leapYear(date.year()) ? 1 : 0);\n    },\n\n    /** Determine whether this date is a week day.\n        @memberof IslamicCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @param [month] {number} The month to examine.\n        @param [day] {number} The day to examine.\n        @return {boolean} <code>true</code> if a week day, <code>false</code> if not.\n        @throws Error if an invalid date or a different calendar used. */\n    weekDay: function(year, month, day) {\n        return this.dayOfWeek(year, month, day) !== 5;\n    },\n\n    /** Retrieve the Julian date equivalent for this date,\n        i.e. days since January 1, 4713 BCE Greenwich noon.\n        @memberof IslamicCalendar\n        @param year {CDate|number} The date to convert or the year to convert.\n        @param [month] {number} The month to convert.\n        @param [day] {number} The day to convert.\n        @return {number} The equivalent Julian date.\n        @throws Error if an invalid date or a different calendar used. */\n    toJD: function(year, month, day) {\n        var date = this._validate(year, month, day, main.local.invalidDate);\n        year = date.year();\n        month = date.month();\n        day = date.day();\n        year = (year <= 0 ? year + 1 : year);\n        return day + Math.ceil(29.5 * (month - 1)) + (year - 1) * 354 +\n            Math.floor((3 + (11 * year)) / 30) + this.jdEpoch - 1;\n    },\n\n    /** Create a new date from a Julian date.\n        @memberof IslamicCalendar\n        @param jd {number} The Julian date to convert.\n        @return {CDate} The equivalent date. */\n    fromJD: function(jd) {\n        jd = Math.floor(jd) + 0.5;\n        var year = Math.floor((30 * (jd - this.jdEpoch) + 10646) / 10631);\n        year = (year <= 0 ? year - 1 : year);\n        var month = Math.min(12, Math.ceil((jd - 29 - this.toJD(year, 1, 1)) / 29.5) + 1);\n        var day = jd - this.toJD(year, month, 1) + 1;\n        return this.newDate(year, month, day);\n    }\n});\n\n// Islamic (16 civil) calendar implementation\nmain.calendars.islamic = IslamicCalendar;\n\n"]},"metadata":{},"sourceType":"script"}