{"ast":null,"code":"'use strict';\n/*\n * make a regex for matching counter ids/names ie xaxis, xaxis2, xaxis10...\n *\n * @param {string} head: the head of the pattern, eg 'x' matches 'x', 'x2', 'x10' etc.\n *      'xy' is a special case for cartesian subplots: it matches 'x2y3' etc\n * @param {Optional(string)} tail: a fixed piece after the id\n *      eg counterRegex('scene', '.annotations') for scene2.annotations etc.\n * @param {boolean} openEnded: if true, the string may continue past the match.\n * @param {boolean} matchBeginning: if false, the string may start before the match.\n */\n\nexports.counter = function (head, tail, openEnded, matchBeginning) {\n  var fullTail = (tail || '') + (openEnded ? '' : '$');\n  var startWithPrefix = matchBeginning === false ? '' : '^';\n\n  if (head === 'xy') {\n    return new RegExp(startWithPrefix + 'x([2-9]|[1-9][0-9]+)?y([2-9]|[1-9][0-9]+)?' + fullTail);\n  }\n\n  return new RegExp(startWithPrefix + head + '([2-9]|[1-9][0-9]+)?' + fullTail);\n};","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/plotly.js/src/lib/regex.js"],"names":["exports","counter","head","tail","openEnded","matchBeginning","fullTail","startWithPrefix","RegExp"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,OAAO,CAACC,OAAR,GAAkB,UAASC,IAAT,EAAeC,IAAf,EAAqBC,SAArB,EAAgCC,cAAhC,EAAgD;AAC9D,MAAIC,QAAQ,GAAG,CAACH,IAAI,IAAI,EAAT,KAAgBC,SAAS,GAAG,EAAH,GAAQ,GAAjC,CAAf;AACA,MAAIG,eAAe,GAAGF,cAAc,KAAK,KAAnB,GAA2B,EAA3B,GAAgC,GAAtD;;AACA,MAAGH,IAAI,KAAK,IAAZ,EAAkB;AACd,WAAO,IAAIM,MAAJ,CAAWD,eAAe,GAAG,4CAAlB,GAAiED,QAA5E,CAAP;AACH;;AACD,SAAO,IAAIE,MAAJ,CAAWD,eAAe,GAAGL,IAAlB,GAAyB,sBAAzB,GAAkDI,QAA7D,CAAP;AACH,CAPD","sourcesContent":["'use strict';\n\n/*\n * make a regex for matching counter ids/names ie xaxis, xaxis2, xaxis10...\n *\n * @param {string} head: the head of the pattern, eg 'x' matches 'x', 'x2', 'x10' etc.\n *      'xy' is a special case for cartesian subplots: it matches 'x2y3' etc\n * @param {Optional(string)} tail: a fixed piece after the id\n *      eg counterRegex('scene', '.annotations') for scene2.annotations etc.\n * @param {boolean} openEnded: if true, the string may continue past the match.\n * @param {boolean} matchBeginning: if false, the string may start before the match.\n */\nexports.counter = function(head, tail, openEnded, matchBeginning) {\n    var fullTail = (tail || '') + (openEnded ? '' : '$');\n    var startWithPrefix = matchBeginning === false ? '' : '^';\n    if(head === 'xy') {\n        return new RegExp(startWithPrefix + 'x([2-9]|[1-9][0-9]+)?y([2-9]|[1-9][0-9]+)?' + fullTail);\n    }\n    return new RegExp(startWithPrefix + head + '([2-9]|[1-9][0-9]+)?' + fullTail);\n};\n"]},"metadata":{},"sourceType":"script"}