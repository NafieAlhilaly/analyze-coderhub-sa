{"ast":null,"code":"'use strict';\n\nvar Fx = require('../../components/fx');\n\nvar Registry = require('../../registry');\n\nvar Color = require('../../components/color');\n\nvar fillText = require('../../lib').fillText;\n\nvar getLineWidth = require('./helpers').getLineWidth;\n\nvar hoverLabelText = require('../../plots/cartesian/axes').hoverLabelText;\n\nvar BADNUM = require('../../constants/numerical').BADNUM;\n\nfunction hoverPoints(pointData, xval, yval, hovermode, opts) {\n  var barPointData = hoverOnBars(pointData, xval, yval, hovermode, opts);\n\n  if (barPointData) {\n    var cd = barPointData.cd;\n    var trace = cd[0].trace;\n    var di = cd[barPointData.index];\n    barPointData.color = getTraceColor(trace, di);\n    Registry.getComponentMethod('errorbars', 'hoverInfo')(di, trace, barPointData);\n    return [barPointData];\n  }\n}\n\nfunction hoverOnBars(pointData, xval, yval, hovermode, opts) {\n  var cd = pointData.cd;\n  var trace = cd[0].trace;\n  var t = cd[0].t;\n  var isClosest = hovermode === 'closest';\n  var isWaterfall = trace.type === 'waterfall';\n  var maxHoverDistance = pointData.maxHoverDistance;\n  var maxSpikeDistance = pointData.maxSpikeDistance;\n  var posVal, sizeVal, posLetter, sizeLetter, dx, dy, pRangeCalc;\n\n  if (trace.orientation === 'h') {\n    posVal = yval;\n    sizeVal = xval;\n    posLetter = 'y';\n    sizeLetter = 'x';\n    dx = sizeFn;\n    dy = positionFn;\n  } else {\n    posVal = xval;\n    sizeVal = yval;\n    posLetter = 'x';\n    sizeLetter = 'y';\n    dy = sizeFn;\n    dx = positionFn;\n  }\n\n  var period = trace[posLetter + 'period'];\n  var isClosestOrPeriod = isClosest || period;\n\n  function thisBarMinPos(di) {\n    return thisBarExtPos(di, -1);\n  }\n\n  function thisBarMaxPos(di) {\n    return thisBarExtPos(di, 1);\n  }\n\n  function thisBarExtPos(di, sgn) {\n    var w = di.w;\n    return di[posLetter] + sgn * w / 2;\n  }\n\n  function periodLength(di) {\n    return di[posLetter + 'End'] - di[posLetter + 'Start'];\n  }\n\n  var minPos = isClosest ? thisBarMinPos : period ? function (di) {\n    return di.p - periodLength(di) / 2;\n  } : function (di) {\n    /*\n     * In compare mode, accept a bar if you're on it *or* its group.\n     * Nearly always it's the group that matters, but in case the bar\n     * was explicitly set wider than its group we'd better accept the\n     * whole bar.\n     *\n     * use `bardelta` instead of `bargroupwidth` so we accept hover\n     * in the gap. That way hover doesn't flash on and off as you\n     * mouse over the plot in compare modes.\n     * In 'closest' mode though the flashing seems inevitable,\n     * without far more complex logic\n     */\n    return Math.min(thisBarMinPos(di), di.p - t.bardelta / 2);\n  };\n  var maxPos = isClosest ? thisBarMaxPos : period ? function (di) {\n    return di.p + periodLength(di) / 2;\n  } : function (di) {\n    return Math.max(thisBarMaxPos(di), di.p + t.bardelta / 2);\n  };\n\n  function inbox(_minPos, _maxPos, maxDistance) {\n    if (opts.finiteRange) maxDistance = 0; // add a little to the pseudo-distance for wider bars, so that like scatter,\n    // if you are over two overlapping bars, the narrower one wins.\n\n    return Fx.inbox(_minPos - posVal, _maxPos - posVal, maxDistance + Math.min(1, Math.abs(_maxPos - _minPos) / pRangeCalc) - 1);\n  }\n\n  function positionFn(di) {\n    return inbox(minPos(di), maxPos(di), maxHoverDistance);\n  }\n\n  function thisBarPositionFn(di) {\n    return inbox(thisBarMinPos(di), thisBarMaxPos(di), maxSpikeDistance);\n  }\n\n  function getSize(di) {\n    var s = di[sizeLetter];\n\n    if (isWaterfall) {\n      var rawS = Math.abs(di.rawS) || 0;\n\n      if (sizeVal > 0) {\n        s += rawS;\n      } else if (sizeVal < 0) {\n        s -= rawS;\n      }\n    }\n\n    return s;\n  }\n\n  function sizeFn(di) {\n    var v = sizeVal;\n    var b = di.b;\n    var s = getSize(di); // add a gradient so hovering near the end of a\n    // bar makes it a little closer match\n\n    return Fx.inbox(b - v, s - v, maxHoverDistance + (s - v) / (s - b) - 1);\n  }\n\n  function thisBarSizeFn(di) {\n    var v = sizeVal;\n    var b = di.b;\n    var s = getSize(di); // add a gradient so hovering near the end of a\n    // bar makes it a little closer match\n\n    return Fx.inbox(b - v, s - v, maxSpikeDistance + (s - v) / (s - b) - 1);\n  }\n\n  var pa = pointData[posLetter + 'a'];\n  var sa = pointData[sizeLetter + 'a'];\n  pRangeCalc = Math.abs(pa.r2c(pa.range[1]) - pa.r2c(pa.range[0]));\n\n  function dxy(di) {\n    return (dx(di) + dy(di)) / 2;\n  }\n\n  var distfn = Fx.getDistanceFunction(hovermode, dx, dy, dxy);\n  Fx.getClosest(cd, distfn, pointData); // skip the rest (for this trace) if we didn't find a close point\n\n  if (pointData.index === false) return; // skip points inside axis rangebreaks\n\n  if (cd[pointData.index].p === BADNUM) return; // if we get here and we're not in 'closest' mode, push min/max pos back\n  // onto the group - even though that means occasionally the mouse will be\n  // over the hover label.\n\n  if (!isClosestOrPeriod) {\n    minPos = function (di) {\n      return Math.min(thisBarMinPos(di), di.p - t.bargroupwidth / 2);\n    };\n\n    maxPos = function (di) {\n      return Math.max(thisBarMaxPos(di), di.p + t.bargroupwidth / 2);\n    };\n  } // the closest data point\n\n\n  var index = pointData.index;\n  var di = cd[index];\n  var size = trace.base ? di.b + di.s : di.s;\n  pointData[sizeLetter + '0'] = pointData[sizeLetter + '1'] = sa.c2p(di[sizeLetter], true);\n  pointData[sizeLetter + 'LabelVal'] = size;\n  var extent = t.extents[t.extents.round(di.p)];\n  pointData[posLetter + '0'] = pa.c2p(isClosest ? minPos(di) : extent[0], true);\n  pointData[posLetter + '1'] = pa.c2p(isClosest ? maxPos(di) : extent[1], true);\n  var hasPeriod = di.orig_p !== undefined;\n  pointData[posLetter + 'LabelVal'] = hasPeriod ? di.orig_p : di.p;\n  pointData.labelLabel = hoverLabelText(pa, pointData[posLetter + 'LabelVal'], trace[posLetter + 'hoverformat']);\n  pointData.valueLabel = hoverLabelText(sa, pointData[sizeLetter + 'LabelVal'], trace[sizeLetter + 'hoverformat']);\n  pointData.baseLabel = hoverLabelText(sa, di.b, trace[sizeLetter + 'hoverformat']); // spikelines always want \"closest\" distance regardless of hovermode\n\n  pointData.spikeDistance = (thisBarSizeFn(di) + thisBarPositionFn(di)) / 2; // they also want to point to the data value, regardless of where the label goes\n  // in case of bars shifted within groups\n\n  pointData[posLetter + 'Spike'] = pa.c2p(di.p, true);\n  fillText(di, trace, pointData);\n  pointData.hovertemplate = trace.hovertemplate;\n  return pointData;\n}\n\nfunction getTraceColor(trace, di) {\n  var mc = di.mcc || trace.marker.color;\n  var mlc = di.mlcc || trace.marker.line.color;\n  var mlw = getLineWidth(trace, di);\n  if (Color.opacity(mc)) return mc;else if (Color.opacity(mlc) && mlw) return mlc;\n}\n\nmodule.exports = {\n  hoverPoints: hoverPoints,\n  hoverOnBars: hoverOnBars,\n  getTraceColor: getTraceColor\n};","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/plotly.js/src/traces/bar/hover.js"],"names":["Fx","require","Registry","Color","fillText","getLineWidth","hoverLabelText","BADNUM","hoverPoints","pointData","xval","yval","hovermode","opts","barPointData","hoverOnBars","cd","trace","di","index","color","getTraceColor","getComponentMethod","t","isClosest","isWaterfall","type","maxHoverDistance","maxSpikeDistance","posVal","sizeVal","posLetter","sizeLetter","dx","dy","pRangeCalc","orientation","sizeFn","positionFn","period","isClosestOrPeriod","thisBarMinPos","thisBarExtPos","thisBarMaxPos","sgn","w","periodLength","minPos","p","Math","min","bardelta","maxPos","max","inbox","_minPos","_maxPos","maxDistance","finiteRange","abs","thisBarPositionFn","getSize","s","rawS","v","b","thisBarSizeFn","pa","sa","r2c","range","dxy","distfn","getDistanceFunction","getClosest","bargroupwidth","size","base","c2p","extent","extents","round","hasPeriod","orig_p","undefined","labelLabel","valueLabel","baseLabel","spikeDistance","hovertemplate","mc","mcc","marker","mlc","mlcc","line","mlw","opacity","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar Fx = require('../../components/fx');\nvar Registry = require('../../registry');\nvar Color = require('../../components/color');\n\nvar fillText = require('../../lib').fillText;\nvar getLineWidth = require('./helpers').getLineWidth;\nvar hoverLabelText = require('../../plots/cartesian/axes').hoverLabelText;\nvar BADNUM = require('../../constants/numerical').BADNUM;\n\nfunction hoverPoints(pointData, xval, yval, hovermode, opts) {\n    var barPointData = hoverOnBars(pointData, xval, yval, hovermode, opts);\n\n    if(barPointData) {\n        var cd = barPointData.cd;\n        var trace = cd[0].trace;\n        var di = cd[barPointData.index];\n\n        barPointData.color = getTraceColor(trace, di);\n        Registry.getComponentMethod('errorbars', 'hoverInfo')(di, trace, barPointData);\n\n        return [barPointData];\n    }\n}\n\nfunction hoverOnBars(pointData, xval, yval, hovermode, opts) {\n    var cd = pointData.cd;\n    var trace = cd[0].trace;\n    var t = cd[0].t;\n    var isClosest = (hovermode === 'closest');\n    var isWaterfall = (trace.type === 'waterfall');\n    var maxHoverDistance = pointData.maxHoverDistance;\n    var maxSpikeDistance = pointData.maxSpikeDistance;\n\n    var posVal, sizeVal, posLetter, sizeLetter, dx, dy, pRangeCalc;\n\n    if(trace.orientation === 'h') {\n        posVal = yval;\n        sizeVal = xval;\n        posLetter = 'y';\n        sizeLetter = 'x';\n        dx = sizeFn;\n        dy = positionFn;\n    } else {\n        posVal = xval;\n        sizeVal = yval;\n        posLetter = 'x';\n        sizeLetter = 'y';\n        dy = sizeFn;\n        dx = positionFn;\n    }\n\n    var period = trace[posLetter + 'period'];\n    var isClosestOrPeriod = isClosest || period;\n\n    function thisBarMinPos(di) { return thisBarExtPos(di, -1); }\n    function thisBarMaxPos(di) { return thisBarExtPos(di, 1); }\n\n    function thisBarExtPos(di, sgn) {\n        var w = di.w;\n\n        return di[posLetter] + sgn * w / 2;\n    }\n\n    function periodLength(di) {\n        return di[posLetter + 'End'] - di[posLetter + 'Start'];\n    }\n\n    var minPos = isClosest ?\n        thisBarMinPos : period ?\n        function(di) {\n            return di.p - periodLength(di) / 2;\n        } :\n        function(di) {\n            /*\n             * In compare mode, accept a bar if you're on it *or* its group.\n             * Nearly always it's the group that matters, but in case the bar\n             * was explicitly set wider than its group we'd better accept the\n             * whole bar.\n             *\n             * use `bardelta` instead of `bargroupwidth` so we accept hover\n             * in the gap. That way hover doesn't flash on and off as you\n             * mouse over the plot in compare modes.\n             * In 'closest' mode though the flashing seems inevitable,\n             * without far more complex logic\n             */\n            return Math.min(thisBarMinPos(di), di.p - t.bardelta / 2);\n        };\n\n    var maxPos = isClosest ?\n        thisBarMaxPos : period ?\n        function(di) {\n            return di.p + periodLength(di) / 2;\n        } :\n        function(di) {\n            return Math.max(thisBarMaxPos(di), di.p + t.bardelta / 2);\n        };\n\n    function inbox(_minPos, _maxPos, maxDistance) {\n        if(opts.finiteRange) maxDistance = 0;\n\n        // add a little to the pseudo-distance for wider bars, so that like scatter,\n        // if you are over two overlapping bars, the narrower one wins.\n        return Fx.inbox(_minPos - posVal, _maxPos - posVal,\n            maxDistance + Math.min(1, Math.abs(_maxPos - _minPos) / pRangeCalc) - 1);\n    }\n\n    function positionFn(di) {\n        return inbox(minPos(di), maxPos(di), maxHoverDistance);\n    }\n\n    function thisBarPositionFn(di) {\n        return inbox(thisBarMinPos(di), thisBarMaxPos(di), maxSpikeDistance);\n    }\n\n    function getSize(di) {\n        var s = di[sizeLetter];\n\n        if(isWaterfall) {\n            var rawS = Math.abs(di.rawS) || 0;\n            if(sizeVal > 0) {\n                s += rawS;\n            } else if(sizeVal < 0) {\n                s -= rawS;\n            }\n        }\n\n        return s;\n    }\n\n    function sizeFn(di) {\n        var v = sizeVal;\n        var b = di.b;\n        var s = getSize(di);\n\n        // add a gradient so hovering near the end of a\n        // bar makes it a little closer match\n        return Fx.inbox(b - v, s - v, maxHoverDistance + (s - v) / (s - b) - 1);\n    }\n\n    function thisBarSizeFn(di) {\n        var v = sizeVal;\n        var b = di.b;\n        var s = getSize(di);\n\n        // add a gradient so hovering near the end of a\n        // bar makes it a little closer match\n        return Fx.inbox(b - v, s - v, maxSpikeDistance + (s - v) / (s - b) - 1);\n    }\n\n    var pa = pointData[posLetter + 'a'];\n    var sa = pointData[sizeLetter + 'a'];\n\n    pRangeCalc = Math.abs(pa.r2c(pa.range[1]) - pa.r2c(pa.range[0]));\n\n    function dxy(di) { return (dx(di) + dy(di)) / 2; }\n    var distfn = Fx.getDistanceFunction(hovermode, dx, dy, dxy);\n    Fx.getClosest(cd, distfn, pointData);\n\n    // skip the rest (for this trace) if we didn't find a close point\n    if(pointData.index === false) return;\n\n    // skip points inside axis rangebreaks\n    if(cd[pointData.index].p === BADNUM) return;\n\n    // if we get here and we're not in 'closest' mode, push min/max pos back\n    // onto the group - even though that means occasionally the mouse will be\n    // over the hover label.\n    if(!isClosestOrPeriod) {\n        minPos = function(di) {\n            return Math.min(thisBarMinPos(di), di.p - t.bargroupwidth / 2);\n        };\n        maxPos = function(di) {\n            return Math.max(thisBarMaxPos(di), di.p + t.bargroupwidth / 2);\n        };\n    }\n\n    // the closest data point\n    var index = pointData.index;\n    var di = cd[index];\n\n    var size = (trace.base) ? di.b + di.s : di.s;\n    pointData[sizeLetter + '0'] = pointData[sizeLetter + '1'] = sa.c2p(di[sizeLetter], true);\n    pointData[sizeLetter + 'LabelVal'] = size;\n\n    var extent = t.extents[t.extents.round(di.p)];\n    pointData[posLetter + '0'] = pa.c2p(isClosest ? minPos(di) : extent[0], true);\n    pointData[posLetter + '1'] = pa.c2p(isClosest ? maxPos(di) : extent[1], true);\n\n    var hasPeriod = di.orig_p !== undefined;\n    pointData[posLetter + 'LabelVal'] = hasPeriod ? di.orig_p : di.p;\n\n    pointData.labelLabel = hoverLabelText(pa, pointData[posLetter + 'LabelVal'], trace[posLetter + 'hoverformat']);\n    pointData.valueLabel = hoverLabelText(sa, pointData[sizeLetter + 'LabelVal'], trace[sizeLetter + 'hoverformat']);\n    pointData.baseLabel = hoverLabelText(sa, di.b, trace[sizeLetter + 'hoverformat']);\n\n    // spikelines always want \"closest\" distance regardless of hovermode\n    pointData.spikeDistance = (thisBarSizeFn(di) + thisBarPositionFn(di)) / 2;\n    // they also want to point to the data value, regardless of where the label goes\n    // in case of bars shifted within groups\n    pointData[posLetter + 'Spike'] = pa.c2p(di.p, true);\n\n    fillText(di, trace, pointData);\n    pointData.hovertemplate = trace.hovertemplate;\n\n    return pointData;\n}\n\nfunction getTraceColor(trace, di) {\n    var mc = di.mcc || trace.marker.color;\n    var mlc = di.mlcc || trace.marker.line.color;\n    var mlw = getLineWidth(trace, di);\n\n    if(Color.opacity(mc)) return mc;\n    else if(Color.opacity(mlc) && mlw) return mlc;\n}\n\nmodule.exports = {\n    hoverPoints: hoverPoints,\n    hoverOnBars: hoverOnBars,\n    getTraceColor: getTraceColor\n};\n"]},"metadata":{},"sourceType":"script"}