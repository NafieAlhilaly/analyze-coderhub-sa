{"ast":null,"code":"'use strict';\n\nmodule.exports = function incrementNumeric(x, delta) {\n  if (!delta) return x; // Note 1:\n  // 0.3 != 0.1 + 0.2 == 0.30000000000000004\n  // but 0.3 == (10 * 0.1 + 10 * 0.2) / 10\n  // Attempt to use integer steps to increment\n\n  var scale = 1 / Math.abs(delta);\n  var newX = scale > 1 ? (scale * x + scale * delta) / scale : x + delta; // Note 2:\n  // now we may also consider rounding to cover few more edge cases\n  // e.g. 0.3 * 3 = 0.8999999999999999\n\n  var lenX1 = String(newX).length;\n\n  if (lenX1 > 16) {\n    var lenDt = String(delta).length;\n    var lenX0 = String(x).length;\n\n    if (lenX1 >= lenX0 + lenDt) {\n      // likely a rounding error!\n      var s = parseFloat(newX).toPrecision(12);\n      if (s.indexOf('e+') === -1) newX = +s;\n    }\n  }\n\n  return newX;\n};","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/plotly.js/src/lib/increment.js"],"names":["module","exports","incrementNumeric","x","delta","scale","Math","abs","newX","lenX1","String","length","lenDt","lenX0","s","parseFloat","toPrecision","indexOf"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiB,SAASC,gBAAT,CAA0BC,CAA1B,EAA6BC,KAA7B,EAAoC;AACjD,MAAG,CAACA,KAAJ,EAAW,OAAOD,CAAP,CADsC,CAGjD;AACA;AACA;AACA;;AACA,MAAIE,KAAK,GAAG,IAAIC,IAAI,CAACC,GAAL,CAASH,KAAT,CAAhB;AACA,MAAII,IAAI,GAAIH,KAAK,GAAG,CAAT,GAAc,CACrBA,KAAK,GAAGF,CAAR,GACAE,KAAK,GAAGD,KAFa,IAGrBC,KAHO,GAGCF,CAAC,GAAGC,KAHhB,CARiD,CAajD;AACA;AACA;;AACA,MAAIK,KAAK,GAAGC,MAAM,CAACF,IAAD,CAAN,CAAaG,MAAzB;;AACA,MAAGF,KAAK,GAAG,EAAX,EAAe;AACX,QAAIG,KAAK,GAAGF,MAAM,CAACN,KAAD,CAAN,CAAcO,MAA1B;AACA,QAAIE,KAAK,GAAGH,MAAM,CAACP,CAAD,CAAN,CAAUQ,MAAtB;;AAEA,QAAGF,KAAK,IAAII,KAAK,GAAGD,KAApB,EAA2B;AAAE;AACzB,UAAIE,CAAC,GAAGC,UAAU,CAACP,IAAD,CAAV,CAAiBQ,WAAjB,CAA6B,EAA7B,CAAR;AACA,UAAGF,CAAC,CAACG,OAAF,CAAU,IAAV,MAAoB,CAAC,CAAxB,EAA2BT,IAAI,GAAG,CAACM,CAAR;AAC9B;AACJ;;AAED,SAAON,IAAP;AACH,CA5BD","sourcesContent":["'use strict';\n\nmodule.exports = function incrementNumeric(x, delta) {\n    if(!delta) return x;\n\n    // Note 1:\n    // 0.3 != 0.1 + 0.2 == 0.30000000000000004\n    // but 0.3 == (10 * 0.1 + 10 * 0.2) / 10\n    // Attempt to use integer steps to increment\n    var scale = 1 / Math.abs(delta);\n    var newX = (scale > 1) ? (\n        scale * x +\n        scale * delta\n    ) / scale : x + delta;\n\n    // Note 2:\n    // now we may also consider rounding to cover few more edge cases\n    // e.g. 0.3 * 3 = 0.8999999999999999\n    var lenX1 = String(newX).length;\n    if(lenX1 > 16) {\n        var lenDt = String(delta).length;\n        var lenX0 = String(x).length;\n\n        if(lenX1 >= lenX0 + lenDt) { // likely a rounding error!\n            var s = parseFloat(newX).toPrecision(12);\n            if(s.indexOf('e+') === -1) newX = +s;\n        }\n    }\n\n    return newX;\n};\n"]},"metadata":{},"sourceType":"script"}