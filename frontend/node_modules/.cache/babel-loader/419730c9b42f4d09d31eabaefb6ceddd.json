{"ast":null,"code":"'use strict';\n\nvar d3 = require('@plotly/d3');\n\nvar isNumeric = require('fast-isnumeric');\n\nvar Lib = require('../../lib');\n\nvar Icons = require('../../fonts/ploticon');\n\nvar Parser = new DOMParser();\n/**\n * UI controller for interactive plots\n * @Class\n * @Param {object} opts\n * @Param {object} opts.buttons    nested arrays of grouped buttons config objects\n * @Param {object} opts.container  container div to append modeBar\n * @Param {object} opts.graphInfo  primary plot object containing data and layout\n */\n\nfunction ModeBar(opts) {\n  this.container = opts.container;\n  this.element = document.createElement('div');\n  this.update(opts.graphInfo, opts.buttons);\n  this.container.appendChild(this.element);\n}\n\nvar proto = ModeBar.prototype;\n/**\n * Update modeBar (buttons and logo)\n *\n * @param {object} graphInfo  primary plot object containing data and layout\n * @param {array of arrays} buttons nested arrays of grouped buttons to initialize\n *\n */\n\nproto.update = function (graphInfo, buttons) {\n  this.graphInfo = graphInfo;\n  var context = this.graphInfo._context;\n  var fullLayout = this.graphInfo._fullLayout;\n  var modeBarId = 'modebar-' + fullLayout._uid;\n  this.element.setAttribute('id', modeBarId);\n  this._uid = modeBarId;\n  this.element.className = 'modebar';\n  if (context.displayModeBar === 'hover') this.element.className += ' modebar--hover ease-bg';\n\n  if (fullLayout.modebar.orientation === 'v') {\n    this.element.className += ' vertical';\n    buttons = buttons.reverse();\n  }\n\n  var style = fullLayout.modebar;\n  var bgSelector = context.displayModeBar === 'hover' ? '.js-plotly-plot .plotly:hover ' : '';\n  Lib.deleteRelatedStyleRule(modeBarId);\n  Lib.addRelatedStyleRule(modeBarId, bgSelector + '#' + modeBarId + ' .modebar-group', 'background-color: ' + style.bgcolor);\n  Lib.addRelatedStyleRule(modeBarId, '#' + modeBarId + ' .modebar-btn .icon path', 'fill: ' + style.color);\n  Lib.addRelatedStyleRule(modeBarId, '#' + modeBarId + ' .modebar-btn:hover .icon path', 'fill: ' + style.activecolor);\n  Lib.addRelatedStyleRule(modeBarId, '#' + modeBarId + ' .modebar-btn.active .icon path', 'fill: ' + style.activecolor); // if buttons or logo have changed, redraw modebar interior\n\n  var needsNewButtons = !this.hasButtons(buttons);\n  var needsNewLogo = this.hasLogo !== context.displaylogo;\n  var needsNewLocale = this.locale !== context.locale;\n  this.locale = context.locale;\n\n  if (needsNewButtons || needsNewLogo || needsNewLocale) {\n    this.removeAllButtons();\n    this.updateButtons(buttons);\n\n    if (context.watermark || context.displaylogo) {\n      var logoGroup = this.getLogo();\n\n      if (context.watermark) {\n        logoGroup.className = logoGroup.className + ' watermark';\n      }\n\n      if (fullLayout.modebar.orientation === 'v') {\n        this.element.insertBefore(logoGroup, this.element.childNodes[0]);\n      } else {\n        this.element.appendChild(logoGroup);\n      }\n\n      this.hasLogo = true;\n    }\n  }\n\n  this.updateActiveButton();\n};\n\nproto.updateButtons = function (buttons) {\n  var _this = this;\n\n  this.buttons = buttons;\n  this.buttonElements = [];\n  this.buttonsNames = [];\n  this.buttons.forEach(function (buttonGroup) {\n    var group = _this.createGroup();\n\n    buttonGroup.forEach(function (buttonConfig) {\n      var buttonName = buttonConfig.name;\n\n      if (!buttonName) {\n        throw new Error('must provide button \\'name\\' in button config');\n      }\n\n      if (_this.buttonsNames.indexOf(buttonName) !== -1) {\n        throw new Error('button name \\'' + buttonName + '\\' is taken');\n      }\n\n      _this.buttonsNames.push(buttonName);\n\n      var button = _this.createButton(buttonConfig);\n\n      _this.buttonElements.push(button);\n\n      group.appendChild(button);\n    });\n\n    _this.element.appendChild(group);\n  });\n};\n/**\n * Empty div for containing a group of buttons\n * @Return {HTMLelement}\n */\n\n\nproto.createGroup = function () {\n  var group = document.createElement('div');\n  group.className = 'modebar-group';\n  return group;\n};\n/**\n * Create a new button div and set constant and configurable attributes\n * @Param {object} config (see ./buttons.js for more info)\n * @Return {HTMLelement}\n */\n\n\nproto.createButton = function (config) {\n  var _this = this;\n\n  var button = document.createElement('a');\n  button.setAttribute('rel', 'tooltip');\n  button.className = 'modebar-btn';\n  var title = config.title;\n  if (title === undefined) title = config.name; // for localization: allow title to be a callable that takes gd as arg\n  else if (typeof title === 'function') title = title(this.graphInfo);\n  if (title || title === 0) button.setAttribute('data-title', title);\n  if (config.attr !== undefined) button.setAttribute('data-attr', config.attr);\n  var val = config.val;\n\n  if (val !== undefined) {\n    if (typeof val === 'function') val = val(this.graphInfo);\n    button.setAttribute('data-val', val);\n  }\n\n  var click = config.click;\n\n  if (typeof click !== 'function') {\n    throw new Error('must provide button \\'click\\' function in button config');\n  } else {\n    button.addEventListener('click', function (ev) {\n      config.click(_this.graphInfo, ev); // only needed for 'hoverClosestGeo' which does not call relayout\n\n      _this.updateActiveButton(ev.currentTarget);\n    });\n  }\n\n  button.setAttribute('data-toggle', config.toggle || false);\n  if (config.toggle) d3.select(button).classed('active', true);\n  var icon = config.icon;\n\n  if (typeof icon === 'function') {\n    button.appendChild(icon());\n  } else {\n    button.appendChild(this.createIcon(icon || Icons.question));\n  }\n\n  button.setAttribute('data-gravity', config.gravity || 'n');\n  return button;\n};\n/**\n * Add an icon to a button\n * @Param {object} thisIcon\n * @Param {number} thisIcon.width\n * @Param {string} thisIcon.path\n * @Param {string} thisIcon.color\n * @Return {HTMLelement}\n */\n\n\nproto.createIcon = function (thisIcon) {\n  var iconHeight = isNumeric(thisIcon.height) ? Number(thisIcon.height) : thisIcon.ascent - thisIcon.descent;\n  var svgNS = 'http://www.w3.org/2000/svg';\n  var icon;\n\n  if (thisIcon.path) {\n    icon = document.createElementNS(svgNS, 'svg');\n    icon.setAttribute('viewBox', [0, 0, thisIcon.width, iconHeight].join(' '));\n    icon.setAttribute('class', 'icon');\n    var path = document.createElementNS(svgNS, 'path');\n    path.setAttribute('d', thisIcon.path);\n\n    if (thisIcon.transform) {\n      path.setAttribute('transform', thisIcon.transform);\n    } else if (thisIcon.ascent !== undefined) {\n      // Legacy icon transform calculation\n      path.setAttribute('transform', 'matrix(1 0 0 -1 0 ' + thisIcon.ascent + ')');\n    }\n\n    icon.appendChild(path);\n  }\n\n  if (thisIcon.svg) {\n    var svgDoc = Parser.parseFromString(thisIcon.svg, 'application/xml');\n    icon = svgDoc.childNodes[0];\n  }\n\n  icon.setAttribute('height', '1em');\n  icon.setAttribute('width', '1em');\n  return icon;\n};\n/**\n * Updates active button with attribute specified in layout\n * @Param {object} graphInfo plot object containing data and layout\n * @Return {HTMLelement}\n */\n\n\nproto.updateActiveButton = function (buttonClicked) {\n  var fullLayout = this.graphInfo._fullLayout;\n  var dataAttrClicked = buttonClicked !== undefined ? buttonClicked.getAttribute('data-attr') : null;\n  this.buttonElements.forEach(function (button) {\n    var thisval = button.getAttribute('data-val') || true;\n    var dataAttr = button.getAttribute('data-attr');\n    var isToggleButton = button.getAttribute('data-toggle') === 'true';\n    var button3 = d3.select(button); // Use 'data-toggle' and 'buttonClicked' to toggle buttons\n    // that have no one-to-one equivalent in fullLayout\n\n    if (isToggleButton) {\n      if (dataAttr === dataAttrClicked) {\n        button3.classed('active', !button3.classed('active'));\n      }\n    } else {\n      var val = dataAttr === null ? dataAttr : Lib.nestedProperty(fullLayout, dataAttr).get();\n      button3.classed('active', val === thisval);\n    }\n  });\n};\n/**\n * Check if modeBar is configured as button configuration argument\n *\n * @Param {object} buttons 2d array of grouped button config objects\n * @Return {boolean}\n */\n\n\nproto.hasButtons = function (buttons) {\n  var currentButtons = this.buttons;\n  if (!currentButtons) return false;\n  if (buttons.length !== currentButtons.length) return false;\n\n  for (var i = 0; i < buttons.length; ++i) {\n    if (buttons[i].length !== currentButtons[i].length) return false;\n\n    for (var j = 0; j < buttons[i].length; j++) {\n      if (buttons[i][j].name !== currentButtons[i][j].name) return false;\n    }\n  }\n\n  return true;\n};\n/**\n * @return {HTMLDivElement} The logo image wrapped in a group\n */\n\n\nproto.getLogo = function () {\n  var group = this.createGroup();\n  var a = document.createElement('a');\n  a.href = 'https://plotly.com/';\n  a.target = '_blank';\n  a.setAttribute('data-title', Lib._(this.graphInfo, 'Produced with Plotly'));\n  a.className = 'modebar-btn plotlyjsicon modebar-btn--logo';\n  a.appendChild(this.createIcon(Icons.newplotlylogo));\n  group.appendChild(a);\n  return group;\n};\n\nproto.removeAllButtons = function () {\n  while (this.element.firstChild) {\n    this.element.removeChild(this.element.firstChild);\n  }\n\n  this.hasLogo = false;\n};\n\nproto.destroy = function () {\n  Lib.removeElement(this.container.querySelector('.modebar'));\n  Lib.deleteRelatedStyleRule(this._uid);\n};\n\nfunction createModeBar(gd, buttons) {\n  var fullLayout = gd._fullLayout;\n  var modeBar = new ModeBar({\n    graphInfo: gd,\n    container: fullLayout._modebardiv.node(),\n    buttons: buttons\n  });\n\n  if (fullLayout._privateplot) {\n    d3.select(modeBar.element).append('span').classed('badge-private float--left', true).text('PRIVATE');\n  }\n\n  return modeBar;\n}\n\nmodule.exports = createModeBar;","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/plotly.js/src/components/modebar/modebar.js"],"names":["d3","require","isNumeric","Lib","Icons","Parser","DOMParser","ModeBar","opts","container","element","document","createElement","update","graphInfo","buttons","appendChild","proto","prototype","context","_context","fullLayout","_fullLayout","modeBarId","_uid","setAttribute","className","displayModeBar","modebar","orientation","reverse","style","bgSelector","deleteRelatedStyleRule","addRelatedStyleRule","bgcolor","color","activecolor","needsNewButtons","hasButtons","needsNewLogo","hasLogo","displaylogo","needsNewLocale","locale","removeAllButtons","updateButtons","watermark","logoGroup","getLogo","insertBefore","childNodes","updateActiveButton","_this","buttonElements","buttonsNames","forEach","buttonGroup","group","createGroup","buttonConfig","buttonName","name","Error","indexOf","push","button","createButton","config","title","undefined","attr","val","click","addEventListener","ev","currentTarget","toggle","select","classed","icon","createIcon","question","gravity","thisIcon","iconHeight","height","Number","ascent","descent","svgNS","path","createElementNS","width","join","transform","svg","svgDoc","parseFromString","buttonClicked","dataAttrClicked","getAttribute","thisval","dataAttr","isToggleButton","button3","nestedProperty","get","currentButtons","length","i","j","a","href","target","_","newplotlylogo","firstChild","removeChild","destroy","removeElement","querySelector","createModeBar","gd","modeBar","_modebardiv","node","_privateplot","append","text","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar d3 = require('@plotly/d3');\nvar isNumeric = require('fast-isnumeric');\n\nvar Lib = require('../../lib');\nvar Icons = require('../../fonts/ploticon');\nvar Parser = new DOMParser();\n\n/**\n * UI controller for interactive plots\n * @Class\n * @Param {object} opts\n * @Param {object} opts.buttons    nested arrays of grouped buttons config objects\n * @Param {object} opts.container  container div to append modeBar\n * @Param {object} opts.graphInfo  primary plot object containing data and layout\n */\nfunction ModeBar(opts) {\n    this.container = opts.container;\n    this.element = document.createElement('div');\n\n    this.update(opts.graphInfo, opts.buttons);\n\n    this.container.appendChild(this.element);\n}\n\nvar proto = ModeBar.prototype;\n\n/**\n * Update modeBar (buttons and logo)\n *\n * @param {object} graphInfo  primary plot object containing data and layout\n * @param {array of arrays} buttons nested arrays of grouped buttons to initialize\n *\n */\nproto.update = function(graphInfo, buttons) {\n    this.graphInfo = graphInfo;\n\n    var context = this.graphInfo._context;\n    var fullLayout = this.graphInfo._fullLayout;\n    var modeBarId = 'modebar-' + fullLayout._uid;\n\n    this.element.setAttribute('id', modeBarId);\n    this._uid = modeBarId;\n\n    this.element.className = 'modebar';\n    if(context.displayModeBar === 'hover') this.element.className += ' modebar--hover ease-bg';\n\n    if(fullLayout.modebar.orientation === 'v') {\n        this.element.className += ' vertical';\n        buttons = buttons.reverse();\n    }\n\n    var style = fullLayout.modebar;\n    var bgSelector = context.displayModeBar === 'hover' ? '.js-plotly-plot .plotly:hover ' : '';\n\n    Lib.deleteRelatedStyleRule(modeBarId);\n    Lib.addRelatedStyleRule(modeBarId, bgSelector + '#' + modeBarId + ' .modebar-group', 'background-color: ' + style.bgcolor);\n    Lib.addRelatedStyleRule(modeBarId, '#' + modeBarId + ' .modebar-btn .icon path', 'fill: ' + style.color);\n    Lib.addRelatedStyleRule(modeBarId, '#' + modeBarId + ' .modebar-btn:hover .icon path', 'fill: ' + style.activecolor);\n    Lib.addRelatedStyleRule(modeBarId, '#' + modeBarId + ' .modebar-btn.active .icon path', 'fill: ' + style.activecolor);\n\n    // if buttons or logo have changed, redraw modebar interior\n    var needsNewButtons = !this.hasButtons(buttons);\n    var needsNewLogo = (this.hasLogo !== context.displaylogo);\n    var needsNewLocale = (this.locale !== context.locale);\n\n    this.locale = context.locale;\n\n    if(needsNewButtons || needsNewLogo || needsNewLocale) {\n        this.removeAllButtons();\n\n        this.updateButtons(buttons);\n\n        if(context.watermark || context.displaylogo) {\n            var logoGroup = this.getLogo();\n            if(context.watermark) {\n                logoGroup.className = logoGroup.className + ' watermark';\n            }\n\n            if(fullLayout.modebar.orientation === 'v') {\n                this.element.insertBefore(logoGroup, this.element.childNodes[0]);\n            } else {\n                this.element.appendChild(logoGroup);\n            }\n\n            this.hasLogo = true;\n        }\n    }\n\n    this.updateActiveButton();\n};\n\nproto.updateButtons = function(buttons) {\n    var _this = this;\n\n    this.buttons = buttons;\n    this.buttonElements = [];\n    this.buttonsNames = [];\n\n    this.buttons.forEach(function(buttonGroup) {\n        var group = _this.createGroup();\n\n        buttonGroup.forEach(function(buttonConfig) {\n            var buttonName = buttonConfig.name;\n            if(!buttonName) {\n                throw new Error('must provide button \\'name\\' in button config');\n            }\n            if(_this.buttonsNames.indexOf(buttonName) !== -1) {\n                throw new Error('button name \\'' + buttonName + '\\' is taken');\n            }\n            _this.buttonsNames.push(buttonName);\n\n            var button = _this.createButton(buttonConfig);\n            _this.buttonElements.push(button);\n            group.appendChild(button);\n        });\n\n        _this.element.appendChild(group);\n    });\n};\n\n/**\n * Empty div for containing a group of buttons\n * @Return {HTMLelement}\n */\nproto.createGroup = function() {\n    var group = document.createElement('div');\n    group.className = 'modebar-group';\n    return group;\n};\n\n/**\n * Create a new button div and set constant and configurable attributes\n * @Param {object} config (see ./buttons.js for more info)\n * @Return {HTMLelement}\n */\nproto.createButton = function(config) {\n    var _this = this;\n    var button = document.createElement('a');\n\n    button.setAttribute('rel', 'tooltip');\n    button.className = 'modebar-btn';\n\n    var title = config.title;\n    if(title === undefined) title = config.name;\n    // for localization: allow title to be a callable that takes gd as arg\n    else if(typeof title === 'function') title = title(this.graphInfo);\n\n    if(title || title === 0) button.setAttribute('data-title', title);\n\n    if(config.attr !== undefined) button.setAttribute('data-attr', config.attr);\n\n    var val = config.val;\n    if(val !== undefined) {\n        if(typeof val === 'function') val = val(this.graphInfo);\n        button.setAttribute('data-val', val);\n    }\n\n    var click = config.click;\n    if(typeof click !== 'function') {\n        throw new Error('must provide button \\'click\\' function in button config');\n    } else {\n        button.addEventListener('click', function(ev) {\n            config.click(_this.graphInfo, ev);\n\n            // only needed for 'hoverClosestGeo' which does not call relayout\n            _this.updateActiveButton(ev.currentTarget);\n        });\n    }\n\n    button.setAttribute('data-toggle', config.toggle || false);\n    if(config.toggle) d3.select(button).classed('active', true);\n\n    var icon = config.icon;\n    if(typeof icon === 'function') {\n        button.appendChild(icon());\n    } else {\n        button.appendChild(this.createIcon(icon || Icons.question));\n    }\n    button.setAttribute('data-gravity', config.gravity || 'n');\n\n    return button;\n};\n\n/**\n * Add an icon to a button\n * @Param {object} thisIcon\n * @Param {number} thisIcon.width\n * @Param {string} thisIcon.path\n * @Param {string} thisIcon.color\n * @Return {HTMLelement}\n */\nproto.createIcon = function(thisIcon) {\n    var iconHeight = isNumeric(thisIcon.height) ?\n        Number(thisIcon.height) :\n        thisIcon.ascent - thisIcon.descent;\n    var svgNS = 'http://www.w3.org/2000/svg';\n    var icon;\n\n    if(thisIcon.path) {\n        icon = document.createElementNS(svgNS, 'svg');\n        icon.setAttribute('viewBox', [0, 0, thisIcon.width, iconHeight].join(' '));\n        icon.setAttribute('class', 'icon');\n\n        var path = document.createElementNS(svgNS, 'path');\n        path.setAttribute('d', thisIcon.path);\n\n        if(thisIcon.transform) {\n            path.setAttribute('transform', thisIcon.transform);\n        } else if(thisIcon.ascent !== undefined) {\n            // Legacy icon transform calculation\n            path.setAttribute('transform', 'matrix(1 0 0 -1 0 ' + thisIcon.ascent + ')');\n        }\n\n        icon.appendChild(path);\n    }\n\n    if(thisIcon.svg) {\n        var svgDoc = Parser.parseFromString(thisIcon.svg, 'application/xml');\n        icon = svgDoc.childNodes[0];\n    }\n\n    icon.setAttribute('height', '1em');\n    icon.setAttribute('width', '1em');\n\n    return icon;\n};\n\n/**\n * Updates active button with attribute specified in layout\n * @Param {object} graphInfo plot object containing data and layout\n * @Return {HTMLelement}\n */\nproto.updateActiveButton = function(buttonClicked) {\n    var fullLayout = this.graphInfo._fullLayout;\n    var dataAttrClicked = (buttonClicked !== undefined) ?\n        buttonClicked.getAttribute('data-attr') :\n        null;\n\n    this.buttonElements.forEach(function(button) {\n        var thisval = button.getAttribute('data-val') || true;\n        var dataAttr = button.getAttribute('data-attr');\n        var isToggleButton = (button.getAttribute('data-toggle') === 'true');\n        var button3 = d3.select(button);\n\n        // Use 'data-toggle' and 'buttonClicked' to toggle buttons\n        // that have no one-to-one equivalent in fullLayout\n        if(isToggleButton) {\n            if(dataAttr === dataAttrClicked) {\n                button3.classed('active', !button3.classed('active'));\n            }\n        } else {\n            var val = (dataAttr === null) ?\n                dataAttr :\n                Lib.nestedProperty(fullLayout, dataAttr).get();\n\n            button3.classed('active', val === thisval);\n        }\n    });\n};\n\n/**\n * Check if modeBar is configured as button configuration argument\n *\n * @Param {object} buttons 2d array of grouped button config objects\n * @Return {boolean}\n */\nproto.hasButtons = function(buttons) {\n    var currentButtons = this.buttons;\n\n    if(!currentButtons) return false;\n\n    if(buttons.length !== currentButtons.length) return false;\n\n    for(var i = 0; i < buttons.length; ++i) {\n        if(buttons[i].length !== currentButtons[i].length) return false;\n        for(var j = 0; j < buttons[i].length; j++) {\n            if(buttons[i][j].name !== currentButtons[i][j].name) return false;\n        }\n    }\n\n    return true;\n};\n\n/**\n * @return {HTMLDivElement} The logo image wrapped in a group\n */\nproto.getLogo = function() {\n    var group = this.createGroup();\n    var a = document.createElement('a');\n\n    a.href = 'https://plotly.com/';\n    a.target = '_blank';\n    a.setAttribute('data-title', Lib._(this.graphInfo, 'Produced with Plotly'));\n    a.className = 'modebar-btn plotlyjsicon modebar-btn--logo';\n\n    a.appendChild(this.createIcon(Icons.newplotlylogo));\n\n    group.appendChild(a);\n    return group;\n};\n\nproto.removeAllButtons = function() {\n    while(this.element.firstChild) {\n        this.element.removeChild(this.element.firstChild);\n    }\n\n    this.hasLogo = false;\n};\n\nproto.destroy = function() {\n    Lib.removeElement(this.container.querySelector('.modebar'));\n    Lib.deleteRelatedStyleRule(this._uid);\n};\n\nfunction createModeBar(gd, buttons) {\n    var fullLayout = gd._fullLayout;\n\n    var modeBar = new ModeBar({\n        graphInfo: gd,\n        container: fullLayout._modebardiv.node(),\n        buttons: buttons\n    });\n\n    if(fullLayout._privateplot) {\n        d3.select(modeBar.element).append('span')\n            .classed('badge-private float--left', true)\n            .text('PRIVATE');\n    }\n\n    return modeBar;\n}\n\nmodule.exports = createModeBar;\n"]},"metadata":{},"sourceType":"script"}