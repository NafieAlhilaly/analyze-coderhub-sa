{"ast":null,"code":"'use strict';\n\nvar createShader = require('gl-shader');\n\nvar createBuffer = require('gl-buffer');\n\nvar createVAO = require('gl-vao');\n\nvar createTexture = require('gl-texture2d');\n\nvar multiply = require('gl-mat4/multiply');\n\nvar invert = require('gl-mat4/invert');\n\nvar ndarray = require('ndarray');\n\nvar colormap = require('colormap');\n\nvar IDENTITY = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n\nfunction VectorMesh(gl, texture, triShader, pickShader, trianglePositions, triangleVectors, triangleIds, triangleColors, triangleUVs, triangleVAO, traceType) {\n  this.gl = gl;\n  this.pixelRatio = 1;\n  this.cells = [];\n  this.positions = [];\n  this.intensity = [];\n  this.texture = texture;\n  this.dirty = true;\n  this.triShader = triShader;\n  this.pickShader = pickShader;\n  this.trianglePositions = trianglePositions;\n  this.triangleVectors = triangleVectors;\n  this.triangleColors = triangleColors;\n  this.triangleUVs = triangleUVs;\n  this.triangleIds = triangleIds;\n  this.triangleVAO = triangleVAO;\n  this.triangleCount = 0;\n  this.pickId = 1;\n  this.bounds = [[Infinity, Infinity, Infinity], [-Infinity, -Infinity, -Infinity]];\n  this.clipBounds = [[-Infinity, -Infinity, -Infinity], [Infinity, Infinity, Infinity]];\n  this.lightPosition = [1e5, 1e5, 0];\n  this.ambientLight = 0.8;\n  this.diffuseLight = 0.8;\n  this.specularLight = 2.0;\n  this.roughness = 0.5;\n  this.fresnel = 1.5;\n  this.opacity = 1;\n  this.traceType = traceType;\n  this.tubeScale = 1; // used in streamtube\n\n  this.coneScale = 2; // used in cone\n\n  this.vectorScale = 1; // used in cone\n\n  this.coneOffset = 0.25; // used in cone\n\n  this._model = IDENTITY;\n  this._view = IDENTITY;\n  this._projection = IDENTITY;\n  this._resolution = [1, 1];\n}\n\nvar proto = VectorMesh.prototype;\n\nproto.isOpaque = function () {\n  return this.opacity >= 1;\n};\n\nproto.isTransparent = function () {\n  return this.opacity < 1;\n};\n\nproto.pickSlots = 1;\n\nproto.setPickBase = function (id) {\n  this.pickId = id;\n};\n\nfunction genColormap(param) {\n  var colors = colormap({\n    colormap: param,\n    nshades: 256,\n    format: 'rgba'\n  });\n  var result = new Uint8Array(256 * 4);\n\n  for (var i = 0; i < 256; ++i) {\n    var c = colors[i];\n\n    for (var j = 0; j < 3; ++j) {\n      result[4 * i + j] = c[j];\n    }\n\n    result[4 * i + 3] = c[3] * 255;\n  }\n\n  return ndarray(result, [256, 256, 4], [4, 0, 1]);\n}\n\nfunction takeZComponent(array) {\n  var n = array.length;\n  var result = new Array(n);\n\n  for (var i = 0; i < n; ++i) {\n    result[i] = array[i][2];\n  }\n\n  return result;\n}\n\nproto.update = function (params) {\n  params = params || {};\n  var gl = this.gl;\n  this.dirty = true;\n\n  if ('lightPosition' in params) {\n    this.lightPosition = params.lightPosition;\n  }\n\n  if ('opacity' in params) {\n    this.opacity = params.opacity;\n  }\n\n  if ('ambient' in params) {\n    this.ambientLight = params.ambient;\n  }\n\n  if ('diffuse' in params) {\n    this.diffuseLight = params.diffuse;\n  }\n\n  if ('specular' in params) {\n    this.specularLight = params.specular;\n  }\n\n  if ('roughness' in params) {\n    this.roughness = params.roughness;\n  }\n\n  if ('fresnel' in params) {\n    this.fresnel = params.fresnel;\n  } // use in streamtube\n\n\n  if (params.tubeScale !== undefined) {\n    this.tubeScale = params.tubeScale;\n  } // used in cone\n\n\n  if (params.vectorScale !== undefined) {\n    this.vectorScale = params.vectorScale;\n  }\n\n  if (params.coneScale !== undefined) {\n    this.coneScale = params.coneScale;\n  }\n\n  if (params.coneOffset !== undefined) {\n    this.coneOffset = params.coneOffset;\n  }\n\n  if (params.colormap) {\n    this.texture.shape = [256, 256];\n    this.texture.minFilter = gl.LINEAR_MIPMAP_LINEAR;\n    this.texture.magFilter = gl.LINEAR;\n    this.texture.setPixels(genColormap(params.colormap));\n    this.texture.generateMipmap();\n  }\n\n  var cells = params.cells;\n  var positions = params.positions;\n  var vectors = params.vectors;\n\n  if (!positions || !cells || !vectors) {\n    return;\n  }\n\n  var tPos = [];\n  var tVec = [];\n  var tCol = [];\n  var tUVs = [];\n  var tIds = []; //Save geometry data for picking calculations\n\n  this.cells = cells;\n  this.positions = positions;\n  this.vectors = vectors; //Compute colors\n\n  var meshColor = params.meshColor || [1, 1, 1, 1]; //UVs\n\n  var vertexIntensity = params.vertexIntensity;\n  var intensityLo = Infinity;\n  var intensityHi = -Infinity;\n\n  if (vertexIntensity) {\n    if (params.vertexIntensityBounds) {\n      intensityLo = +params.vertexIntensityBounds[0];\n      intensityHi = +params.vertexIntensityBounds[1];\n    } else {\n      for (var i = 0; i < vertexIntensity.length; ++i) {\n        var f = vertexIntensity[i];\n        intensityLo = Math.min(intensityLo, f);\n        intensityHi = Math.max(intensityHi, f);\n      }\n    }\n  } else {\n    for (var i = 0; i < positions.length; ++i) {\n      var f = positions[i][2];\n      intensityLo = Math.min(intensityLo, f);\n      intensityHi = Math.max(intensityHi, f);\n    }\n  }\n\n  if (vertexIntensity) {\n    this.intensity = vertexIntensity;\n  } else {\n    this.intensity = takeZComponent(positions);\n  } //Update bounds\n\n\n  this.bounds = [[Infinity, Infinity, Infinity], [-Infinity, -Infinity, -Infinity]];\n\n  for (var i = 0; i < positions.length; ++i) {\n    var p = positions[i];\n\n    for (var j = 0; j < 3; ++j) {\n      if (isNaN(p[j]) || !isFinite(p[j])) {\n        continue;\n      }\n\n      this.bounds[0][j] = Math.min(this.bounds[0][j], p[j]);\n      this.bounds[1][j] = Math.max(this.bounds[1][j], p[j]);\n    }\n  } //Pack cells into buffers\n\n\n  var triangleCount = 0;\n\n  fill_loop: for (var i = 0; i < cells.length; ++i) {\n    var cell = cells[i];\n\n    switch (cell.length) {\n      case 3:\n        //Check NaNs\n        for (var j = 0; j < 3; ++j) {\n          var v = cell[j];\n          var p = positions[v];\n\n          for (var k = 0; k < 3; ++k) {\n            if (isNaN(p[k]) || !isFinite(p[k])) {\n              continue fill_loop;\n            }\n          }\n        }\n\n        for (var j = 0; j < 3; ++j) {\n          var v = cell[2 - j];\n          var p = positions[v];\n          tPos.push(p[0], p[1], p[2], p[3]);\n          var w = vectors[v];\n          tVec.push(w[0], w[1], w[2], w[3] || 0);\n          var c = meshColor;\n\n          if (c.length === 3) {\n            tCol.push(c[0], c[1], c[2], 1);\n          } else {\n            tCol.push(c[0], c[1], c[2], c[3]);\n          }\n\n          var uv;\n\n          if (vertexIntensity) {\n            uv = [(vertexIntensity[v] - intensityLo) / (intensityHi - intensityLo), 0];\n          } else {\n            uv = [(p[2] - intensityLo) / (intensityHi - intensityLo), 0];\n          }\n\n          tUVs.push(uv[0], uv[1]);\n          tIds.push(i);\n        }\n\n        triangleCount += 1;\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  this.triangleCount = triangleCount;\n  this.trianglePositions.update(tPos);\n  this.triangleVectors.update(tVec);\n  this.triangleColors.update(tCol);\n  this.triangleUVs.update(tUVs);\n  this.triangleIds.update(new Uint32Array(tIds));\n};\n\nproto.drawTransparent = proto.draw = function (params) {\n  params = params || {};\n  var gl = this.gl;\n  var model = params.model || IDENTITY;\n  var view = params.view || IDENTITY;\n  var projection = params.projection || IDENTITY;\n  var clipBounds = [[-1e6, -1e6, -1e6], [1e6, 1e6, 1e6]];\n\n  for (var i = 0; i < 3; ++i) {\n    clipBounds[0][i] = Math.max(clipBounds[0][i], this.clipBounds[0][i]);\n    clipBounds[1][i] = Math.min(clipBounds[1][i], this.clipBounds[1][i]);\n  }\n\n  var uniforms = {\n    model: model,\n    view: view,\n    projection: projection,\n    inverseModel: IDENTITY.slice(),\n    clipBounds: clipBounds,\n    kambient: this.ambientLight,\n    kdiffuse: this.diffuseLight,\n    kspecular: this.specularLight,\n    roughness: this.roughness,\n    fresnel: this.fresnel,\n    eyePosition: [0, 0, 0],\n    lightPosition: [0, 0, 0],\n    opacity: this.opacity,\n    tubeScale: this.tubeScale,\n    vectorScale: this.vectorScale,\n    coneScale: this.coneScale,\n    coneOffset: this.coneOffset,\n    texture: 0\n  };\n  uniforms.inverseModel = invert(uniforms.inverseModel, uniforms.model);\n  gl.disable(gl.CULL_FACE);\n  this.texture.bind(0);\n  var invCameraMatrix = new Array(16);\n  multiply(invCameraMatrix, uniforms.view, uniforms.model);\n  multiply(invCameraMatrix, uniforms.projection, invCameraMatrix);\n  invert(invCameraMatrix, invCameraMatrix);\n\n  for (var i = 0; i < 3; ++i) {\n    uniforms.eyePosition[i] = invCameraMatrix[12 + i] / invCameraMatrix[15];\n  }\n\n  var w = invCameraMatrix[15];\n\n  for (var i = 0; i < 3; ++i) {\n    w += this.lightPosition[i] * invCameraMatrix[4 * i + 3];\n  }\n\n  for (var i = 0; i < 3; ++i) {\n    var s = invCameraMatrix[12 + i];\n\n    for (var j = 0; j < 3; ++j) {\n      s += invCameraMatrix[4 * j + i] * this.lightPosition[j];\n    }\n\n    uniforms.lightPosition[i] = s / w;\n  }\n\n  if (this.triangleCount > 0) {\n    var shader = this.triShader;\n    shader.bind();\n    shader.uniforms = uniforms;\n    this.triangleVAO.bind();\n    gl.drawArrays(gl.TRIANGLES, 0, this.triangleCount * 3);\n    this.triangleVAO.unbind();\n  }\n};\n\nproto.drawPick = function (params) {\n  params = params || {};\n  var gl = this.gl;\n  var model = params.model || IDENTITY;\n  var view = params.view || IDENTITY;\n  var projection = params.projection || IDENTITY;\n  var clipBounds = [[-1e6, -1e6, -1e6], [1e6, 1e6, 1e6]];\n\n  for (var i = 0; i < 3; ++i) {\n    clipBounds[0][i] = Math.max(clipBounds[0][i], this.clipBounds[0][i]);\n    clipBounds[1][i] = Math.min(clipBounds[1][i], this.clipBounds[1][i]);\n  } //Save camera parameters\n\n\n  this._model = [].slice.call(model);\n  this._view = [].slice.call(view);\n  this._projection = [].slice.call(projection);\n  this._resolution = [gl.drawingBufferWidth, gl.drawingBufferHeight];\n  var uniforms = {\n    model: model,\n    view: view,\n    projection: projection,\n    clipBounds: clipBounds,\n    tubeScale: this.tubeScale,\n    vectorScale: this.vectorScale,\n    coneScale: this.coneScale,\n    coneOffset: this.coneOffset,\n    pickId: this.pickId / 255.0\n  };\n  var shader = this.pickShader;\n  shader.bind();\n  shader.uniforms = uniforms;\n\n  if (this.triangleCount > 0) {\n    this.triangleVAO.bind();\n    gl.drawArrays(gl.TRIANGLES, 0, this.triangleCount * 3);\n    this.triangleVAO.unbind();\n  }\n};\n\nproto.pick = function (pickData) {\n  if (!pickData) {\n    return null;\n  }\n\n  if (pickData.id !== this.pickId) {\n    return null;\n  }\n\n  var cellId = pickData.value[0] + 256 * pickData.value[1] + 65536 * pickData.value[2];\n  var cell = this.cells[cellId];\n  var pos = this.positions[cell[1]].slice(0, 3);\n  var result = {\n    position: pos,\n    dataCoordinate: pos,\n    index: Math.floor(cell[1] / 48)\n  };\n\n  if (this.traceType === 'cone') {\n    result.index = Math.floor(cell[1] / 48);\n  } else if (this.traceType === 'streamtube') {\n    result.intensity = this.intensity[cell[1]];\n    result.velocity = this.vectors[cell[1]].slice(0, 3);\n    result.divergence = this.vectors[cell[1]][3];\n    result.index = cellId;\n  }\n\n  return result;\n};\n\nproto.dispose = function () {\n  this.texture.dispose();\n  this.triShader.dispose();\n  this.pickShader.dispose();\n  this.triangleVAO.dispose();\n  this.trianglePositions.dispose();\n  this.triangleVectors.dispose();\n  this.triangleColors.dispose();\n  this.triangleUVs.dispose();\n  this.triangleIds.dispose();\n};\n\nfunction createMeshShader(gl, shaders) {\n  var shader = createShader(gl, shaders.meshShader.vertex, shaders.meshShader.fragment, null, shaders.meshShader.attributes);\n  shader.attributes.position.location = 0;\n  shader.attributes.color.location = 2;\n  shader.attributes.uv.location = 3;\n  shader.attributes.vector.location = 4;\n  return shader;\n}\n\nfunction createPickShader(gl, shaders) {\n  var shader = createShader(gl, shaders.pickShader.vertex, shaders.pickShader.fragment, null, shaders.pickShader.attributes);\n  shader.attributes.position.location = 0;\n  shader.attributes.id.location = 1;\n  shader.attributes.vector.location = 4;\n  return shader;\n}\n\nfunction createVectorMesh(gl, params, opts) {\n  var shaders = opts.shaders;\n\n  if (arguments.length === 1) {\n    params = gl;\n    gl = params.gl;\n  }\n\n  var triShader = createMeshShader(gl, shaders);\n  var pickShader = createPickShader(gl, shaders);\n  var meshTexture = createTexture(gl, ndarray(new Uint8Array([255, 255, 255, 255]), [1, 1, 4]));\n  meshTexture.generateMipmap();\n  meshTexture.minFilter = gl.LINEAR_MIPMAP_LINEAR;\n  meshTexture.magFilter = gl.LINEAR;\n  var trianglePositions = createBuffer(gl);\n  var triangleVectors = createBuffer(gl);\n  var triangleColors = createBuffer(gl);\n  var triangleUVs = createBuffer(gl);\n  var triangleIds = createBuffer(gl);\n  var triangleVAO = createVAO(gl, [{\n    buffer: trianglePositions,\n    type: gl.FLOAT,\n    size: 4\n  }, {\n    buffer: triangleIds,\n    type: gl.UNSIGNED_BYTE,\n    size: 4,\n    normalized: true\n  }, {\n    buffer: triangleColors,\n    type: gl.FLOAT,\n    size: 4\n  }, {\n    buffer: triangleUVs,\n    type: gl.FLOAT,\n    size: 2\n  }, {\n    buffer: triangleVectors,\n    type: gl.FLOAT,\n    size: 4\n  }]);\n  var mesh = new VectorMesh(gl, meshTexture, triShader, pickShader, trianglePositions, triangleVectors, triangleIds, triangleColors, triangleUVs, triangleVAO, opts.traceType || 'cone');\n  mesh.update(params);\n  return mesh;\n}\n\nmodule.exports = createVectorMesh;","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/gl-cone3d/create_mesh.js"],"names":["createShader","require","createBuffer","createVAO","createTexture","multiply","invert","ndarray","colormap","IDENTITY","VectorMesh","gl","texture","triShader","pickShader","trianglePositions","triangleVectors","triangleIds","triangleColors","triangleUVs","triangleVAO","traceType","pixelRatio","cells","positions","intensity","dirty","triangleCount","pickId","bounds","Infinity","clipBounds","lightPosition","ambientLight","diffuseLight","specularLight","roughness","fresnel","opacity","tubeScale","coneScale","vectorScale","coneOffset","_model","_view","_projection","_resolution","proto","prototype","isOpaque","isTransparent","pickSlots","setPickBase","id","genColormap","param","colors","nshades","format","result","Uint8Array","i","c","j","takeZComponent","array","n","length","Array","update","params","ambient","diffuse","specular","undefined","shape","minFilter","LINEAR_MIPMAP_LINEAR","magFilter","LINEAR","setPixels","generateMipmap","vectors","tPos","tVec","tCol","tUVs","tIds","meshColor","vertexIntensity","intensityLo","intensityHi","vertexIntensityBounds","f","Math","min","max","p","isNaN","isFinite","fill_loop","cell","v","k","push","w","uv","Uint32Array","drawTransparent","draw","model","view","projection","uniforms","inverseModel","slice","kambient","kdiffuse","kspecular","eyePosition","disable","CULL_FACE","bind","invCameraMatrix","s","shader","drawArrays","TRIANGLES","unbind","drawPick","call","drawingBufferWidth","drawingBufferHeight","pick","pickData","cellId","value","pos","position","dataCoordinate","index","floor","velocity","divergence","dispose","createMeshShader","shaders","meshShader","vertex","fragment","attributes","location","color","vector","createPickShader","createVectorMesh","opts","arguments","meshTexture","buffer","type","FLOAT","size","UNSIGNED_BYTE","normalized","mesh","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nvar createShader  = require('gl-shader')\nvar createBuffer  = require('gl-buffer')\nvar createVAO     = require('gl-vao')\nvar createTexture = require('gl-texture2d')\nvar multiply      = require('gl-mat4/multiply')\nvar invert        = require('gl-mat4/invert')\nvar ndarray       = require('ndarray')\nvar colormap      = require('colormap')\n\nvar IDENTITY = [\n  1,0,0,0,\n  0,1,0,0,\n  0,0,1,0,\n  0,0,0,1]\n\nfunction VectorMesh(gl\n  , texture\n  , triShader\n  , pickShader\n  , trianglePositions\n  , triangleVectors\n  , triangleIds\n  , triangleColors\n  , triangleUVs\n  , triangleVAO\n  , traceType) {\n\n  this.gl                = gl\n  this.pixelRatio         = 1\n  this.cells             = []\n  this.positions         = []\n  this.intensity         = []\n  this.texture           = texture\n  this.dirty             = true\n\n  this.triShader         = triShader\n  this.pickShader        = pickShader\n\n  this.trianglePositions = trianglePositions\n  this.triangleVectors   = triangleVectors\n  this.triangleColors    = triangleColors\n  this.triangleUVs       = triangleUVs\n  this.triangleIds       = triangleIds\n  this.triangleVAO       = triangleVAO\n  this.triangleCount     = 0\n\n  this.pickId            = 1\n  this.bounds            = [\n    [ Infinity, Infinity, Infinity],\n    [-Infinity,-Infinity,-Infinity] ]\n  this.clipBounds        = [\n    [-Infinity,-Infinity,-Infinity],\n    [ Infinity, Infinity, Infinity] ]\n\n  this.lightPosition = [1e5, 1e5, 0]\n  this.ambientLight  = 0.8\n  this.diffuseLight  = 0.8\n  this.specularLight = 2.0\n  this.roughness     = 0.5\n  this.fresnel       = 1.5\n\n  this.opacity       = 1\n\n  this.traceType     = traceType\n  this.tubeScale     = 1 // used in streamtube\n  this.coneScale     = 2 // used in cone\n  this.vectorScale   = 1 // used in cone\n  this.coneOffset    = 0.25 // used in cone\n\n  this._model       = IDENTITY\n  this._view        = IDENTITY\n  this._projection  = IDENTITY\n  this._resolution  = [1,1]\n}\n\nvar proto = VectorMesh.prototype\n\nproto.isOpaque = function() {\n  return this.opacity >= 1\n}\n\nproto.isTransparent = function() {\n  return this.opacity < 1\n}\n\nproto.pickSlots = 1\n\nproto.setPickBase = function(id) {\n  this.pickId = id\n}\n\nfunction genColormap(param) {\n  var colors = colormap({\n      colormap: param\n    , nshades:  256\n    , format:  'rgba'\n  })\n\n  var result = new Uint8Array(256*4)\n  for(var i=0; i<256; ++i) {\n    var c = colors[i]\n    for(var j=0; j<3; ++j) {\n      result[4*i+j] = c[j]\n    }\n    result[4*i+3] = c[3]*255\n  }\n\n  return ndarray(result, [256,256,4], [4,0,1])\n}\n\nfunction takeZComponent(array) {\n  var n = array.length\n  var result = new Array(n)\n  for(var i=0; i<n; ++i) {\n    result[i] = array[i][2]\n  }\n  return result\n}\n\nproto.update = function(params) {\n  params = params || {}\n  var gl = this.gl\n\n  this.dirty = true\n\n  if('lightPosition' in params) {\n    this.lightPosition = params.lightPosition\n  }\n  if('opacity' in params) {\n    this.opacity = params.opacity\n  }\n  if('ambient' in params) {\n    this.ambientLight  = params.ambient\n  }\n  if('diffuse' in params) {\n    this.diffuseLight = params.diffuse\n  }\n  if('specular' in params) {\n    this.specularLight = params.specular\n  }\n  if('roughness' in params) {\n    this.roughness = params.roughness\n  }\n  if('fresnel' in params) {\n    this.fresnel = params.fresnel\n  }\n\n  // use in streamtube\n  if (params.tubeScale !== undefined) {\n    this.tubeScale = params.tubeScale\n  }\n\n  // used in cone\n  if (params.vectorScale !== undefined) {\n    this.vectorScale = params.vectorScale\n  }\n  if (params.coneScale !== undefined) {\n    this.coneScale = params.coneScale\n  }\n  if (params.coneOffset !== undefined) {\n    this.coneOffset = params.coneOffset\n  }\n\n  if (params.colormap) {\n    this.texture.shape = [256,256]\n    this.texture.minFilter = gl.LINEAR_MIPMAP_LINEAR\n    this.texture.magFilter = gl.LINEAR\n    this.texture.setPixels(genColormap(params.colormap))\n    this.texture.generateMipmap()\n  }\n\n  var cells = params.cells\n  var positions = params.positions\n  var vectors = params.vectors\n\n  if(!positions || !cells || !vectors) {\n    return\n  }\n\n  var tPos = []\n  var tVec = []\n  var tCol = []\n  var tUVs = []\n  var tIds = []\n\n  //Save geometry data for picking calculations\n  this.cells     = cells\n  this.positions = positions\n  this.vectors   = vectors\n\n  //Compute colors\n  var meshColor       = params.meshColor || [1,1,1,1]\n\n  //UVs\n  var vertexIntensity = params.vertexIntensity\n\n  var intensityLo     = Infinity\n  var intensityHi     = -Infinity\n\n  if(vertexIntensity) {\n    if(params.vertexIntensityBounds) {\n      intensityLo = +params.vertexIntensityBounds[0]\n      intensityHi = +params.vertexIntensityBounds[1]\n    } else {\n      for(var i=0; i<vertexIntensity.length; ++i) {\n        var f = vertexIntensity[i]\n        intensityLo = Math.min(intensityLo, f)\n        intensityHi = Math.max(intensityHi, f)\n      }\n    }\n  } else {\n    for(var i=0; i<positions.length; ++i) {\n      var f = positions[i][2]\n      intensityLo = Math.min(intensityLo, f)\n      intensityHi = Math.max(intensityHi, f)\n    }\n  }\n\n  if(vertexIntensity) {\n    this.intensity = vertexIntensity\n  } else {\n    this.intensity = takeZComponent(positions)\n  }\n\n  //Update bounds\n  this.bounds       = [[Infinity,Infinity,Infinity], [-Infinity,-Infinity,-Infinity]]\n  for(var i=0; i<positions.length; ++i) {\n    var p = positions[i]\n    for(var j=0; j<3; ++j) {\n      if(isNaN(p[j]) || !isFinite(p[j])) {\n        continue\n      }\n      this.bounds[0][j] = Math.min(this.bounds[0][j], p[j])\n      this.bounds[1][j] = Math.max(this.bounds[1][j], p[j])\n    }\n  }\n\n  //Pack cells into buffers\n  var triangleCount = 0\n\nfill_loop:\n  for(var i=0; i<cells.length; ++i) {\n    var cell = cells[i]\n    switch(cell.length) {\n      case 3:\n        //Check NaNs\n        for(var j=0; j<3; ++j) {\n          var v = cell[j]\n          var p = positions[v]\n          for(var k=0; k<3; ++k) {\n            if(isNaN(p[k]) || !isFinite(p[k])) {\n              continue fill_loop\n            }\n          }\n        }\n\n        for(var j=0; j<3; ++j) {\n          var v = cell[2 - j]\n\n          var p = positions[v]\n          tPos.push(p[0], p[1], p[2], p[3])\n\n          var w = vectors[v]\n          tVec.push(w[0], w[1], w[2], w[3] || 0)\n\n          var c = meshColor\n          if(c.length === 3) {\n            tCol.push(c[0], c[1], c[2], 1)\n          } else {\n            tCol.push(c[0], c[1], c[2], c[3])\n          }\n\n          var uv\n          if(vertexIntensity) {\n            uv = [\n              (vertexIntensity[v] - intensityLo) /\n              (intensityHi - intensityLo), 0]\n          } else {\n            uv = [\n              (p[2] - intensityLo) /\n              (intensityHi - intensityLo), 0]\n          }\n          tUVs.push(uv[0], uv[1])\n\n          tIds.push(i)\n        }\n        triangleCount += 1\n      break\n\n      default:\n      break\n    }\n  }\n\n  this.triangleCount  = triangleCount\n\n  this.trianglePositions.update(tPos)\n  this.triangleVectors.update(tVec)\n  this.triangleColors.update(tCol)\n  this.triangleUVs.update(tUVs)\n  this.triangleIds.update(new Uint32Array(tIds))\n}\n\nproto.drawTransparent = proto.draw = function(params) {\n  params = params || {}\n  var gl          = this.gl\n  var model       = params.model      || IDENTITY\n  var view        = params.view       || IDENTITY\n  var projection  = params.projection || IDENTITY\n\n  var clipBounds = [[-1e6,-1e6,-1e6],[1e6,1e6,1e6]]\n  for(var i=0; i<3; ++i) {\n    clipBounds[0][i] = Math.max(clipBounds[0][i], this.clipBounds[0][i])\n    clipBounds[1][i] = Math.min(clipBounds[1][i], this.clipBounds[1][i])\n  }\n\n  var uniforms = {\n    model:      model,\n    view:       view,\n    projection: projection,\n    inverseModel: IDENTITY.slice(),\n\n    clipBounds: clipBounds,\n\n    kambient:   this.ambientLight,\n    kdiffuse:   this.diffuseLight,\n    kspecular:  this.specularLight,\n    roughness:  this.roughness,\n    fresnel:    this.fresnel,\n\n    eyePosition:   [0,0,0],\n    lightPosition: [0,0,0],\n\n    opacity:  this.opacity,\n\n    tubeScale: this.tubeScale,\n\n    vectorScale: this.vectorScale,\n    coneScale: this.coneScale,\n    coneOffset: this.coneOffset,\n\n    texture:    0\n  }\n\n  uniforms.inverseModel = invert(uniforms.inverseModel, uniforms.model)\n\n  gl.disable(gl.CULL_FACE)\n\n  this.texture.bind(0)\n\n  var invCameraMatrix = new Array(16)\n  multiply(invCameraMatrix, uniforms.view, uniforms.model)\n  multiply(invCameraMatrix, uniforms.projection, invCameraMatrix)\n  invert(invCameraMatrix, invCameraMatrix)\n\n  for(var i=0; i<3; ++i) {\n    uniforms.eyePosition[i] = invCameraMatrix[12+i] / invCameraMatrix[15]\n  }\n\n  var w = invCameraMatrix[15]\n  for(var i=0; i<3; ++i) {\n    w += this.lightPosition[i] * invCameraMatrix[4*i+3]\n  }\n  for(var i=0; i<3; ++i) {\n    var s = invCameraMatrix[12+i]\n    for(var j=0; j<3; ++j) {\n      s += invCameraMatrix[4*j+i] * this.lightPosition[j]\n    }\n    uniforms.lightPosition[i] = s / w\n  }\n\n  if(this.triangleCount > 0) {\n    var shader = this.triShader\n    shader.bind()\n    shader.uniforms = uniforms\n\n    this.triangleVAO.bind()\n    gl.drawArrays(gl.TRIANGLES, 0, this.triangleCount*3)\n    this.triangleVAO.unbind()\n  }\n}\n\nproto.drawPick = function(params) {\n  params = params || {}\n\n  var gl         = this.gl\n\n  var model      = params.model      || IDENTITY\n  var view       = params.view       || IDENTITY\n  var projection = params.projection || IDENTITY\n\n  var clipBounds = [[-1e6,-1e6,-1e6],[1e6,1e6,1e6]]\n  for(var i=0; i<3; ++i) {\n    clipBounds[0][i] = Math.max(clipBounds[0][i], this.clipBounds[0][i])\n    clipBounds[1][i] = Math.min(clipBounds[1][i], this.clipBounds[1][i])\n  }\n\n  //Save camera parameters\n  this._model      = [].slice.call(model)\n  this._view       = [].slice.call(view)\n  this._projection = [].slice.call(projection)\n  this._resolution = [gl.drawingBufferWidth, gl.drawingBufferHeight]\n\n  var uniforms = {\n    model:      model,\n    view:       view,\n    projection: projection,\n    clipBounds: clipBounds,\n\n    tubeScale: this.tubeScale,\n    vectorScale: this.vectorScale,\n    coneScale: this.coneScale,\n    coneOffset: this.coneOffset,\n\n    pickId:     this.pickId / 255.0,\n  }\n\n  var shader = this.pickShader\n  shader.bind()\n  shader.uniforms = uniforms\n\n  if(this.triangleCount > 0) {\n    this.triangleVAO.bind()\n    gl.drawArrays(gl.TRIANGLES, 0, this.triangleCount*3)\n    this.triangleVAO.unbind()\n  }\n}\n\n\nproto.pick = function(pickData) {\n  if(!pickData) {\n    return null\n  }\n  if(pickData.id !== this.pickId) {\n    return null\n  }\n\n  var cellId    = pickData.value[0] + 256*pickData.value[1] + 65536*pickData.value[2]\n  var cell      = this.cells[cellId]\n  var pos =     this.positions[cell[1]].slice(0, 3)\n\n  var result = {\n    position: pos,\n    dataCoordinate: pos,\n    index: Math.floor(cell[1] / 48)\n  }\n\n\n  if(this.traceType === 'cone') {\n    result.index = Math.floor(cell[1] / 48)\n  } else if(this.traceType === 'streamtube') {\n    result.intensity = this.intensity[cell[1]]\n    result.velocity = this.vectors[cell[1]].slice(0, 3)\n    result.divergence = this.vectors[cell[1]][3]\n    result.index = cellId\n  }\n\n  return result\n}\n\n\nproto.dispose = function() {\n  this.texture.dispose()\n\n  this.triShader.dispose()\n  this.pickShader.dispose()\n\n  this.triangleVAO.dispose()\n  this.trianglePositions.dispose()\n  this.triangleVectors.dispose()\n  this.triangleColors.dispose()\n  this.triangleUVs.dispose()\n  this.triangleIds.dispose()\n}\n\nfunction createMeshShader(gl, shaders) {\n  var shader = createShader(gl,\n    shaders.meshShader.vertex,\n    shaders.meshShader.fragment,\n    null,\n    shaders.meshShader.attributes\n  )\n\n  shader.attributes.position.location = 0\n  shader.attributes.color.location    = 2\n  shader.attributes.uv.location       = 3\n  shader.attributes.vector.location   = 4\n  return shader\n}\n\n\nfunction createPickShader(gl, shaders) {\n  var shader = createShader(gl,\n    shaders.pickShader.vertex,\n    shaders.pickShader.fragment,\n    null,\n    shaders.pickShader.attributes\n  )\n\n  shader.attributes.position.location = 0\n  shader.attributes.id.location       = 1\n  shader.attributes.vector.location   = 4\n  return shader\n}\n\n\nfunction createVectorMesh(gl, params, opts) {\n  var shaders = opts.shaders\n\n  if (arguments.length === 1) {\n    params = gl\n    gl = params.gl\n  }\n\n\n  var triShader       = createMeshShader(gl, shaders)\n  var pickShader      = createPickShader(gl, shaders)\n  var meshTexture       = createTexture(gl,\n    ndarray(new Uint8Array([255,255,255,255]), [1,1,4]))\n  meshTexture.generateMipmap()\n  meshTexture.minFilter = gl.LINEAR_MIPMAP_LINEAR\n  meshTexture.magFilter = gl.LINEAR\n\n  var trianglePositions = createBuffer(gl)\n  var triangleVectors   = createBuffer(gl)\n  var triangleColors    = createBuffer(gl)\n  var triangleUVs       = createBuffer(gl)\n  var triangleIds       = createBuffer(gl)\n  var triangleVAO       = createVAO(gl, [\n    { buffer: trianglePositions,\n      type: gl.FLOAT,\n      size: 4\n    },\n    { buffer: triangleIds,\n      type: gl.UNSIGNED_BYTE,\n      size: 4,\n      normalized: true\n    },\n    { buffer: triangleColors,\n      type: gl.FLOAT,\n      size: 4\n    },\n    { buffer: triangleUVs,\n      type: gl.FLOAT,\n      size: 2\n    },\n    { buffer: triangleVectors,\n      type: gl.FLOAT,\n      size: 4\n    }\n  ])\n\n  var mesh = new VectorMesh(gl\n    , meshTexture\n    , triShader\n    , pickShader\n    , trianglePositions\n    , triangleVectors\n    , triangleIds\n    , triangleColors\n    , triangleUVs\n    , triangleVAO\n    , opts.traceType || 'cone'\n  )\n\n  mesh.update(params)\n\n  return mesh\n}\n\nmodule.exports = createVectorMesh\n"]},"metadata":{},"sourceType":"script"}