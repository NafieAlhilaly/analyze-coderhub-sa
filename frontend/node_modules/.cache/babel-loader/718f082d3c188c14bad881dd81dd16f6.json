{"ast":null,"code":"'use strict';\n\nvar hovertemplateAttrs = require('../../plots/template_attributes').hovertemplateAttrs;\n\nvar texttemplateAttrs = require('../../plots/template_attributes').texttemplateAttrs;\n\nvar colorScaleAttrs = require('../../components/colorscale/attributes');\n\nvar domainAttrs = require('../../plots/domain').attributes;\n\nvar pieAttrs = require('../pie/attributes');\n\nvar sunburstAttrs = require('../sunburst/attributes');\n\nvar constants = require('./constants');\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nmodule.exports = {\n  labels: sunburstAttrs.labels,\n  parents: sunburstAttrs.parents,\n  values: sunburstAttrs.values,\n  branchvalues: sunburstAttrs.branchvalues,\n  count: sunburstAttrs.count,\n  level: sunburstAttrs.level,\n  maxdepth: sunburstAttrs.maxdepth,\n  tiling: {\n    packing: {\n      valType: 'enumerated',\n      values: ['squarify', 'binary', 'dice', 'slice', 'slice-dice', 'dice-slice'],\n      dflt: 'squarify',\n      editType: 'plot',\n      description: ['Determines d3 treemap solver.', 'For more info please refer to https://github.com/d3/d3-hierarchy#treemap-tiling'].join(' ')\n    },\n    squarifyratio: {\n      valType: 'number',\n      min: 1,\n      dflt: 1,\n      editType: 'plot',\n      description: ['When using *squarify* `packing` algorithm, according to https://github.com/d3/d3-hierarchy/blob/master/README.md#squarify_ratio', 'this option specifies the desired aspect ratio of the generated rectangles.', 'The ratio must be specified as a number greater than or equal to one.', 'Note that the orientation of the generated rectangles (tall or wide)', 'is not implied by the ratio; for example, a ratio of two will attempt', 'to produce a mixture of rectangles whose width:height ratio is either 2:1 or 1:2.', 'When using *squarify*, unlike d3 which uses the Golden Ratio i.e. 1.618034,', 'Plotly applies 1 to increase squares in treemap layouts.'].join(' ')\n    },\n    flip: {\n      valType: 'flaglist',\n      flags: ['x', 'y'],\n      dflt: '',\n      editType: 'plot',\n      description: ['Determines if the positions obtained from solver are flipped on each axis.'].join(' ')\n    },\n    pad: {\n      valType: 'number',\n      min: 0,\n      dflt: 3,\n      editType: 'plot',\n      description: ['Sets the inner padding (in px).'].join(' ')\n    },\n    editType: 'calc'\n  },\n  marker: extendFlat({\n    pad: {\n      t: {\n        valType: 'number',\n        min: 0,\n        editType: 'plot',\n        description: ['Sets the padding form the top (in px).'].join(' ')\n      },\n      l: {\n        valType: 'number',\n        min: 0,\n        editType: 'plot',\n        description: ['Sets the padding form the left (in px).'].join(' ')\n      },\n      r: {\n        valType: 'number',\n        min: 0,\n        editType: 'plot',\n        description: ['Sets the padding form the right (in px).'].join(' ')\n      },\n      b: {\n        valType: 'number',\n        min: 0,\n        editType: 'plot',\n        description: ['Sets the padding form the bottom (in px).'].join(' ')\n      },\n      editType: 'calc'\n    },\n    colors: sunburstAttrs.marker.colors,\n    depthfade: {\n      valType: 'enumerated',\n      values: [true, false, 'reversed'],\n      editType: 'style',\n      description: ['Determines if the sector colors are faded towards', 'the background from the leaves up to the headers.', 'This option is unavailable when a `colorscale` is present,', 'defaults to false when `marker.colors` is set,', 'but otherwise defaults to true.', 'When set to *reversed*, the fading direction is inverted,', 'that is the top elements within hierarchy are drawn with fully saturated colors', 'while the leaves are faded towards the background color.'].join(' ')\n    },\n    line: sunburstAttrs.marker.line,\n    editType: 'calc'\n  }, colorScaleAttrs('marker', {\n    colorAttr: 'colors',\n    anim: false // TODO: set to anim: true?\n\n  })),\n  pathbar: {\n    visible: {\n      valType: 'boolean',\n      dflt: true,\n      editType: 'plot',\n      description: ['Determines if the path bar is drawn', 'i.e. outside the trace `domain` and', 'with one pixel gap.'].join(' ')\n    },\n    side: {\n      valType: 'enumerated',\n      values: ['top', 'bottom'],\n      dflt: 'top',\n      editType: 'plot',\n      description: ['Determines on which side of the the treemap the', '`pathbar` should be presented.'].join(' ')\n    },\n    edgeshape: {\n      valType: 'enumerated',\n      values: ['>', '<', '|', '/', '\\\\'],\n      dflt: '>',\n      editType: 'plot',\n      description: ['Determines which shape is used for edges between `barpath` labels.'].join(' ')\n    },\n    thickness: {\n      valType: 'number',\n      min: 12,\n      editType: 'plot',\n      description: ['Sets the thickness of `pathbar` (in px). If not specified the `pathbar.textfont.size` is used', 'with 3 pixles extra padding on each side.'].join(' ')\n    },\n    textfont: extendFlat({}, pieAttrs.textfont, {\n      description: 'Sets the font used inside `pathbar`.'\n    }),\n    editType: 'calc'\n  },\n  text: pieAttrs.text,\n  textinfo: sunburstAttrs.textinfo,\n  // TODO: incorporate `label` and `value` in the eventData\n  texttemplate: texttemplateAttrs({\n    editType: 'plot'\n  }, {\n    keys: constants.eventDataKeys.concat(['label', 'value'])\n  }),\n  hovertext: pieAttrs.hovertext,\n  hoverinfo: sunburstAttrs.hoverinfo,\n  hovertemplate: hovertemplateAttrs({}, {\n    keys: constants.eventDataKeys\n  }),\n  textfont: pieAttrs.textfont,\n  insidetextfont: pieAttrs.insidetextfont,\n  outsidetextfont: extendFlat({}, pieAttrs.outsidetextfont, {\n    description: ['Sets the font used for `textinfo` lying outside the sector.', 'This option refers to the root of the hierarchy', 'presented on top left corner of a treemap graph.', 'Please note that if a hierarchy has multiple root nodes,', 'this option won\\'t have any effect and `insidetextfont` would be used.'].join(' ')\n  }),\n  textposition: {\n    valType: 'enumerated',\n    values: ['top left', 'top center', 'top right', 'middle left', 'middle center', 'middle right', 'bottom left', 'bottom center', 'bottom right'],\n    dflt: 'top left',\n    editType: 'plot',\n    description: ['Sets the positions of the `text` elements.'].join(' ')\n  },\n  sort: pieAttrs.sort,\n  root: sunburstAttrs.root,\n  domain: domainAttrs({\n    name: 'treemap',\n    trace: true,\n    editType: 'calc'\n  })\n};","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/plotly.js/src/traces/treemap/attributes.js"],"names":["hovertemplateAttrs","require","texttemplateAttrs","colorScaleAttrs","domainAttrs","attributes","pieAttrs","sunburstAttrs","constants","extendFlat","module","exports","labels","parents","values","branchvalues","count","level","maxdepth","tiling","packing","valType","dflt","editType","description","join","squarifyratio","min","flip","flags","pad","marker","t","l","r","b","colors","depthfade","line","colorAttr","anim","pathbar","visible","side","edgeshape","thickness","textfont","text","textinfo","texttemplate","keys","eventDataKeys","concat","hovertext","hoverinfo","hovertemplate","insidetextfont","outsidetextfont","textposition","sort","root","domain","name","trace"],"mappings":"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","sourcesContent":["'use strict';\n\nvar hovertemplateAttrs = require('../../plots/template_attributes').hovertemplateAttrs;\nvar texttemplateAttrs = require('../../plots/template_attributes').texttemplateAttrs;\n\nvar colorScaleAttrs = require('../../components/colorscale/attributes');\nvar domainAttrs = require('../../plots/domain').attributes;\nvar pieAttrs = require('../pie/attributes');\nvar sunburstAttrs = require('../sunburst/attributes');\nvar constants = require('./constants');\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nmodule.exports = {\n    labels: sunburstAttrs.labels,\n    parents: sunburstAttrs.parents,\n\n    values: sunburstAttrs.values,\n    branchvalues: sunburstAttrs.branchvalues,\n    count: sunburstAttrs.count,\n\n    level: sunburstAttrs.level,\n    maxdepth: sunburstAttrs.maxdepth,\n\n    tiling: {\n        packing: {\n            valType: 'enumerated',\n            values: [\n                'squarify',\n                'binary',\n                'dice',\n                'slice',\n                'slice-dice',\n                'dice-slice'\n            ],\n            dflt: 'squarify',\n            editType: 'plot',\n            description: [\n                'Determines d3 treemap solver.',\n                'For more info please refer to https://github.com/d3/d3-hierarchy#treemap-tiling'\n            ].join(' ')\n        },\n\n        squarifyratio: {\n            valType: 'number',\n            min: 1,\n            dflt: 1,\n            editType: 'plot',\n            description: [\n                'When using *squarify* `packing` algorithm, according to https://github.com/d3/d3-hierarchy/blob/master/README.md#squarify_ratio',\n                'this option specifies the desired aspect ratio of the generated rectangles.',\n                'The ratio must be specified as a number greater than or equal to one.',\n                'Note that the orientation of the generated rectangles (tall or wide)',\n                'is not implied by the ratio; for example, a ratio of two will attempt',\n                'to produce a mixture of rectangles whose width:height ratio is either 2:1 or 1:2.',\n                'When using *squarify*, unlike d3 which uses the Golden Ratio i.e. 1.618034,',\n                'Plotly applies 1 to increase squares in treemap layouts.'\n            ].join(' ')\n        },\n\n        flip: {\n            valType: 'flaglist',\n            flags: [\n                'x',\n                'y'\n            ],\n            dflt: '',\n            editType: 'plot',\n            description: [\n                'Determines if the positions obtained from solver are flipped on each axis.'\n            ].join(' ')\n        },\n\n        pad: {\n            valType: 'number',\n            min: 0,\n            dflt: 3,\n            editType: 'plot',\n            description: [\n                'Sets the inner padding (in px).'\n            ].join(' ')\n        },\n\n        editType: 'calc',\n    },\n\n    marker: extendFlat({\n        pad: {\n            t: {\n                valType: 'number',\n                min: 0,\n                editType: 'plot',\n                description: [\n                    'Sets the padding form the top (in px).'\n                ].join(' ')\n            },\n            l: {\n                valType: 'number',\n                min: 0,\n                editType: 'plot',\n                description: [\n                    'Sets the padding form the left (in px).'\n                ].join(' ')\n            },\n            r: {\n                valType: 'number',\n                min: 0,\n                editType: 'plot',\n                description: [\n                    'Sets the padding form the right (in px).'\n                ].join(' ')\n            },\n            b: {\n                valType: 'number',\n                min: 0,\n                editType: 'plot',\n                description: [\n                    'Sets the padding form the bottom (in px).'\n                ].join(' ')\n            },\n\n            editType: 'calc'\n        },\n\n        colors: sunburstAttrs.marker.colors,\n\n        depthfade: {\n            valType: 'enumerated',\n            values: [true, false, 'reversed'],\n            editType: 'style',\n            description: [\n                'Determines if the sector colors are faded towards',\n                'the background from the leaves up to the headers.',\n                'This option is unavailable when a `colorscale` is present,',\n                'defaults to false when `marker.colors` is set,',\n                'but otherwise defaults to true.',\n                'When set to *reversed*, the fading direction is inverted,',\n                'that is the top elements within hierarchy are drawn with fully saturated colors',\n                'while the leaves are faded towards the background color.'\n            ].join(' ')\n        },\n\n        line: sunburstAttrs.marker.line,\n\n        editType: 'calc'\n    },\n        colorScaleAttrs('marker', {\n            colorAttr: 'colors',\n            anim: false // TODO: set to anim: true?\n        })\n    ),\n\n    pathbar: {\n        visible: {\n            valType: 'boolean',\n            dflt: true,\n            editType: 'plot',\n            description: [\n                'Determines if the path bar is drawn',\n                'i.e. outside the trace `domain` and',\n                'with one pixel gap.'\n            ].join(' ')\n        },\n\n        side: {\n            valType: 'enumerated',\n            values: [\n                'top',\n                'bottom'\n            ],\n            dflt: 'top',\n            editType: 'plot',\n            description: [\n                'Determines on which side of the the treemap the',\n                '`pathbar` should be presented.'\n            ].join(' ')\n        },\n\n        edgeshape: {\n            valType: 'enumerated',\n            values: [\n                '>',\n                '<',\n                '|',\n                '/',\n                '\\\\'\n            ],\n            dflt: '>',\n            editType: 'plot',\n            description: [\n                'Determines which shape is used for edges between `barpath` labels.'\n            ].join(' ')\n        },\n\n        thickness: {\n            valType: 'number',\n            min: 12,\n            editType: 'plot',\n            description: [\n                'Sets the thickness of `pathbar` (in px). If not specified the `pathbar.textfont.size` is used',\n                'with 3 pixles extra padding on each side.'\n            ].join(' ')\n        },\n\n        textfont: extendFlat({}, pieAttrs.textfont, {\n            description: 'Sets the font used inside `pathbar`.'\n        }),\n\n        editType: 'calc'\n    },\n\n    text: pieAttrs.text,\n    textinfo: sunburstAttrs.textinfo,\n    // TODO: incorporate `label` and `value` in the eventData\n    texttemplate: texttemplateAttrs({editType: 'plot'}, {\n        keys: constants.eventDataKeys.concat(['label', 'value'])\n    }),\n\n    hovertext: pieAttrs.hovertext,\n    hoverinfo: sunburstAttrs.hoverinfo,\n    hovertemplate: hovertemplateAttrs({}, {\n        keys: constants.eventDataKeys\n    }),\n\n    textfont: pieAttrs.textfont,\n    insidetextfont: pieAttrs.insidetextfont,\n    outsidetextfont: extendFlat({}, pieAttrs.outsidetextfont, {\n        description: [\n            'Sets the font used for `textinfo` lying outside the sector.',\n            'This option refers to the root of the hierarchy',\n            'presented on top left corner of a treemap graph.',\n            'Please note that if a hierarchy has multiple root nodes,',\n            'this option won\\'t have any effect and `insidetextfont` would be used.'\n        ].join(' ')\n    }),\n\n    textposition: {\n        valType: 'enumerated',\n        values: [\n            'top left', 'top center', 'top right',\n            'middle left', 'middle center', 'middle right',\n            'bottom left', 'bottom center', 'bottom right'\n        ],\n        dflt: 'top left',\n        editType: 'plot',\n        description: [\n            'Sets the positions of the `text` elements.'\n        ].join(' ')\n    },\n    sort: pieAttrs.sort,\n    root: sunburstAttrs.root,\n\n    domain: domainAttrs({name: 'treemap', trace: true, editType: 'calc'}),\n};\n"]},"metadata":{},"sourceType":"script"}