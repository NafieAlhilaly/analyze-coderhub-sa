{"ast":null,"code":"'use strict';\n\nmodule.exports = {\n  attributes: require('./attributes'),\n  supplyDefaults: require('./defaults'),\n  colorbar: require('../heatmap/colorbar'),\n  calc: require('../choropleth/calc'),\n  plot: require('./plot'),\n  hoverPoints: require('../choropleth/hover'),\n  eventData: require('../choropleth/event_data'),\n  selectPoints: require('../choropleth/select'),\n  styleOnSelect: function (_, cd) {\n    if (cd) {\n      var trace = cd[0].trace;\n\n      trace._glTrace.updateOnSelect(cd);\n    }\n  },\n  getBelow: function (trace, subplot) {\n    var mapLayers = subplot.getMapLayers(); // find layer just above top-most \"water\" layer\n    // that is not a plotly layer\n\n    for (var i = mapLayers.length - 2; i >= 0; i--) {\n      var layerId = mapLayers[i].id;\n\n      if (typeof layerId === 'string' && layerId.indexOf('water') === 0) {\n        for (var j = i + 1; j < mapLayers.length; j++) {\n          layerId = mapLayers[j].id;\n\n          if (typeof layerId === 'string' && layerId.indexOf('plotly-') === -1) {\n            return layerId;\n          }\n        }\n      }\n    }\n  },\n  moduleType: 'trace',\n  name: 'choroplethmapbox',\n  basePlotModule: require('../../plots/mapbox'),\n  categories: ['mapbox', 'gl', 'noOpacity', 'showLegend'],\n  meta: {\n    hr_name: 'choropleth_mapbox',\n    description: ['GeoJSON features to be filled are set in `geojson`', 'The data that describes the choropleth value-to-color mapping', 'is set in `locations` and `z`.'].join(' ')\n  }\n};","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/plotly.js/src/traces/choroplethmapbox/index.js"],"names":["module","exports","attributes","require","supplyDefaults","colorbar","calc","plot","hoverPoints","eventData","selectPoints","styleOnSelect","_","cd","trace","_glTrace","updateOnSelect","getBelow","subplot","mapLayers","getMapLayers","i","length","layerId","id","indexOf","j","moduleType","name","basePlotModule","categories","meta","hr_name","description","join"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,UAAU,EAAEC,OAAO,CAAC,cAAD,CADN;AAEbC,EAAAA,cAAc,EAAED,OAAO,CAAC,YAAD,CAFV;AAGbE,EAAAA,QAAQ,EAAEF,OAAO,CAAC,qBAAD,CAHJ;AAIbG,EAAAA,IAAI,EAAEH,OAAO,CAAC,oBAAD,CAJA;AAKbI,EAAAA,IAAI,EAAEJ,OAAO,CAAC,QAAD,CALA;AAMbK,EAAAA,WAAW,EAAEL,OAAO,CAAC,qBAAD,CANP;AAObM,EAAAA,SAAS,EAAEN,OAAO,CAAC,0BAAD,CAPL;AAQbO,EAAAA,YAAY,EAAEP,OAAO,CAAC,sBAAD,CARR;AAUbQ,EAAAA,aAAa,EAAE,UAASC,CAAT,EAAYC,EAAZ,EAAgB;AAC3B,QAAGA,EAAH,EAAO;AACH,UAAIC,KAAK,GAAGD,EAAE,CAAC,CAAD,CAAF,CAAMC,KAAlB;;AACAA,MAAAA,KAAK,CAACC,QAAN,CAAeC,cAAf,CAA8BH,EAA9B;AACH;AACJ,GAfY;AAiBbI,EAAAA,QAAQ,EAAE,UAASH,KAAT,EAAgBI,OAAhB,EAAyB;AAC/B,QAAIC,SAAS,GAAGD,OAAO,CAACE,YAAR,EAAhB,CAD+B,CAG/B;AACA;;AACA,SAAI,IAAIC,CAAC,GAAGF,SAAS,CAACG,MAAV,GAAmB,CAA/B,EAAkCD,CAAC,IAAI,CAAvC,EAA0CA,CAAC,EAA3C,EAA+C;AAC3C,UAAIE,OAAO,GAAGJ,SAAS,CAACE,CAAD,CAAT,CAAaG,EAA3B;;AAEA,UAAG,OAAOD,OAAP,KAAmB,QAAnB,IACCA,OAAO,CAACE,OAAR,CAAgB,OAAhB,MAA6B,CADjC,EAEG;AACC,aAAI,IAAIC,CAAC,GAAGL,CAAC,GAAG,CAAhB,EAAmBK,CAAC,GAAGP,SAAS,CAACG,MAAjC,EAAyCI,CAAC,EAA1C,EAA8C;AAC1CH,UAAAA,OAAO,GAAGJ,SAAS,CAACO,CAAD,CAAT,CAAaF,EAAvB;;AAEA,cAAG,OAAOD,OAAP,KAAmB,QAAnB,IACCA,OAAO,CAACE,OAAR,CAAgB,SAAhB,MAA+B,CAAC,CADpC,EAEE;AACE,mBAAOF,OAAP;AACH;AACJ;AACJ;AACJ;AACJ,GAvCY;AAyCbI,EAAAA,UAAU,EAAE,OAzCC;AA0CbC,EAAAA,IAAI,EAAE,kBA1CO;AA2CbC,EAAAA,cAAc,EAAE1B,OAAO,CAAC,oBAAD,CA3CV;AA4Cb2B,EAAAA,UAAU,EAAE,CAAC,QAAD,EAAW,IAAX,EAAiB,WAAjB,EAA8B,YAA9B,CA5CC;AA6CbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,OAAO,EAAE,mBADP;AAEFC,IAAAA,WAAW,EAAE,CACT,oDADS,EAET,+DAFS,EAGT,gCAHS,EAIXC,IAJW,CAIN,GAJM;AAFX;AA7CO,CAAjB","sourcesContent":["'use strict';\n\nmodule.exports = {\n    attributes: require('./attributes'),\n    supplyDefaults: require('./defaults'),\n    colorbar: require('../heatmap/colorbar'),\n    calc: require('../choropleth/calc'),\n    plot: require('./plot'),\n    hoverPoints: require('../choropleth/hover'),\n    eventData: require('../choropleth/event_data'),\n    selectPoints: require('../choropleth/select'),\n\n    styleOnSelect: function(_, cd) {\n        if(cd) {\n            var trace = cd[0].trace;\n            trace._glTrace.updateOnSelect(cd);\n        }\n    },\n\n    getBelow: function(trace, subplot) {\n        var mapLayers = subplot.getMapLayers();\n\n        // find layer just above top-most \"water\" layer\n        // that is not a plotly layer\n        for(var i = mapLayers.length - 2; i >= 0; i--) {\n            var layerId = mapLayers[i].id;\n\n            if(typeof layerId === 'string' &&\n                layerId.indexOf('water') === 0\n             ) {\n                for(var j = i + 1; j < mapLayers.length; j++) {\n                    layerId = mapLayers[j].id;\n\n                    if(typeof layerId === 'string' &&\n                        layerId.indexOf('plotly-') === -1\n                    ) {\n                        return layerId;\n                    }\n                }\n            }\n        }\n    },\n\n    moduleType: 'trace',\n    name: 'choroplethmapbox',\n    basePlotModule: require('../../plots/mapbox'),\n    categories: ['mapbox', 'gl', 'noOpacity', 'showLegend'],\n    meta: {\n        hr_name: 'choropleth_mapbox',\n        description: [\n            'GeoJSON features to be filled are set in `geojson`',\n            'The data that describes the choropleth value-to-color mapping',\n            'is set in `locations` and `z`.'\n        ].join(' ')\n    }\n};\n"]},"metadata":{},"sourceType":"script"}