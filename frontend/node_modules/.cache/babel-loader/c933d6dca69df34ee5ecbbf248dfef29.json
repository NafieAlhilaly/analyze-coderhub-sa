{"ast":null,"code":"'use strict';\n\nvar fontAttrs = require('../../plots/font_attributes');\n\nvar baseAttrs = require('../../plots/attributes');\n\nvar colorAttrs = require('../../components/color/attributes');\n\nvar fxAttrs = require('../../components/fx/attributes');\n\nvar domainAttrs = require('../../plots/domain').attributes;\n\nvar hovertemplateAttrs = require('../../plots/template_attributes').hovertemplateAttrs;\n\nvar colorAttributes = require('../../components/colorscale/attributes');\n\nvar templatedArray = require('../../plot_api/plot_template').templatedArray;\n\nvar descriptionOnlyNumbers = require('../../plots/cartesian/axis_format_attributes').descriptionOnlyNumbers;\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\n\nvar attrs = module.exports = overrideAll({\n  hoverinfo: extendFlat({}, baseAttrs.hoverinfo, {\n    flags: [],\n    arrayOk: false,\n    description: ['Determines which trace information appear on hover.', 'If `none` or `skip` are set, no information is displayed upon hovering.', 'But, if `none` is set, click and hover events are still fired.', 'Note that this attribute is superseded by `node.hoverinfo` and `node.hoverinfo`', 'for nodes and links respectively.'].join(' ')\n  }),\n  hoverlabel: fxAttrs.hoverlabel,\n  domain: domainAttrs({\n    name: 'sankey',\n    trace: true\n  }),\n  orientation: {\n    valType: 'enumerated',\n    values: ['v', 'h'],\n    dflt: 'h',\n    description: 'Sets the orientation of the Sankey diagram.'\n  },\n  valueformat: {\n    valType: 'string',\n    dflt: '.3s',\n    description: descriptionOnlyNumbers('value')\n  },\n  valuesuffix: {\n    valType: 'string',\n    dflt: '',\n    description: ['Adds a unit to follow the value in the hover tooltip. Add a space if a separation', 'is necessary from the value.'].join(' ')\n  },\n  arrangement: {\n    valType: 'enumerated',\n    values: ['snap', 'perpendicular', 'freeform', 'fixed'],\n    dflt: 'snap',\n    description: ['If value is `snap` (the default), the node arrangement is assisted by automatic snapping of elements to', 'preserve space between nodes specified via `nodepad`.', 'If value is `perpendicular`, the nodes can only move along a line perpendicular to the flow.', 'If value is `freeform`, the nodes can freely move on the plane.', 'If value is `fixed`, the nodes are stationary.'].join(' ')\n  },\n  textfont: fontAttrs({\n    description: 'Sets the font for node labels'\n  }),\n  // Remove top-level customdata\n  customdata: undefined,\n  node: {\n    label: {\n      valType: 'data_array',\n      dflt: [],\n      description: 'The shown name of the node.'\n    },\n    groups: {\n      valType: 'info_array',\n      impliedEdits: {\n        'x': [],\n        'y': []\n      },\n      dimensions: 2,\n      freeLength: true,\n      dflt: [],\n      items: {\n        valType: 'number',\n        editType: 'calc'\n      },\n      description: ['Groups of nodes.', 'Each group is defined by an array with the indices of the nodes it contains.', 'Multiple groups can be specified.'].join(' ')\n    },\n    x: {\n      valType: 'data_array',\n      dflt: [],\n      description: 'The normalized horizontal position of the node.'\n    },\n    y: {\n      valType: 'data_array',\n      dflt: [],\n      description: 'The normalized vertical position of the node.'\n    },\n    color: {\n      valType: 'color',\n      arrayOk: true,\n      description: ['Sets the `node` color. It can be a single value, or an array for specifying color for each `node`.', 'If `node.color` is omitted, then the default `Plotly` color palette will be cycled through', 'to have a variety of colors. These defaults are not fully opaque, to allow some visibility of', 'what is beneath the node.'].join(' ')\n    },\n    customdata: {\n      valType: 'data_array',\n      editType: 'calc',\n      description: ['Assigns extra data to each node.'].join(' ')\n    },\n    line: {\n      color: {\n        valType: 'color',\n        dflt: colorAttrs.defaultLine,\n        arrayOk: true,\n        description: ['Sets the color of the `line` around each `node`.'].join(' ')\n      },\n      width: {\n        valType: 'number',\n        min: 0,\n        dflt: 0.5,\n        arrayOk: true,\n        description: ['Sets the width (in px) of the `line` around each `node`.'].join(' ')\n      }\n    },\n    pad: {\n      valType: 'number',\n      arrayOk: false,\n      min: 0,\n      dflt: 20,\n      description: 'Sets the padding (in px) between the `nodes`.'\n    },\n    thickness: {\n      valType: 'number',\n      arrayOk: false,\n      min: 1,\n      dflt: 20,\n      description: 'Sets the thickness (in px) of the `nodes`.'\n    },\n    hoverinfo: {\n      valType: 'enumerated',\n      values: ['all', 'none', 'skip'],\n      dflt: 'all',\n      description: ['Determines which trace information appear when hovering nodes.', 'If `none` or `skip` are set, no information is displayed upon hovering.', 'But, if `none` is set, click and hover events are still fired.'].join(' ')\n    },\n    hoverlabel: fxAttrs.hoverlabel,\n    // needs editType override,\n    hovertemplate: hovertemplateAttrs({}, {\n      description: 'Variables `sourceLinks` and `targetLinks` are arrays of link objects.',\n      keys: ['value', 'label']\n    }),\n    description: 'The nodes of the Sankey plot.'\n  },\n  link: {\n    label: {\n      valType: 'data_array',\n      dflt: [],\n      description: 'The shown name of the link.'\n    },\n    color: {\n      valType: 'color',\n      arrayOk: true,\n      description: ['Sets the `link` color. It can be a single value, or an array for specifying color for each `link`.', 'If `link.color` is omitted, then by default, a translucent grey link will be used.'].join(' ')\n    },\n    customdata: {\n      valType: 'data_array',\n      editType: 'calc',\n      description: ['Assigns extra data to each link.'].join(' ')\n    },\n    line: {\n      color: {\n        valType: 'color',\n        dflt: colorAttrs.defaultLine,\n        arrayOk: true,\n        description: ['Sets the color of the `line` around each `link`.'].join(' ')\n      },\n      width: {\n        valType: 'number',\n        min: 0,\n        dflt: 0,\n        arrayOk: true,\n        description: ['Sets the width (in px) of the `line` around each `link`.'].join(' ')\n      }\n    },\n    source: {\n      valType: 'data_array',\n      dflt: [],\n      description: 'An integer number `[0..nodes.length - 1]` that represents the source node.'\n    },\n    target: {\n      valType: 'data_array',\n      dflt: [],\n      description: 'An integer number `[0..nodes.length - 1]` that represents the target node.'\n    },\n    value: {\n      valType: 'data_array',\n      dflt: [],\n      description: 'A numeric value representing the flow volume value.'\n    },\n    hoverinfo: {\n      valType: 'enumerated',\n      values: ['all', 'none', 'skip'],\n      dflt: 'all',\n      description: ['Determines which trace information appear when hovering links.', 'If `none` or `skip` are set, no information is displayed upon hovering.', 'But, if `none` is set, click and hover events are still fired.'].join(' ')\n    },\n    hoverlabel: fxAttrs.hoverlabel,\n    // needs editType override,\n    hovertemplate: hovertemplateAttrs({}, {\n      description: 'Variables `source` and `target` are node objects.',\n      keys: ['value', 'label']\n    }),\n    colorscales: templatedArray('concentrationscales', {\n      editType: 'calc',\n      label: {\n        valType: 'string',\n        editType: 'calc',\n        description: 'The label of the links to color based on their concentration within a flow.',\n        dflt: ''\n      },\n      cmax: {\n        valType: 'number',\n        editType: 'calc',\n        dflt: 1,\n        description: ['Sets the upper bound of the color domain.'].join('')\n      },\n      cmin: {\n        valType: 'number',\n        editType: 'calc',\n        dflt: 0,\n        description: ['Sets the lower bound of the color domain.'].join('')\n      },\n      colorscale: extendFlat(colorAttributes().colorscale, {\n        dflt: [[0, 'white'], [1, 'black']]\n      })\n    }),\n    description: 'The links of the Sankey plot.'\n  }\n}, 'calc', 'nested');\nattrs.transforms = undefined;","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/plotly.js/src/traces/sankey/attributes.js"],"names":["fontAttrs","require","baseAttrs","colorAttrs","fxAttrs","domainAttrs","attributes","hovertemplateAttrs","colorAttributes","templatedArray","descriptionOnlyNumbers","extendFlat","overrideAll","attrs","module","exports","hoverinfo","flags","arrayOk","description","join","hoverlabel","domain","name","trace","orientation","valType","values","dflt","valueformat","valuesuffix","arrangement","textfont","customdata","undefined","node","label","groups","impliedEdits","dimensions","freeLength","items","editType","x","y","color","line","defaultLine","width","min","pad","thickness","hovertemplate","keys","link","source","target","value","colorscales","cmax","cmin","colorscale","transforms"],"mappings":"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","sourcesContent":["'use strict';\n\nvar fontAttrs = require('../../plots/font_attributes');\nvar baseAttrs = require('../../plots/attributes');\nvar colorAttrs = require('../../components/color/attributes');\nvar fxAttrs = require('../../components/fx/attributes');\nvar domainAttrs = require('../../plots/domain').attributes;\nvar hovertemplateAttrs = require('../../plots/template_attributes').hovertemplateAttrs;\nvar colorAttributes = require('../../components/colorscale/attributes');\nvar templatedArray = require('../../plot_api/plot_template').templatedArray;\nvar descriptionOnlyNumbers = require('../../plots/cartesian/axis_format_attributes').descriptionOnlyNumbers;\n\nvar extendFlat = require('../../lib/extend').extendFlat;\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\n\nvar attrs = module.exports = overrideAll({\n    hoverinfo: extendFlat({}, baseAttrs.hoverinfo, {\n        flags: [],\n        arrayOk: false,\n        description: [\n            'Determines which trace information appear on hover.',\n            'If `none` or `skip` are set, no information is displayed upon hovering.',\n            'But, if `none` is set, click and hover events are still fired.',\n            'Note that this attribute is superseded by `node.hoverinfo` and `node.hoverinfo`',\n            'for nodes and links respectively.'\n        ].join(' ')\n    }),\n    hoverlabel: fxAttrs.hoverlabel,\n    domain: domainAttrs({name: 'sankey', trace: true}),\n\n    orientation: {\n        valType: 'enumerated',\n        values: ['v', 'h'],\n        dflt: 'h',\n        description: 'Sets the orientation of the Sankey diagram.'\n    },\n\n    valueformat: {\n        valType: 'string',\n        dflt: '.3s',\n        description: descriptionOnlyNumbers('value')\n    },\n\n    valuesuffix: {\n        valType: 'string',\n        dflt: '',\n        description: [\n            'Adds a unit to follow the value in the hover tooltip. Add a space if a separation',\n            'is necessary from the value.'\n        ].join(' ')\n    },\n\n    arrangement: {\n        valType: 'enumerated',\n        values: ['snap', 'perpendicular', 'freeform', 'fixed'],\n        dflt: 'snap',\n        description: [\n            'If value is `snap` (the default), the node arrangement is assisted by automatic snapping of elements to',\n            'preserve space between nodes specified via `nodepad`.',\n            'If value is `perpendicular`, the nodes can only move along a line perpendicular to the flow.',\n            'If value is `freeform`, the nodes can freely move on the plane.',\n            'If value is `fixed`, the nodes are stationary.'\n        ].join(' ')\n    },\n\n    textfont: fontAttrs({\n        description: 'Sets the font for node labels'\n    }),\n\n    // Remove top-level customdata\n    customdata: undefined,\n\n    node: {\n        label: {\n            valType: 'data_array',\n            dflt: [],\n            description: 'The shown name of the node.'\n        },\n        groups: {\n            valType: 'info_array',\n            impliedEdits: {'x': [], 'y': []},\n            dimensions: 2,\n            freeLength: true,\n            dflt: [],\n            items: {valType: 'number', editType: 'calc'},\n            description: [\n                'Groups of nodes.',\n                'Each group is defined by an array with the indices of the nodes it contains.',\n                'Multiple groups can be specified.'\n            ].join(' ')\n        },\n        x: {\n            valType: 'data_array',\n            dflt: [],\n            description: 'The normalized horizontal position of the node.'\n        },\n        y: {\n            valType: 'data_array',\n            dflt: [],\n            description: 'The normalized vertical position of the node.'\n        },\n        color: {\n            valType: 'color',\n            arrayOk: true,\n            description: [\n                'Sets the `node` color. It can be a single value, or an array for specifying color for each `node`.',\n                'If `node.color` is omitted, then the default `Plotly` color palette will be cycled through',\n                'to have a variety of colors. These defaults are not fully opaque, to allow some visibility of',\n                'what is beneath the node.'\n            ].join(' ')\n        },\n        customdata: {\n            valType: 'data_array',\n            editType: 'calc',\n            description: [\n                'Assigns extra data to each node.'\n            ].join(' ')\n        },\n        line: {\n            color: {\n                valType: 'color',\n                dflt: colorAttrs.defaultLine,\n                arrayOk: true,\n                description: [\n                    'Sets the color of the `line` around each `node`.'\n                ].join(' ')\n            },\n            width: {\n                valType: 'number',\n                min: 0,\n                dflt: 0.5,\n                arrayOk: true,\n                description: [\n                    'Sets the width (in px) of the `line` around each `node`.'\n                ].join(' ')\n            }\n        },\n        pad: {\n            valType: 'number',\n            arrayOk: false,\n            min: 0,\n            dflt: 20,\n            description: 'Sets the padding (in px) between the `nodes`.'\n        },\n        thickness: {\n            valType: 'number',\n            arrayOk: false,\n            min: 1,\n            dflt: 20,\n            description: 'Sets the thickness (in px) of the `nodes`.'\n        },\n        hoverinfo: {\n            valType: 'enumerated',\n            values: ['all', 'none', 'skip'],\n            dflt: 'all',\n            description: [\n                'Determines which trace information appear when hovering nodes.',\n                'If `none` or `skip` are set, no information is displayed upon hovering.',\n                'But, if `none` is set, click and hover events are still fired.'\n            ].join(' ')\n        },\n        hoverlabel: fxAttrs.hoverlabel, // needs editType override,\n        hovertemplate: hovertemplateAttrs({}, {\n            description: 'Variables `sourceLinks` and `targetLinks` are arrays of link objects.',\n            keys: ['value', 'label']\n        }),\n        description: 'The nodes of the Sankey plot.'\n    },\n\n    link: {\n        label: {\n            valType: 'data_array',\n            dflt: [],\n            description: 'The shown name of the link.'\n        },\n        color: {\n            valType: 'color',\n            arrayOk: true,\n            description: [\n                'Sets the `link` color. It can be a single value, or an array for specifying color for each `link`.',\n                'If `link.color` is omitted, then by default, a translucent grey link will be used.'\n            ].join(' ')\n        },\n        customdata: {\n            valType: 'data_array',\n            editType: 'calc',\n            description: [\n                'Assigns extra data to each link.'\n            ].join(' ')\n        },\n        line: {\n            color: {\n                valType: 'color',\n                dflt: colorAttrs.defaultLine,\n                arrayOk: true,\n                description: [\n                    'Sets the color of the `line` around each `link`.'\n                ].join(' ')\n            },\n            width: {\n                valType: 'number',\n                min: 0,\n                dflt: 0,\n                arrayOk: true,\n                description: [\n                    'Sets the width (in px) of the `line` around each `link`.'\n                ].join(' ')\n            }\n        },\n        source: {\n            valType: 'data_array',\n            dflt: [],\n            description: 'An integer number `[0..nodes.length - 1]` that represents the source node.'\n        },\n        target: {\n            valType: 'data_array',\n            dflt: [],\n            description: 'An integer number `[0..nodes.length - 1]` that represents the target node.'\n        },\n        value: {\n            valType: 'data_array',\n            dflt: [],\n            description: 'A numeric value representing the flow volume value.'\n        },\n        hoverinfo: {\n            valType: 'enumerated',\n            values: ['all', 'none', 'skip'],\n            dflt: 'all',\n            description: [\n                'Determines which trace information appear when hovering links.',\n                'If `none` or `skip` are set, no information is displayed upon hovering.',\n                'But, if `none` is set, click and hover events are still fired.'\n            ].join(' ')\n        },\n        hoverlabel: fxAttrs.hoverlabel, // needs editType override,\n        hovertemplate: hovertemplateAttrs({}, {\n            description: 'Variables `source` and `target` are node objects.',\n            keys: ['value', 'label']\n        }),\n        colorscales: templatedArray('concentrationscales', {\n            editType: 'calc',\n            label: {\n                valType: 'string',\n                editType: 'calc',\n                description: 'The label of the links to color based on their concentration within a flow.',\n                dflt: ''\n            },\n            cmax: {\n                valType: 'number',\n                editType: 'calc',\n                dflt: 1,\n                description: [\n                    'Sets the upper bound of the color domain.'\n                ].join('')\n            },\n            cmin: {\n                valType: 'number',\n                editType: 'calc',\n                dflt: 0,\n                description: [\n                    'Sets the lower bound of the color domain.'\n                ].join('')\n            },\n            colorscale: extendFlat(colorAttributes().colorscale, {dflt: [[0, 'white'], [1, 'black']]})\n        }),\n        description: 'The links of the Sankey plot.',\n    }\n}, 'calc', 'nested');\nattrs.transforms = undefined;\n"]},"metadata":{},"sourceType":"script"}