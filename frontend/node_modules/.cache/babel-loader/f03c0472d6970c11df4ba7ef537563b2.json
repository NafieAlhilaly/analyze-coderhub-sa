{"ast":null,"code":"var DEFAULT_NORMALS_EPSILON = 1e-6;\nvar DEFAULT_FACE_EPSILON = 1e-6; //Estimate the vertex normals of a mesh\n\nexports.vertexNormals = function (faces, positions, specifiedEpsilon) {\n  var N = positions.length;\n  var normals = new Array(N);\n  var epsilon = specifiedEpsilon === void 0 ? DEFAULT_NORMALS_EPSILON : specifiedEpsilon; //Initialize normal array\n\n  for (var i = 0; i < N; ++i) {\n    normals[i] = [0.0, 0.0, 0.0];\n  } //Walk over all the faces and add per-vertex contribution to normal weights\n\n\n  for (var i = 0; i < faces.length; ++i) {\n    var f = faces[i];\n    var p = 0;\n    var c = f[f.length - 1];\n    var n = f[0];\n\n    for (var j = 0; j < f.length; ++j) {\n      //Shift indices back\n      p = c;\n      c = n;\n      n = f[(j + 1) % f.length];\n      var v0 = positions[p];\n      var v1 = positions[c];\n      var v2 = positions[n]; //Compute infineteismal arcs\n\n      var d01 = new Array(3);\n      var m01 = 0.0;\n      var d21 = new Array(3);\n      var m21 = 0.0;\n\n      for (var k = 0; k < 3; ++k) {\n        d01[k] = v0[k] - v1[k];\n        m01 += d01[k] * d01[k];\n        d21[k] = v2[k] - v1[k];\n        m21 += d21[k] * d21[k];\n      } //Accumulate values in normal\n\n\n      if (m01 * m21 > epsilon) {\n        var norm = normals[c];\n        var w = 1.0 / Math.sqrt(m01 * m21);\n\n        for (var k = 0; k < 3; ++k) {\n          var u = (k + 1) % 3;\n          var v = (k + 2) % 3;\n          norm[k] += w * (d21[u] * d01[v] - d21[v] * d01[u]);\n        }\n      }\n    }\n  } //Scale all normals to unit length\n\n\n  for (var i = 0; i < N; ++i) {\n    var norm = normals[i];\n    var m = 0.0;\n\n    for (var k = 0; k < 3; ++k) {\n      m += norm[k] * norm[k];\n    }\n\n    if (m > epsilon) {\n      var w = 1.0 / Math.sqrt(m);\n\n      for (var k = 0; k < 3; ++k) {\n        norm[k] *= w;\n      }\n    } else {\n      for (var k = 0; k < 3; ++k) {\n        norm[k] = 0.0;\n      }\n    }\n  } //Return the resulting set of patches\n\n\n  return normals;\n}; //Compute face normals of a mesh\n\n\nexports.faceNormals = function (faces, positions, specifiedEpsilon) {\n  var N = faces.length;\n  var normals = new Array(N);\n  var epsilon = specifiedEpsilon === void 0 ? DEFAULT_FACE_EPSILON : specifiedEpsilon;\n\n  for (var i = 0; i < N; ++i) {\n    var f = faces[i];\n    var pos = new Array(3);\n\n    for (var j = 0; j < 3; ++j) {\n      pos[j] = positions[f[j]];\n    }\n\n    var d01 = new Array(3);\n    var d21 = new Array(3);\n\n    for (var j = 0; j < 3; ++j) {\n      d01[j] = pos[1][j] - pos[0][j];\n      d21[j] = pos[2][j] - pos[0][j];\n    }\n\n    var n = new Array(3);\n    var l = 0.0;\n\n    for (var j = 0; j < 3; ++j) {\n      var u = (j + 1) % 3;\n      var v = (j + 2) % 3;\n      n[j] = d01[u] * d21[v] - d01[v] * d21[u];\n      l += n[j] * n[j];\n    }\n\n    if (l > epsilon) {\n      l = 1.0 / Math.sqrt(l);\n    } else {\n      l = 0.0;\n    }\n\n    for (var j = 0; j < 3; ++j) {\n      n[j] *= l;\n    }\n\n    normals[i] = n;\n  }\n\n  return normals;\n};","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/normals/normals.js"],"names":["DEFAULT_NORMALS_EPSILON","DEFAULT_FACE_EPSILON","exports","vertexNormals","faces","positions","specifiedEpsilon","N","length","normals","Array","epsilon","i","f","p","c","n","j","v0","v1","v2","d01","m01","d21","m21","k","norm","w","Math","sqrt","u","v","m","faceNormals","pos","l"],"mappings":"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","sourcesContent":["var DEFAULT_NORMALS_EPSILON = 1e-6;\nvar DEFAULT_FACE_EPSILON = 1e-6;\n\n//Estimate the vertex normals of a mesh\nexports.vertexNormals = function(faces, positions, specifiedEpsilon) {\n\n  var N         = positions.length;\n  var normals   = new Array(N);\n  var epsilon   = specifiedEpsilon === void(0) ? DEFAULT_NORMALS_EPSILON : specifiedEpsilon;\n\n  //Initialize normal array\n  for(var i=0; i<N; ++i) {\n    normals[i] = [0.0, 0.0, 0.0];\n  }\n\n  //Walk over all the faces and add per-vertex contribution to normal weights\n  for(var i=0; i<faces.length; ++i) {\n    var f = faces[i];\n    var p = 0;\n    var c = f[f.length-1];\n    var n = f[0];\n    for(var j=0; j<f.length; ++j) {\n\n      //Shift indices back\n      p = c;\n      c = n;\n      n = f[(j+1) % f.length];\n\n      var v0 = positions[p];\n      var v1 = positions[c];\n      var v2 = positions[n];\n\n      //Compute infineteismal arcs\n      var d01 = new Array(3);\n      var m01 = 0.0;\n      var d21 = new Array(3);\n      var m21 = 0.0;\n      for(var k=0; k<3; ++k) {\n        d01[k] = v0[k]  - v1[k];\n        m01   += d01[k] * d01[k];\n        d21[k] = v2[k]  - v1[k];\n        m21   += d21[k] * d21[k];\n      }\n\n      //Accumulate values in normal\n      if(m01 * m21 > epsilon) {\n        var norm = normals[c];\n        var w = 1.0 / Math.sqrt(m01 * m21);\n        for(var k=0; k<3; ++k) {\n          var u = (k+1)%3;\n          var v = (k+2)%3;\n          norm[k] += w * (d21[u] * d01[v] - d21[v] * d01[u]);\n        }\n      }\n    }\n  }\n\n  //Scale all normals to unit length\n  for(var i=0; i<N; ++i) {\n    var norm = normals[i];\n    var m = 0.0;\n    for(var k=0; k<3; ++k) {\n      m += norm[k] * norm[k];\n    }\n    if(m > epsilon) {\n      var w = 1.0 / Math.sqrt(m);\n      for(var k=0; k<3; ++k) {\n        norm[k] *= w;\n      }\n    } else {\n      for(var k=0; k<3; ++k) {\n        norm[k] = 0.0;\n      }\n    }\n  }\n\n  //Return the resulting set of patches\n  return normals;\n}\n\n//Compute face normals of a mesh\nexports.faceNormals = function(faces, positions, specifiedEpsilon) {\n\n  var N         = faces.length;\n  var normals   = new Array(N);\n  var epsilon   = specifiedEpsilon === void(0) ? DEFAULT_FACE_EPSILON : specifiedEpsilon;\n\n  for(var i=0; i<N; ++i) {\n    var f = faces[i];\n    var pos = new Array(3);\n    for(var j=0; j<3; ++j) {\n      pos[j] = positions[f[j]];\n    }\n\n    var d01 = new Array(3);\n    var d21 = new Array(3);\n    for(var j=0; j<3; ++j) {\n      d01[j] = pos[1][j] - pos[0][j];\n      d21[j] = pos[2][j] - pos[0][j];\n    }\n\n    var n = new Array(3);\n    var l = 0.0;\n    for(var j=0; j<3; ++j) {\n      var u = (j+1)%3;\n      var v = (j+2)%3;\n      n[j] = d01[u] * d21[v] - d01[v] * d21[u];\n      l += n[j] * n[j];\n    }\n    if(l > epsilon) {\n      l = 1.0 / Math.sqrt(l);\n    } else {\n      l = 0.0;\n    }\n    for(var j=0; j<3; ++j) {\n      n[j] *= l;\n    }\n    normals[i] = n;\n  }\n  return normals;\n}\n\n\n"]},"metadata":{},"sourceType":"script"}