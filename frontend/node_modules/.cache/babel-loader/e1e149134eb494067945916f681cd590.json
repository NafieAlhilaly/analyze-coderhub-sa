{"ast":null,"code":"'use strict';\n\nvar d3 = require('@plotly/d3');\n\nvar Lib = require('../../lib');\n\nvar Drawing = require('../../components/drawing');\n\nvar svgTextUtils = require('../../lib/svg_text_utils');\n\nvar partition = require('./partition');\n\nvar styleOne = require('./style').styleOne;\n\nvar constants = require('./constants');\n\nvar helpers = require('../sunburst/helpers');\n\nvar attachFxHandlers = require('../sunburst/fx');\n\nvar onPathbar = true; // for Ancestors\n\nmodule.exports = function drawAncestors(gd, cd, entry, slices, opts) {\n  var barDifY = opts.barDifY;\n  var width = opts.width;\n  var height = opts.height;\n  var viewX = opts.viewX;\n  var viewY = opts.viewY;\n  var pathSlice = opts.pathSlice;\n  var toMoveInsideSlice = opts.toMoveInsideSlice;\n  var strTransform = opts.strTransform;\n  var hasTransition = opts.hasTransition;\n  var handleSlicesExit = opts.handleSlicesExit;\n  var makeUpdateSliceInterpolator = opts.makeUpdateSliceInterpolator;\n  var makeUpdateTextInterpolator = opts.makeUpdateTextInterpolator;\n  var refRect = {};\n  var fullLayout = gd._fullLayout;\n  var cd0 = cd[0];\n  var trace = cd0.trace;\n  var hierarchy = cd0.hierarchy;\n  var eachWidth = width / trace._entryDepth;\n  var pathIds = helpers.listPath(entry.data, 'id');\n  var sliceData = partition(hierarchy.copy(), [width, height], {\n    packing: 'dice',\n    pad: {\n      inner: 0,\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0\n    }\n  }).descendants(); // edit slices that show up on graph\n\n  sliceData = sliceData.filter(function (pt) {\n    var level = pathIds.indexOf(pt.data.id);\n    if (level === -1) return false;\n    pt.x0 = eachWidth * level;\n    pt.x1 = eachWidth * (level + 1);\n    pt.y0 = barDifY;\n    pt.y1 = barDifY + height;\n    pt.onPathbar = true;\n    return true;\n  });\n  sliceData.reverse();\n  slices = slices.data(sliceData, helpers.getPtId);\n  slices.enter().append('g').classed('pathbar', true);\n  handleSlicesExit(slices, onPathbar, refRect, [width, height], pathSlice);\n  slices.order();\n  var updateSlices = slices;\n\n  if (hasTransition) {\n    updateSlices = updateSlices.transition().each('end', function () {\n      // N.B. gd._transitioning is (still) *true* by the time\n      // transition updates get here\n      var sliceTop = d3.select(this);\n      helpers.setSliceCursor(sliceTop, gd, {\n        hideOnRoot: false,\n        hideOnLeaves: false,\n        isTransitioning: false\n      });\n    });\n  }\n\n  updateSlices.each(function (pt) {\n    // for bbox\n    pt._x0 = viewX(pt.x0);\n    pt._x1 = viewX(pt.x1);\n    pt._y0 = viewY(pt.y0);\n    pt._y1 = viewY(pt.y1);\n    pt._hoverX = viewX(pt.x1 - Math.min(width, height) / 2);\n    pt._hoverY = viewY(pt.y1 - height / 2);\n    var sliceTop = d3.select(this);\n    var slicePath = Lib.ensureSingle(sliceTop, 'path', 'surface', function (s) {\n      s.style('pointer-events', 'all');\n    });\n\n    if (hasTransition) {\n      slicePath.transition().attrTween('d', function (pt2) {\n        var interp = makeUpdateSliceInterpolator(pt2, onPathbar, refRect, [width, height]);\n        return function (t) {\n          return pathSlice(interp(t));\n        };\n      });\n    } else {\n      slicePath.attr('d', pathSlice);\n    }\n\n    sliceTop.call(attachFxHandlers, entry, gd, cd, {\n      styleOne: styleOne,\n      eventDataKeys: constants.eventDataKeys,\n      transitionTime: constants.CLICK_TRANSITION_TIME,\n      transitionEasing: constants.CLICK_TRANSITION_EASING\n    }).call(helpers.setSliceCursor, gd, {\n      hideOnRoot: false,\n      hideOnLeaves: false,\n      isTransitioning: gd._transitioning\n    });\n    slicePath.call(styleOne, pt, trace, {\n      hovered: false\n    });\n    pt._text = (helpers.getPtLabel(pt) || '').split('<br>').join(' ') || '';\n    var sliceTextGroup = Lib.ensureSingle(sliceTop, 'g', 'slicetext');\n    var sliceText = Lib.ensureSingle(sliceTextGroup, 'text', '', function (s) {\n      // prohibit tex interpretation until we can handle\n      // tex and regular text together\n      s.attr('data-notex', 1);\n    });\n    var font = Lib.ensureUniformFontSize(gd, helpers.determineTextFont(trace, pt, fullLayout.font, {\n      onPathbar: true\n    }));\n    sliceText.text(pt._text || ' ') // use one space character instead of a blank string to avoid jumps during transition\n    .classed('slicetext', true).attr('text-anchor', 'start').call(Drawing.font, font).call(svgTextUtils.convertToTspans, gd);\n    pt.textBB = Drawing.bBox(sliceText.node());\n    pt.transform = toMoveInsideSlice(pt, {\n      fontSize: font.size,\n      onPathbar: true\n    });\n    pt.transform.fontSize = font.size;\n\n    if (hasTransition) {\n      sliceText.transition().attrTween('transform', function (pt2) {\n        var interp = makeUpdateTextInterpolator(pt2, onPathbar, refRect, [width, height]);\n        return function (t) {\n          return strTransform(interp(t));\n        };\n      });\n    } else {\n      sliceText.attr('transform', strTransform(pt));\n    }\n  });\n};","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/plotly.js/src/traces/treemap/draw_ancestors.js"],"names":["d3","require","Lib","Drawing","svgTextUtils","partition","styleOne","constants","helpers","attachFxHandlers","onPathbar","module","exports","drawAncestors","gd","cd","entry","slices","opts","barDifY","width","height","viewX","viewY","pathSlice","toMoveInsideSlice","strTransform","hasTransition","handleSlicesExit","makeUpdateSliceInterpolator","makeUpdateTextInterpolator","refRect","fullLayout","_fullLayout","cd0","trace","hierarchy","eachWidth","_entryDepth","pathIds","listPath","data","sliceData","copy","packing","pad","inner","top","left","right","bottom","descendants","filter","pt","level","indexOf","id","x0","x1","y0","y1","reverse","getPtId","enter","append","classed","order","updateSlices","transition","each","sliceTop","select","setSliceCursor","hideOnRoot","hideOnLeaves","isTransitioning","_x0","_x1","_y0","_y1","_hoverX","Math","min","_hoverY","slicePath","ensureSingle","s","style","attrTween","pt2","interp","t","attr","call","eventDataKeys","transitionTime","CLICK_TRANSITION_TIME","transitionEasing","CLICK_TRANSITION_EASING","_transitioning","hovered","_text","getPtLabel","split","join","sliceTextGroup","sliceText","font","ensureUniformFontSize","determineTextFont","text","convertToTspans","textBB","bBox","node","transform","fontSize","size"],"mappings":"AAAA;;AAEA,IAAIA,EAAE,GAAGC,OAAO,CAAC,YAAD,CAAhB;;AACA,IAAIC,GAAG,GAAGD,OAAO,CAAC,WAAD,CAAjB;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,0BAAD,CAArB;;AACA,IAAIG,YAAY,GAAGH,OAAO,CAAC,0BAAD,CAA1B;;AAEA,IAAII,SAAS,GAAGJ,OAAO,CAAC,aAAD,CAAvB;;AACA,IAAIK,QAAQ,GAAGL,OAAO,CAAC,SAAD,CAAP,CAAmBK,QAAlC;;AACA,IAAIC,SAAS,GAAGN,OAAO,CAAC,aAAD,CAAvB;;AACA,IAAIO,OAAO,GAAGP,OAAO,CAAC,qBAAD,CAArB;;AACA,IAAIQ,gBAAgB,GAAGR,OAAO,CAAC,gBAAD,CAA9B;;AAEA,IAAIS,SAAS,GAAG,IAAhB,C,CAAsB;;AAEtBC,MAAM,CAACC,OAAP,GAAiB,SAASC,aAAT,CAAuBC,EAAvB,EAA2BC,EAA3B,EAA+BC,KAA/B,EAAsCC,MAAtC,EAA8CC,IAA9C,EAAoD;AACjE,MAAIC,OAAO,GAAGD,IAAI,CAACC,OAAnB;AACA,MAAIC,KAAK,GAAGF,IAAI,CAACE,KAAjB;AACA,MAAIC,MAAM,GAAGH,IAAI,CAACG,MAAlB;AACA,MAAIC,KAAK,GAAGJ,IAAI,CAACI,KAAjB;AACA,MAAIC,KAAK,GAAGL,IAAI,CAACK,KAAjB;AACA,MAAIC,SAAS,GAAGN,IAAI,CAACM,SAArB;AACA,MAAIC,iBAAiB,GAAGP,IAAI,CAACO,iBAA7B;AACA,MAAIC,YAAY,GAAGR,IAAI,CAACQ,YAAxB;AACA,MAAIC,aAAa,GAAGT,IAAI,CAACS,aAAzB;AACA,MAAIC,gBAAgB,GAAGV,IAAI,CAACU,gBAA5B;AACA,MAAIC,2BAA2B,GAAGX,IAAI,CAACW,2BAAvC;AACA,MAAIC,0BAA0B,GAAGZ,IAAI,CAACY,0BAAtC;AACA,MAAIC,OAAO,GAAG,EAAd;AAEA,MAAIC,UAAU,GAAGlB,EAAE,CAACmB,WAApB;AACA,MAAIC,GAAG,GAAGnB,EAAE,CAAC,CAAD,CAAZ;AACA,MAAIoB,KAAK,GAAGD,GAAG,CAACC,KAAhB;AACA,MAAIC,SAAS,GAAGF,GAAG,CAACE,SAApB;AAEA,MAAIC,SAAS,GAAGjB,KAAK,GAAGe,KAAK,CAACG,WAA9B;AAEA,MAAIC,OAAO,GAAG/B,OAAO,CAACgC,QAAR,CAAiBxB,KAAK,CAACyB,IAAvB,EAA6B,IAA7B,CAAd;AAEA,MAAIC,SAAS,GAAGrC,SAAS,CAAC+B,SAAS,CAACO,IAAV,EAAD,EAAmB,CAACvB,KAAD,EAAQC,MAAR,CAAnB,EAAoC;AACzDuB,IAAAA,OAAO,EAAE,MADgD;AAEzDC,IAAAA,GAAG,EAAE;AACDC,MAAAA,KAAK,EAAE,CADN;AAEDC,MAAAA,GAAG,EAAE,CAFJ;AAGDC,MAAAA,IAAI,EAAE,CAHL;AAIDC,MAAAA,KAAK,EAAE,CAJN;AAKDC,MAAAA,MAAM,EAAE;AALP;AAFoD,GAApC,CAAT,CASbC,WATa,EAAhB,CAxBiE,CAmCjE;;AACAT,EAAAA,SAAS,GAAGA,SAAS,CAACU,MAAV,CAAiB,UAASC,EAAT,EAAa;AACtC,QAAIC,KAAK,GAAGf,OAAO,CAACgB,OAAR,CAAgBF,EAAE,CAACZ,IAAH,CAAQe,EAAxB,CAAZ;AACA,QAAGF,KAAK,KAAK,CAAC,CAAd,EAAiB,OAAO,KAAP;AAEjBD,IAAAA,EAAE,CAACI,EAAH,GAAQpB,SAAS,GAAGiB,KAApB;AACAD,IAAAA,EAAE,CAACK,EAAH,GAAQrB,SAAS,IAAIiB,KAAK,GAAG,CAAZ,CAAjB;AACAD,IAAAA,EAAE,CAACM,EAAH,GAAQxC,OAAR;AACAkC,IAAAA,EAAE,CAACO,EAAH,GAAQzC,OAAO,GAAGE,MAAlB;AAEAgC,IAAAA,EAAE,CAAC3C,SAAH,GAAe,IAAf;AAEA,WAAO,IAAP;AACH,GAZW,CAAZ;AAcAgC,EAAAA,SAAS,CAACmB,OAAV;AAEA5C,EAAAA,MAAM,GAAGA,MAAM,CAACwB,IAAP,CAAYC,SAAZ,EAAuBlC,OAAO,CAACsD,OAA/B,CAAT;AAEA7C,EAAAA,MAAM,CAAC8C,KAAP,GAAeC,MAAf,CAAsB,GAAtB,EACKC,OADL,CACa,SADb,EACwB,IADxB;AAGArC,EAAAA,gBAAgB,CAACX,MAAD,EAASP,SAAT,EAAoBqB,OAApB,EAA6B,CAACX,KAAD,EAAQC,MAAR,CAA7B,EAA8CG,SAA9C,CAAhB;AAEAP,EAAAA,MAAM,CAACiD,KAAP;AAEA,MAAIC,YAAY,GAAGlD,MAAnB;;AACA,MAAGU,aAAH,EAAkB;AACdwC,IAAAA,YAAY,GAAGA,YAAY,CAACC,UAAb,GAA0BC,IAA1B,CAA+B,KAA/B,EAAsC,YAAW;AAC5D;AACA;AACA,UAAIC,QAAQ,GAAGtE,EAAE,CAACuE,MAAH,CAAU,IAAV,CAAf;AACA/D,MAAAA,OAAO,CAACgE,cAAR,CAAuBF,QAAvB,EAAiCxD,EAAjC,EAAqC;AACjC2D,QAAAA,UAAU,EAAE,KADqB;AAEjCC,QAAAA,YAAY,EAAE,KAFmB;AAGjCC,QAAAA,eAAe,EAAE;AAHgB,OAArC;AAKH,KATc,CAAf;AAUH;;AAEDR,EAAAA,YAAY,CAACE,IAAb,CAAkB,UAAShB,EAAT,EAAa;AAC3B;AACAA,IAAAA,EAAE,CAACuB,GAAH,GAAStD,KAAK,CAAC+B,EAAE,CAACI,EAAJ,CAAd;AACAJ,IAAAA,EAAE,CAACwB,GAAH,GAASvD,KAAK,CAAC+B,EAAE,CAACK,EAAJ,CAAd;AACAL,IAAAA,EAAE,CAACyB,GAAH,GAASvD,KAAK,CAAC8B,EAAE,CAACM,EAAJ,CAAd;AACAN,IAAAA,EAAE,CAAC0B,GAAH,GAASxD,KAAK,CAAC8B,EAAE,CAACO,EAAJ,CAAd;AAEAP,IAAAA,EAAE,CAAC2B,OAAH,GAAa1D,KAAK,CAAC+B,EAAE,CAACK,EAAH,GAAQuB,IAAI,CAACC,GAAL,CAAS9D,KAAT,EAAgBC,MAAhB,IAA0B,CAAnC,CAAlB;AACAgC,IAAAA,EAAE,CAAC8B,OAAH,GAAa5D,KAAK,CAAC8B,EAAE,CAACO,EAAH,GAAQvC,MAAM,GAAG,CAAlB,CAAlB;AAEA,QAAIiD,QAAQ,GAAGtE,EAAE,CAACuE,MAAH,CAAU,IAAV,CAAf;AAEA,QAAIa,SAAS,GAAGlF,GAAG,CAACmF,YAAJ,CAAiBf,QAAjB,EAA2B,MAA3B,EAAmC,SAAnC,EAA8C,UAASgB,CAAT,EAAY;AACtEA,MAAAA,CAAC,CAACC,KAAF,CAAQ,gBAAR,EAA0B,KAA1B;AACH,KAFe,CAAhB;;AAIA,QAAG5D,aAAH,EAAkB;AACdyD,MAAAA,SAAS,CAAChB,UAAV,GAAuBoB,SAAvB,CAAiC,GAAjC,EAAsC,UAASC,GAAT,EAAc;AAChD,YAAIC,MAAM,GAAG7D,2BAA2B,CAAC4D,GAAD,EAAM/E,SAAN,EAAiBqB,OAAjB,EAA0B,CAACX,KAAD,EAAQC,MAAR,CAA1B,CAAxC;AACA,eAAO,UAASsE,CAAT,EAAY;AAAE,iBAAOnE,SAAS,CAACkE,MAAM,CAACC,CAAD,CAAP,CAAhB;AAA8B,SAAnD;AACH,OAHD;AAIH,KALD,MAKO;AACHP,MAAAA,SAAS,CAACQ,IAAV,CAAe,GAAf,EAAoBpE,SAApB;AACH;;AAED8C,IAAAA,QAAQ,CACHuB,IADL,CACUpF,gBADV,EAC4BO,KAD5B,EACmCF,EADnC,EACuCC,EADvC,EAC2C;AACnCT,MAAAA,QAAQ,EAAEA,QADyB;AAEnCwF,MAAAA,aAAa,EAAEvF,SAAS,CAACuF,aAFU;AAGnCC,MAAAA,cAAc,EAAExF,SAAS,CAACyF,qBAHS;AAInCC,MAAAA,gBAAgB,EAAE1F,SAAS,CAAC2F;AAJO,KAD3C,EAOKL,IAPL,CAOUrF,OAAO,CAACgE,cAPlB,EAOkC1D,EAPlC,EAOsC;AAC9B2D,MAAAA,UAAU,EAAE,KADkB;AAE9BC,MAAAA,YAAY,EAAE,KAFgB;AAG9BC,MAAAA,eAAe,EAAE7D,EAAE,CAACqF;AAHU,KAPtC;AAaAf,IAAAA,SAAS,CAACS,IAAV,CAAevF,QAAf,EAAyB+C,EAAzB,EAA6BlB,KAA7B,EAAoC;AAChCiE,MAAAA,OAAO,EAAE;AADuB,KAApC;AAIA/C,IAAAA,EAAE,CAACgD,KAAH,GAAW,CAAC7F,OAAO,CAAC8F,UAAR,CAAmBjD,EAAnB,KAA0B,EAA3B,EAA+BkD,KAA/B,CAAqC,MAArC,EAA6CC,IAA7C,CAAkD,GAAlD,KAA0D,EAArE;AAEA,QAAIC,cAAc,GAAGvG,GAAG,CAACmF,YAAJ,CAAiBf,QAAjB,EAA2B,GAA3B,EAAgC,WAAhC,CAArB;AACA,QAAIoC,SAAS,GAAGxG,GAAG,CAACmF,YAAJ,CAAiBoB,cAAjB,EAAiC,MAAjC,EAAyC,EAAzC,EAA6C,UAASnB,CAAT,EAAY;AACrE;AACA;AACAA,MAAAA,CAAC,CAACM,IAAF,CAAO,YAAP,EAAqB,CAArB;AACH,KAJe,CAAhB;AAMA,QAAIe,IAAI,GAAGzG,GAAG,CAAC0G,qBAAJ,CAA0B9F,EAA1B,EAA8BN,OAAO,CAACqG,iBAAR,CAA0B1E,KAA1B,EAAiCkB,EAAjC,EAAqCrB,UAAU,CAAC2E,IAAhD,EAAsD;AAC3FjG,MAAAA,SAAS,EAAE;AADgF,KAAtD,CAA9B,CAAX;AAIAgG,IAAAA,SAAS,CAACI,IAAV,CAAezD,EAAE,CAACgD,KAAH,IAAY,GAA3B,EAAgC;AAAhC,KACKpC,OADL,CACa,WADb,EAC0B,IAD1B,EAEK2B,IAFL,CAEU,aAFV,EAEyB,OAFzB,EAGKC,IAHL,CAGU1F,OAAO,CAACwG,IAHlB,EAGwBA,IAHxB,EAIKd,IAJL,CAIUzF,YAAY,CAAC2G,eAJvB,EAIwCjG,EAJxC;AAMAuC,IAAAA,EAAE,CAAC2D,MAAH,GAAY7G,OAAO,CAAC8G,IAAR,CAAaP,SAAS,CAACQ,IAAV,EAAb,CAAZ;AACA7D,IAAAA,EAAE,CAAC8D,SAAH,GAAe1F,iBAAiB,CAAC4B,EAAD,EAAK;AACjC+D,MAAAA,QAAQ,EAAET,IAAI,CAACU,IADkB;AAEjC3G,MAAAA,SAAS,EAAE;AAFsB,KAAL,CAAhC;AAIA2C,IAAAA,EAAE,CAAC8D,SAAH,CAAaC,QAAb,GAAwBT,IAAI,CAACU,IAA7B;;AAEA,QAAG1F,aAAH,EAAkB;AACd+E,MAAAA,SAAS,CAACtC,UAAV,GAAuBoB,SAAvB,CAAiC,WAAjC,EAA8C,UAASC,GAAT,EAAc;AACxD,YAAIC,MAAM,GAAG5D,0BAA0B,CAAC2D,GAAD,EAAM/E,SAAN,EAAiBqB,OAAjB,EAA0B,CAACX,KAAD,EAAQC,MAAR,CAA1B,CAAvC;AACA,eAAO,UAASsE,CAAT,EAAY;AAAE,iBAAOjE,YAAY,CAACgE,MAAM,CAACC,CAAD,CAAP,CAAnB;AAAiC,SAAtD;AACH,OAHD;AAIH,KALD,MAKO;AACHe,MAAAA,SAAS,CAACd,IAAV,CAAe,WAAf,EAA4BlE,YAAY,CAAC2B,EAAD,CAAxC;AACH;AACJ,GA5ED;AA6EH,CAxJD","sourcesContent":["'use strict';\n\nvar d3 = require('@plotly/d3');\nvar Lib = require('../../lib');\nvar Drawing = require('../../components/drawing');\nvar svgTextUtils = require('../../lib/svg_text_utils');\n\nvar partition = require('./partition');\nvar styleOne = require('./style').styleOne;\nvar constants = require('./constants');\nvar helpers = require('../sunburst/helpers');\nvar attachFxHandlers = require('../sunburst/fx');\n\nvar onPathbar = true; // for Ancestors\n\nmodule.exports = function drawAncestors(gd, cd, entry, slices, opts) {\n    var barDifY = opts.barDifY;\n    var width = opts.width;\n    var height = opts.height;\n    var viewX = opts.viewX;\n    var viewY = opts.viewY;\n    var pathSlice = opts.pathSlice;\n    var toMoveInsideSlice = opts.toMoveInsideSlice;\n    var strTransform = opts.strTransform;\n    var hasTransition = opts.hasTransition;\n    var handleSlicesExit = opts.handleSlicesExit;\n    var makeUpdateSliceInterpolator = opts.makeUpdateSliceInterpolator;\n    var makeUpdateTextInterpolator = opts.makeUpdateTextInterpolator;\n    var refRect = {};\n\n    var fullLayout = gd._fullLayout;\n    var cd0 = cd[0];\n    var trace = cd0.trace;\n    var hierarchy = cd0.hierarchy;\n\n    var eachWidth = width / trace._entryDepth;\n\n    var pathIds = helpers.listPath(entry.data, 'id');\n\n    var sliceData = partition(hierarchy.copy(), [width, height], {\n        packing: 'dice',\n        pad: {\n            inner: 0,\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0\n        }\n    }).descendants();\n\n    // edit slices that show up on graph\n    sliceData = sliceData.filter(function(pt) {\n        var level = pathIds.indexOf(pt.data.id);\n        if(level === -1) return false;\n\n        pt.x0 = eachWidth * level;\n        pt.x1 = eachWidth * (level + 1);\n        pt.y0 = barDifY;\n        pt.y1 = barDifY + height;\n\n        pt.onPathbar = true;\n\n        return true;\n    });\n\n    sliceData.reverse();\n\n    slices = slices.data(sliceData, helpers.getPtId);\n\n    slices.enter().append('g')\n        .classed('pathbar', true);\n\n    handleSlicesExit(slices, onPathbar, refRect, [width, height], pathSlice);\n\n    slices.order();\n\n    var updateSlices = slices;\n    if(hasTransition) {\n        updateSlices = updateSlices.transition().each('end', function() {\n            // N.B. gd._transitioning is (still) *true* by the time\n            // transition updates get here\n            var sliceTop = d3.select(this);\n            helpers.setSliceCursor(sliceTop, gd, {\n                hideOnRoot: false,\n                hideOnLeaves: false,\n                isTransitioning: false\n            });\n        });\n    }\n\n    updateSlices.each(function(pt) {\n        // for bbox\n        pt._x0 = viewX(pt.x0);\n        pt._x1 = viewX(pt.x1);\n        pt._y0 = viewY(pt.y0);\n        pt._y1 = viewY(pt.y1);\n\n        pt._hoverX = viewX(pt.x1 - Math.min(width, height) / 2);\n        pt._hoverY = viewY(pt.y1 - height / 2);\n\n        var sliceTop = d3.select(this);\n\n        var slicePath = Lib.ensureSingle(sliceTop, 'path', 'surface', function(s) {\n            s.style('pointer-events', 'all');\n        });\n\n        if(hasTransition) {\n            slicePath.transition().attrTween('d', function(pt2) {\n                var interp = makeUpdateSliceInterpolator(pt2, onPathbar, refRect, [width, height]);\n                return function(t) { return pathSlice(interp(t)); };\n            });\n        } else {\n            slicePath.attr('d', pathSlice);\n        }\n\n        sliceTop\n            .call(attachFxHandlers, entry, gd, cd, {\n                styleOne: styleOne,\n                eventDataKeys: constants.eventDataKeys,\n                transitionTime: constants.CLICK_TRANSITION_TIME,\n                transitionEasing: constants.CLICK_TRANSITION_EASING\n            })\n            .call(helpers.setSliceCursor, gd, {\n                hideOnRoot: false,\n                hideOnLeaves: false,\n                isTransitioning: gd._transitioning\n            });\n\n        slicePath.call(styleOne, pt, trace, {\n            hovered: false\n        });\n\n        pt._text = (helpers.getPtLabel(pt) || '').split('<br>').join(' ') || '';\n\n        var sliceTextGroup = Lib.ensureSingle(sliceTop, 'g', 'slicetext');\n        var sliceText = Lib.ensureSingle(sliceTextGroup, 'text', '', function(s) {\n            // prohibit tex interpretation until we can handle\n            // tex and regular text together\n            s.attr('data-notex', 1);\n        });\n\n        var font = Lib.ensureUniformFontSize(gd, helpers.determineTextFont(trace, pt, fullLayout.font, {\n            onPathbar: true\n        }));\n\n        sliceText.text(pt._text || ' ') // use one space character instead of a blank string to avoid jumps during transition\n            .classed('slicetext', true)\n            .attr('text-anchor', 'start')\n            .call(Drawing.font, font)\n            .call(svgTextUtils.convertToTspans, gd);\n\n        pt.textBB = Drawing.bBox(sliceText.node());\n        pt.transform = toMoveInsideSlice(pt, {\n            fontSize: font.size,\n            onPathbar: true\n        });\n        pt.transform.fontSize = font.size;\n\n        if(hasTransition) {\n            sliceText.transition().attrTween('transform', function(pt2) {\n                var interp = makeUpdateTextInterpolator(pt2, onPathbar, refRect, [width, height]);\n                return function(t) { return strTransform(interp(t)); };\n            });\n        } else {\n            sliceText.attr('transform', strTransform(pt));\n        }\n    });\n};\n"]},"metadata":{},"sourceType":"script"}