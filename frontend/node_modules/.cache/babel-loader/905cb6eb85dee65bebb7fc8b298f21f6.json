{"ast":null,"code":"'use strict';\n\nvar Ternary = require('./ternary');\n\nvar getSubplotCalcData = require('../../plots/get_data').getSubplotCalcData;\n\nvar counterRegex = require('../../lib').counterRegex;\n\nvar TERNARY = 'ternary';\nexports.name = TERNARY;\nvar attr = exports.attr = 'subplot';\nexports.idRoot = TERNARY;\nexports.idRegex = exports.attrRegex = counterRegex(TERNARY);\nvar attributes = exports.attributes = {};\nattributes[attr] = {\n  valType: 'subplotid',\n  dflt: 'ternary',\n  editType: 'calc',\n  description: ['Sets a reference between this trace\\'s data coordinates and', 'a ternary subplot.', 'If *ternary* (the default value), the data refer to `layout.ternary`.', 'If *ternary2*, the data refer to `layout.ternary2`, and so on.'].join(' ')\n};\nexports.layoutAttributes = require('./layout_attributes');\nexports.supplyLayoutDefaults = require('./layout_defaults');\n\nexports.plot = function plot(gd) {\n  var fullLayout = gd._fullLayout;\n  var calcData = gd.calcdata;\n  var ternaryIds = fullLayout._subplots[TERNARY];\n\n  for (var i = 0; i < ternaryIds.length; i++) {\n    var ternaryId = ternaryIds[i];\n    var ternaryCalcData = getSubplotCalcData(calcData, TERNARY, ternaryId);\n    var ternary = fullLayout[ternaryId]._subplot; // If ternary is not instantiated, create one!\n\n    if (!ternary) {\n      ternary = new Ternary({\n        id: ternaryId,\n        graphDiv: gd,\n        container: fullLayout._ternarylayer.node()\n      }, fullLayout);\n      fullLayout[ternaryId]._subplot = ternary;\n    }\n\n    ternary.plot(ternaryCalcData, fullLayout, gd._promises);\n  }\n};\n\nexports.clean = function (newFullData, newFullLayout, oldFullData, oldFullLayout) {\n  var oldTernaryKeys = oldFullLayout._subplots[TERNARY] || [];\n\n  for (var i = 0; i < oldTernaryKeys.length; i++) {\n    var oldTernaryKey = oldTernaryKeys[i];\n    var oldTernary = oldFullLayout[oldTernaryKey]._subplot;\n\n    if (!newFullLayout[oldTernaryKey] && !!oldTernary) {\n      oldTernary.plotContainer.remove();\n      oldTernary.clipDef.remove();\n      oldTernary.clipDefRelative.remove();\n      oldTernary.layers['a-title'].remove();\n      oldTernary.layers['b-title'].remove();\n      oldTernary.layers['c-title'].remove();\n    }\n  }\n};","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/plotly.js/src/plots/ternary/index.js"],"names":["Ternary","require","getSubplotCalcData","counterRegex","TERNARY","exports","name","attr","idRoot","idRegex","attrRegex","attributes","valType","dflt","editType","description","join","layoutAttributes","supplyLayoutDefaults","plot","gd","fullLayout","_fullLayout","calcData","calcdata","ternaryIds","_subplots","i","length","ternaryId","ternaryCalcData","ternary","_subplot","id","graphDiv","container","_ternarylayer","node","_promises","clean","newFullData","newFullLayout","oldFullData","oldFullLayout","oldTernaryKeys","oldTernaryKey","oldTernary","plotContainer","remove","clipDef","clipDefRelative","layers"],"mappings":"AAAA;;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAArB;;AAEA,IAAIC,kBAAkB,GAAGD,OAAO,CAAC,sBAAD,CAAP,CAAgCC,kBAAzD;;AACA,IAAIC,YAAY,GAAGF,OAAO,CAAC,WAAD,CAAP,CAAqBE,YAAxC;;AACA,IAAIC,OAAO,GAAG,SAAd;AAEAC,OAAO,CAACC,IAAR,GAAeF,OAAf;AAEA,IAAIG,IAAI,GAAGF,OAAO,CAACE,IAAR,GAAe,SAA1B;AAEAF,OAAO,CAACG,MAAR,GAAiBJ,OAAjB;AAEAC,OAAO,CAACI,OAAR,GAAkBJ,OAAO,CAACK,SAAR,GAAoBP,YAAY,CAACC,OAAD,CAAlD;AAEA,IAAIO,UAAU,GAAGN,OAAO,CAACM,UAAR,GAAqB,EAAtC;AACAA,UAAU,CAACJ,IAAD,CAAV,GAAmB;AACfK,EAAAA,OAAO,EAAE,WADM;AAEfC,EAAAA,IAAI,EAAE,SAFS;AAGfC,EAAAA,QAAQ,EAAE,MAHK;AAIfC,EAAAA,WAAW,EAAE,CACT,6DADS,EAET,oBAFS,EAGT,uEAHS,EAIT,gEAJS,EAKXC,IALW,CAKN,GALM;AAJE,CAAnB;AAYAX,OAAO,CAACY,gBAAR,GAA2BhB,OAAO,CAAC,qBAAD,CAAlC;AAEAI,OAAO,CAACa,oBAAR,GAA+BjB,OAAO,CAAC,mBAAD,CAAtC;;AAEAI,OAAO,CAACc,IAAR,GAAe,SAASA,IAAT,CAAcC,EAAd,EAAkB;AAC7B,MAAIC,UAAU,GAAGD,EAAE,CAACE,WAApB;AACA,MAAIC,QAAQ,GAAGH,EAAE,CAACI,QAAlB;AACA,MAAIC,UAAU,GAAGJ,UAAU,CAACK,SAAX,CAAqBtB,OAArB,CAAjB;;AAEA,OAAI,IAAIuB,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGF,UAAU,CAACG,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACvC,QAAIE,SAAS,GAAGJ,UAAU,CAACE,CAAD,CAA1B;AACA,QAAIG,eAAe,GAAG5B,kBAAkB,CAACqB,QAAD,EAAWnB,OAAX,EAAoByB,SAApB,CAAxC;AACA,QAAIE,OAAO,GAAGV,UAAU,CAACQ,SAAD,CAAV,CAAsBG,QAApC,CAHuC,CAKvC;;AACA,QAAG,CAACD,OAAJ,EAAa;AACTA,MAAAA,OAAO,GAAG,IAAI/B,OAAJ,CAAY;AAClBiC,QAAAA,EAAE,EAAEJ,SADc;AAElBK,QAAAA,QAAQ,EAAEd,EAFQ;AAGlBe,QAAAA,SAAS,EAAEd,UAAU,CAACe,aAAX,CAAyBC,IAAzB;AAHO,OAAZ,EAKNhB,UALM,CAAV;AAQAA,MAAAA,UAAU,CAACQ,SAAD,CAAV,CAAsBG,QAAtB,GAAiCD,OAAjC;AACH;;AAEDA,IAAAA,OAAO,CAACZ,IAAR,CAAaW,eAAb,EAA8BT,UAA9B,EAA0CD,EAAE,CAACkB,SAA7C;AACH;AACJ,CAzBD;;AA2BAjC,OAAO,CAACkC,KAAR,GAAgB,UAASC,WAAT,EAAsBC,aAAtB,EAAqCC,WAArC,EAAkDC,aAAlD,EAAiE;AAC7E,MAAIC,cAAc,GAAGD,aAAa,CAACjB,SAAd,CAAwBtB,OAAxB,KAAoC,EAAzD;;AAEA,OAAI,IAAIuB,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGiB,cAAc,CAAChB,MAAlC,EAA0CD,CAAC,EAA3C,EAA+C;AAC3C,QAAIkB,aAAa,GAAGD,cAAc,CAACjB,CAAD,CAAlC;AACA,QAAImB,UAAU,GAAGH,aAAa,CAACE,aAAD,CAAb,CAA6Bb,QAA9C;;AAEA,QAAG,CAACS,aAAa,CAACI,aAAD,CAAd,IAAiC,CAAC,CAACC,UAAtC,EAAkD;AAC9CA,MAAAA,UAAU,CAACC,aAAX,CAAyBC,MAAzB;AACAF,MAAAA,UAAU,CAACG,OAAX,CAAmBD,MAAnB;AACAF,MAAAA,UAAU,CAACI,eAAX,CAA2BF,MAA3B;AACAF,MAAAA,UAAU,CAACK,MAAX,CAAkB,SAAlB,EAA6BH,MAA7B;AACAF,MAAAA,UAAU,CAACK,MAAX,CAAkB,SAAlB,EAA6BH,MAA7B;AACAF,MAAAA,UAAU,CAACK,MAAX,CAAkB,SAAlB,EAA6BH,MAA7B;AACH;AACJ;AACJ,CAhBD","sourcesContent":["'use strict';\n\nvar Ternary = require('./ternary');\n\nvar getSubplotCalcData = require('../../plots/get_data').getSubplotCalcData;\nvar counterRegex = require('../../lib').counterRegex;\nvar TERNARY = 'ternary';\n\nexports.name = TERNARY;\n\nvar attr = exports.attr = 'subplot';\n\nexports.idRoot = TERNARY;\n\nexports.idRegex = exports.attrRegex = counterRegex(TERNARY);\n\nvar attributes = exports.attributes = {};\nattributes[attr] = {\n    valType: 'subplotid',\n    dflt: 'ternary',\n    editType: 'calc',\n    description: [\n        'Sets a reference between this trace\\'s data coordinates and',\n        'a ternary subplot.',\n        'If *ternary* (the default value), the data refer to `layout.ternary`.',\n        'If *ternary2*, the data refer to `layout.ternary2`, and so on.'\n    ].join(' ')\n};\n\nexports.layoutAttributes = require('./layout_attributes');\n\nexports.supplyLayoutDefaults = require('./layout_defaults');\n\nexports.plot = function plot(gd) {\n    var fullLayout = gd._fullLayout;\n    var calcData = gd.calcdata;\n    var ternaryIds = fullLayout._subplots[TERNARY];\n\n    for(var i = 0; i < ternaryIds.length; i++) {\n        var ternaryId = ternaryIds[i];\n        var ternaryCalcData = getSubplotCalcData(calcData, TERNARY, ternaryId);\n        var ternary = fullLayout[ternaryId]._subplot;\n\n        // If ternary is not instantiated, create one!\n        if(!ternary) {\n            ternary = new Ternary({\n                id: ternaryId,\n                graphDiv: gd,\n                container: fullLayout._ternarylayer.node()\n            },\n                fullLayout\n            );\n\n            fullLayout[ternaryId]._subplot = ternary;\n        }\n\n        ternary.plot(ternaryCalcData, fullLayout, gd._promises);\n    }\n};\n\nexports.clean = function(newFullData, newFullLayout, oldFullData, oldFullLayout) {\n    var oldTernaryKeys = oldFullLayout._subplots[TERNARY] || [];\n\n    for(var i = 0; i < oldTernaryKeys.length; i++) {\n        var oldTernaryKey = oldTernaryKeys[i];\n        var oldTernary = oldFullLayout[oldTernaryKey]._subplot;\n\n        if(!newFullLayout[oldTernaryKey] && !!oldTernary) {\n            oldTernary.plotContainer.remove();\n            oldTernary.clipDef.remove();\n            oldTernary.clipDefRelative.remove();\n            oldTernary.layers['a-title'].remove();\n            oldTernary.layers['b-title'].remove();\n            oldTernary.layers['c-title'].remove();\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}