{"ast":null,"code":"'use strict';\n\nexports.uniforms = runtimeUniforms;\nexports.attributes = runtimeAttributes;\nvar GL_TO_GLSL_TYPES = {\n  'FLOAT': 'float',\n  'FLOAT_VEC2': 'vec2',\n  'FLOAT_VEC3': 'vec3',\n  'FLOAT_VEC4': 'vec4',\n  'INT': 'int',\n  'INT_VEC2': 'ivec2',\n  'INT_VEC3': 'ivec3',\n  'INT_VEC4': 'ivec4',\n  'BOOL': 'bool',\n  'BOOL_VEC2': 'bvec2',\n  'BOOL_VEC3': 'bvec3',\n  'BOOL_VEC4': 'bvec4',\n  'FLOAT_MAT2': 'mat2',\n  'FLOAT_MAT3': 'mat3',\n  'FLOAT_MAT4': 'mat4',\n  'SAMPLER_2D': 'sampler2D',\n  'SAMPLER_CUBE': 'samplerCube'\n};\nvar GL_TABLE = null;\n\nfunction getType(gl, type) {\n  if (!GL_TABLE) {\n    var typeNames = Object.keys(GL_TO_GLSL_TYPES);\n    GL_TABLE = {};\n\n    for (var i = 0; i < typeNames.length; ++i) {\n      var tn = typeNames[i];\n      GL_TABLE[gl[tn]] = GL_TO_GLSL_TYPES[tn];\n    }\n  }\n\n  return GL_TABLE[type];\n}\n\nfunction runtimeUniforms(gl, program) {\n  var numUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n  var result = [];\n\n  for (var i = 0; i < numUniforms; ++i) {\n    var info = gl.getActiveUniform(program, i);\n\n    if (info) {\n      var type = getType(gl, info.type);\n\n      if (info.size > 1) {\n        for (var j = 0; j < info.size; ++j) {\n          result.push({\n            name: info.name.replace('[0]', '[' + j + ']'),\n            type: type\n          });\n        }\n      } else {\n        result.push({\n          name: info.name,\n          type: type\n        });\n      }\n    }\n  }\n\n  return result;\n}\n\nfunction runtimeAttributes(gl, program) {\n  var numAttributes = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n  var result = [];\n\n  for (var i = 0; i < numAttributes; ++i) {\n    var info = gl.getActiveAttrib(program, i);\n\n    if (info) {\n      result.push({\n        name: info.name,\n        type: getType(gl, info.type)\n      });\n    }\n  }\n\n  return result;\n}","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/gl-shader/lib/runtime-reflect.js"],"names":["exports","uniforms","runtimeUniforms","attributes","runtimeAttributes","GL_TO_GLSL_TYPES","GL_TABLE","getType","gl","type","typeNames","Object","keys","i","length","tn","program","numUniforms","getProgramParameter","ACTIVE_UNIFORMS","result","info","getActiveUniform","size","j","push","name","replace","numAttributes","ACTIVE_ATTRIBUTES","getActiveAttrib"],"mappings":"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","sourcesContent":["'use strict'\n\nexports.uniforms    = runtimeUniforms\nexports.attributes  = runtimeAttributes\n\nvar GL_TO_GLSL_TYPES = {\n  'FLOAT':       'float',\n  'FLOAT_VEC2':  'vec2',\n  'FLOAT_VEC3':  'vec3',\n  'FLOAT_VEC4':  'vec4',\n  'INT':         'int',\n  'INT_VEC2':    'ivec2',\n  'INT_VEC3':    'ivec3',\n  'INT_VEC4':    'ivec4',\n  'BOOL':        'bool',\n  'BOOL_VEC2':   'bvec2',\n  'BOOL_VEC3':   'bvec3',\n  'BOOL_VEC4':   'bvec4',\n  'FLOAT_MAT2':  'mat2',\n  'FLOAT_MAT3':  'mat3',\n  'FLOAT_MAT4':  'mat4',\n  'SAMPLER_2D':  'sampler2D',\n  'SAMPLER_CUBE':'samplerCube'\n}\n\nvar GL_TABLE = null\n\nfunction getType(gl, type) {\n  if(!GL_TABLE) {\n    var typeNames = Object.keys(GL_TO_GLSL_TYPES)\n    GL_TABLE = {}\n    for(var i=0; i<typeNames.length; ++i) {\n      var tn = typeNames[i]\n      GL_TABLE[gl[tn]] = GL_TO_GLSL_TYPES[tn]\n    }\n  }\n  return GL_TABLE[type]\n}\n\nfunction runtimeUniforms(gl, program) {\n  var numUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS)\n  var result = []\n  for(var i=0; i<numUniforms; ++i) {\n    var info = gl.getActiveUniform(program, i)\n    if(info) {\n      var type = getType(gl, info.type)\n      if(info.size > 1) {\n        for(var j=0; j<info.size; ++j) {\n          result.push({\n            name: info.name.replace('[0]', '[' + j + ']'),\n            type: type\n          })\n        }\n      } else {\n        result.push({\n          name: info.name,\n          type: type\n        })\n      }\n    }\n  }\n  return result\n}\n\nfunction runtimeAttributes(gl, program) {\n  var numAttributes = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES)\n  var result = []\n  for(var i=0; i<numAttributes; ++i) {\n    var info = gl.getActiveAttrib(program, i)\n    if(info) {\n      result.push({\n        name: info.name,\n        type: getType(gl, info.type)\n      })\n    }\n  }\n  return result\n}\n"]},"metadata":{},"sourceType":"script"}