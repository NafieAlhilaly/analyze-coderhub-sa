{"ast":null,"code":"'use strict';\n\nvar Axes = require('../../plots/cartesian/axes');\n\nvar attributes = require('./attributes');\n\nvar fillText = require('../../lib').fillText;\n\nmodule.exports = function hoverPoints(pointData, xval, yval) {\n  var cd = pointData.cd;\n  var trace = cd[0].trace;\n  var geo = pointData.subplot;\n  var pt, i, j, isInside;\n  var xy = [xval, yval];\n  var altXy = [xval + 360, yval];\n\n  for (i = 0; i < cd.length; i++) {\n    pt = cd[i];\n    isInside = false;\n\n    if (pt._polygons) {\n      for (j = 0; j < pt._polygons.length; j++) {\n        if (pt._polygons[j].contains(xy)) {\n          isInside = !isInside;\n        } // for polygons that cross antimeridian as xval is in [-180, 180]\n\n\n        if (pt._polygons[j].contains(altXy)) {\n          isInside = !isInside;\n        }\n      }\n\n      if (isInside) break;\n    }\n  }\n\n  if (!isInside || !pt) return;\n  pointData.x0 = pointData.x1 = pointData.xa.c2p(pt.ct);\n  pointData.y0 = pointData.y1 = pointData.ya.c2p(pt.ct);\n  pointData.index = pt.index;\n  pointData.location = pt.loc;\n  pointData.z = pt.z;\n  pointData.zLabel = Axes.tickText(geo.mockAxis, geo.mockAxis.c2l(pt.z), 'hover').text;\n  pointData.hovertemplate = pt.hovertemplate;\n  makeHoverInfo(pointData, trace, pt);\n  return [pointData];\n};\n\nfunction makeHoverInfo(pointData, trace, pt) {\n  if (trace.hovertemplate) return;\n  var hoverinfo = pt.hi || trace.hoverinfo;\n  var loc = String(pt.loc);\n  var parts = hoverinfo === 'all' ? attributes.hoverinfo.flags : hoverinfo.split('+');\n  var hasName = parts.indexOf('name') !== -1;\n  var hasLocation = parts.indexOf('location') !== -1;\n  var hasZ = parts.indexOf('z') !== -1;\n  var hasText = parts.indexOf('text') !== -1;\n  var hasIdAsNameLabel = !hasName && hasLocation;\n  var text = [];\n\n  if (hasIdAsNameLabel) {\n    pointData.nameOverride = loc;\n  } else {\n    if (hasName) pointData.nameOverride = trace.name;\n    if (hasLocation) text.push(loc);\n  }\n\n  if (hasZ) {\n    text.push(pointData.zLabel);\n  }\n\n  if (hasText) {\n    fillText(pt, trace, text);\n  }\n\n  pointData.extraText = text.join('<br>');\n}","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/plotly.js/src/traces/choropleth/hover.js"],"names":["Axes","require","attributes","fillText","module","exports","hoverPoints","pointData","xval","yval","cd","trace","geo","subplot","pt","i","j","isInside","xy","altXy","length","_polygons","contains","x0","x1","xa","c2p","ct","y0","y1","ya","index","location","loc","z","zLabel","tickText","mockAxis","c2l","text","hovertemplate","makeHoverInfo","hoverinfo","hi","String","parts","flags","split","hasName","indexOf","hasLocation","hasZ","hasText","hasIdAsNameLabel","nameOverride","name","push","extraText","join"],"mappings":"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","sourcesContent":["'use strict';\n\nvar Axes = require('../../plots/cartesian/axes');\nvar attributes = require('./attributes');\nvar fillText = require('../../lib').fillText;\n\nmodule.exports = function hoverPoints(pointData, xval, yval) {\n    var cd = pointData.cd;\n    var trace = cd[0].trace;\n    var geo = pointData.subplot;\n\n    var pt, i, j, isInside;\n\n    var xy = [xval, yval];\n    var altXy = [xval + 360, yval];\n\n    for(i = 0; i < cd.length; i++) {\n        pt = cd[i];\n        isInside = false;\n\n        if(pt._polygons) {\n            for(j = 0; j < pt._polygons.length; j++) {\n                if(pt._polygons[j].contains(xy)) {\n                    isInside = !isInside;\n                }\n                // for polygons that cross antimeridian as xval is in [-180, 180]\n                if(pt._polygons[j].contains(altXy)) {\n                    isInside = !isInside;\n                }\n            }\n\n            if(isInside) break;\n        }\n    }\n\n    if(!isInside || !pt) return;\n\n    pointData.x0 = pointData.x1 = pointData.xa.c2p(pt.ct);\n    pointData.y0 = pointData.y1 = pointData.ya.c2p(pt.ct);\n\n    pointData.index = pt.index;\n    pointData.location = pt.loc;\n    pointData.z = pt.z;\n    pointData.zLabel = Axes.tickText(geo.mockAxis, geo.mockAxis.c2l(pt.z), 'hover').text;\n    pointData.hovertemplate = pt.hovertemplate;\n\n    makeHoverInfo(pointData, trace, pt);\n\n    return [pointData];\n};\n\nfunction makeHoverInfo(pointData, trace, pt) {\n    if(trace.hovertemplate) return;\n\n    var hoverinfo = pt.hi || trace.hoverinfo;\n    var loc = String(pt.loc);\n\n    var parts = (hoverinfo === 'all') ?\n        attributes.hoverinfo.flags :\n        hoverinfo.split('+');\n\n    var hasName = (parts.indexOf('name') !== -1);\n    var hasLocation = (parts.indexOf('location') !== -1);\n    var hasZ = (parts.indexOf('z') !== -1);\n    var hasText = (parts.indexOf('text') !== -1);\n    var hasIdAsNameLabel = !hasName && hasLocation;\n\n    var text = [];\n\n    if(hasIdAsNameLabel) {\n        pointData.nameOverride = loc;\n    } else {\n        if(hasName) pointData.nameOverride = trace.name;\n        if(hasLocation) text.push(loc);\n    }\n\n    if(hasZ) {\n        text.push(pointData.zLabel);\n    }\n    if(hasText) {\n        fillText(pt, trace, text);\n    }\n\n    pointData.extraText = text.join('<br>');\n}\n"]},"metadata":{},"sourceType":"script"}