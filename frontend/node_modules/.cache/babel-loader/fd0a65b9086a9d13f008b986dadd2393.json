{"ast":null,"code":"'use strict';\n\nvar d3 = require('@plotly/d3');\n\nvar Registry = require('../../registry');\n\nvar Lib = require('../../lib');\n\nvar Plots = require('../plots');\n\nvar Drawing = require('../../components/drawing');\n\nvar getModuleCalcData = require('../get_data').getModuleCalcData;\n\nvar axisIds = require('./axis_ids');\n\nvar constants = require('./constants');\n\nvar xmlnsNamespaces = require('../../constants/xmlns_namespaces');\n\nvar ensureSingle = Lib.ensureSingle;\n\nfunction ensureSingleAndAddDatum(parent, nodeType, className) {\n  return Lib.ensureSingle(parent, nodeType, className, function (s) {\n    s.datum(className);\n  });\n}\n\nexports.name = 'cartesian';\nexports.attr = ['xaxis', 'yaxis'];\nexports.idRoot = ['x', 'y'];\nexports.idRegex = constants.idRegex;\nexports.attrRegex = constants.attrRegex;\nexports.attributes = require('./attributes');\nexports.layoutAttributes = require('./layout_attributes');\nexports.supplyLayoutDefaults = require('./layout_defaults');\nexports.transitionAxes = require('./transition_axes');\n\nexports.finalizeSubplots = function (layoutIn, layoutOut) {\n  var subplots = layoutOut._subplots;\n  var xList = subplots.xaxis;\n  var yList = subplots.yaxis;\n  var spSVG = subplots.cartesian;\n  var spAll = spSVG.concat(subplots.gl2d || []);\n  var allX = {};\n  var allY = {};\n  var i, xi, yi;\n\n  for (i = 0; i < spAll.length; i++) {\n    var parts = spAll[i].split('y');\n    allX[parts[0]] = 1;\n    allY['y' + parts[1]] = 1;\n  } // check for x axes with no subplot, and make one from the anchor of that x axis\n\n\n  for (i = 0; i < xList.length; i++) {\n    xi = xList[i];\n\n    if (!allX[xi]) {\n      yi = (layoutIn[axisIds.id2name(xi)] || {}).anchor;\n      if (!constants.idRegex.y.test(yi)) yi = 'y';\n      spSVG.push(xi + yi);\n      spAll.push(xi + yi);\n\n      if (!allY[yi]) {\n        allY[yi] = 1;\n        Lib.pushUnique(yList, yi);\n      }\n    }\n  } // same for y axes with no subplot\n\n\n  for (i = 0; i < yList.length; i++) {\n    yi = yList[i];\n\n    if (!allY[yi]) {\n      xi = (layoutIn[axisIds.id2name(yi)] || {}).anchor;\n      if (!constants.idRegex.x.test(xi)) xi = 'x';\n      spSVG.push(xi + yi);\n      spAll.push(xi + yi);\n\n      if (!allX[xi]) {\n        allX[xi] = 1;\n        Lib.pushUnique(xList, xi);\n      }\n    }\n  } // finally, if we've gotten here we're supposed to show cartesian...\n  // so if there are NO subplots at all, make one from the first\n  // x & y axes in the input layout\n\n\n  if (!spAll.length) {\n    xi = '';\n    yi = '';\n\n    for (var ki in layoutIn) {\n      if (constants.attrRegex.test(ki)) {\n        var axLetter = ki.charAt(0);\n\n        if (axLetter === 'x') {\n          if (!xi || +ki.substr(5) < +xi.substr(5)) {\n            xi = ki;\n          }\n        } else if (!yi || +ki.substr(5) < +yi.substr(5)) {\n          yi = ki;\n        }\n      }\n    }\n\n    xi = xi ? axisIds.name2id(xi) : 'x';\n    yi = yi ? axisIds.name2id(yi) : 'y';\n    xList.push(xi);\n    yList.push(yi);\n    spSVG.push(xi + yi);\n  }\n};\n/**\n * Cartesian.plot\n *\n * @param {DOM div | object} gd\n * @param {array (optional)} traces\n *  array of traces indices to plot\n *  if undefined, plots all cartesian traces,\n * @param {object} (optional) transitionOpts\n *  transition option object\n * @param {function} (optional) makeOnCompleteCallback\n *  transition make callback function from Plots.transition\n */\n\n\nexports.plot = function (gd, traces, transitionOpts, makeOnCompleteCallback) {\n  var fullLayout = gd._fullLayout;\n  var subplots = fullLayout._subplots.cartesian;\n  var calcdata = gd.calcdata;\n  var i;\n\n  if (!Array.isArray(traces)) {\n    // If traces is not provided, then it's a complete replot and missing\n    // traces are removed\n    traces = [];\n\n    for (i = 0; i < calcdata.length; i++) traces.push(i);\n  }\n\n  for (i = 0; i < subplots.length; i++) {\n    var subplot = subplots[i];\n    var subplotInfo = fullLayout._plots[subplot]; // Get all calcdata for this subplot:\n\n    var cdSubplot = [];\n    var pcd;\n\n    for (var j = 0; j < calcdata.length; j++) {\n      var cd = calcdata[j];\n      var trace = cd[0].trace; // Skip trace if whitelist provided and it's not whitelisted:\n      // if (Array.isArray(traces) && traces.indexOf(i) === -1) continue;\n\n      if (trace.xaxis + trace.yaxis === subplot) {\n        // XXX: Should trace carpet dependencies. Only replot all carpet plots if the carpet\n        // axis has actually changed:\n        //\n        // If this trace is specifically requested, add it to the list:\n        if (traces.indexOf(trace.index) !== -1 || trace.carpet) {\n          // Okay, so example: traces 0, 1, and 2 have fill = tonext. You animate\n          // traces 0 and 2. Trace 1 also needs to be updated, otherwise its fill\n          // is outdated. So this retroactively adds the previous trace if the\n          // traces are interdependent.\n          if (pcd && pcd[0].trace.xaxis + pcd[0].trace.yaxis === subplot && ['tonextx', 'tonexty', 'tonext'].indexOf(trace.fill) !== -1 && cdSubplot.indexOf(pcd) === -1) {\n            cdSubplot.push(pcd);\n          }\n\n          cdSubplot.push(cd);\n        } // Track the previous trace on this subplot for the retroactive-add step\n        // above:\n\n\n        pcd = cd;\n      }\n    }\n\n    plotOne(gd, subplotInfo, cdSubplot, transitionOpts, makeOnCompleteCallback);\n  }\n};\n\nfunction plotOne(gd, plotinfo, cdSubplot, transitionOpts, makeOnCompleteCallback) {\n  var traceLayerClasses = constants.traceLayerClasses;\n  var fullLayout = gd._fullLayout;\n  var modules = fullLayout._modules;\n\n  var _module, cdModuleAndOthers, cdModule;\n\n  var layerData = [];\n  var zoomScaleQueryParts = [];\n\n  for (var i = 0; i < modules.length; i++) {\n    _module = modules[i];\n    var name = _module.name;\n    var categories = Registry.modules[name].categories;\n\n    if (categories.svg) {\n      var className = _module.layerName || name + 'layer';\n      var plotMethod = _module.plot; // plot all visible traces of this type on this subplot at once\n\n      cdModuleAndOthers = getModuleCalcData(cdSubplot, plotMethod);\n      cdModule = cdModuleAndOthers[0]; // don't need to search the found traces again - in fact we need to NOT\n      // so that if two modules share the same plotter we don't double-plot\n\n      cdSubplot = cdModuleAndOthers[1];\n\n      if (cdModule.length) {\n        layerData.push({\n          i: traceLayerClasses.indexOf(className),\n          className: className,\n          plotMethod: plotMethod,\n          cdModule: cdModule\n        });\n      }\n\n      if (categories.zoomScale) {\n        zoomScaleQueryParts.push('.' + className);\n      }\n    }\n  }\n\n  layerData.sort(function (a, b) {\n    return a.i - b.i;\n  });\n  var layers = plotinfo.plot.selectAll('g.mlayer').data(layerData, function (d) {\n    return d.className;\n  });\n  layers.enter().append('g').attr('class', function (d) {\n    return d.className;\n  }).classed('mlayer', true).classed('rangeplot', plotinfo.isRangePlot);\n  layers.exit().remove();\n  layers.order();\n  layers.each(function (d) {\n    var sel = d3.select(this);\n    var className = d.className;\n    d.plotMethod(gd, plotinfo, d.cdModule, sel, transitionOpts, makeOnCompleteCallback); // layers that allow `cliponaxis: false`\n\n    if (constants.clipOnAxisFalseQuery.indexOf('.' + className) === -1) {\n      Drawing.setClipUrl(sel, plotinfo.layerClipId, gd);\n    }\n  }); // call Scattergl.plot separately\n\n  if (fullLayout._has('scattergl')) {\n    _module = Registry.getModule('scattergl');\n    cdModule = getModuleCalcData(cdSubplot, _module)[0];\n\n    _module.plot(gd, plotinfo, cdModule);\n  } // stash \"hot\" selections for faster interaction on drag and scroll\n\n\n  if (!gd._context.staticPlot) {\n    if (plotinfo._hasClipOnAxisFalse) {\n      plotinfo.clipOnAxisFalseTraces = plotinfo.plot.selectAll(constants.clipOnAxisFalseQuery.join(',')).selectAll('.trace');\n    }\n\n    if (zoomScaleQueryParts.length) {\n      var traces = plotinfo.plot.selectAll(zoomScaleQueryParts.join(',')).selectAll('.trace');\n      plotinfo.zoomScalePts = traces.selectAll('path.point');\n      plotinfo.zoomScaleTxt = traces.selectAll('.textpoint');\n    }\n  }\n}\n\nexports.clean = function (newFullData, newFullLayout, oldFullData, oldFullLayout) {\n  var oldPlots = oldFullLayout._plots || {};\n  var newPlots = newFullLayout._plots || {};\n  var oldSubplotList = oldFullLayout._subplots || {};\n  var plotinfo;\n  var i, k; // when going from a large splom graph to something else,\n  // we need to clear <g subplot> so that the new cartesian subplot\n  // can have the correct layer ordering\n\n  if (oldFullLayout._hasOnlyLargeSploms && !newFullLayout._hasOnlyLargeSploms) {\n    for (k in oldPlots) {\n      plotinfo = oldPlots[k];\n      if (plotinfo.plotgroup) plotinfo.plotgroup.remove();\n    }\n  }\n\n  var hadGl = oldFullLayout._has && oldFullLayout._has('gl');\n\n  var hasGl = newFullLayout._has && newFullLayout._has('gl');\n\n  if (hadGl && !hasGl) {\n    for (k in oldPlots) {\n      plotinfo = oldPlots[k];\n      if (plotinfo._scene) plotinfo._scene.destroy();\n    }\n  } // delete any titles we don't need anymore\n  // check if axis list has changed, and if so clear old titles\n\n\n  if (oldSubplotList.xaxis && oldSubplotList.yaxis) {\n    var oldAxIDs = axisIds.listIds({\n      _fullLayout: oldFullLayout\n    });\n\n    for (i = 0; i < oldAxIDs.length; i++) {\n      var oldAxId = oldAxIDs[i];\n\n      if (!newFullLayout[axisIds.id2name(oldAxId)]) {\n        oldFullLayout._infolayer.selectAll('.g-' + oldAxId + 'title').remove();\n      }\n    }\n  }\n\n  var hadCartesian = oldFullLayout._has && oldFullLayout._has('cartesian');\n\n  var hasCartesian = newFullLayout._has && newFullLayout._has('cartesian');\n\n  if (hadCartesian && !hasCartesian) {\n    // if we've gotten rid of all cartesian traces, remove all the subplot svg items\n    purgeSubplotLayers(oldFullLayout._cartesianlayer.selectAll('.subplot'), oldFullLayout);\n\n    oldFullLayout._defs.selectAll('.axesclip').remove();\n\n    delete oldFullLayout._axisConstraintGroups;\n    delete oldFullLayout._axisMatchGroups;\n  } else if (oldSubplotList.cartesian) {\n    // otherwise look for subplots we need to remove\n    for (i = 0; i < oldSubplotList.cartesian.length; i++) {\n      var oldSubplotId = oldSubplotList.cartesian[i];\n\n      if (!newPlots[oldSubplotId]) {\n        var selector = '.' + oldSubplotId + ',.' + oldSubplotId + '-x,.' + oldSubplotId + '-y';\n\n        oldFullLayout._cartesianlayer.selectAll(selector).remove();\n\n        removeSubplotExtras(oldSubplotId, oldFullLayout);\n      }\n    }\n  }\n};\n\nexports.drawFramework = function (gd) {\n  var fullLayout = gd._fullLayout;\n  var subplotData = makeSubplotData(gd);\n\n  var subplotLayers = fullLayout._cartesianlayer.selectAll('.subplot').data(subplotData, String);\n\n  subplotLayers.enter().append('g').attr('class', function (d) {\n    return 'subplot ' + d[0];\n  });\n  subplotLayers.order();\n  subplotLayers.exit().call(purgeSubplotLayers, fullLayout);\n  subplotLayers.each(function (d) {\n    var id = d[0];\n    var plotinfo = fullLayout._plots[id];\n    plotinfo.plotgroup = d3.select(this);\n    makeSubplotLayer(gd, plotinfo); // make separate drag layers for each subplot,\n    // but append them to paper rather than the plot groups,\n    // so they end up on top of the rest\n\n    plotinfo.draglayer = ensureSingle(fullLayout._draggers, 'g', id);\n  });\n};\n\nexports.rangePlot = function (gd, plotinfo, cdSubplot) {\n  makeSubplotLayer(gd, plotinfo);\n  plotOne(gd, plotinfo, cdSubplot);\n  Plots.style(gd);\n};\n\nfunction makeSubplotData(gd) {\n  var fullLayout = gd._fullLayout;\n  var ids = fullLayout._subplots.cartesian;\n  var len = ids.length;\n  var i, j, id, plotinfo, xa, ya; // split 'regular' and 'overlaying' subplots\n\n  var regulars = [];\n  var overlays = [];\n\n  for (i = 0; i < len; i++) {\n    id = ids[i];\n    plotinfo = fullLayout._plots[id];\n    xa = plotinfo.xaxis;\n    ya = plotinfo.yaxis;\n    var xa2 = xa._mainAxis;\n    var ya2 = ya._mainAxis;\n    var mainplot = xa2._id + ya2._id;\n    var mainplotinfo = fullLayout._plots[mainplot];\n    plotinfo.overlays = [];\n\n    if (mainplot !== id && mainplotinfo) {\n      plotinfo.mainplot = mainplot;\n      plotinfo.mainplotinfo = mainplotinfo;\n      overlays.push(id);\n    } else {\n      plotinfo.mainplot = undefined;\n      plotinfo.mainplotinfo = undefined;\n      regulars.push(id);\n    }\n  } // fill in list of overlaying subplots in 'main plot'\n\n\n  for (i = 0; i < overlays.length; i++) {\n    id = overlays[i];\n    plotinfo = fullLayout._plots[id];\n    plotinfo.mainplotinfo.overlays.push(plotinfo);\n  } // put 'regular' subplot data before 'overlaying'\n\n\n  var subplotIds = regulars.concat(overlays);\n  var subplotData = new Array(len);\n\n  for (i = 0; i < len; i++) {\n    id = subplotIds[i];\n    plotinfo = fullLayout._plots[id];\n    xa = plotinfo.xaxis;\n    ya = plotinfo.yaxis; // use info about axis layer and overlaying pattern\n    // to clean what need to be cleaned up in exit selection\n\n    var d = [id, xa.layer, ya.layer, xa.overlaying || '', ya.overlaying || ''];\n\n    for (j = 0; j < plotinfo.overlays.length; j++) {\n      d.push(plotinfo.overlays[j].id);\n    }\n\n    subplotData[i] = d;\n  }\n\n  return subplotData;\n}\n\nfunction makeSubplotLayer(gd, plotinfo) {\n  var plotgroup = plotinfo.plotgroup;\n  var id = plotinfo.id;\n  var xLayer = constants.layerValue2layerClass[plotinfo.xaxis.layer];\n  var yLayer = constants.layerValue2layerClass[plotinfo.yaxis.layer];\n  var hasOnlyLargeSploms = gd._fullLayout._hasOnlyLargeSploms;\n\n  if (!plotinfo.mainplot) {\n    if (hasOnlyLargeSploms) {\n      // TODO could do even better\n      // - we don't need plot (but we would have to mock it in lsInner\n      //   and other places\n      // - we don't (x|y)lines and (x|y)axislayer for most subplots\n      //   usually just the bottom x and left y axes.\n      plotinfo.xlines = ensureSingle(plotgroup, 'path', 'xlines-above');\n      plotinfo.ylines = ensureSingle(plotgroup, 'path', 'ylines-above');\n      plotinfo.xaxislayer = ensureSingle(plotgroup, 'g', 'xaxislayer-above');\n      plotinfo.yaxislayer = ensureSingle(plotgroup, 'g', 'yaxislayer-above');\n    } else {\n      var backLayer = ensureSingle(plotgroup, 'g', 'layer-subplot');\n      plotinfo.shapelayer = ensureSingle(backLayer, 'g', 'shapelayer');\n      plotinfo.imagelayer = ensureSingle(backLayer, 'g', 'imagelayer');\n      plotinfo.gridlayer = ensureSingle(plotgroup, 'g', 'gridlayer');\n      plotinfo.zerolinelayer = ensureSingle(plotgroup, 'g', 'zerolinelayer');\n      ensureSingle(plotgroup, 'path', 'xlines-below');\n      ensureSingle(plotgroup, 'path', 'ylines-below');\n      plotinfo.overlinesBelow = ensureSingle(plotgroup, 'g', 'overlines-below');\n      ensureSingle(plotgroup, 'g', 'xaxislayer-below');\n      ensureSingle(plotgroup, 'g', 'yaxislayer-below');\n      plotinfo.overaxesBelow = ensureSingle(plotgroup, 'g', 'overaxes-below');\n      plotinfo.plot = ensureSingle(plotgroup, 'g', 'plot');\n      plotinfo.overplot = ensureSingle(plotgroup, 'g', 'overplot');\n      plotinfo.xlines = ensureSingle(plotgroup, 'path', 'xlines-above');\n      plotinfo.ylines = ensureSingle(plotgroup, 'path', 'ylines-above');\n      plotinfo.overlinesAbove = ensureSingle(plotgroup, 'g', 'overlines-above');\n      ensureSingle(plotgroup, 'g', 'xaxislayer-above');\n      ensureSingle(plotgroup, 'g', 'yaxislayer-above');\n      plotinfo.overaxesAbove = ensureSingle(plotgroup, 'g', 'overaxes-above'); // set refs to correct layers as determined by 'axis.layer'\n\n      plotinfo.xlines = plotgroup.select('.xlines-' + xLayer);\n      plotinfo.ylines = plotgroup.select('.ylines-' + yLayer);\n      plotinfo.xaxislayer = plotgroup.select('.xaxislayer-' + xLayer);\n      plotinfo.yaxislayer = plotgroup.select('.yaxislayer-' + yLayer);\n    }\n  } else {\n    var mainplotinfo = plotinfo.mainplotinfo;\n    var mainplotgroup = mainplotinfo.plotgroup;\n    var xId = id + '-x';\n    var yId = id + '-y'; // now make the components of overlaid subplots\n    // overlays don't have backgrounds, and append all\n    // their other components to the corresponding\n    // extra groups of their main plots.\n\n    plotinfo.gridlayer = mainplotinfo.gridlayer;\n    plotinfo.zerolinelayer = mainplotinfo.zerolinelayer;\n    ensureSingle(mainplotinfo.overlinesBelow, 'path', xId);\n    ensureSingle(mainplotinfo.overlinesBelow, 'path', yId);\n    ensureSingle(mainplotinfo.overaxesBelow, 'g', xId);\n    ensureSingle(mainplotinfo.overaxesBelow, 'g', yId);\n    plotinfo.plot = ensureSingle(mainplotinfo.overplot, 'g', id);\n    ensureSingle(mainplotinfo.overlinesAbove, 'path', xId);\n    ensureSingle(mainplotinfo.overlinesAbove, 'path', yId);\n    ensureSingle(mainplotinfo.overaxesAbove, 'g', xId);\n    ensureSingle(mainplotinfo.overaxesAbove, 'g', yId); // set refs to correct layers as determined by 'abovetraces'\n\n    plotinfo.xlines = mainplotgroup.select('.overlines-' + xLayer).select('.' + xId);\n    plotinfo.ylines = mainplotgroup.select('.overlines-' + yLayer).select('.' + yId);\n    plotinfo.xaxislayer = mainplotgroup.select('.overaxes-' + xLayer).select('.' + xId);\n    plotinfo.yaxislayer = mainplotgroup.select('.overaxes-' + yLayer).select('.' + yId);\n  } // common attributes for all subplots, overlays or not\n\n\n  if (!hasOnlyLargeSploms) {\n    ensureSingleAndAddDatum(plotinfo.gridlayer, 'g', plotinfo.xaxis._id);\n    ensureSingleAndAddDatum(plotinfo.gridlayer, 'g', plotinfo.yaxis._id);\n    plotinfo.gridlayer.selectAll('g').map(function (d) {\n      return d[0];\n    }).sort(axisIds.idSort);\n  }\n\n  plotinfo.xlines.style('fill', 'none').classed('crisp', true);\n  plotinfo.ylines.style('fill', 'none').classed('crisp', true);\n}\n\nfunction purgeSubplotLayers(layers, fullLayout) {\n  if (!layers) return;\n  var overlayIdsToRemove = {};\n  layers.each(function (d) {\n    var id = d[0];\n    var plotgroup = d3.select(this);\n    plotgroup.remove();\n    removeSubplotExtras(id, fullLayout);\n    overlayIdsToRemove[id] = true; // do not remove individual axis <clipPath>s here\n    // as other subplots may need them\n  }); // must remove overlaid subplot trace layers 'manually'\n\n  for (var k in fullLayout._plots) {\n    var subplotInfo = fullLayout._plots[k];\n    var overlays = subplotInfo.overlays || [];\n\n    for (var j = 0; j < overlays.length; j++) {\n      var overlayInfo = overlays[j];\n\n      if (overlayIdsToRemove[overlayInfo.id]) {\n        overlayInfo.plot.selectAll('.trace').remove();\n      }\n    }\n  }\n}\n\nfunction removeSubplotExtras(subplotId, fullLayout) {\n  fullLayout._draggers.selectAll('g.' + subplotId).remove();\n\n  fullLayout._defs.select('#clip' + fullLayout._uid + subplotId + 'plot').remove();\n}\n\nexports.toSVG = function (gd) {\n  var imageRoot = gd._fullLayout._glimages;\n  var root = d3.select(gd).selectAll('.svg-container');\n  var canvases = root.filter(function (d, i) {\n    return i === root.size() - 1;\n  }).selectAll('.gl-canvas-context, .gl-canvas-focus');\n\n  function canvasToImage() {\n    var canvas = this;\n    var imageData = canvas.toDataURL('image/png');\n    var image = imageRoot.append('svg:image');\n    image.attr({\n      xmlns: xmlnsNamespaces.svg,\n      'xlink:href': imageData,\n      preserveAspectRatio: 'none',\n      x: 0,\n      y: 0,\n      width: canvas.style.width,\n      height: canvas.style.height\n    });\n  }\n\n  canvases.each(canvasToImage);\n};\n\nexports.updateFx = require('./graph_interact').updateFx;","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/plotly.js/src/plots/cartesian/index.js"],"names":["d3","require","Registry","Lib","Plots","Drawing","getModuleCalcData","axisIds","constants","xmlnsNamespaces","ensureSingle","ensureSingleAndAddDatum","parent","nodeType","className","s","datum","exports","name","attr","idRoot","idRegex","attrRegex","attributes","layoutAttributes","supplyLayoutDefaults","transitionAxes","finalizeSubplots","layoutIn","layoutOut","subplots","_subplots","xList","xaxis","yList","yaxis","spSVG","cartesian","spAll","concat","gl2d","allX","allY","i","xi","yi","length","parts","split","id2name","anchor","y","test","push","pushUnique","x","ki","axLetter","charAt","substr","name2id","plot","gd","traces","transitionOpts","makeOnCompleteCallback","fullLayout","_fullLayout","calcdata","Array","isArray","subplot","subplotInfo","_plots","cdSubplot","pcd","j","cd","trace","indexOf","index","carpet","fill","plotOne","plotinfo","traceLayerClasses","modules","_modules","_module","cdModuleAndOthers","cdModule","layerData","zoomScaleQueryParts","categories","svg","layerName","plotMethod","zoomScale","sort","a","b","layers","selectAll","data","d","enter","append","classed","isRangePlot","exit","remove","order","each","sel","select","clipOnAxisFalseQuery","setClipUrl","layerClipId","_has","getModule","_context","staticPlot","_hasClipOnAxisFalse","clipOnAxisFalseTraces","join","zoomScalePts","zoomScaleTxt","clean","newFullData","newFullLayout","oldFullData","oldFullLayout","oldPlots","newPlots","oldSubplotList","k","_hasOnlyLargeSploms","plotgroup","hadGl","hasGl","_scene","destroy","oldAxIDs","listIds","oldAxId","_infolayer","hadCartesian","hasCartesian","purgeSubplotLayers","_cartesianlayer","_defs","_axisConstraintGroups","_axisMatchGroups","oldSubplotId","selector","removeSubplotExtras","drawFramework","subplotData","makeSubplotData","subplotLayers","String","call","id","makeSubplotLayer","draglayer","_draggers","rangePlot","style","ids","len","xa","ya","regulars","overlays","xa2","_mainAxis","ya2","mainplot","_id","mainplotinfo","undefined","subplotIds","layer","overlaying","xLayer","layerValue2layerClass","yLayer","hasOnlyLargeSploms","xlines","ylines","xaxislayer","yaxislayer","backLayer","shapelayer","imagelayer","gridlayer","zerolinelayer","overlinesBelow","overaxesBelow","overplot","overlinesAbove","overaxesAbove","mainplotgroup","xId","yId","map","idSort","overlayIdsToRemove","overlayInfo","subplotId","_uid","toSVG","imageRoot","_glimages","root","canvases","filter","size","canvasToImage","canvas","imageData","toDataURL","image","xmlns","preserveAspectRatio","width","height","updateFx"],"mappings":"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","sourcesContent":["'use strict';\n\nvar d3 = require('@plotly/d3');\n\nvar Registry = require('../../registry');\nvar Lib = require('../../lib');\nvar Plots = require('../plots');\nvar Drawing = require('../../components/drawing');\n\nvar getModuleCalcData = require('../get_data').getModuleCalcData;\nvar axisIds = require('./axis_ids');\nvar constants = require('./constants');\nvar xmlnsNamespaces = require('../../constants/xmlns_namespaces');\n\nvar ensureSingle = Lib.ensureSingle;\n\nfunction ensureSingleAndAddDatum(parent, nodeType, className) {\n    return Lib.ensureSingle(parent, nodeType, className, function(s) {\n        s.datum(className);\n    });\n}\n\nexports.name = 'cartesian';\n\nexports.attr = ['xaxis', 'yaxis'];\n\nexports.idRoot = ['x', 'y'];\n\nexports.idRegex = constants.idRegex;\n\nexports.attrRegex = constants.attrRegex;\n\nexports.attributes = require('./attributes');\n\nexports.layoutAttributes = require('./layout_attributes');\n\nexports.supplyLayoutDefaults = require('./layout_defaults');\n\nexports.transitionAxes = require('./transition_axes');\n\nexports.finalizeSubplots = function(layoutIn, layoutOut) {\n    var subplots = layoutOut._subplots;\n    var xList = subplots.xaxis;\n    var yList = subplots.yaxis;\n    var spSVG = subplots.cartesian;\n    var spAll = spSVG.concat(subplots.gl2d || []);\n    var allX = {};\n    var allY = {};\n    var i, xi, yi;\n\n    for(i = 0; i < spAll.length; i++) {\n        var parts = spAll[i].split('y');\n        allX[parts[0]] = 1;\n        allY['y' + parts[1]] = 1;\n    }\n\n    // check for x axes with no subplot, and make one from the anchor of that x axis\n    for(i = 0; i < xList.length; i++) {\n        xi = xList[i];\n        if(!allX[xi]) {\n            yi = (layoutIn[axisIds.id2name(xi)] || {}).anchor;\n            if(!constants.idRegex.y.test(yi)) yi = 'y';\n            spSVG.push(xi + yi);\n            spAll.push(xi + yi);\n\n            if(!allY[yi]) {\n                allY[yi] = 1;\n                Lib.pushUnique(yList, yi);\n            }\n        }\n    }\n\n    // same for y axes with no subplot\n    for(i = 0; i < yList.length; i++) {\n        yi = yList[i];\n        if(!allY[yi]) {\n            xi = (layoutIn[axisIds.id2name(yi)] || {}).anchor;\n            if(!constants.idRegex.x.test(xi)) xi = 'x';\n            spSVG.push(xi + yi);\n            spAll.push(xi + yi);\n\n            if(!allX[xi]) {\n                allX[xi] = 1;\n                Lib.pushUnique(xList, xi);\n            }\n        }\n    }\n\n    // finally, if we've gotten here we're supposed to show cartesian...\n    // so if there are NO subplots at all, make one from the first\n    // x & y axes in the input layout\n    if(!spAll.length) {\n        xi = '';\n        yi = '';\n        for(var ki in layoutIn) {\n            if(constants.attrRegex.test(ki)) {\n                var axLetter = ki.charAt(0);\n                if(axLetter === 'x') {\n                    if(!xi || (+ki.substr(5) < +xi.substr(5))) {\n                        xi = ki;\n                    }\n                } else if(!yi || (+ki.substr(5) < +yi.substr(5))) {\n                    yi = ki;\n                }\n            }\n        }\n        xi = xi ? axisIds.name2id(xi) : 'x';\n        yi = yi ? axisIds.name2id(yi) : 'y';\n        xList.push(xi);\n        yList.push(yi);\n        spSVG.push(xi + yi);\n    }\n};\n\n/**\n * Cartesian.plot\n *\n * @param {DOM div | object} gd\n * @param {array (optional)} traces\n *  array of traces indices to plot\n *  if undefined, plots all cartesian traces,\n * @param {object} (optional) transitionOpts\n *  transition option object\n * @param {function} (optional) makeOnCompleteCallback\n *  transition make callback function from Plots.transition\n */\nexports.plot = function(gd, traces, transitionOpts, makeOnCompleteCallback) {\n    var fullLayout = gd._fullLayout;\n    var subplots = fullLayout._subplots.cartesian;\n    var calcdata = gd.calcdata;\n    var i;\n\n    if(!Array.isArray(traces)) {\n        // If traces is not provided, then it's a complete replot and missing\n        // traces are removed\n        traces = [];\n        for(i = 0; i < calcdata.length; i++) traces.push(i);\n    }\n\n    for(i = 0; i < subplots.length; i++) {\n        var subplot = subplots[i];\n        var subplotInfo = fullLayout._plots[subplot];\n\n        // Get all calcdata for this subplot:\n        var cdSubplot = [];\n        var pcd;\n\n        for(var j = 0; j < calcdata.length; j++) {\n            var cd = calcdata[j];\n            var trace = cd[0].trace;\n\n            // Skip trace if whitelist provided and it's not whitelisted:\n            // if (Array.isArray(traces) && traces.indexOf(i) === -1) continue;\n            if(trace.xaxis + trace.yaxis === subplot) {\n                // XXX: Should trace carpet dependencies. Only replot all carpet plots if the carpet\n                // axis has actually changed:\n                //\n                // If this trace is specifically requested, add it to the list:\n                if(traces.indexOf(trace.index) !== -1 || trace.carpet) {\n                    // Okay, so example: traces 0, 1, and 2 have fill = tonext. You animate\n                    // traces 0 and 2. Trace 1 also needs to be updated, otherwise its fill\n                    // is outdated. So this retroactively adds the previous trace if the\n                    // traces are interdependent.\n                    if(\n                        pcd &&\n                        pcd[0].trace.xaxis + pcd[0].trace.yaxis === subplot &&\n                        ['tonextx', 'tonexty', 'tonext'].indexOf(trace.fill) !== -1 &&\n                        cdSubplot.indexOf(pcd) === -1\n                    ) {\n                        cdSubplot.push(pcd);\n                    }\n\n                    cdSubplot.push(cd);\n                }\n\n                // Track the previous trace on this subplot for the retroactive-add step\n                // above:\n                pcd = cd;\n            }\n        }\n\n        plotOne(gd, subplotInfo, cdSubplot, transitionOpts, makeOnCompleteCallback);\n    }\n};\n\nfunction plotOne(gd, plotinfo, cdSubplot, transitionOpts, makeOnCompleteCallback) {\n    var traceLayerClasses = constants.traceLayerClasses;\n    var fullLayout = gd._fullLayout;\n    var modules = fullLayout._modules;\n    var _module, cdModuleAndOthers, cdModule;\n\n    var layerData = [];\n    var zoomScaleQueryParts = [];\n\n    for(var i = 0; i < modules.length; i++) {\n        _module = modules[i];\n        var name = _module.name;\n        var categories = Registry.modules[name].categories;\n\n        if(categories.svg) {\n            var className = (_module.layerName || name + 'layer');\n            var plotMethod = _module.plot;\n\n            // plot all visible traces of this type on this subplot at once\n            cdModuleAndOthers = getModuleCalcData(cdSubplot, plotMethod);\n            cdModule = cdModuleAndOthers[0];\n            // don't need to search the found traces again - in fact we need to NOT\n            // so that if two modules share the same plotter we don't double-plot\n            cdSubplot = cdModuleAndOthers[1];\n\n            if(cdModule.length) {\n                layerData.push({\n                    i: traceLayerClasses.indexOf(className),\n                    className: className,\n                    plotMethod: plotMethod,\n                    cdModule: cdModule\n                });\n            }\n\n            if(categories.zoomScale) {\n                zoomScaleQueryParts.push('.' + className);\n            }\n        }\n    }\n\n    layerData.sort(function(a, b) { return a.i - b.i; });\n\n    var layers = plotinfo.plot.selectAll('g.mlayer')\n        .data(layerData, function(d) { return d.className; });\n\n    layers.enter().append('g')\n        .attr('class', function(d) { return d.className; })\n        .classed('mlayer', true)\n        .classed('rangeplot', plotinfo.isRangePlot);\n\n    layers.exit().remove();\n\n    layers.order();\n\n    layers.each(function(d) {\n        var sel = d3.select(this);\n        var className = d.className;\n\n        d.plotMethod(\n            gd, plotinfo, d.cdModule, sel,\n            transitionOpts, makeOnCompleteCallback\n        );\n\n        // layers that allow `cliponaxis: false`\n        if(constants.clipOnAxisFalseQuery.indexOf('.' + className) === -1) {\n            Drawing.setClipUrl(sel, plotinfo.layerClipId, gd);\n        }\n    });\n\n    // call Scattergl.plot separately\n    if(fullLayout._has('scattergl')) {\n        _module = Registry.getModule('scattergl');\n        cdModule = getModuleCalcData(cdSubplot, _module)[0];\n        _module.plot(gd, plotinfo, cdModule);\n    }\n\n    // stash \"hot\" selections for faster interaction on drag and scroll\n    if(!gd._context.staticPlot) {\n        if(plotinfo._hasClipOnAxisFalse) {\n            plotinfo.clipOnAxisFalseTraces = plotinfo.plot\n                .selectAll(constants.clipOnAxisFalseQuery.join(','))\n                .selectAll('.trace');\n        }\n\n        if(zoomScaleQueryParts.length) {\n            var traces = plotinfo.plot\n                .selectAll(zoomScaleQueryParts.join(','))\n                .selectAll('.trace');\n\n            plotinfo.zoomScalePts = traces.selectAll('path.point');\n            plotinfo.zoomScaleTxt = traces.selectAll('.textpoint');\n        }\n    }\n}\n\nexports.clean = function(newFullData, newFullLayout, oldFullData, oldFullLayout) {\n    var oldPlots = oldFullLayout._plots || {};\n    var newPlots = newFullLayout._plots || {};\n    var oldSubplotList = oldFullLayout._subplots || {};\n    var plotinfo;\n    var i, k;\n\n    // when going from a large splom graph to something else,\n    // we need to clear <g subplot> so that the new cartesian subplot\n    // can have the correct layer ordering\n    if(oldFullLayout._hasOnlyLargeSploms && !newFullLayout._hasOnlyLargeSploms) {\n        for(k in oldPlots) {\n            plotinfo = oldPlots[k];\n            if(plotinfo.plotgroup) plotinfo.plotgroup.remove();\n        }\n    }\n\n    var hadGl = (oldFullLayout._has && oldFullLayout._has('gl'));\n    var hasGl = (newFullLayout._has && newFullLayout._has('gl'));\n\n    if(hadGl && !hasGl) {\n        for(k in oldPlots) {\n            plotinfo = oldPlots[k];\n            if(plotinfo._scene) plotinfo._scene.destroy();\n        }\n    }\n\n    // delete any titles we don't need anymore\n    // check if axis list has changed, and if so clear old titles\n    if(oldSubplotList.xaxis && oldSubplotList.yaxis) {\n        var oldAxIDs = axisIds.listIds({_fullLayout: oldFullLayout});\n        for(i = 0; i < oldAxIDs.length; i++) {\n            var oldAxId = oldAxIDs[i];\n            if(!newFullLayout[axisIds.id2name(oldAxId)]) {\n                oldFullLayout._infolayer.selectAll('.g-' + oldAxId + 'title').remove();\n            }\n        }\n    }\n\n    var hadCartesian = (oldFullLayout._has && oldFullLayout._has('cartesian'));\n    var hasCartesian = (newFullLayout._has && newFullLayout._has('cartesian'));\n\n    if(hadCartesian && !hasCartesian) {\n        // if we've gotten rid of all cartesian traces, remove all the subplot svg items\n\n        purgeSubplotLayers(oldFullLayout._cartesianlayer.selectAll('.subplot'), oldFullLayout);\n        oldFullLayout._defs.selectAll('.axesclip').remove();\n        delete oldFullLayout._axisConstraintGroups;\n        delete oldFullLayout._axisMatchGroups;\n    } else if(oldSubplotList.cartesian) {\n        // otherwise look for subplots we need to remove\n\n        for(i = 0; i < oldSubplotList.cartesian.length; i++) {\n            var oldSubplotId = oldSubplotList.cartesian[i];\n            if(!newPlots[oldSubplotId]) {\n                var selector = '.' + oldSubplotId + ',.' + oldSubplotId + '-x,.' + oldSubplotId + '-y';\n                oldFullLayout._cartesianlayer.selectAll(selector).remove();\n                removeSubplotExtras(oldSubplotId, oldFullLayout);\n            }\n        }\n    }\n};\n\nexports.drawFramework = function(gd) {\n    var fullLayout = gd._fullLayout;\n    var subplotData = makeSubplotData(gd);\n\n    var subplotLayers = fullLayout._cartesianlayer.selectAll('.subplot')\n        .data(subplotData, String);\n\n    subplotLayers.enter().append('g')\n        .attr('class', function(d) { return 'subplot ' + d[0]; });\n\n    subplotLayers.order();\n\n    subplotLayers.exit()\n        .call(purgeSubplotLayers, fullLayout);\n\n    subplotLayers.each(function(d) {\n        var id = d[0];\n        var plotinfo = fullLayout._plots[id];\n\n        plotinfo.plotgroup = d3.select(this);\n        makeSubplotLayer(gd, plotinfo);\n\n        // make separate drag layers for each subplot,\n        // but append them to paper rather than the plot groups,\n        // so they end up on top of the rest\n        plotinfo.draglayer = ensureSingle(fullLayout._draggers, 'g', id);\n    });\n};\n\nexports.rangePlot = function(gd, plotinfo, cdSubplot) {\n    makeSubplotLayer(gd, plotinfo);\n    plotOne(gd, plotinfo, cdSubplot);\n    Plots.style(gd);\n};\n\nfunction makeSubplotData(gd) {\n    var fullLayout = gd._fullLayout;\n    var ids = fullLayout._subplots.cartesian;\n    var len = ids.length;\n    var i, j, id, plotinfo, xa, ya;\n\n    // split 'regular' and 'overlaying' subplots\n    var regulars = [];\n    var overlays = [];\n\n    for(i = 0; i < len; i++) {\n        id = ids[i];\n        plotinfo = fullLayout._plots[id];\n        xa = plotinfo.xaxis;\n        ya = plotinfo.yaxis;\n\n        var xa2 = xa._mainAxis;\n        var ya2 = ya._mainAxis;\n        var mainplot = xa2._id + ya2._id;\n        var mainplotinfo = fullLayout._plots[mainplot];\n        plotinfo.overlays = [];\n\n        if(mainplot !== id && mainplotinfo) {\n            plotinfo.mainplot = mainplot;\n            plotinfo.mainplotinfo = mainplotinfo;\n            overlays.push(id);\n        } else {\n            plotinfo.mainplot = undefined;\n            plotinfo.mainplotinfo = undefined;\n            regulars.push(id);\n        }\n    }\n\n    // fill in list of overlaying subplots in 'main plot'\n    for(i = 0; i < overlays.length; i++) {\n        id = overlays[i];\n        plotinfo = fullLayout._plots[id];\n        plotinfo.mainplotinfo.overlays.push(plotinfo);\n    }\n\n    // put 'regular' subplot data before 'overlaying'\n    var subplotIds = regulars.concat(overlays);\n    var subplotData = new Array(len);\n\n    for(i = 0; i < len; i++) {\n        id = subplotIds[i];\n        plotinfo = fullLayout._plots[id];\n        xa = plotinfo.xaxis;\n        ya = plotinfo.yaxis;\n\n        // use info about axis layer and overlaying pattern\n        // to clean what need to be cleaned up in exit selection\n        var d = [id, xa.layer, ya.layer, xa.overlaying || '', ya.overlaying || ''];\n        for(j = 0; j < plotinfo.overlays.length; j++) {\n            d.push(plotinfo.overlays[j].id);\n        }\n        subplotData[i] = d;\n    }\n\n    return subplotData;\n}\n\nfunction makeSubplotLayer(gd, plotinfo) {\n    var plotgroup = plotinfo.plotgroup;\n    var id = plotinfo.id;\n    var xLayer = constants.layerValue2layerClass[plotinfo.xaxis.layer];\n    var yLayer = constants.layerValue2layerClass[plotinfo.yaxis.layer];\n    var hasOnlyLargeSploms = gd._fullLayout._hasOnlyLargeSploms;\n\n    if(!plotinfo.mainplot) {\n        if(hasOnlyLargeSploms) {\n            // TODO could do even better\n            // - we don't need plot (but we would have to mock it in lsInner\n            //   and other places\n            // - we don't (x|y)lines and (x|y)axislayer for most subplots\n            //   usually just the bottom x and left y axes.\n            plotinfo.xlines = ensureSingle(plotgroup, 'path', 'xlines-above');\n            plotinfo.ylines = ensureSingle(plotgroup, 'path', 'ylines-above');\n            plotinfo.xaxislayer = ensureSingle(plotgroup, 'g', 'xaxislayer-above');\n            plotinfo.yaxislayer = ensureSingle(plotgroup, 'g', 'yaxislayer-above');\n        } else {\n            var backLayer = ensureSingle(plotgroup, 'g', 'layer-subplot');\n            plotinfo.shapelayer = ensureSingle(backLayer, 'g', 'shapelayer');\n            plotinfo.imagelayer = ensureSingle(backLayer, 'g', 'imagelayer');\n\n            plotinfo.gridlayer = ensureSingle(plotgroup, 'g', 'gridlayer');\n            plotinfo.zerolinelayer = ensureSingle(plotgroup, 'g', 'zerolinelayer');\n\n            ensureSingle(plotgroup, 'path', 'xlines-below');\n            ensureSingle(plotgroup, 'path', 'ylines-below');\n            plotinfo.overlinesBelow = ensureSingle(plotgroup, 'g', 'overlines-below');\n\n            ensureSingle(plotgroup, 'g', 'xaxislayer-below');\n            ensureSingle(plotgroup, 'g', 'yaxislayer-below');\n            plotinfo.overaxesBelow = ensureSingle(plotgroup, 'g', 'overaxes-below');\n\n            plotinfo.plot = ensureSingle(plotgroup, 'g', 'plot');\n            plotinfo.overplot = ensureSingle(plotgroup, 'g', 'overplot');\n\n            plotinfo.xlines = ensureSingle(plotgroup, 'path', 'xlines-above');\n            plotinfo.ylines = ensureSingle(plotgroup, 'path', 'ylines-above');\n            plotinfo.overlinesAbove = ensureSingle(plotgroup, 'g', 'overlines-above');\n\n            ensureSingle(plotgroup, 'g', 'xaxislayer-above');\n            ensureSingle(plotgroup, 'g', 'yaxislayer-above');\n            plotinfo.overaxesAbove = ensureSingle(plotgroup, 'g', 'overaxes-above');\n\n            // set refs to correct layers as determined by 'axis.layer'\n            plotinfo.xlines = plotgroup.select('.xlines-' + xLayer);\n            plotinfo.ylines = plotgroup.select('.ylines-' + yLayer);\n            plotinfo.xaxislayer = plotgroup.select('.xaxislayer-' + xLayer);\n            plotinfo.yaxislayer = plotgroup.select('.yaxislayer-' + yLayer);\n        }\n    } else {\n        var mainplotinfo = plotinfo.mainplotinfo;\n        var mainplotgroup = mainplotinfo.plotgroup;\n        var xId = id + '-x';\n        var yId = id + '-y';\n\n        // now make the components of overlaid subplots\n        // overlays don't have backgrounds, and append all\n        // their other components to the corresponding\n        // extra groups of their main plots.\n\n        plotinfo.gridlayer = mainplotinfo.gridlayer;\n        plotinfo.zerolinelayer = mainplotinfo.zerolinelayer;\n\n        ensureSingle(mainplotinfo.overlinesBelow, 'path', xId);\n        ensureSingle(mainplotinfo.overlinesBelow, 'path', yId);\n        ensureSingle(mainplotinfo.overaxesBelow, 'g', xId);\n        ensureSingle(mainplotinfo.overaxesBelow, 'g', yId);\n\n        plotinfo.plot = ensureSingle(mainplotinfo.overplot, 'g', id);\n\n        ensureSingle(mainplotinfo.overlinesAbove, 'path', xId);\n        ensureSingle(mainplotinfo.overlinesAbove, 'path', yId);\n        ensureSingle(mainplotinfo.overaxesAbove, 'g', xId);\n        ensureSingle(mainplotinfo.overaxesAbove, 'g', yId);\n\n        // set refs to correct layers as determined by 'abovetraces'\n        plotinfo.xlines = mainplotgroup.select('.overlines-' + xLayer).select('.' + xId);\n        plotinfo.ylines = mainplotgroup.select('.overlines-' + yLayer).select('.' + yId);\n        plotinfo.xaxislayer = mainplotgroup.select('.overaxes-' + xLayer).select('.' + xId);\n        plotinfo.yaxislayer = mainplotgroup.select('.overaxes-' + yLayer).select('.' + yId);\n    }\n\n    // common attributes for all subplots, overlays or not\n\n    if(!hasOnlyLargeSploms) {\n        ensureSingleAndAddDatum(plotinfo.gridlayer, 'g', plotinfo.xaxis._id);\n        ensureSingleAndAddDatum(plotinfo.gridlayer, 'g', plotinfo.yaxis._id);\n        plotinfo.gridlayer.selectAll('g')\n            .map(function(d) { return d[0]; })\n            .sort(axisIds.idSort);\n    }\n\n    plotinfo.xlines\n        .style('fill', 'none')\n        .classed('crisp', true);\n\n    plotinfo.ylines\n        .style('fill', 'none')\n        .classed('crisp', true);\n}\n\nfunction purgeSubplotLayers(layers, fullLayout) {\n    if(!layers) return;\n\n    var overlayIdsToRemove = {};\n\n    layers.each(function(d) {\n        var id = d[0];\n        var plotgroup = d3.select(this);\n\n        plotgroup.remove();\n        removeSubplotExtras(id, fullLayout);\n        overlayIdsToRemove[id] = true;\n\n        // do not remove individual axis <clipPath>s here\n        // as other subplots may need them\n    });\n\n    // must remove overlaid subplot trace layers 'manually'\n\n    for(var k in fullLayout._plots) {\n        var subplotInfo = fullLayout._plots[k];\n        var overlays = subplotInfo.overlays || [];\n\n        for(var j = 0; j < overlays.length; j++) {\n            var overlayInfo = overlays[j];\n\n            if(overlayIdsToRemove[overlayInfo.id]) {\n                overlayInfo.plot.selectAll('.trace').remove();\n            }\n        }\n    }\n}\n\nfunction removeSubplotExtras(subplotId, fullLayout) {\n    fullLayout._draggers.selectAll('g.' + subplotId).remove();\n    fullLayout._defs.select('#clip' + fullLayout._uid + subplotId + 'plot').remove();\n}\n\nexports.toSVG = function(gd) {\n    var imageRoot = gd._fullLayout._glimages;\n    var root = d3.select(gd).selectAll('.svg-container');\n    var canvases = root.filter(function(d, i) {return i === root.size() - 1;})\n        .selectAll('.gl-canvas-context, .gl-canvas-focus');\n\n    function canvasToImage() {\n        var canvas = this;\n        var imageData = canvas.toDataURL('image/png');\n        var image = imageRoot.append('svg:image');\n\n        image.attr({\n            xmlns: xmlnsNamespaces.svg,\n            'xlink:href': imageData,\n            preserveAspectRatio: 'none',\n            x: 0,\n            y: 0,\n            width: canvas.style.width,\n            height: canvas.style.height\n        });\n    }\n\n    canvases.each(canvasToImage);\n};\n\nexports.updateFx = require('./graph_interact').updateFx;\n"]},"metadata":{},"sourceType":"script"}