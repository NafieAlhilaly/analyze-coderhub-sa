{"ast":null,"code":"'use strict';\n\nvar identity = require('./identity');\n\nfunction wrap(d) {\n  return [d];\n}\n\nmodule.exports = {\n  // The D3 data binding concept and the General Update Pattern promotes the idea of\n  // traversing into the scenegraph by using the `.data(fun, keyFun)` call.\n  // The `fun` is most often a `repeat`, ie. the elements beneath a `<g>` element need\n  // access to the same data, or a `descend`, which fans a scenegraph node into a bunch of\n  // of elements, e.g. points, lines, rows, requiring an array as input.\n  // The role of the `keyFun` is to identify what elements are being entered/exited/updated,\n  // otherwise D3 reverts to using a plain index which would screw up `transition`s.\n  keyFun: function (d) {\n    return d.key;\n  },\n  repeat: wrap,\n  descend: identity,\n  // Plotly.js uses a convention of storing the actual contents of the `calcData` as the\n  // element zero of a container array. These helpers are just used for clarity as a\n  // newcomer to the codebase may not know what the `[0]` is, and whether there can be further\n  // elements (not atm).\n  wrap: wrap,\n  unwrap: function (d) {\n    return d[0];\n  }\n};","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/plotly.js/src/lib/gup.js"],"names":["identity","require","wrap","d","module","exports","keyFun","key","repeat","descend","unwrap"],"mappings":"AAAA;;AAEA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,YAAD,CAAtB;;AAEA,SAASC,IAAT,CAAcC,CAAd,EAAiB;AAAC,SAAO,CAACA,CAAD,CAAP;AAAY;;AAE9BC,MAAM,CAACC,OAAP,GAAiB;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,EAAAA,MAAM,EAAE,UAASH,CAAT,EAAY;AAAC,WAAOA,CAAC,CAACI,GAAT;AAAc,GATtB;AAUbC,EAAAA,MAAM,EAAEN,IAVK;AAWbO,EAAAA,OAAO,EAAET,QAXI;AAab;AACA;AACA;AACA;AACAE,EAAAA,IAAI,EAAEA,IAjBO;AAkBbQ,EAAAA,MAAM,EAAE,UAASP,CAAT,EAAY;AAAC,WAAOA,CAAC,CAAC,CAAD,CAAR;AAAa;AAlBrB,CAAjB","sourcesContent":["'use strict';\n\nvar identity = require('./identity');\n\nfunction wrap(d) {return [d];}\n\nmodule.exports = {\n\n    // The D3 data binding concept and the General Update Pattern promotes the idea of\n    // traversing into the scenegraph by using the `.data(fun, keyFun)` call.\n    // The `fun` is most often a `repeat`, ie. the elements beneath a `<g>` element need\n    // access to the same data, or a `descend`, which fans a scenegraph node into a bunch of\n    // of elements, e.g. points, lines, rows, requiring an array as input.\n    // The role of the `keyFun` is to identify what elements are being entered/exited/updated,\n    // otherwise D3 reverts to using a plain index which would screw up `transition`s.\n    keyFun: function(d) {return d.key;},\n    repeat: wrap,\n    descend: identity,\n\n    // Plotly.js uses a convention of storing the actual contents of the `calcData` as the\n    // element zero of a container array. These helpers are just used for clarity as a\n    // newcomer to the codebase may not know what the `[0]` is, and whether there can be further\n    // elements (not atm).\n    wrap: wrap,\n    unwrap: function(d) {return d[0];}\n};\n"]},"metadata":{},"sourceType":"script"}