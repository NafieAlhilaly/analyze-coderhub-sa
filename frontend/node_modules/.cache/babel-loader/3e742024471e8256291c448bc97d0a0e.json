{"ast":null,"code":"'use strict';\n\nvar pathBounds = require('svg-path-bounds');\n\nvar parsePath = require('parse-svg-path');\n\nvar drawPath = require('draw-svg-path');\n\nvar isSvgPath = require('is-svg-path');\n\nvar bitmapSdf = require('bitmap-sdf');\n\nvar canvas = document.createElement('canvas');\nvar ctx = canvas.getContext('2d');\nmodule.exports = pathSdf;\n\nfunction pathSdf(path, options) {\n  if (!isSvgPath(path)) throw Error('Argument should be valid svg path string');\n  if (!options) options = {};\n  var w, h;\n\n  if (options.shape) {\n    w = options.shape[0];\n    h = options.shape[1];\n  } else {\n    w = canvas.width = options.w || options.width || 200;\n    h = canvas.height = options.h || options.height || 200;\n  }\n\n  var size = Math.min(w, h);\n  var stroke = options.stroke || 0;\n  var viewbox = options.viewbox || options.viewBox || pathBounds(path);\n  var scale = [w / (viewbox[2] - viewbox[0]), h / (viewbox[3] - viewbox[1])];\n  var maxScale = Math.min(scale[0] || 0, scale[1] || 0) / 2; //clear ctx\n\n  ctx.fillStyle = 'black';\n  ctx.fillRect(0, 0, w, h);\n  ctx.fillStyle = 'white';\n\n  if (stroke) {\n    if (typeof stroke != 'number') stroke = 1;\n\n    if (stroke > 0) {\n      ctx.strokeStyle = 'white';\n    } else {\n      ctx.strokeStyle = 'black';\n    }\n\n    ctx.lineWidth = Math.abs(stroke);\n  }\n\n  ctx.translate(w * .5, h * .5);\n  ctx.scale(maxScale, maxScale); //if canvas svg paths api is available\n\n  if (isPath2DSupported()) {\n    var path2d = new Path2D(path);\n    ctx.fill(path2d);\n    stroke && ctx.stroke(path2d);\n  } //fallback to bezier-curves\n  else {\n    var segments = parsePath(path);\n    drawPath(ctx, segments);\n    ctx.fill();\n    stroke && ctx.stroke();\n  }\n\n  ctx.setTransform(1, 0, 0, 1, 0, 0);\n  var data = bitmapSdf(ctx, {\n    cutoff: options.cutoff != null ? options.cutoff : .5,\n    radius: options.radius != null ? options.radius : size * .5\n  });\n  return data;\n}\n\nvar path2DSupported;\n\nfunction isPath2DSupported() {\n  if (path2DSupported != null) return path2DSupported;\n  var ctx = document.createElement('canvas').getContext('2d');\n  ctx.canvas.width = ctx.canvas.height = 1;\n  if (!window.Path2D) return path2DSupported = false;\n  var path = new Path2D('M0,0h1v1h-1v-1Z');\n  ctx.fillStyle = 'black';\n  ctx.fill(path);\n  var idata = ctx.getImageData(0, 0, 1, 1);\n  return path2DSupported = idata && idata.data && idata.data[3] === 255;\n}","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/svg-path-sdf/index.js"],"names":["pathBounds","require","parsePath","drawPath","isSvgPath","bitmapSdf","canvas","document","createElement","ctx","getContext","module","exports","pathSdf","path","options","Error","w","h","shape","width","height","size","Math","min","stroke","viewbox","viewBox","scale","maxScale","fillStyle","fillRect","strokeStyle","lineWidth","abs","translate","isPath2DSupported","path2d","Path2D","fill","segments","setTransform","data","cutoff","radius","path2DSupported","window","idata","getImageData"],"mappings":"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","sourcesContent":["'use strict'\r\n\r\nvar pathBounds = require('svg-path-bounds')\r\nvar parsePath = require('parse-svg-path')\r\nvar drawPath = require('draw-svg-path')\r\nvar isSvgPath = require('is-svg-path')\r\nvar bitmapSdf = require('bitmap-sdf')\r\n\r\nvar canvas = document.createElement('canvas')\r\nvar ctx = canvas.getContext('2d')\r\n\r\n\r\nmodule.exports = pathSdf\r\n\r\n\r\nfunction pathSdf (path, options) {\r\n\tif (!isSvgPath(path)) throw Error('Argument should be valid svg path string')\r\n\r\n\tif (!options) options = {}\r\n\r\n\tvar w, h\r\n\tif (options.shape) {\r\n\t\tw = options.shape[0]\r\n\t\th = options.shape[1]\r\n\t}\r\n\telse {\r\n\t\tw = canvas.width = options.w || options.width || 200\r\n\t\th = canvas.height = options.h || options.height || 200\r\n\t}\r\n\tvar size = Math.min(w, h)\r\n\r\n\tvar stroke = options.stroke || 0\r\n\r\n\tvar viewbox = options.viewbox || options.viewBox || pathBounds(path)\r\n\tvar scale = [w / (viewbox[2] - viewbox[0]), h / (viewbox[3] - viewbox[1])]\r\n\tvar maxScale = Math.min(scale[0] || 0, scale[1] || 0) / 2\r\n\r\n\t//clear ctx\r\n\tctx.fillStyle = 'black'\r\n\tctx.fillRect(0, 0, w, h)\r\n\r\n\tctx.fillStyle = 'white'\r\n\r\n\tif (stroke)\t{\r\n\t\tif (typeof stroke != 'number') stroke = 1\r\n\t\tif (stroke > 0) {\r\n\t\t\tctx.strokeStyle = 'white'\r\n\t\t}\r\n\t\telse {\r\n\t\t\tctx.strokeStyle = 'black'\r\n\t\t}\r\n\r\n\t\tctx.lineWidth = Math.abs(stroke)\r\n\t}\r\n\r\n\tctx.translate(w * .5, h * .5)\r\n\tctx.scale(maxScale, maxScale)\r\n\r\n\t//if canvas svg paths api is available\r\n\tif (isPath2DSupported()) {\r\n\t\tvar path2d = new Path2D(path)\r\n\t\tctx.fill(path2d)\r\n\t\tstroke && ctx.stroke(path2d)\r\n\t}\r\n\t//fallback to bezier-curves\r\n\telse {\r\n\t\tvar segments = parsePath(path)\r\n\t\tdrawPath(ctx, segments)\r\n\t\tctx.fill()\r\n\t\tstroke && ctx.stroke()\r\n\t}\r\n\r\n\tctx.setTransform(1, 0, 0, 1, 0, 0);\r\n\r\n\tvar data = bitmapSdf(ctx, {\r\n\t\tcutoff: options.cutoff != null ? options.cutoff : .5,\r\n\t\tradius: options.radius != null ? options.radius : size * .5\r\n\t})\r\n\r\n\treturn data\r\n}\r\n\r\nvar path2DSupported\r\n\r\nfunction isPath2DSupported () {\r\n\tif (path2DSupported != null) return path2DSupported\r\n\r\n\tvar ctx = document.createElement('canvas').getContext('2d')\r\n\tctx.canvas.width = ctx.canvas.height = 1\r\n\r\n\tif (!window.Path2D) return path2DSupported = false\r\n\r\n\tvar path = new Path2D('M0,0h1v1h-1v-1Z')\r\n\r\n\tctx.fillStyle = 'black'\r\n\tctx.fill(path)\r\n\r\n\tvar idata = ctx.getImageData(0,0,1,1)\r\n\r\n\treturn path2DSupported = idata && idata.data && idata.data[3] === 255\r\n}\r\n"]},"metadata":{},"sourceType":"script"}