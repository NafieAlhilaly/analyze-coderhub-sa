{"ast":null,"code":"'use strict';\n\nvar DEFAULT_VERTEX_NORMALS_EPSILON = 1e-6; // may be too large if triangles are very small\n\nvar DEFAULT_FACE_NORMALS_EPSILON = 1e-6;\n\nvar createShader = require('gl-shader');\n\nvar createBuffer = require('gl-buffer');\n\nvar createVAO = require('gl-vao');\n\nvar createTexture = require('gl-texture2d');\n\nvar normals = require('normals');\n\nvar multiply = require('gl-mat4/multiply');\n\nvar invert = require('gl-mat4/invert');\n\nvar ndarray = require('ndarray');\n\nvar colormap = require('colormap');\n\nvar getContour = require('simplicial-complex-contour');\n\nvar pool = require('typedarray-pool');\n\nvar shaders = require('./lib/shaders');\n\nvar closestPoint = require('./lib/closest-point');\n\nvar meshShader = shaders.meshShader;\nvar wireShader = shaders.wireShader;\nvar pointShader = shaders.pointShader;\nvar pickShader = shaders.pickShader;\nvar pointPickShader = shaders.pointPickShader;\nvar contourShader = shaders.contourShader;\nvar IDENTITY = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n\nfunction SimplicialMesh(gl, texture, triShader, lineShader, pointShader, pickShader, pointPickShader, contourShader, trianglePositions, triangleIds, triangleColors, triangleUVs, triangleNormals, triangleVAO, edgePositions, edgeIds, edgeColors, edgeUVs, edgeVAO, pointPositions, pointIds, pointColors, pointUVs, pointSizes, pointVAO, contourPositions, contourVAO) {\n  this.gl = gl;\n  this.pixelRatio = 1;\n  this.cells = [];\n  this.positions = [];\n  this.intensity = [];\n  this.texture = texture;\n  this.dirty = true;\n  this.triShader = triShader;\n  this.lineShader = lineShader;\n  this.pointShader = pointShader;\n  this.pickShader = pickShader;\n  this.pointPickShader = pointPickShader;\n  this.contourShader = contourShader;\n  this.trianglePositions = trianglePositions;\n  this.triangleColors = triangleColors;\n  this.triangleNormals = triangleNormals;\n  this.triangleUVs = triangleUVs;\n  this.triangleIds = triangleIds;\n  this.triangleVAO = triangleVAO;\n  this.triangleCount = 0;\n  this.lineWidth = 1;\n  this.edgePositions = edgePositions;\n  this.edgeColors = edgeColors;\n  this.edgeUVs = edgeUVs;\n  this.edgeIds = edgeIds;\n  this.edgeVAO = edgeVAO;\n  this.edgeCount = 0;\n  this.pointPositions = pointPositions;\n  this.pointColors = pointColors;\n  this.pointUVs = pointUVs;\n  this.pointSizes = pointSizes;\n  this.pointIds = pointIds;\n  this.pointVAO = pointVAO;\n  this.pointCount = 0;\n  this.contourLineWidth = 1;\n  this.contourPositions = contourPositions;\n  this.contourVAO = contourVAO;\n  this.contourCount = 0;\n  this.contourColor = [0, 0, 0];\n  this.contourEnable = true;\n  this.pickVertex = true;\n  this.pickId = 1;\n  this.bounds = [[Infinity, Infinity, Infinity], [-Infinity, -Infinity, -Infinity]];\n  this.clipBounds = [[-Infinity, -Infinity, -Infinity], [Infinity, Infinity, Infinity]];\n  this.lightPosition = [1e5, 1e5, 0];\n  this.ambientLight = 0.8;\n  this.diffuseLight = 0.8;\n  this.specularLight = 2.0;\n  this.roughness = 0.5;\n  this.fresnel = 1.5;\n  this.opacity = 1.0;\n  this.hasAlpha = false;\n  this.opacityscale = false;\n  this._model = IDENTITY;\n  this._view = IDENTITY;\n  this._projection = IDENTITY;\n  this._resolution = [1, 1];\n}\n\nvar proto = SimplicialMesh.prototype;\n\nproto.isOpaque = function () {\n  return !this.hasAlpha;\n};\n\nproto.isTransparent = function () {\n  return this.hasAlpha;\n};\n\nproto.pickSlots = 1;\n\nproto.setPickBase = function (id) {\n  this.pickId = id;\n};\n\nfunction getOpacityFromScale(ratio, opacityscale) {\n  if (!opacityscale) return 1;\n  if (!opacityscale.length) return 1;\n\n  for (var i = 0; i < opacityscale.length; ++i) {\n    if (opacityscale.length < 2) return 1;\n    if (opacityscale[i][0] === ratio) return opacityscale[i][1];\n\n    if (opacityscale[i][0] > ratio && i > 0) {\n      var d = (opacityscale[i][0] - ratio) / (opacityscale[i][0] - opacityscale[i - 1][0]);\n      return opacityscale[i][1] * (1 - d) + d * opacityscale[i - 1][1];\n    }\n  }\n\n  return 1;\n}\n\nfunction genColormap(param, opacityscale) {\n  var colors = colormap({\n    colormap: param,\n    nshades: 256,\n    format: 'rgba'\n  });\n  var result = new Uint8Array(256 * 4);\n\n  for (var i = 0; i < 256; ++i) {\n    var c = colors[i];\n\n    for (var j = 0; j < 3; ++j) {\n      result[4 * i + j] = c[j];\n    }\n\n    if (!opacityscale) {\n      result[4 * i + 3] = 255 * c[3];\n    } else {\n      result[4 * i + 3] = 255 * getOpacityFromScale(i / 255.0, opacityscale);\n    }\n  }\n\n  return ndarray(result, [256, 256, 4], [4, 0, 1]);\n}\n\nfunction takeZComponent(array) {\n  var n = array.length;\n  var result = new Array(n);\n\n  for (var i = 0; i < n; ++i) {\n    result[i] = array[i][2];\n  }\n\n  return result;\n}\n\nproto.highlight = function (selection) {\n  if (!selection || !this.contourEnable) {\n    this.contourCount = 0;\n    return;\n  }\n\n  var level = getContour(this.cells, this.intensity, selection.intensity);\n  var cells = level.cells;\n  var vertexIds = level.vertexIds;\n  var vertexWeights = level.vertexWeights;\n  var numCells = cells.length;\n  var result = pool.mallocFloat32(2 * 3 * numCells);\n  var ptr = 0;\n\n  for (var i = 0; i < numCells; ++i) {\n    var c = cells[i];\n\n    for (var j = 0; j < 2; ++j) {\n      var v = c[0];\n\n      if (c.length === 2) {\n        v = c[j];\n      }\n\n      var a = vertexIds[v][0];\n      var b = vertexIds[v][1];\n      var w = vertexWeights[v];\n      var wi = 1.0 - w;\n      var pa = this.positions[a];\n      var pb = this.positions[b];\n\n      for (var k = 0; k < 3; ++k) {\n        result[ptr++] = w * pa[k] + wi * pb[k];\n      }\n    }\n  }\n\n  this.contourCount = ptr / 3 | 0;\n  this.contourPositions.update(result.subarray(0, ptr));\n  pool.free(result);\n};\n\nproto.update = function (params) {\n  params = params || {};\n  var gl = this.gl;\n  this.dirty = true;\n\n  if ('contourEnable' in params) {\n    this.contourEnable = params.contourEnable;\n  }\n\n  if ('contourColor' in params) {\n    this.contourColor = params.contourColor;\n  }\n\n  if ('lineWidth' in params) {\n    this.lineWidth = params.lineWidth;\n  }\n\n  if ('lightPosition' in params) {\n    this.lightPosition = params.lightPosition;\n  }\n\n  this.hasAlpha = false; // default to no transparent draw\n\n  if ('opacity' in params) {\n    this.opacity = params.opacity;\n\n    if (this.opacity < 1) {\n      this.hasAlpha = true;\n    }\n  }\n\n  if ('opacityscale' in params) {\n    this.opacityscale = params.opacityscale;\n    this.hasAlpha = true;\n  }\n\n  if ('ambient' in params) {\n    this.ambientLight = params.ambient;\n  }\n\n  if ('diffuse' in params) {\n    this.diffuseLight = params.diffuse;\n  }\n\n  if ('specular' in params) {\n    this.specularLight = params.specular;\n  }\n\n  if ('roughness' in params) {\n    this.roughness = params.roughness;\n  }\n\n  if ('fresnel' in params) {\n    this.fresnel = params.fresnel;\n  }\n\n  if (params.texture) {\n    this.texture.dispose();\n    this.texture = createTexture(gl, params.texture);\n  } else if (params.colormap) {\n    this.texture.shape = [256, 256];\n    this.texture.minFilter = gl.LINEAR_MIPMAP_LINEAR;\n    this.texture.magFilter = gl.LINEAR;\n    this.texture.setPixels(genColormap(params.colormap, this.opacityscale));\n    this.texture.generateMipmap();\n  }\n\n  var cells = params.cells;\n  var positions = params.positions;\n\n  if (!positions || !cells) {\n    return;\n  }\n\n  var tPos = [];\n  var tCol = [];\n  var tNor = [];\n  var tUVs = [];\n  var tIds = [];\n  var ePos = [];\n  var eCol = [];\n  var eUVs = [];\n  var eIds = [];\n  var pPos = [];\n  var pCol = [];\n  var pUVs = [];\n  var pSiz = [];\n  var pIds = []; //Save geometry data for picking calculations\n\n  this.cells = cells;\n  this.positions = positions; //Compute normals\n\n  var vertexNormals = params.vertexNormals;\n  var cellNormals = params.cellNormals;\n  var vertexNormalsEpsilon = params.vertexNormalsEpsilon === void 0 ? DEFAULT_VERTEX_NORMALS_EPSILON : params.vertexNormalsEpsilon;\n  var faceNormalsEpsilon = params.faceNormalsEpsilon === void 0 ? DEFAULT_FACE_NORMALS_EPSILON : params.faceNormalsEpsilon;\n\n  if (params.useFacetNormals && !cellNormals) {\n    cellNormals = normals.faceNormals(cells, positions, faceNormalsEpsilon);\n  }\n\n  if (!cellNormals && !vertexNormals) {\n    vertexNormals = normals.vertexNormals(cells, positions, vertexNormalsEpsilon);\n  } //Compute colors\n\n\n  var vertexColors = params.vertexColors;\n  var cellColors = params.cellColors;\n  var meshColor = params.meshColor || [1, 1, 1, 1]; //UVs\n\n  var vertexUVs = params.vertexUVs;\n  var vertexIntensity = params.vertexIntensity;\n  var cellUVs = params.cellUVs;\n  var cellIntensity = params.cellIntensity;\n  var intensityLo = Infinity;\n  var intensityHi = -Infinity;\n\n  if (!vertexUVs && !cellUVs) {\n    if (vertexIntensity) {\n      if (params.vertexIntensityBounds) {\n        intensityLo = +params.vertexIntensityBounds[0];\n        intensityHi = +params.vertexIntensityBounds[1];\n      } else {\n        for (var i = 0; i < vertexIntensity.length; ++i) {\n          var f = vertexIntensity[i];\n          intensityLo = Math.min(intensityLo, f);\n          intensityHi = Math.max(intensityHi, f);\n        }\n      }\n    } else if (cellIntensity) {\n      if (params.cellIntensityBounds) {\n        intensityLo = +params.cellIntensityBounds[0];\n        intensityHi = +params.cellIntensityBounds[1];\n      } else {\n        for (var i = 0; i < cellIntensity.length; ++i) {\n          var f = cellIntensity[i];\n          intensityLo = Math.min(intensityLo, f);\n          intensityHi = Math.max(intensityHi, f);\n        }\n      }\n    } else {\n      for (var i = 0; i < positions.length; ++i) {\n        var f = positions[i][2];\n        intensityLo = Math.min(intensityLo, f);\n        intensityHi = Math.max(intensityHi, f);\n      }\n    }\n  }\n\n  if (vertexIntensity) {\n    this.intensity = vertexIntensity;\n  } else if (cellIntensity) {\n    this.intensity = cellIntensity;\n  } else {\n    this.intensity = takeZComponent(positions);\n  }\n\n  this.pickVertex = !(cellIntensity || cellColors); //Point size\n\n  var pointSizes = params.pointSizes;\n  var meshPointSize = params.pointSize || 1.0; //Update bounds\n\n  this.bounds = [[Infinity, Infinity, Infinity], [-Infinity, -Infinity, -Infinity]];\n\n  for (var i = 0; i < positions.length; ++i) {\n    var p = positions[i];\n\n    for (var j = 0; j < 3; ++j) {\n      if (isNaN(p[j]) || !isFinite(p[j])) {\n        continue;\n      }\n\n      this.bounds[0][j] = Math.min(this.bounds[0][j], p[j]);\n      this.bounds[1][j] = Math.max(this.bounds[1][j], p[j]);\n    }\n  } //Pack cells into buffers\n\n\n  var triangleCount = 0;\n  var edgeCount = 0;\n  var pointCount = 0;\n\n  fill_loop: for (var i = 0; i < cells.length; ++i) {\n    var cell = cells[i];\n\n    switch (cell.length) {\n      case 1:\n        var v = cell[0];\n        var p = positions[v]; //Check NaNs\n\n        for (var j = 0; j < 3; ++j) {\n          if (isNaN(p[j]) || !isFinite(p[j])) {\n            continue fill_loop;\n          }\n        }\n\n        pPos.push(p[0], p[1], p[2]);\n        var c;\n\n        if (vertexColors) {\n          c = vertexColors[v];\n        } else if (cellColors) {\n          c = cellColors[i];\n        } else {\n          c = meshColor;\n        }\n\n        if (this.opacityscale && vertexIntensity) {\n          tCol.push(c[0], c[1], c[2], this.opacity * getOpacityFromScale((vertexIntensity[v] - intensityLo) / (intensityHi - intensityLo), this.opacityscale));\n        } else if (c.length === 3) {\n          pCol.push(c[0], c[1], c[2], this.opacity);\n        } else {\n          pCol.push(c[0], c[1], c[2], c[3] * this.opacity);\n          if (c[3] < 1) this.hasAlpha = true;\n        }\n\n        var uv;\n\n        if (vertexUVs) {\n          uv = vertexUVs[v];\n        } else if (vertexIntensity) {\n          uv = [(vertexIntensity[v] - intensityLo) / (intensityHi - intensityLo), 0];\n        } else if (cellUVs) {\n          uv = cellUVs[i];\n        } else if (cellIntensity) {\n          uv = [(cellIntensity[i] - intensityLo) / (intensityHi - intensityLo), 0];\n        } else {\n          uv = [(p[2] - intensityLo) / (intensityHi - intensityLo), 0];\n        }\n\n        pUVs.push(uv[0], uv[1]);\n\n        if (pointSizes) {\n          pSiz.push(pointSizes[v]);\n        } else {\n          pSiz.push(meshPointSize);\n        }\n\n        pIds.push(i);\n        pointCount += 1;\n        break;\n\n      case 2:\n        //Check NaNs\n        for (var j = 0; j < 2; ++j) {\n          var v = cell[j];\n          var p = positions[v];\n\n          for (var k = 0; k < 3; ++k) {\n            if (isNaN(p[k]) || !isFinite(p[k])) {\n              continue fill_loop;\n            }\n          }\n        }\n\n        for (var j = 0; j < 2; ++j) {\n          var v = cell[j];\n          var p = positions[v];\n          ePos.push(p[0], p[1], p[2]);\n          var c;\n\n          if (vertexColors) {\n            c = vertexColors[v];\n          } else if (cellColors) {\n            c = cellColors[i];\n          } else {\n            c = meshColor;\n          }\n\n          if (this.opacityscale && vertexIntensity) {\n            tCol.push(c[0], c[1], c[2], this.opacity * getOpacityFromScale((vertexIntensity[v] - intensityLo) / (intensityHi - intensityLo), this.opacityscale));\n          } else if (c.length === 3) {\n            eCol.push(c[0], c[1], c[2], this.opacity);\n          } else {\n            eCol.push(c[0], c[1], c[2], c[3] * this.opacity);\n            if (c[3] < 1) this.hasAlpha = true;\n          }\n\n          var uv;\n\n          if (vertexUVs) {\n            uv = vertexUVs[v];\n          } else if (vertexIntensity) {\n            uv = [(vertexIntensity[v] - intensityLo) / (intensityHi - intensityLo), 0];\n          } else if (cellUVs) {\n            uv = cellUVs[i];\n          } else if (cellIntensity) {\n            uv = [(cellIntensity[i] - intensityLo) / (intensityHi - intensityLo), 0];\n          } else {\n            uv = [(p[2] - intensityLo) / (intensityHi - intensityLo), 0];\n          }\n\n          eUVs.push(uv[0], uv[1]);\n          eIds.push(i);\n        }\n\n        edgeCount += 1;\n        break;\n\n      case 3:\n        //Check NaNs\n        for (var j = 0; j < 3; ++j) {\n          var v = cell[j];\n          var p = positions[v];\n\n          for (var k = 0; k < 3; ++k) {\n            if (isNaN(p[k]) || !isFinite(p[k])) {\n              continue fill_loop;\n            }\n          }\n        }\n\n        for (var j = 0; j < 3; ++j) {\n          var v = cell[2 - j];\n          var p = positions[v];\n          tPos.push(p[0], p[1], p[2]);\n          var c;\n\n          if (vertexColors) {\n            c = vertexColors[v];\n          } else if (cellColors) {\n            c = cellColors[i];\n          } else {\n            c = meshColor;\n          }\n\n          if (!c) {\n            tCol.push(0.5, 0.5, 0.5, 1);\n          } else if (this.opacityscale && vertexIntensity) {\n            tCol.push(c[0], c[1], c[2], this.opacity * getOpacityFromScale((vertexIntensity[v] - intensityLo) / (intensityHi - intensityLo), this.opacityscale));\n          } else if (c.length === 3) {\n            tCol.push(c[0], c[1], c[2], this.opacity);\n          } else {\n            tCol.push(c[0], c[1], c[2], c[3] * this.opacity);\n            if (c[3] < 1) this.hasAlpha = true;\n          }\n\n          var uv;\n\n          if (vertexUVs) {\n            uv = vertexUVs[v];\n          } else if (vertexIntensity) {\n            uv = [(vertexIntensity[v] - intensityLo) / (intensityHi - intensityLo), 0];\n          } else if (cellUVs) {\n            uv = cellUVs[i];\n          } else if (cellIntensity) {\n            uv = [(cellIntensity[i] - intensityLo) / (intensityHi - intensityLo), 0];\n          } else {\n            uv = [(p[2] - intensityLo) / (intensityHi - intensityLo), 0];\n          }\n\n          tUVs.push(uv[0], uv[1]);\n          var q;\n\n          if (vertexNormals) {\n            q = vertexNormals[v];\n          } else {\n            q = cellNormals[i];\n          }\n\n          tNor.push(q[0], q[1], q[2]);\n          tIds.push(i);\n        }\n\n        triangleCount += 1;\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  this.pointCount = pointCount;\n  this.edgeCount = edgeCount;\n  this.triangleCount = triangleCount;\n  this.pointPositions.update(pPos);\n  this.pointColors.update(pCol);\n  this.pointUVs.update(pUVs);\n  this.pointSizes.update(pSiz);\n  this.pointIds.update(new Uint32Array(pIds));\n  this.edgePositions.update(ePos);\n  this.edgeColors.update(eCol);\n  this.edgeUVs.update(eUVs);\n  this.edgeIds.update(new Uint32Array(eIds));\n  this.trianglePositions.update(tPos);\n  this.triangleColors.update(tCol);\n  this.triangleUVs.update(tUVs);\n  this.triangleNormals.update(tNor);\n  this.triangleIds.update(new Uint32Array(tIds));\n};\n\nproto.drawTransparent = proto.draw = function (params) {\n  params = params || {};\n  var gl = this.gl;\n  var model = params.model || IDENTITY;\n  var view = params.view || IDENTITY;\n  var projection = params.projection || IDENTITY;\n  var clipBounds = [[-1e6, -1e6, -1e6], [1e6, 1e6, 1e6]];\n\n  for (var i = 0; i < 3; ++i) {\n    clipBounds[0][i] = Math.max(clipBounds[0][i], this.clipBounds[0][i]);\n    clipBounds[1][i] = Math.min(clipBounds[1][i], this.clipBounds[1][i]);\n  }\n\n  var uniforms = {\n    model: model,\n    view: view,\n    projection: projection,\n    inverseModel: IDENTITY.slice(),\n    clipBounds: clipBounds,\n    kambient: this.ambientLight,\n    kdiffuse: this.diffuseLight,\n    kspecular: this.specularLight,\n    roughness: this.roughness,\n    fresnel: this.fresnel,\n    eyePosition: [0, 0, 0],\n    lightPosition: [0, 0, 0],\n    contourColor: this.contourColor,\n    texture: 0\n  };\n  uniforms.inverseModel = invert(uniforms.inverseModel, uniforms.model);\n  gl.disable(gl.CULL_FACE);\n  this.texture.bind(0);\n  var invCameraMatrix = new Array(16);\n  multiply(invCameraMatrix, uniforms.view, uniforms.model);\n  multiply(invCameraMatrix, uniforms.projection, invCameraMatrix);\n  invert(invCameraMatrix, invCameraMatrix);\n\n  for (var i = 0; i < 3; ++i) {\n    uniforms.eyePosition[i] = invCameraMatrix[12 + i] / invCameraMatrix[15];\n  }\n\n  var w = invCameraMatrix[15];\n\n  for (var i = 0; i < 3; ++i) {\n    w += this.lightPosition[i] * invCameraMatrix[4 * i + 3];\n  }\n\n  for (var i = 0; i < 3; ++i) {\n    var s = invCameraMatrix[12 + i];\n\n    for (var j = 0; j < 3; ++j) {\n      s += invCameraMatrix[4 * j + i] * this.lightPosition[j];\n    }\n\n    uniforms.lightPosition[i] = s / w;\n  }\n\n  if (this.triangleCount > 0) {\n    var shader = this.triShader;\n    shader.bind();\n    shader.uniforms = uniforms;\n    this.triangleVAO.bind();\n    gl.drawArrays(gl.TRIANGLES, 0, this.triangleCount * 3);\n    this.triangleVAO.unbind();\n  }\n\n  if (this.edgeCount > 0 && this.lineWidth > 0) {\n    var shader = this.lineShader;\n    shader.bind();\n    shader.uniforms = uniforms;\n    this.edgeVAO.bind();\n    gl.lineWidth(this.lineWidth * this.pixelRatio);\n    gl.drawArrays(gl.LINES, 0, this.edgeCount * 2);\n    this.edgeVAO.unbind();\n  }\n\n  if (this.pointCount > 0) {\n    var shader = this.pointShader;\n    shader.bind();\n    shader.uniforms = uniforms;\n    this.pointVAO.bind();\n    gl.drawArrays(gl.POINTS, 0, this.pointCount);\n    this.pointVAO.unbind();\n  }\n\n  if (this.contourEnable && this.contourCount > 0 && this.contourLineWidth > 0) {\n    var shader = this.contourShader;\n    shader.bind();\n    shader.uniforms = uniforms;\n    this.contourVAO.bind();\n    gl.drawArrays(gl.LINES, 0, this.contourCount);\n    this.contourVAO.unbind();\n  }\n};\n\nproto.drawPick = function (params) {\n  params = params || {};\n  var gl = this.gl;\n  var model = params.model || IDENTITY;\n  var view = params.view || IDENTITY;\n  var projection = params.projection || IDENTITY;\n  var clipBounds = [[-1e6, -1e6, -1e6], [1e6, 1e6, 1e6]];\n\n  for (var i = 0; i < 3; ++i) {\n    clipBounds[0][i] = Math.max(clipBounds[0][i], this.clipBounds[0][i]);\n    clipBounds[1][i] = Math.min(clipBounds[1][i], this.clipBounds[1][i]);\n  } //Save camera parameters\n\n\n  this._model = [].slice.call(model);\n  this._view = [].slice.call(view);\n  this._projection = [].slice.call(projection);\n  this._resolution = [gl.drawingBufferWidth, gl.drawingBufferHeight];\n  var uniforms = {\n    model: model,\n    view: view,\n    projection: projection,\n    clipBounds: clipBounds,\n    pickId: this.pickId / 255.0\n  };\n  var shader = this.pickShader;\n  shader.bind();\n  shader.uniforms = uniforms;\n\n  if (this.triangleCount > 0) {\n    this.triangleVAO.bind();\n    gl.drawArrays(gl.TRIANGLES, 0, this.triangleCount * 3);\n    this.triangleVAO.unbind();\n  }\n\n  if (this.edgeCount > 0) {\n    this.edgeVAO.bind();\n    gl.lineWidth(this.lineWidth * this.pixelRatio);\n    gl.drawArrays(gl.LINES, 0, this.edgeCount * 2);\n    this.edgeVAO.unbind();\n  }\n\n  if (this.pointCount > 0) {\n    var shader = this.pointPickShader;\n    shader.bind();\n    shader.uniforms = uniforms;\n    this.pointVAO.bind();\n    gl.drawArrays(gl.POINTS, 0, this.pointCount);\n    this.pointVAO.unbind();\n  }\n};\n\nproto.pick = function (pickData) {\n  if (!pickData) {\n    return null;\n  }\n\n  if (pickData.id !== this.pickId) {\n    return null;\n  }\n\n  var cellId = pickData.value[0] + 256 * pickData.value[1] + 65536 * pickData.value[2];\n  var cell = this.cells[cellId];\n  var positions = this.positions;\n  var simplex = new Array(cell.length);\n\n  for (var i = 0; i < cell.length; ++i) {\n    simplex[i] = positions[cell[i]];\n  }\n\n  var x = pickData.coord[0];\n  var y = pickData.coord[1];\n\n  if (!this.pickVertex) {\n    var A = this.positions[cell[0]];\n    var B = this.positions[cell[1]];\n    var C = this.positions[cell[2]];\n    var dataCoordinate = [(A[0] + B[0] + C[0]) / 3, (A[1] + B[1] + C[1]) / 3, (A[2] + B[2] + C[2]) / 3];\n    return {\n      _cellCenter: true,\n      position: [x, y],\n      index: cellId,\n      cell: cell,\n      cellId: cellId,\n      intensity: this.intensity[cellId],\n      dataCoordinate: dataCoordinate\n    };\n  }\n\n  var data = closestPoint(simplex, [x * this.pixelRatio, this._resolution[1] - y * this.pixelRatio], this._model, this._view, this._projection, this._resolution);\n\n  if (!data) {\n    return null;\n  }\n\n  var weights = data[2];\n  var interpIntensity = 0.0;\n\n  for (var i = 0; i < cell.length; ++i) {\n    interpIntensity += weights[i] * this.intensity[cell[i]];\n  }\n\n  return {\n    position: data[1],\n    index: cell[data[0]],\n    cell: cell,\n    cellId: cellId,\n    intensity: interpIntensity,\n    dataCoordinate: this.positions[cell[data[0]]]\n  };\n};\n\nproto.dispose = function () {\n  this.texture.dispose();\n  this.triShader.dispose();\n  this.lineShader.dispose();\n  this.pointShader.dispose();\n  this.pickShader.dispose();\n  this.pointPickShader.dispose();\n  this.triangleVAO.dispose();\n  this.trianglePositions.dispose();\n  this.triangleColors.dispose();\n  this.triangleUVs.dispose();\n  this.triangleNormals.dispose();\n  this.triangleIds.dispose();\n  this.edgeVAO.dispose();\n  this.edgePositions.dispose();\n  this.edgeColors.dispose();\n  this.edgeUVs.dispose();\n  this.edgeIds.dispose();\n  this.pointVAO.dispose();\n  this.pointPositions.dispose();\n  this.pointColors.dispose();\n  this.pointUVs.dispose();\n  this.pointSizes.dispose();\n  this.pointIds.dispose();\n  this.contourVAO.dispose();\n  this.contourPositions.dispose();\n  this.contourShader.dispose();\n};\n\nfunction createMeshShader(gl) {\n  var shader = createShader(gl, meshShader.vertex, meshShader.fragment);\n  shader.attributes.position.location = 0;\n  shader.attributes.color.location = 2;\n  shader.attributes.uv.location = 3;\n  shader.attributes.normal.location = 4;\n  return shader;\n}\n\nfunction createWireShader(gl) {\n  var shader = createShader(gl, wireShader.vertex, wireShader.fragment);\n  shader.attributes.position.location = 0;\n  shader.attributes.color.location = 2;\n  shader.attributes.uv.location = 3;\n  return shader;\n}\n\nfunction createPointShader(gl) {\n  var shader = createShader(gl, pointShader.vertex, pointShader.fragment);\n  shader.attributes.position.location = 0;\n  shader.attributes.color.location = 2;\n  shader.attributes.uv.location = 3;\n  shader.attributes.pointSize.location = 4;\n  return shader;\n}\n\nfunction createPickShader(gl) {\n  var shader = createShader(gl, pickShader.vertex, pickShader.fragment);\n  shader.attributes.position.location = 0;\n  shader.attributes.id.location = 1;\n  return shader;\n}\n\nfunction createPointPickShader(gl) {\n  var shader = createShader(gl, pointPickShader.vertex, pointPickShader.fragment);\n  shader.attributes.position.location = 0;\n  shader.attributes.id.location = 1;\n  shader.attributes.pointSize.location = 4;\n  return shader;\n}\n\nfunction createContourShader(gl) {\n  var shader = createShader(gl, contourShader.vertex, contourShader.fragment);\n  shader.attributes.position.location = 0;\n  return shader;\n}\n\nfunction createSimplicialMesh(gl, params) {\n  if (arguments.length === 1) {\n    params = gl;\n    gl = params.gl;\n  } //enable derivatives for face normals\n\n\n  var ext = gl.getExtension('OES_standard_derivatives') || gl.getExtension('MOZ_OES_standard_derivatives') || gl.getExtension('WEBKIT_OES_standard_derivatives');\n  if (!ext) throw new Error('derivatives not supported');\n  var triShader = createMeshShader(gl);\n  var lineShader = createWireShader(gl);\n  var pointShader = createPointShader(gl);\n  var pickShader = createPickShader(gl);\n  var pointPickShader = createPointPickShader(gl);\n  var contourShader = createContourShader(gl);\n  var meshTexture = createTexture(gl, ndarray(new Uint8Array([255, 255, 255, 255]), [1, 1, 4]));\n  meshTexture.generateMipmap();\n  meshTexture.minFilter = gl.LINEAR_MIPMAP_LINEAR;\n  meshTexture.magFilter = gl.LINEAR;\n  var trianglePositions = createBuffer(gl);\n  var triangleColors = createBuffer(gl);\n  var triangleUVs = createBuffer(gl);\n  var triangleNormals = createBuffer(gl);\n  var triangleIds = createBuffer(gl);\n  var triangleVAO = createVAO(gl, [{\n    buffer: trianglePositions,\n    type: gl.FLOAT,\n    size: 3\n  }, {\n    buffer: triangleIds,\n    type: gl.UNSIGNED_BYTE,\n    size: 4,\n    normalized: true\n  }, {\n    buffer: triangleColors,\n    type: gl.FLOAT,\n    size: 4\n  }, {\n    buffer: triangleUVs,\n    type: gl.FLOAT,\n    size: 2\n  }, {\n    buffer: triangleNormals,\n    type: gl.FLOAT,\n    size: 3\n  }]);\n  var edgePositions = createBuffer(gl);\n  var edgeColors = createBuffer(gl);\n  var edgeUVs = createBuffer(gl);\n  var edgeIds = createBuffer(gl);\n  var edgeVAO = createVAO(gl, [{\n    buffer: edgePositions,\n    type: gl.FLOAT,\n    size: 3\n  }, {\n    buffer: edgeIds,\n    type: gl.UNSIGNED_BYTE,\n    size: 4,\n    normalized: true\n  }, {\n    buffer: edgeColors,\n    type: gl.FLOAT,\n    size: 4\n  }, {\n    buffer: edgeUVs,\n    type: gl.FLOAT,\n    size: 2\n  }]);\n  var pointPositions = createBuffer(gl);\n  var pointColors = createBuffer(gl);\n  var pointUVs = createBuffer(gl);\n  var pointSizes = createBuffer(gl);\n  var pointIds = createBuffer(gl);\n  var pointVAO = createVAO(gl, [{\n    buffer: pointPositions,\n    type: gl.FLOAT,\n    size: 3\n  }, {\n    buffer: pointIds,\n    type: gl.UNSIGNED_BYTE,\n    size: 4,\n    normalized: true\n  }, {\n    buffer: pointColors,\n    type: gl.FLOAT,\n    size: 4\n  }, {\n    buffer: pointUVs,\n    type: gl.FLOAT,\n    size: 2\n  }, {\n    buffer: pointSizes,\n    type: gl.FLOAT,\n    size: 1\n  }]);\n  var contourPositions = createBuffer(gl);\n  var contourVAO = createVAO(gl, [{\n    buffer: contourPositions,\n    type: gl.FLOAT,\n    size: 3\n  }]);\n  var mesh = new SimplicialMesh(gl, meshTexture, triShader, lineShader, pointShader, pickShader, pointPickShader, contourShader, trianglePositions, triangleIds, triangleColors, triangleUVs, triangleNormals, triangleVAO, edgePositions, edgeIds, edgeColors, edgeUVs, edgeVAO, pointPositions, pointIds, pointColors, pointUVs, pointSizes, pointVAO, contourPositions, contourVAO);\n  mesh.update(params);\n  return mesh;\n}\n\nmodule.exports = createSimplicialMesh;","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/gl-mesh3d/mesh.js"],"names":["DEFAULT_VERTEX_NORMALS_EPSILON","DEFAULT_FACE_NORMALS_EPSILON","createShader","require","createBuffer","createVAO","createTexture","normals","multiply","invert","ndarray","colormap","getContour","pool","shaders","closestPoint","meshShader","wireShader","pointShader","pickShader","pointPickShader","contourShader","IDENTITY","SimplicialMesh","gl","texture","triShader","lineShader","trianglePositions","triangleIds","triangleColors","triangleUVs","triangleNormals","triangleVAO","edgePositions","edgeIds","edgeColors","edgeUVs","edgeVAO","pointPositions","pointIds","pointColors","pointUVs","pointSizes","pointVAO","contourPositions","contourVAO","pixelRatio","cells","positions","intensity","dirty","triangleCount","lineWidth","edgeCount","pointCount","contourLineWidth","contourCount","contourColor","contourEnable","pickVertex","pickId","bounds","Infinity","clipBounds","lightPosition","ambientLight","diffuseLight","specularLight","roughness","fresnel","opacity","hasAlpha","opacityscale","_model","_view","_projection","_resolution","proto","prototype","isOpaque","isTransparent","pickSlots","setPickBase","id","getOpacityFromScale","ratio","length","i","d","genColormap","param","colors","nshades","format","result","Uint8Array","c","j","takeZComponent","array","n","Array","highlight","selection","level","vertexIds","vertexWeights","numCells","mallocFloat32","ptr","v","a","b","w","wi","pa","pb","k","update","subarray","free","params","ambient","diffuse","specular","dispose","shape","minFilter","LINEAR_MIPMAP_LINEAR","magFilter","LINEAR","setPixels","generateMipmap","tPos","tCol","tNor","tUVs","tIds","ePos","eCol","eUVs","eIds","pPos","pCol","pUVs","pSiz","pIds","vertexNormals","cellNormals","vertexNormalsEpsilon","faceNormalsEpsilon","useFacetNormals","faceNormals","vertexColors","cellColors","meshColor","vertexUVs","vertexIntensity","cellUVs","cellIntensity","intensityLo","intensityHi","vertexIntensityBounds","f","Math","min","max","cellIntensityBounds","meshPointSize","pointSize","p","isNaN","isFinite","fill_loop","cell","push","uv","q","Uint32Array","drawTransparent","draw","model","view","projection","uniforms","inverseModel","slice","kambient","kdiffuse","kspecular","eyePosition","disable","CULL_FACE","bind","invCameraMatrix","s","shader","drawArrays","TRIANGLES","unbind","LINES","POINTS","drawPick","call","drawingBufferWidth","drawingBufferHeight","pick","pickData","cellId","value","simplex","x","coord","y","A","B","C","dataCoordinate","_cellCenter","position","index","data","weights","interpIntensity","createMeshShader","vertex","fragment","attributes","location","color","normal","createWireShader","createPointShader","createPickShader","createPointPickShader","createContourShader","createSimplicialMesh","arguments","ext","getExtension","Error","meshTexture","buffer","type","FLOAT","size","UNSIGNED_BYTE","normalized","mesh","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,8BAA8B,GAAG,IAArC,C,CAA2C;;AAC3C,IAAIC,4BAA4B,GAAG,IAAnC;;AAEA,IAAIC,YAAY,GAAIC,OAAO,CAAC,WAAD,CAA3B;;AACA,IAAIC,YAAY,GAAID,OAAO,CAAC,WAAD,CAA3B;;AACA,IAAIE,SAAS,GAAOF,OAAO,CAAC,QAAD,CAA3B;;AACA,IAAIG,aAAa,GAAGH,OAAO,CAAC,cAAD,CAA3B;;AACA,IAAII,OAAO,GAASJ,OAAO,CAAC,SAAD,CAA3B;;AACA,IAAIK,QAAQ,GAAQL,OAAO,CAAC,kBAAD,CAA3B;;AACA,IAAIM,MAAM,GAAUN,OAAO,CAAC,gBAAD,CAA3B;;AACA,IAAIO,OAAO,GAASP,OAAO,CAAC,SAAD,CAA3B;;AACA,IAAIQ,QAAQ,GAAQR,OAAO,CAAC,UAAD,CAA3B;;AACA,IAAIS,UAAU,GAAMT,OAAO,CAAC,4BAAD,CAA3B;;AACA,IAAIU,IAAI,GAAYV,OAAO,CAAC,iBAAD,CAA3B;;AACA,IAAIW,OAAO,GAASX,OAAO,CAAC,eAAD,CAA3B;;AACA,IAAIY,YAAY,GAAIZ,OAAO,CAAC,qBAAD,CAA3B;;AAEA,IAAIa,UAAU,GAAMF,OAAO,CAACE,UAA5B;AACA,IAAIC,UAAU,GAAMH,OAAO,CAACG,UAA5B;AACA,IAAIC,WAAW,GAAKJ,OAAO,CAACI,WAA5B;AACA,IAAIC,UAAU,GAAML,OAAO,CAACK,UAA5B;AACA,IAAIC,eAAe,GAAGN,OAAO,CAACM,eAA9B;AACA,IAAIC,aAAa,GAAGP,OAAO,CAACO,aAA5B;AAEA,IAAIC,QAAQ,GAAG,CACb,CADa,EACX,CADW,EACT,CADS,EACP,CADO,EAEb,CAFa,EAEX,CAFW,EAET,CAFS,EAEP,CAFO,EAGb,CAHa,EAGX,CAHW,EAGT,CAHS,EAGP,CAHO,EAIb,CAJa,EAIX,CAJW,EAIT,CAJS,EAIP,CAJO,CAAf;;AAOA,SAASC,cAAT,CAAwBC,EAAxB,EACIC,OADJ,EAEIC,SAFJ,EAGIC,UAHJ,EAIIT,WAJJ,EAKIC,UALJ,EAMIC,eANJ,EAOIC,aAPJ,EAQIO,iBARJ,EASIC,WATJ,EAUIC,cAVJ,EAWIC,WAXJ,EAYIC,eAZJ,EAaIC,WAbJ,EAcIC,aAdJ,EAeIC,OAfJ,EAgBIC,UAhBJ,EAiBIC,OAjBJ,EAkBIC,OAlBJ,EAmBIC,cAnBJ,EAoBIC,QApBJ,EAqBIC,WArBJ,EAsBIC,QAtBJ,EAuBIC,UAvBJ,EAwBIC,QAxBJ,EAyBIC,gBAzBJ,EA0BIC,UA1BJ,EA0BgB;AAEd,OAAKtB,EAAL,GAAyBA,EAAzB;AACA,OAAKuB,UAAL,GAA0B,CAA1B;AACA,OAAKC,KAAL,GAAyB,EAAzB;AACA,OAAKC,SAAL,GAAyB,EAAzB;AACA,OAAKC,SAAL,GAAyB,EAAzB;AACA,OAAKzB,OAAL,GAAyBA,OAAzB;AACA,OAAK0B,KAAL,GAAyB,IAAzB;AAEA,OAAKzB,SAAL,GAAyBA,SAAzB;AACA,OAAKC,UAAL,GAAyBA,UAAzB;AACA,OAAKT,WAAL,GAAyBA,WAAzB;AACA,OAAKC,UAAL,GAAyBA,UAAzB;AACA,OAAKC,eAAL,GAAyBA,eAAzB;AACA,OAAKC,aAAL,GAAyBA,aAAzB;AAEA,OAAKO,iBAAL,GAAyBA,iBAAzB;AACA,OAAKE,cAAL,GAAyBA,cAAzB;AACA,OAAKE,eAAL,GAAyBA,eAAzB;AACA,OAAKD,WAAL,GAAyBA,WAAzB;AACA,OAAKF,WAAL,GAAyBA,WAAzB;AACA,OAAKI,WAAL,GAAyBA,WAAzB;AACA,OAAKmB,aAAL,GAAyB,CAAzB;AAEA,OAAKC,SAAL,GAAyB,CAAzB;AACA,OAAKnB,aAAL,GAAyBA,aAAzB;AACA,OAAKE,UAAL,GAAyBA,UAAzB;AACA,OAAKC,OAAL,GAAyBA,OAAzB;AACA,OAAKF,OAAL,GAAyBA,OAAzB;AACA,OAAKG,OAAL,GAAyBA,OAAzB;AACA,OAAKgB,SAAL,GAAyB,CAAzB;AAEA,OAAKf,cAAL,GAAyBA,cAAzB;AACA,OAAKE,WAAL,GAAyBA,WAAzB;AACA,OAAKC,QAAL,GAAyBA,QAAzB;AACA,OAAKC,UAAL,GAAyBA,UAAzB;AACA,OAAKH,QAAL,GAAyBA,QAAzB;AACA,OAAKI,QAAL,GAAyBA,QAAzB;AACA,OAAKW,UAAL,GAAyB,CAAzB;AAEA,OAAKC,gBAAL,GAAyB,CAAzB;AACA,OAAKX,gBAAL,GAAyBA,gBAAzB;AACA,OAAKC,UAAL,GAAyBA,UAAzB;AACA,OAAKW,YAAL,GAAyB,CAAzB;AACA,OAAKC,YAAL,GAAyB,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAzB;AACA,OAAKC,aAAL,GAAyB,IAAzB;AAEA,OAAKC,UAAL,GAAyB,IAAzB;AACA,OAAKC,MAAL,GAAyB,CAAzB;AACA,OAAKC,MAAL,GAAyB,CACvB,CAAEC,QAAF,EAAYA,QAAZ,EAAsBA,QAAtB,CADuB,EAEvB,CAAC,CAACA,QAAF,EAAW,CAACA,QAAZ,EAAqB,CAACA,QAAtB,CAFuB,CAAzB;AAGA,OAAKC,UAAL,GAAyB,CACvB,CAAC,CAACD,QAAF,EAAW,CAACA,QAAZ,EAAqB,CAACA,QAAtB,CADuB,EAEvB,CAAEA,QAAF,EAAYA,QAAZ,EAAsBA,QAAtB,CAFuB,CAAzB;AAIA,OAAKE,aAAL,GAAqB,CAAC,GAAD,EAAM,GAAN,EAAW,CAAX,CAArB;AACA,OAAKC,YAAL,GAAqB,GAArB;AACA,OAAKC,YAAL,GAAqB,GAArB;AACA,OAAKC,aAAL,GAAqB,GAArB;AACA,OAAKC,SAAL,GAAqB,GAArB;AACA,OAAKC,OAAL,GAAqB,GAArB;AAEA,OAAKC,OAAL,GAAqB,GAArB;AACA,OAAKC,QAAL,GAAqB,KAArB;AACA,OAAKC,YAAL,GAAqB,KAArB;AAEA,OAAKC,MAAL,GAAoBpD,QAApB;AACA,OAAKqD,KAAL,GAAoBrD,QAApB;AACA,OAAKsD,WAAL,GAAoBtD,QAApB;AACA,OAAKuD,WAAL,GAAoB,CAAC,CAAD,EAAG,CAAH,CAApB;AACD;;AAED,IAAIC,KAAK,GAAGvD,cAAc,CAACwD,SAA3B;;AAEAD,KAAK,CAACE,QAAN,GAAiB,YAAW;AAC1B,SAAO,CAAC,KAAKR,QAAb;AACD,CAFD;;AAIAM,KAAK,CAACG,aAAN,GAAsB,YAAW;AAC/B,SAAO,KAAKT,QAAZ;AACD,CAFD;;AAIAM,KAAK,CAACI,SAAN,GAAkB,CAAlB;;AAEAJ,KAAK,CAACK,WAAN,GAAoB,UAASC,EAAT,EAAa;AAC/B,OAAKvB,MAAL,GAAcuB,EAAd;AACD,CAFD;;AAIA,SAASC,mBAAT,CAA6BC,KAA7B,EAAoCb,YAApC,EAAkD;AAEhD,MAAG,CAACA,YAAJ,EAAkB,OAAO,CAAP;AAClB,MAAG,CAACA,YAAY,CAACc,MAAjB,EAAyB,OAAO,CAAP;;AAEzB,OAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGf,YAAY,CAACc,MAAhC,EAAwC,EAAEC,CAA1C,EAA6C;AAC3C,QAAGf,YAAY,CAACc,MAAb,GAAsB,CAAzB,EAA4B,OAAO,CAAP;AAC5B,QAAGd,YAAY,CAACe,CAAD,CAAZ,CAAgB,CAAhB,MAAuBF,KAA1B,EAAiC,OAAOb,YAAY,CAACe,CAAD,CAAZ,CAAgB,CAAhB,CAAP;;AACjC,QAAGf,YAAY,CAACe,CAAD,CAAZ,CAAgB,CAAhB,IAAqBF,KAArB,IAA8BE,CAAC,GAAG,CAArC,EAAwC;AACtC,UAAIC,CAAC,GAAG,CAAChB,YAAY,CAACe,CAAD,CAAZ,CAAgB,CAAhB,IAAqBF,KAAtB,KAAgCb,YAAY,CAACe,CAAD,CAAZ,CAAgB,CAAhB,IAAqBf,YAAY,CAACe,CAAC,GAAG,CAAL,CAAZ,CAAoB,CAApB,CAArD,CAAR;AACA,aAAOf,YAAY,CAACe,CAAD,CAAZ,CAAgB,CAAhB,KAAsB,IAAIC,CAA1B,IAA+BA,CAAC,GAAGhB,YAAY,CAACe,CAAC,GAAG,CAAL,CAAZ,CAAoB,CAApB,CAA1C;AACD;AACF;;AAED,SAAO,CAAP;AACD;;AAED,SAASE,WAAT,CAAqBC,KAArB,EAA4BlB,YAA5B,EAA0C;AACxC,MAAImB,MAAM,GAAGjF,QAAQ,CAAC;AAClBA,IAAAA,QAAQ,EAAEgF,KADQ;AAElBE,IAAAA,OAAO,EAAG,GAFQ;AAGlBC,IAAAA,MAAM,EAAG;AAHS,GAAD,CAArB;AAMA,MAAIC,MAAM,GAAG,IAAIC,UAAJ,CAAe,MAAI,CAAnB,CAAb;;AACA,OAAI,IAAIR,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAC,GAAf,EAAoB,EAAEA,CAAtB,EAAyB;AACvB,QAAIS,CAAC,GAAGL,MAAM,CAACJ,CAAD,CAAd;;AACA,SAAI,IAAIU,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAC,CAAf,EAAkB,EAAEA,CAApB,EAAuB;AACrBH,MAAAA,MAAM,CAAC,IAAEP,CAAF,GAAIU,CAAL,CAAN,GAAgBD,CAAC,CAACC,CAAD,CAAjB;AACD;;AACD,QAAG,CAACzB,YAAJ,EAAkB;AAChBsB,MAAAA,MAAM,CAAC,IAAEP,CAAF,GAAI,CAAL,CAAN,GAAgB,MAAMS,CAAC,CAAC,CAAD,CAAvB;AACD,KAFD,MAEO;AACLF,MAAAA,MAAM,CAAC,IAAEP,CAAF,GAAI,CAAL,CAAN,GAAgB,MAAMH,mBAAmB,CAACG,CAAC,GAAG,KAAL,EAAYf,YAAZ,CAAzC;AACD;AACF;;AAED,SAAO/D,OAAO,CAACqF,MAAD,EAAS,CAAC,GAAD,EAAK,GAAL,EAAS,CAAT,CAAT,EAAsB,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAtB,CAAd;AACD;;AAED,SAASI,cAAT,CAAwBC,KAAxB,EAA+B;AAC7B,MAAIC,CAAC,GAAGD,KAAK,CAACb,MAAd;AACA,MAAIQ,MAAM,GAAG,IAAIO,KAAJ,CAAUD,CAAV,CAAb;;AACA,OAAI,IAAIb,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACa,CAAf,EAAkB,EAAEb,CAApB,EAAuB;AACrBO,IAAAA,MAAM,CAACP,CAAD,CAAN,GAAYY,KAAK,CAACZ,CAAD,CAAL,CAAS,CAAT,CAAZ;AACD;;AACD,SAAOO,MAAP;AACD;;AAEDjB,KAAK,CAACyB,SAAN,GAAkB,UAASC,SAAT,EAAoB;AACpC,MAAG,CAACA,SAAD,IAAc,CAAC,KAAK7C,aAAvB,EAAsC;AACpC,SAAKF,YAAL,GAAoB,CAApB;AACA;AACD;;AACD,MAAIgD,KAAK,GAAG7F,UAAU,CAAC,KAAKoC,KAAN,EAAa,KAAKE,SAAlB,EAA6BsD,SAAS,CAACtD,SAAvC,CAAtB;AACA,MAAIF,KAAK,GAAWyD,KAAK,CAACzD,KAA1B;AACA,MAAI0D,SAAS,GAAOD,KAAK,CAACC,SAA1B;AACA,MAAIC,aAAa,GAAGF,KAAK,CAACE,aAA1B;AACA,MAAIC,QAAQ,GAAG5D,KAAK,CAACuC,MAArB;AACA,MAAIQ,MAAM,GAAGlF,IAAI,CAACgG,aAAL,CAAmB,IAAI,CAAJ,GAAQD,QAA3B,CAAb;AACA,MAAIE,GAAG,GAAG,CAAV;;AACA,OAAI,IAAItB,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACoB,QAAf,EAAyB,EAAEpB,CAA3B,EAA8B;AAC5B,QAAIS,CAAC,GAAGjD,KAAK,CAACwC,CAAD,CAAb;;AACA,SAAI,IAAIU,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAC,CAAf,EAAkB,EAAEA,CAApB,EAAuB;AACrB,UAAIa,CAAC,GAAGd,CAAC,CAAC,CAAD,CAAT;;AACA,UAAGA,CAAC,CAACV,MAAF,KAAa,CAAhB,EAAmB;AACjBwB,QAAAA,CAAC,GAAGd,CAAC,CAACC,CAAD,CAAL;AACD;;AACD,UAAIc,CAAC,GAAGN,SAAS,CAACK,CAAD,CAAT,CAAa,CAAb,CAAR;AACA,UAAIE,CAAC,GAAGP,SAAS,CAACK,CAAD,CAAT,CAAa,CAAb,CAAR;AACA,UAAIG,CAAC,GAAGP,aAAa,CAACI,CAAD,CAArB;AACA,UAAII,EAAE,GAAG,MAAMD,CAAf;AACA,UAAIE,EAAE,GAAG,KAAKnE,SAAL,CAAe+D,CAAf,CAAT;AACA,UAAIK,EAAE,GAAG,KAAKpE,SAAL,CAAegE,CAAf,CAAT;;AACA,WAAI,IAAIK,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAC,CAAf,EAAkB,EAAEA,CAApB,EAAuB;AACrBvB,QAAAA,MAAM,CAACe,GAAG,EAAJ,CAAN,GAAgBI,CAAC,GAAGE,EAAE,CAACE,CAAD,CAAN,GAAYH,EAAE,GAAGE,EAAE,CAACC,CAAD,CAAnC;AACD;AACF;AACF;;AACD,OAAK7D,YAAL,GAAqBqD,GAAG,GAAG,CAAP,GAAU,CAA9B;AACA,OAAKjE,gBAAL,CAAsB0E,MAAtB,CAA6BxB,MAAM,CAACyB,QAAP,CAAgB,CAAhB,EAAmBV,GAAnB,CAA7B;AACAjG,EAAAA,IAAI,CAAC4G,IAAL,CAAU1B,MAAV;AACD,CAjCD;;AAmCAjB,KAAK,CAACyC,MAAN,GAAe,UAASG,MAAT,EAAiB;AAC9BA,EAAAA,MAAM,GAAGA,MAAM,IAAI,EAAnB;AACA,MAAIlG,EAAE,GAAG,KAAKA,EAAd;AAEA,OAAK2B,KAAL,GAAa,IAAb;;AAEA,MAAG,mBAAmBuE,MAAtB,EAA8B;AAC5B,SAAK/D,aAAL,GAAqB+D,MAAM,CAAC/D,aAA5B;AACD;;AACD,MAAG,kBAAkB+D,MAArB,EAA6B;AAC3B,SAAKhE,YAAL,GAAoBgE,MAAM,CAAChE,YAA3B;AACD;;AACD,MAAG,eAAegE,MAAlB,EAA0B;AACxB,SAAKrE,SAAL,GAAiBqE,MAAM,CAACrE,SAAxB;AACD;;AACD,MAAG,mBAAmBqE,MAAtB,EAA8B;AAC5B,SAAKzD,aAAL,GAAqByD,MAAM,CAACzD,aAA5B;AACD;;AAED,OAAKO,QAAL,GAAgB,KAAhB,CAnB8B,CAmBR;;AACtB,MAAG,aAAakD,MAAhB,EAAwB;AACtB,SAAKnD,OAAL,GAAemD,MAAM,CAACnD,OAAtB;;AACA,QAAG,KAAKA,OAAL,GAAe,CAAlB,EAAqB;AACnB,WAAKC,QAAL,GAAgB,IAAhB;AACD;AACF;;AACD,MAAG,kBAAkBkD,MAArB,EAA6B;AAC3B,SAAKjD,YAAL,GAAoBiD,MAAM,CAACjD,YAA3B;AACA,SAAKD,QAAL,GAAgB,IAAhB;AACD;;AAED,MAAG,aAAakD,MAAhB,EAAwB;AACtB,SAAKxD,YAAL,GAAqBwD,MAAM,CAACC,OAA5B;AACD;;AACD,MAAG,aAAaD,MAAhB,EAAwB;AACtB,SAAKvD,YAAL,GAAoBuD,MAAM,CAACE,OAA3B;AACD;;AACD,MAAG,cAAcF,MAAjB,EAAyB;AACvB,SAAKtD,aAAL,GAAqBsD,MAAM,CAACG,QAA5B;AACD;;AACD,MAAG,eAAeH,MAAlB,EAA0B;AACxB,SAAKrD,SAAL,GAAiBqD,MAAM,CAACrD,SAAxB;AACD;;AACD,MAAG,aAAaqD,MAAhB,EAAwB;AACtB,SAAKpD,OAAL,GAAeoD,MAAM,CAACpD,OAAtB;AACD;;AAED,MAAGoD,MAAM,CAACjG,OAAV,EAAmB;AACjB,SAAKA,OAAL,CAAaqG,OAAb;AACA,SAAKrG,OAAL,GAAenB,aAAa,CAACkB,EAAD,EAAKkG,MAAM,CAACjG,OAAZ,CAA5B;AACD,GAHD,MAGO,IAAIiG,MAAM,CAAC/G,QAAX,EAAqB;AAC1B,SAAKc,OAAL,CAAasG,KAAb,GAAqB,CAAC,GAAD,EAAK,GAAL,CAArB;AACA,SAAKtG,OAAL,CAAauG,SAAb,GAAyBxG,EAAE,CAACyG,oBAA5B;AACA,SAAKxG,OAAL,CAAayG,SAAb,GAAyB1G,EAAE,CAAC2G,MAA5B;AACA,SAAK1G,OAAL,CAAa2G,SAAb,CAAuB1C,WAAW,CAACgC,MAAM,CAAC/G,QAAR,EAAkB,KAAK8D,YAAvB,CAAlC;AACA,SAAKhD,OAAL,CAAa4G,cAAb;AACD;;AAED,MAAIrF,KAAK,GAAG0E,MAAM,CAAC1E,KAAnB;AACA,MAAIC,SAAS,GAAGyE,MAAM,CAACzE,SAAvB;;AAEA,MAAG,CAACA,SAAD,IAAc,CAACD,KAAlB,EAAyB;AACvB;AACD;;AAED,MAAIsF,IAAI,GAAG,EAAX;AACA,MAAIC,IAAI,GAAG,EAAX;AACA,MAAIC,IAAI,GAAG,EAAX;AACA,MAAIC,IAAI,GAAG,EAAX;AACA,MAAIC,IAAI,GAAG,EAAX;AAEA,MAAIC,IAAI,GAAG,EAAX;AACA,MAAIC,IAAI,GAAG,EAAX;AACA,MAAIC,IAAI,GAAG,EAAX;AACA,MAAIC,IAAI,GAAG,EAAX;AAEA,MAAIC,IAAI,GAAG,EAAX;AACA,MAAIC,IAAI,GAAG,EAAX;AACA,MAAIC,IAAI,GAAG,EAAX;AACA,MAAIC,IAAI,GAAG,EAAX;AACA,MAAIC,IAAI,GAAG,EAAX,CAhF8B,CAkF9B;;AACA,OAAKnG,KAAL,GAAiBA,KAAjB;AACA,OAAKC,SAAL,GAAiBA,SAAjB,CApF8B,CAsF9B;;AACA,MAAImG,aAAa,GAAG1B,MAAM,CAAC0B,aAA3B;AACA,MAAIC,WAAW,GAAK3B,MAAM,CAAC2B,WAA3B;AACA,MAAIC,oBAAoB,GAAG5B,MAAM,CAAC4B,oBAAP,KAAgC,KAAK,CAArC,GAA0CtJ,8BAA1C,GAA2E0H,MAAM,CAAC4B,oBAA7G;AACA,MAAIC,kBAAkB,GAAG7B,MAAM,CAAC6B,kBAAP,KAA8B,KAAK,CAAnC,GAAwCtJ,4BAAxC,GAAuEyH,MAAM,CAAC6B,kBAAvG;;AACA,MAAG7B,MAAM,CAAC8B,eAAP,IAA0B,CAACH,WAA9B,EAA2C;AACzCA,IAAAA,WAAW,GAAG9I,OAAO,CAACkJ,WAAR,CAAoBzG,KAApB,EAA2BC,SAA3B,EAAsCsG,kBAAtC,CAAd;AACD;;AACD,MAAG,CAACF,WAAD,IAAgB,CAACD,aAApB,EAAmC;AACjCA,IAAAA,aAAa,GAAG7I,OAAO,CAAC6I,aAAR,CAAsBpG,KAAtB,EAA6BC,SAA7B,EAAwCqG,oBAAxC,CAAhB;AACD,GAhG6B,CAkG9B;;;AACA,MAAII,YAAY,GAAMhC,MAAM,CAACgC,YAA7B;AACA,MAAIC,UAAU,GAAQjC,MAAM,CAACiC,UAA7B;AACA,MAAIC,SAAS,GAASlC,MAAM,CAACkC,SAAP,IAAoB,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,CAA1C,CArG8B,CAuG9B;;AACA,MAAIC,SAAS,GAASnC,MAAM,CAACmC,SAA7B;AACA,MAAIC,eAAe,GAAGpC,MAAM,CAACoC,eAA7B;AACA,MAAIC,OAAO,GAAWrC,MAAM,CAACqC,OAA7B;AACA,MAAIC,aAAa,GAAKtC,MAAM,CAACsC,aAA7B;AAEA,MAAIC,WAAW,GAAOlG,QAAtB;AACA,MAAImG,WAAW,GAAO,CAACnG,QAAvB;;AACA,MAAG,CAAC8F,SAAD,IAAc,CAACE,OAAlB,EAA2B;AACzB,QAAGD,eAAH,EAAoB;AAClB,UAAGpC,MAAM,CAACyC,qBAAV,EAAiC;AAC/BF,QAAAA,WAAW,GAAG,CAACvC,MAAM,CAACyC,qBAAP,CAA6B,CAA7B,CAAf;AACAD,QAAAA,WAAW,GAAG,CAACxC,MAAM,CAACyC,qBAAP,CAA6B,CAA7B,CAAf;AACD,OAHD,MAGO;AACL,aAAI,IAAI3E,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACsE,eAAe,CAACvE,MAA/B,EAAuC,EAAEC,CAAzC,EAA4C;AAC1C,cAAI4E,CAAC,GAAGN,eAAe,CAACtE,CAAD,CAAvB;AACAyE,UAAAA,WAAW,GAAGI,IAAI,CAACC,GAAL,CAASL,WAAT,EAAsBG,CAAtB,CAAd;AACAF,UAAAA,WAAW,GAAGG,IAAI,CAACE,GAAL,CAASL,WAAT,EAAsBE,CAAtB,CAAd;AACD;AACF;AACF,KAXD,MAWO,IAAGJ,aAAH,EAAkB;AACvB,UAAGtC,MAAM,CAAC8C,mBAAV,EAA+B;AAC7BP,QAAAA,WAAW,GAAG,CAACvC,MAAM,CAAC8C,mBAAP,CAA2B,CAA3B,CAAf;AACAN,QAAAA,WAAW,GAAG,CAACxC,MAAM,CAAC8C,mBAAP,CAA2B,CAA3B,CAAf;AACD,OAHD,MAGO;AACL,aAAI,IAAIhF,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACwE,aAAa,CAACzE,MAA7B,EAAqC,EAAEC,CAAvC,EAA0C;AACxC,cAAI4E,CAAC,GAAGJ,aAAa,CAACxE,CAAD,CAArB;AACAyE,UAAAA,WAAW,GAAGI,IAAI,CAACC,GAAL,CAASL,WAAT,EAAsBG,CAAtB,CAAd;AACAF,UAAAA,WAAW,GAAGG,IAAI,CAACE,GAAL,CAASL,WAAT,EAAsBE,CAAtB,CAAd;AACD;AACF;AACF,KAXM,MAWA;AACL,WAAI,IAAI5E,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACvC,SAAS,CAACsC,MAAzB,EAAiC,EAAEC,CAAnC,EAAsC;AACpC,YAAI4E,CAAC,GAAGnH,SAAS,CAACuC,CAAD,CAAT,CAAa,CAAb,CAAR;AACAyE,QAAAA,WAAW,GAAGI,IAAI,CAACC,GAAL,CAASL,WAAT,EAAsBG,CAAtB,CAAd;AACAF,QAAAA,WAAW,GAAGG,IAAI,CAACE,GAAL,CAASL,WAAT,EAAsBE,CAAtB,CAAd;AACD;AACF;AACF;;AAED,MAAGN,eAAH,EAAoB;AAClB,SAAK5G,SAAL,GAAiB4G,eAAjB;AACD,GAFD,MAEO,IAAGE,aAAH,EAAkB;AACvB,SAAK9G,SAAL,GAAiB8G,aAAjB;AACD,GAFM,MAEA;AACL,SAAK9G,SAAL,GAAiBiD,cAAc,CAAClD,SAAD,CAA/B;AACD;;AAED,OAAKW,UAAL,GAAkB,EAAEoG,aAAa,IAAIL,UAAnB,CAAlB,CAvJ8B,CAyJ9B;;AACA,MAAIhH,UAAU,GAAQ+E,MAAM,CAAC/E,UAA7B;AACA,MAAI8H,aAAa,GAAK/C,MAAM,CAACgD,SAAP,IAAoB,GAA1C,CA3J8B,CA6J9B;;AACA,OAAK5G,MAAL,GAAoB,CAAC,CAACC,QAAD,EAAUA,QAAV,EAAmBA,QAAnB,CAAD,EAA+B,CAAC,CAACA,QAAF,EAAW,CAACA,QAAZ,EAAqB,CAACA,QAAtB,CAA/B,CAApB;;AACA,OAAI,IAAIyB,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACvC,SAAS,CAACsC,MAAzB,EAAiC,EAAEC,CAAnC,EAAsC;AACpC,QAAImF,CAAC,GAAG1H,SAAS,CAACuC,CAAD,CAAjB;;AACA,SAAI,IAAIU,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAC,CAAf,EAAkB,EAAEA,CAApB,EAAuB;AACrB,UAAG0E,KAAK,CAACD,CAAC,CAACzE,CAAD,CAAF,CAAL,IAAe,CAAC2E,QAAQ,CAACF,CAAC,CAACzE,CAAD,CAAF,CAA3B,EAAmC;AACjC;AACD;;AACD,WAAKpC,MAAL,CAAY,CAAZ,EAAeoC,CAAf,IAAoBmE,IAAI,CAACC,GAAL,CAAS,KAAKxG,MAAL,CAAY,CAAZ,EAAeoC,CAAf,CAAT,EAA4ByE,CAAC,CAACzE,CAAD,CAA7B,CAApB;AACA,WAAKpC,MAAL,CAAY,CAAZ,EAAeoC,CAAf,IAAoBmE,IAAI,CAACE,GAAL,CAAS,KAAKzG,MAAL,CAAY,CAAZ,EAAeoC,CAAf,CAAT,EAA4ByE,CAAC,CAACzE,CAAD,CAA7B,CAApB;AACD;AACF,GAxK6B,CA0K9B;;;AACA,MAAI9C,aAAa,GAAG,CAApB;AACA,MAAIE,SAAS,GAAG,CAAhB;AACA,MAAIC,UAAU,GAAG,CAAjB;;AAEFuH,EAAAA,SAAS,EACP,KAAI,IAAItF,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACxC,KAAK,CAACuC,MAArB,EAA6B,EAAEC,CAA/B,EAAkC;AAChC,QAAIuF,IAAI,GAAG/H,KAAK,CAACwC,CAAD,CAAhB;;AACA,YAAOuF,IAAI,CAACxF,MAAZ;AACE,WAAK,CAAL;AAEE,YAAIwB,CAAC,GAAGgE,IAAI,CAAC,CAAD,CAAZ;AACA,YAAIJ,CAAC,GAAG1H,SAAS,CAAC8D,CAAD,CAAjB,CAHF,CAKE;;AACA,aAAI,IAAIb,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAC,CAAf,EAAkB,EAAEA,CAApB,EAAuB;AACrB,cAAG0E,KAAK,CAACD,CAAC,CAACzE,CAAD,CAAF,CAAL,IAAe,CAAC2E,QAAQ,CAACF,CAAC,CAACzE,CAAD,CAAF,CAA3B,EAAmC;AACjC,qBAAS4E,SAAT;AACD;AACF;;AAED/B,QAAAA,IAAI,CAACiC,IAAL,CAAUL,CAAC,CAAC,CAAD,CAAX,EAAgBA,CAAC,CAAC,CAAD,CAAjB,EAAsBA,CAAC,CAAC,CAAD,CAAvB;AAEA,YAAI1E,CAAJ;;AACA,YAAGyD,YAAH,EAAiB;AACfzD,UAAAA,CAAC,GAAGyD,YAAY,CAAC3C,CAAD,CAAhB;AACD,SAFD,MAEO,IAAG4C,UAAH,EAAe;AACpB1D,UAAAA,CAAC,GAAG0D,UAAU,CAACnE,CAAD,CAAd;AACD,SAFM,MAEA;AACLS,UAAAA,CAAC,GAAG2D,SAAJ;AACD;;AACD,YAAG,KAAKnF,YAAL,IAAqBqF,eAAxB,EAAyC;AACvCvB,UAAAA,IAAI,CAACyC,IAAL,CAAU/E,CAAC,CAAC,CAAD,CAAX,EAAgBA,CAAC,CAAC,CAAD,CAAjB,EAAsBA,CAAC,CAAC,CAAD,CAAvB,EACE,KAAK1B,OAAL,GAAec,mBAAmB,CAChC,CAACyE,eAAe,CAAC/C,CAAD,CAAf,GAAqBkD,WAAtB,KAAsCC,WAAW,GAAGD,WAApD,CADgC,EAEhC,KAAKxF,YAF2B,CADpC;AAMD,SAPD,MAOO,IAAGwB,CAAC,CAACV,MAAF,KAAa,CAAhB,EAAmB;AACxByD,UAAAA,IAAI,CAACgC,IAAL,CAAU/E,CAAC,CAAC,CAAD,CAAX,EAAgBA,CAAC,CAAC,CAAD,CAAjB,EAAsBA,CAAC,CAAC,CAAD,CAAvB,EAA4B,KAAK1B,OAAjC;AACD,SAFM,MAEA;AACLyE,UAAAA,IAAI,CAACgC,IAAL,CAAU/E,CAAC,CAAC,CAAD,CAAX,EAAgBA,CAAC,CAAC,CAAD,CAAjB,EAAsBA,CAAC,CAAC,CAAD,CAAvB,EAA4BA,CAAC,CAAC,CAAD,CAAD,GAAO,KAAK1B,OAAxC;AACA,cAAG0B,CAAC,CAAC,CAAD,CAAD,GAAO,CAAV,EAAa,KAAKzB,QAAL,GAAgB,IAAhB;AACd;;AAED,YAAIyG,EAAJ;;AACA,YAAGpB,SAAH,EAAc;AACZoB,UAAAA,EAAE,GAAGpB,SAAS,CAAC9C,CAAD,CAAd;AACD,SAFD,MAEO,IAAG+C,eAAH,EAAoB;AACzBmB,UAAAA,EAAE,GAAG,CACH,CAACnB,eAAe,CAAC/C,CAAD,CAAf,GAAqBkD,WAAtB,KACCC,WAAW,GAAGD,WADf,CADG,EAE0B,CAF1B,CAAL;AAGD,SAJM,MAIA,IAAGF,OAAH,EAAY;AACjBkB,UAAAA,EAAE,GAAGlB,OAAO,CAACvE,CAAD,CAAZ;AACD,SAFM,MAEA,IAAGwE,aAAH,EAAkB;AACvBiB,UAAAA,EAAE,GAAG,CACH,CAACjB,aAAa,CAACxE,CAAD,CAAb,GAAmByE,WAApB,KACCC,WAAW,GAAGD,WADf,CADG,EAE0B,CAF1B,CAAL;AAGD,SAJM,MAIA;AACLgB,UAAAA,EAAE,GAAG,CACH,CAACN,CAAC,CAAC,CAAD,CAAD,GAAOV,WAAR,KACCC,WAAW,GAAGD,WADf,CADG,EAE0B,CAF1B,CAAL;AAGD;;AACDhB,QAAAA,IAAI,CAAC+B,IAAL,CAAUC,EAAE,CAAC,CAAD,CAAZ,EAAiBA,EAAE,CAAC,CAAD,CAAnB;;AAEA,YAAGtI,UAAH,EAAe;AACbuG,UAAAA,IAAI,CAAC8B,IAAL,CAAUrI,UAAU,CAACoE,CAAD,CAApB;AACD,SAFD,MAEO;AACLmC,UAAAA,IAAI,CAAC8B,IAAL,CAAUP,aAAV;AACD;;AAEDtB,QAAAA,IAAI,CAAC6B,IAAL,CAAUxF,CAAV;AAEAjC,QAAAA,UAAU,IAAI,CAAd;AACF;;AAEA,WAAK,CAAL;AAEE;AACA,aAAI,IAAI2C,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAC,CAAf,EAAkB,EAAEA,CAApB,EAAuB;AACrB,cAAIa,CAAC,GAAGgE,IAAI,CAAC7E,CAAD,CAAZ;AACA,cAAIyE,CAAC,GAAG1H,SAAS,CAAC8D,CAAD,CAAjB;;AACA,eAAI,IAAIO,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAC,CAAf,EAAkB,EAAEA,CAApB,EAAuB;AACrB,gBAAGsD,KAAK,CAACD,CAAC,CAACrD,CAAD,CAAF,CAAL,IAAe,CAACuD,QAAQ,CAACF,CAAC,CAACrD,CAAD,CAAF,CAA3B,EAAmC;AACjC,uBAASwD,SAAT;AACD;AACF;AACF;;AAED,aAAI,IAAI5E,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAC,CAAf,EAAkB,EAAEA,CAApB,EAAuB;AACrB,cAAIa,CAAC,GAAGgE,IAAI,CAAC7E,CAAD,CAAZ;AACA,cAAIyE,CAAC,GAAG1H,SAAS,CAAC8D,CAAD,CAAjB;AAEA4B,UAAAA,IAAI,CAACqC,IAAL,CAAUL,CAAC,CAAC,CAAD,CAAX,EAAgBA,CAAC,CAAC,CAAD,CAAjB,EAAsBA,CAAC,CAAC,CAAD,CAAvB;AAEA,cAAI1E,CAAJ;;AACA,cAAGyD,YAAH,EAAiB;AACfzD,YAAAA,CAAC,GAAGyD,YAAY,CAAC3C,CAAD,CAAhB;AACD,WAFD,MAEO,IAAG4C,UAAH,EAAe;AACpB1D,YAAAA,CAAC,GAAG0D,UAAU,CAACnE,CAAD,CAAd;AACD,WAFM,MAEA;AACLS,YAAAA,CAAC,GAAG2D,SAAJ;AACD;;AACD,cAAG,KAAKnF,YAAL,IAAqBqF,eAAxB,EAAyC;AACvCvB,YAAAA,IAAI,CAACyC,IAAL,CAAU/E,CAAC,CAAC,CAAD,CAAX,EAAgBA,CAAC,CAAC,CAAD,CAAjB,EAAsBA,CAAC,CAAC,CAAD,CAAvB,EACE,KAAK1B,OAAL,GAAec,mBAAmB,CAChC,CAACyE,eAAe,CAAC/C,CAAD,CAAf,GAAqBkD,WAAtB,KAAsCC,WAAW,GAAGD,WAApD,CADgC,EAEhC,KAAKxF,YAF2B,CADpC;AAMD,WAPD,MAOO,IAAGwB,CAAC,CAACV,MAAF,KAAa,CAAhB,EAAmB;AACxBqD,YAAAA,IAAI,CAACoC,IAAL,CAAU/E,CAAC,CAAC,CAAD,CAAX,EAAgBA,CAAC,CAAC,CAAD,CAAjB,EAAsBA,CAAC,CAAC,CAAD,CAAvB,EAA4B,KAAK1B,OAAjC;AACD,WAFM,MAEA;AACLqE,YAAAA,IAAI,CAACoC,IAAL,CAAU/E,CAAC,CAAC,CAAD,CAAX,EAAgBA,CAAC,CAAC,CAAD,CAAjB,EAAsBA,CAAC,CAAC,CAAD,CAAvB,EAA4BA,CAAC,CAAC,CAAD,CAAD,GAAO,KAAK1B,OAAxC;AACA,gBAAG0B,CAAC,CAAC,CAAD,CAAD,GAAO,CAAV,EAAa,KAAKzB,QAAL,GAAgB,IAAhB;AACd;;AAED,cAAIyG,EAAJ;;AACA,cAAGpB,SAAH,EAAc;AACZoB,YAAAA,EAAE,GAAGpB,SAAS,CAAC9C,CAAD,CAAd;AACD,WAFD,MAEO,IAAG+C,eAAH,EAAoB;AACzBmB,YAAAA,EAAE,GAAG,CACH,CAACnB,eAAe,CAAC/C,CAAD,CAAf,GAAqBkD,WAAtB,KACCC,WAAW,GAAGD,WADf,CADG,EAE0B,CAF1B,CAAL;AAGD,WAJM,MAIA,IAAGF,OAAH,EAAY;AACjBkB,YAAAA,EAAE,GAAGlB,OAAO,CAACvE,CAAD,CAAZ;AACD,WAFM,MAEA,IAAGwE,aAAH,EAAkB;AACvBiB,YAAAA,EAAE,GAAG,CACH,CAACjB,aAAa,CAACxE,CAAD,CAAb,GAAmByE,WAApB,KACCC,WAAW,GAAGD,WADf,CADG,EAE0B,CAF1B,CAAL;AAGD,WAJM,MAIA;AACLgB,YAAAA,EAAE,GAAG,CACH,CAACN,CAAC,CAAC,CAAD,CAAD,GAAOV,WAAR,KACCC,WAAW,GAAGD,WADf,CADG,EAE0B,CAF1B,CAAL;AAGD;;AACDpB,UAAAA,IAAI,CAACmC,IAAL,CAAUC,EAAE,CAAC,CAAD,CAAZ,EAAiBA,EAAE,CAAC,CAAD,CAAnB;AAEAnC,UAAAA,IAAI,CAACkC,IAAL,CAAUxF,CAAV;AACD;;AACDlC,QAAAA,SAAS,IAAI,CAAb;AACF;;AAEA,WAAK,CAAL;AACE;AACA,aAAI,IAAI4C,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAC,CAAf,EAAkB,EAAEA,CAApB,EAAuB;AACrB,cAAIa,CAAC,GAAGgE,IAAI,CAAC7E,CAAD,CAAZ;AACA,cAAIyE,CAAC,GAAG1H,SAAS,CAAC8D,CAAD,CAAjB;;AACA,eAAI,IAAIO,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAC,CAAf,EAAkB,EAAEA,CAApB,EAAuB;AACrB,gBAAGsD,KAAK,CAACD,CAAC,CAACrD,CAAD,CAAF,CAAL,IAAe,CAACuD,QAAQ,CAACF,CAAC,CAACrD,CAAD,CAAF,CAA3B,EAAmC;AACjC,uBAASwD,SAAT;AACD;AACF;AACF;;AAED,aAAI,IAAI5E,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAC,CAAf,EAAkB,EAAEA,CAApB,EAAuB;AACrB,cAAIa,CAAC,GAAGgE,IAAI,CAAC,IAAI7E,CAAL,CAAZ;AAEA,cAAIyE,CAAC,GAAG1H,SAAS,CAAC8D,CAAD,CAAjB;AACAuB,UAAAA,IAAI,CAAC0C,IAAL,CAAUL,CAAC,CAAC,CAAD,CAAX,EAAgBA,CAAC,CAAC,CAAD,CAAjB,EAAsBA,CAAC,CAAC,CAAD,CAAvB;AAEA,cAAI1E,CAAJ;;AACA,cAAGyD,YAAH,EAAiB;AACfzD,YAAAA,CAAC,GAAGyD,YAAY,CAAC3C,CAAD,CAAhB;AACD,WAFD,MAEO,IAAG4C,UAAH,EAAe;AACpB1D,YAAAA,CAAC,GAAG0D,UAAU,CAACnE,CAAD,CAAd;AACD,WAFM,MAEA;AACLS,YAAAA,CAAC,GAAG2D,SAAJ;AACD;;AAED,cAAG,CAAC3D,CAAJ,EAAO;AACLsC,YAAAA,IAAI,CAACyC,IAAL,CAAU,GAAV,EAAc,GAAd,EAAkB,GAAlB,EAAsB,CAAtB;AACD,WAFD,MAEO,IAAG,KAAKvG,YAAL,IAAqBqF,eAAxB,EAAyC;AAC9CvB,YAAAA,IAAI,CAACyC,IAAL,CAAU/E,CAAC,CAAC,CAAD,CAAX,EAAgBA,CAAC,CAAC,CAAD,CAAjB,EAAsBA,CAAC,CAAC,CAAD,CAAvB,EACE,KAAK1B,OAAL,GAAec,mBAAmB,CAChC,CAACyE,eAAe,CAAC/C,CAAD,CAAf,GAAqBkD,WAAtB,KAAsCC,WAAW,GAAGD,WAApD,CADgC,EAEhC,KAAKxF,YAF2B,CADpC;AAMD,WAPM,MAOA,IAAGwB,CAAC,CAACV,MAAF,KAAa,CAAhB,EAAmB;AACxBgD,YAAAA,IAAI,CAACyC,IAAL,CAAU/E,CAAC,CAAC,CAAD,CAAX,EAAgBA,CAAC,CAAC,CAAD,CAAjB,EAAsBA,CAAC,CAAC,CAAD,CAAvB,EAA4B,KAAK1B,OAAjC;AACD,WAFM,MAEA;AACLgE,YAAAA,IAAI,CAACyC,IAAL,CAAU/E,CAAC,CAAC,CAAD,CAAX,EAAgBA,CAAC,CAAC,CAAD,CAAjB,EAAsBA,CAAC,CAAC,CAAD,CAAvB,EAA4BA,CAAC,CAAC,CAAD,CAAD,GAAO,KAAK1B,OAAxC;AACA,gBAAG0B,CAAC,CAAC,CAAD,CAAD,GAAO,CAAV,EAAa,KAAKzB,QAAL,GAAgB,IAAhB;AACd;;AAED,cAAIyG,EAAJ;;AACA,cAAGpB,SAAH,EAAc;AACZoB,YAAAA,EAAE,GAAGpB,SAAS,CAAC9C,CAAD,CAAd;AACD,WAFD,MAEO,IAAG+C,eAAH,EAAoB;AACzBmB,YAAAA,EAAE,GAAG,CACH,CAACnB,eAAe,CAAC/C,CAAD,CAAf,GAAqBkD,WAAtB,KACCC,WAAW,GAAGD,WADf,CADG,EAE0B,CAF1B,CAAL;AAGD,WAJM,MAIA,IAAGF,OAAH,EAAY;AACjBkB,YAAAA,EAAE,GAAGlB,OAAO,CAACvE,CAAD,CAAZ;AACD,WAFM,MAEA,IAAGwE,aAAH,EAAkB;AACvBiB,YAAAA,EAAE,GAAG,CACH,CAACjB,aAAa,CAACxE,CAAD,CAAb,GAAmByE,WAApB,KACCC,WAAW,GAAGD,WADf,CADG,EAE0B,CAF1B,CAAL;AAGD,WAJM,MAIA;AACLgB,YAAAA,EAAE,GAAG,CACH,CAACN,CAAC,CAAC,CAAD,CAAD,GAAOV,WAAR,KACCC,WAAW,GAAGD,WADf,CADG,EAE0B,CAF1B,CAAL;AAGD;;AACDxB,UAAAA,IAAI,CAACuC,IAAL,CAAUC,EAAE,CAAC,CAAD,CAAZ,EAAiBA,EAAE,CAAC,CAAD,CAAnB;AAEA,cAAIC,CAAJ;;AACA,cAAG9B,aAAH,EAAkB;AAChB8B,YAAAA,CAAC,GAAG9B,aAAa,CAACrC,CAAD,CAAjB;AACD,WAFD,MAEO;AACLmE,YAAAA,CAAC,GAAG7B,WAAW,CAAC7D,CAAD,CAAf;AACD;;AACDgD,UAAAA,IAAI,CAACwC,IAAL,CAAUE,CAAC,CAAC,CAAD,CAAX,EAAgBA,CAAC,CAAC,CAAD,CAAjB,EAAsBA,CAAC,CAAC,CAAD,CAAvB;AAEAxC,UAAAA,IAAI,CAACsC,IAAL,CAAUxF,CAAV;AACD;;AACDpC,QAAAA,aAAa,IAAI,CAAjB;AACF;;AAEA;AACA;AAnNF;AAqND;;AAED,OAAKG,UAAL,GAAsBA,UAAtB;AACA,OAAKD,SAAL,GAAsBA,SAAtB;AACA,OAAKF,aAAL,GAAsBA,aAAtB;AAEA,OAAKb,cAAL,CAAoBgF,MAApB,CAA2BwB,IAA3B;AACA,OAAKtG,WAAL,CAAiB8E,MAAjB,CAAwByB,IAAxB;AACA,OAAKtG,QAAL,CAAc6E,MAAd,CAAqB0B,IAArB;AACA,OAAKtG,UAAL,CAAgB4E,MAAhB,CAAuB2B,IAAvB;AACA,OAAK1G,QAAL,CAAc+E,MAAd,CAAqB,IAAI4D,WAAJ,CAAgBhC,IAAhB,CAArB;AAEA,OAAKjH,aAAL,CAAmBqF,MAAnB,CAA0BoB,IAA1B;AACA,OAAKvG,UAAL,CAAgBmF,MAAhB,CAAuBqB,IAAvB;AACA,OAAKvG,OAAL,CAAakF,MAAb,CAAoBsB,IAApB;AACA,OAAK1G,OAAL,CAAaoF,MAAb,CAAoB,IAAI4D,WAAJ,CAAgBrC,IAAhB,CAApB;AAEA,OAAKlH,iBAAL,CAAuB2F,MAAvB,CAA8Be,IAA9B;AACA,OAAKxG,cAAL,CAAoByF,MAApB,CAA2BgB,IAA3B;AACA,OAAKxG,WAAL,CAAiBwF,MAAjB,CAAwBkB,IAAxB;AACA,OAAKzG,eAAL,CAAqBuF,MAArB,CAA4BiB,IAA5B;AACA,OAAK3G,WAAL,CAAiB0F,MAAjB,CAAwB,IAAI4D,WAAJ,CAAgBzC,IAAhB,CAAxB;AACD,CA7ZD;;AA+ZA5D,KAAK,CAACsG,eAAN,GAAwBtG,KAAK,CAACuG,IAAN,GAAa,UAAS3D,MAAT,EAAiB;AACpDA,EAAAA,MAAM,GAAGA,MAAM,IAAI,EAAnB;AACA,MAAIlG,EAAE,GAAY,KAAKA,EAAvB;AACA,MAAI8J,KAAK,GAAS5D,MAAM,CAAC4D,KAAP,IAAqBhK,QAAvC;AACA,MAAIiK,IAAI,GAAU7D,MAAM,CAAC6D,IAAP,IAAqBjK,QAAvC;AACA,MAAIkK,UAAU,GAAI9D,MAAM,CAAC8D,UAAP,IAAqBlK,QAAvC;AAEA,MAAI0C,UAAU,GAAG,CAAC,CAAC,CAAC,GAAF,EAAM,CAAC,GAAP,EAAW,CAAC,GAAZ,CAAD,EAAkB,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,CAAlB,CAAjB;;AACA,OAAI,IAAIwB,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAC,CAAf,EAAkB,EAAEA,CAApB,EAAuB;AACrBxB,IAAAA,UAAU,CAAC,CAAD,CAAV,CAAcwB,CAAd,IAAmB6E,IAAI,CAACE,GAAL,CAASvG,UAAU,CAAC,CAAD,CAAV,CAAcwB,CAAd,CAAT,EAA2B,KAAKxB,UAAL,CAAgB,CAAhB,EAAmBwB,CAAnB,CAA3B,CAAnB;AACAxB,IAAAA,UAAU,CAAC,CAAD,CAAV,CAAcwB,CAAd,IAAmB6E,IAAI,CAACC,GAAL,CAAStG,UAAU,CAAC,CAAD,CAAV,CAAcwB,CAAd,CAAT,EAA2B,KAAKxB,UAAL,CAAgB,CAAhB,EAAmBwB,CAAnB,CAA3B,CAAnB;AACD;;AAED,MAAIiG,QAAQ,GAAG;AACbH,IAAAA,KAAK,EAAOA,KADC;AAEbC,IAAAA,IAAI,EAAQA,IAFC;AAGbC,IAAAA,UAAU,EAAEA,UAHC;AAIbE,IAAAA,YAAY,EAAEpK,QAAQ,CAACqK,KAAT,EAJD;AAMb3H,IAAAA,UAAU,EAAEA,UANC;AAQb4H,IAAAA,QAAQ,EAAI,KAAK1H,YARJ;AASb2H,IAAAA,QAAQ,EAAI,KAAK1H,YATJ;AAUb2H,IAAAA,SAAS,EAAG,KAAK1H,aAVJ;AAWbC,IAAAA,SAAS,EAAG,KAAKA,SAXJ;AAYbC,IAAAA,OAAO,EAAK,KAAKA,OAZJ;AAcbyH,IAAAA,WAAW,EAAI,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAdF;AAeb9H,IAAAA,aAAa,EAAE,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAfF;AAiBbP,IAAAA,YAAY,EAAE,KAAKA,YAjBN;AAmBbjC,IAAAA,OAAO,EAAK;AAnBC,GAAf;AAsBAgK,EAAAA,QAAQ,CAACC,YAAT,GAAwBjL,MAAM,CAACgL,QAAQ,CAACC,YAAV,EAAwBD,QAAQ,CAACH,KAAjC,CAA9B;AAEA9J,EAAAA,EAAE,CAACwK,OAAH,CAAWxK,EAAE,CAACyK,SAAd;AAEA,OAAKxK,OAAL,CAAayK,IAAb,CAAkB,CAAlB;AAEA,MAAIC,eAAe,GAAG,IAAI7F,KAAJ,CAAU,EAAV,CAAtB;AACA9F,EAAAA,QAAQ,CAAC2L,eAAD,EAAkBV,QAAQ,CAACF,IAA3B,EAAiCE,QAAQ,CAACH,KAA1C,CAAR;AACA9K,EAAAA,QAAQ,CAAC2L,eAAD,EAAkBV,QAAQ,CAACD,UAA3B,EAAuCW,eAAvC,CAAR;AACA1L,EAAAA,MAAM,CAAC0L,eAAD,EAAkBA,eAAlB,CAAN;;AAEA,OAAI,IAAI3G,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAC,CAAf,EAAkB,EAAEA,CAApB,EAAuB;AACrBiG,IAAAA,QAAQ,CAACM,WAAT,CAAqBvG,CAArB,IAA0B2G,eAAe,CAAC,KAAG3G,CAAJ,CAAf,GAAwB2G,eAAe,CAAC,EAAD,CAAjE;AACD;;AAED,MAAIjF,CAAC,GAAGiF,eAAe,CAAC,EAAD,CAAvB;;AACA,OAAI,IAAI3G,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAC,CAAf,EAAkB,EAAEA,CAApB,EAAuB;AACrB0B,IAAAA,CAAC,IAAI,KAAKjD,aAAL,CAAmBuB,CAAnB,IAAwB2G,eAAe,CAAC,IAAE3G,CAAF,GAAI,CAAL,CAA5C;AACD;;AACD,OAAI,IAAIA,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAC,CAAf,EAAkB,EAAEA,CAApB,EAAuB;AACrB,QAAI4G,CAAC,GAAGD,eAAe,CAAC,KAAG3G,CAAJ,CAAvB;;AACA,SAAI,IAAIU,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAC,CAAf,EAAkB,EAAEA,CAApB,EAAuB;AACrBkG,MAAAA,CAAC,IAAID,eAAe,CAAC,IAAEjG,CAAF,GAAIV,CAAL,CAAf,GAAyB,KAAKvB,aAAL,CAAmBiC,CAAnB,CAA9B;AACD;;AACDuF,IAAAA,QAAQ,CAACxH,aAAT,CAAuBuB,CAAvB,IAA4B4G,CAAC,GAAGlF,CAAhC;AACD;;AAED,MAAG,KAAK9D,aAAL,GAAqB,CAAxB,EAA2B;AACzB,QAAIiJ,MAAM,GAAG,KAAK3K,SAAlB;AACA2K,IAAAA,MAAM,CAACH,IAAP;AACAG,IAAAA,MAAM,CAACZ,QAAP,GAAkBA,QAAlB;AAEA,SAAKxJ,WAAL,CAAiBiK,IAAjB;AACA1K,IAAAA,EAAE,CAAC8K,UAAH,CAAc9K,EAAE,CAAC+K,SAAjB,EAA4B,CAA5B,EAA+B,KAAKnJ,aAAL,GAAmB,CAAlD;AACA,SAAKnB,WAAL,CAAiBuK,MAAjB;AACD;;AAED,MAAG,KAAKlJ,SAAL,GAAiB,CAAjB,IAAsB,KAAKD,SAAL,GAAiB,CAA1C,EAA6C;AAC3C,QAAIgJ,MAAM,GAAG,KAAK1K,UAAlB;AACA0K,IAAAA,MAAM,CAACH,IAAP;AACAG,IAAAA,MAAM,CAACZ,QAAP,GAAkBA,QAAlB;AAEA,SAAKnJ,OAAL,CAAa4J,IAAb;AACA1K,IAAAA,EAAE,CAAC6B,SAAH,CAAa,KAAKA,SAAL,GAAiB,KAAKN,UAAnC;AACAvB,IAAAA,EAAE,CAAC8K,UAAH,CAAc9K,EAAE,CAACiL,KAAjB,EAAwB,CAAxB,EAA2B,KAAKnJ,SAAL,GAAe,CAA1C;AACA,SAAKhB,OAAL,CAAakK,MAAb;AACD;;AAED,MAAG,KAAKjJ,UAAL,GAAkB,CAArB,EAAwB;AACtB,QAAI8I,MAAM,GAAG,KAAKnL,WAAlB;AACAmL,IAAAA,MAAM,CAACH,IAAP;AACAG,IAAAA,MAAM,CAACZ,QAAP,GAAkBA,QAAlB;AAEA,SAAK7I,QAAL,CAAcsJ,IAAd;AACA1K,IAAAA,EAAE,CAAC8K,UAAH,CAAc9K,EAAE,CAACkL,MAAjB,EAAyB,CAAzB,EAA4B,KAAKnJ,UAAjC;AACA,SAAKX,QAAL,CAAc4J,MAAd;AACD;;AAED,MAAG,KAAK7I,aAAL,IAAsB,KAAKF,YAAL,GAAoB,CAA1C,IAA+C,KAAKD,gBAAL,GAAwB,CAA1E,EAA6E;AAC3E,QAAI6I,MAAM,GAAG,KAAKhL,aAAlB;AACAgL,IAAAA,MAAM,CAACH,IAAP;AACAG,IAAAA,MAAM,CAACZ,QAAP,GAAkBA,QAAlB;AAEA,SAAK3I,UAAL,CAAgBoJ,IAAhB;AACA1K,IAAAA,EAAE,CAAC8K,UAAH,CAAc9K,EAAE,CAACiL,KAAjB,EAAwB,CAAxB,EAA2B,KAAKhJ,YAAhC;AACA,SAAKX,UAAL,CAAgB0J,MAAhB;AACD;AACF,CAtGD;;AAwGA1H,KAAK,CAAC6H,QAAN,GAAiB,UAASjF,MAAT,EAAiB;AAChCA,EAAAA,MAAM,GAAGA,MAAM,IAAI,EAAnB;AAEA,MAAIlG,EAAE,GAAW,KAAKA,EAAtB;AAEA,MAAI8J,KAAK,GAAQ5D,MAAM,CAAC4D,KAAP,IAAqBhK,QAAtC;AACA,MAAIiK,IAAI,GAAS7D,MAAM,CAAC6D,IAAP,IAAqBjK,QAAtC;AACA,MAAIkK,UAAU,GAAG9D,MAAM,CAAC8D,UAAP,IAAqBlK,QAAtC;AAEA,MAAI0C,UAAU,GAAG,CAAC,CAAC,CAAC,GAAF,EAAM,CAAC,GAAP,EAAW,CAAC,GAAZ,CAAD,EAAkB,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,CAAlB,CAAjB;;AACA,OAAI,IAAIwB,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAC,CAAf,EAAkB,EAAEA,CAApB,EAAuB;AACrBxB,IAAAA,UAAU,CAAC,CAAD,CAAV,CAAcwB,CAAd,IAAmB6E,IAAI,CAACE,GAAL,CAASvG,UAAU,CAAC,CAAD,CAAV,CAAcwB,CAAd,CAAT,EAA2B,KAAKxB,UAAL,CAAgB,CAAhB,EAAmBwB,CAAnB,CAA3B,CAAnB;AACAxB,IAAAA,UAAU,CAAC,CAAD,CAAV,CAAcwB,CAAd,IAAmB6E,IAAI,CAACC,GAAL,CAAStG,UAAU,CAAC,CAAD,CAAV,CAAcwB,CAAd,CAAT,EAA2B,KAAKxB,UAAL,CAAgB,CAAhB,EAAmBwB,CAAnB,CAA3B,CAAnB;AACD,GAb+B,CAehC;;;AACA,OAAKd,MAAL,GAAmB,GAAGiH,KAAH,CAASiB,IAAT,CAActB,KAAd,CAAnB;AACA,OAAK3G,KAAL,GAAmB,GAAGgH,KAAH,CAASiB,IAAT,CAAcrB,IAAd,CAAnB;AACA,OAAK3G,WAAL,GAAmB,GAAG+G,KAAH,CAASiB,IAAT,CAAcpB,UAAd,CAAnB;AACA,OAAK3G,WAAL,GAAmB,CAACrD,EAAE,CAACqL,kBAAJ,EAAwBrL,EAAE,CAACsL,mBAA3B,CAAnB;AAEA,MAAIrB,QAAQ,GAAG;AACbH,IAAAA,KAAK,EAAOA,KADC;AAEbC,IAAAA,IAAI,EAAQA,IAFC;AAGbC,IAAAA,UAAU,EAAEA,UAHC;AAIbxH,IAAAA,UAAU,EAAEA,UAJC;AAKbH,IAAAA,MAAM,EAAM,KAAKA,MAAL,GAAc;AALb,GAAf;AAQA,MAAIwI,MAAM,GAAG,KAAKlL,UAAlB;AACAkL,EAAAA,MAAM,CAACH,IAAP;AACAG,EAAAA,MAAM,CAACZ,QAAP,GAAkBA,QAAlB;;AAEA,MAAG,KAAKrI,aAAL,GAAqB,CAAxB,EAA2B;AACzB,SAAKnB,WAAL,CAAiBiK,IAAjB;AACA1K,IAAAA,EAAE,CAAC8K,UAAH,CAAc9K,EAAE,CAAC+K,SAAjB,EAA4B,CAA5B,EAA+B,KAAKnJ,aAAL,GAAmB,CAAlD;AACA,SAAKnB,WAAL,CAAiBuK,MAAjB;AACD;;AAED,MAAG,KAAKlJ,SAAL,GAAiB,CAApB,EAAuB;AACrB,SAAKhB,OAAL,CAAa4J,IAAb;AACA1K,IAAAA,EAAE,CAAC6B,SAAH,CAAa,KAAKA,SAAL,GAAiB,KAAKN,UAAnC;AACAvB,IAAAA,EAAE,CAAC8K,UAAH,CAAc9K,EAAE,CAACiL,KAAjB,EAAwB,CAAxB,EAA2B,KAAKnJ,SAAL,GAAe,CAA1C;AACA,SAAKhB,OAAL,CAAakK,MAAb;AACD;;AAED,MAAG,KAAKjJ,UAAL,GAAkB,CAArB,EAAwB;AACtB,QAAI8I,MAAM,GAAG,KAAKjL,eAAlB;AACAiL,IAAAA,MAAM,CAACH,IAAP;AACAG,IAAAA,MAAM,CAACZ,QAAP,GAAkBA,QAAlB;AAEA,SAAK7I,QAAL,CAAcsJ,IAAd;AACA1K,IAAAA,EAAE,CAAC8K,UAAH,CAAc9K,EAAE,CAACkL,MAAjB,EAAyB,CAAzB,EAA4B,KAAKnJ,UAAjC;AACA,SAAKX,QAAL,CAAc4J,MAAd;AACD;AACF,CAvDD;;AA0DA1H,KAAK,CAACiI,IAAN,GAAa,UAASC,QAAT,EAAmB;AAC9B,MAAG,CAACA,QAAJ,EAAc;AACZ,WAAO,IAAP;AACD;;AACD,MAAGA,QAAQ,CAAC5H,EAAT,KAAgB,KAAKvB,MAAxB,EAAgC;AAC9B,WAAO,IAAP;AACD;;AAED,MAAIoJ,MAAM,GAAMD,QAAQ,CAACE,KAAT,CAAe,CAAf,IAAoB,MAAIF,QAAQ,CAACE,KAAT,CAAe,CAAf,CAAxB,GAA4C,QAAMF,QAAQ,CAACE,KAAT,CAAe,CAAf,CAAlE;AACA,MAAInC,IAAI,GAAQ,KAAK/H,KAAL,CAAWiK,MAAX,CAAhB;AACA,MAAIhK,SAAS,GAAG,KAAKA,SAArB;AAEA,MAAIkK,OAAO,GAAK,IAAI7G,KAAJ,CAAUyE,IAAI,CAACxF,MAAf,CAAhB;;AACA,OAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACuF,IAAI,CAACxF,MAApB,EAA4B,EAAEC,CAA9B,EAAiC;AAC/B2H,IAAAA,OAAO,CAAC3H,CAAD,CAAP,GAAavC,SAAS,CAAC8H,IAAI,CAACvF,CAAD,CAAL,CAAtB;AACD;;AAED,MAAI4H,CAAC,GAAGJ,QAAQ,CAACK,KAAT,CAAe,CAAf,CAAR;AACA,MAAIC,CAAC,GAAGN,QAAQ,CAACK,KAAT,CAAe,CAAf,CAAR;;AAEA,MAAG,CAAC,KAAKzJ,UAAT,EAAqB;AACnB,QAAI2J,CAAC,GAAG,KAAKtK,SAAL,CAAe8H,IAAI,CAAC,CAAD,CAAnB,CAAR;AACA,QAAIyC,CAAC,GAAG,KAAKvK,SAAL,CAAe8H,IAAI,CAAC,CAAD,CAAnB,CAAR;AACA,QAAI0C,CAAC,GAAG,KAAKxK,SAAL,CAAe8H,IAAI,CAAC,CAAD,CAAnB,CAAR;AAEA,QAAI2C,cAAc,GAAG,CACnB,CAACH,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CAAR,GAAcC,CAAC,CAAC,CAAD,CAAhB,IAAuB,CADJ,EAEnB,CAACF,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CAAR,GAAcC,CAAC,CAAC,CAAD,CAAhB,IAAuB,CAFJ,EAGnB,CAACF,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CAAR,GAAcC,CAAC,CAAC,CAAD,CAAhB,IAAuB,CAHJ,CAArB;AAMA,WAAO;AACLE,MAAAA,WAAW,EAAG,IADT;AAELC,MAAAA,QAAQ,EAAE,CAACR,CAAD,EAAIE,CAAJ,CAFL;AAGLO,MAAAA,KAAK,EAAKZ,MAHL;AAILlC,MAAAA,IAAI,EAAMA,IAJL;AAKLkC,MAAAA,MAAM,EAAIA,MALL;AAML/J,MAAAA,SAAS,EAAG,KAAKA,SAAL,CAAe+J,MAAf,CANP;AAOLS,MAAAA,cAAc,EAAEA;AAPX,KAAP;AASD;;AAED,MAAII,IAAI,GAAG/M,YAAY,CACrBoM,OADqB,EAErB,CAACC,CAAC,GAAG,KAAKrK,UAAV,EAAsB,KAAK8B,WAAL,CAAiB,CAAjB,IAAsByI,CAAC,GAAG,KAAKvK,UAArD,CAFqB,EAGrB,KAAK2B,MAHgB,EAIrB,KAAKC,KAJgB,EAKrB,KAAKC,WALgB,EAMrB,KAAKC,WANgB,CAAvB;;AAQA,MAAG,CAACiJ,IAAJ,EAAU;AACR,WAAO,IAAP;AACD;;AAED,MAAIC,OAAO,GAAGD,IAAI,CAAC,CAAD,CAAlB;AACA,MAAIE,eAAe,GAAG,GAAtB;;AACA,OAAI,IAAIxI,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACuF,IAAI,CAACxF,MAApB,EAA4B,EAAEC,CAA9B,EAAiC;AAC/BwI,IAAAA,eAAe,IAAID,OAAO,CAACvI,CAAD,CAAP,GAAa,KAAKtC,SAAL,CAAe6H,IAAI,CAACvF,CAAD,CAAnB,CAAhC;AACD;;AAED,SAAO;AACLoI,IAAAA,QAAQ,EAAEE,IAAI,CAAC,CAAD,CADT;AAELD,IAAAA,KAAK,EAAK9C,IAAI,CAAC+C,IAAI,CAAC,CAAD,CAAL,CAFT;AAGL/C,IAAAA,IAAI,EAAMA,IAHL;AAILkC,IAAAA,MAAM,EAAIA,MAJL;AAKL/J,IAAAA,SAAS,EAAG8K,eALP;AAMLN,IAAAA,cAAc,EAAE,KAAKzK,SAAL,CAAe8H,IAAI,CAAC+C,IAAI,CAAC,CAAD,CAAL,CAAnB;AANX,GAAP;AAQD,CApED;;AAuEAhJ,KAAK,CAACgD,OAAN,GAAgB,YAAW;AACzB,OAAKrG,OAAL,CAAaqG,OAAb;AAEA,OAAKpG,SAAL,CAAeoG,OAAf;AACA,OAAKnG,UAAL,CAAgBmG,OAAhB;AACA,OAAK5G,WAAL,CAAiB4G,OAAjB;AACA,OAAK3G,UAAL,CAAgB2G,OAAhB;AACA,OAAK1G,eAAL,CAAqB0G,OAArB;AAEA,OAAK7F,WAAL,CAAiB6F,OAAjB;AACA,OAAKlG,iBAAL,CAAuBkG,OAAvB;AACA,OAAKhG,cAAL,CAAoBgG,OAApB;AACA,OAAK/F,WAAL,CAAiB+F,OAAjB;AACA,OAAK9F,eAAL,CAAqB8F,OAArB;AACA,OAAKjG,WAAL,CAAiBiG,OAAjB;AAEA,OAAKxF,OAAL,CAAawF,OAAb;AACA,OAAK5F,aAAL,CAAmB4F,OAAnB;AACA,OAAK1F,UAAL,CAAgB0F,OAAhB;AACA,OAAKzF,OAAL,CAAayF,OAAb;AACA,OAAK3F,OAAL,CAAa2F,OAAb;AAEA,OAAKlF,QAAL,CAAckF,OAAd;AACA,OAAKvF,cAAL,CAAoBuF,OAApB;AACA,OAAKrF,WAAL,CAAiBqF,OAAjB;AACA,OAAKpF,QAAL,CAAcoF,OAAd;AACA,OAAKnF,UAAL,CAAgBmF,OAAhB;AACA,OAAKtF,QAAL,CAAcsF,OAAd;AAEA,OAAKhF,UAAL,CAAgBgF,OAAhB;AACA,OAAKjF,gBAAL,CAAsBiF,OAAtB;AACA,OAAKzG,aAAL,CAAmByG,OAAnB;AACD,CAhCD;;AAkCA,SAASmG,gBAAT,CAA0BzM,EAA1B,EAA8B;AAC5B,MAAI6K,MAAM,GAAGnM,YAAY,CAACsB,EAAD,EAAKR,UAAU,CAACkN,MAAhB,EAAwBlN,UAAU,CAACmN,QAAnC,CAAzB;AACA9B,EAAAA,MAAM,CAAC+B,UAAP,CAAkBR,QAAlB,CAA2BS,QAA3B,GAAsC,CAAtC;AACAhC,EAAAA,MAAM,CAAC+B,UAAP,CAAkBE,KAAlB,CAAwBD,QAAxB,GAAsC,CAAtC;AACAhC,EAAAA,MAAM,CAAC+B,UAAP,CAAkBnD,EAAlB,CAAqBoD,QAArB,GAAsC,CAAtC;AACAhC,EAAAA,MAAM,CAAC+B,UAAP,CAAkBG,MAAlB,CAAyBF,QAAzB,GAAsC,CAAtC;AACA,SAAOhC,MAAP;AACD;;AAED,SAASmC,gBAAT,CAA0BhN,EAA1B,EAA8B;AAC5B,MAAI6K,MAAM,GAAGnM,YAAY,CAACsB,EAAD,EAAKP,UAAU,CAACiN,MAAhB,EAAwBjN,UAAU,CAACkN,QAAnC,CAAzB;AACA9B,EAAAA,MAAM,CAAC+B,UAAP,CAAkBR,QAAlB,CAA2BS,QAA3B,GAAsC,CAAtC;AACAhC,EAAAA,MAAM,CAAC+B,UAAP,CAAkBE,KAAlB,CAAwBD,QAAxB,GAAsC,CAAtC;AACAhC,EAAAA,MAAM,CAAC+B,UAAP,CAAkBnD,EAAlB,CAAqBoD,QAArB,GAAsC,CAAtC;AACA,SAAOhC,MAAP;AACD;;AAED,SAASoC,iBAAT,CAA2BjN,EAA3B,EAA+B;AAC7B,MAAI6K,MAAM,GAAGnM,YAAY,CAACsB,EAAD,EAAKN,WAAW,CAACgN,MAAjB,EAAyBhN,WAAW,CAACiN,QAArC,CAAzB;AACA9B,EAAAA,MAAM,CAAC+B,UAAP,CAAkBR,QAAlB,CAA2BS,QAA3B,GAAuC,CAAvC;AACAhC,EAAAA,MAAM,CAAC+B,UAAP,CAAkBE,KAAlB,CAAwBD,QAAxB,GAAuC,CAAvC;AACAhC,EAAAA,MAAM,CAAC+B,UAAP,CAAkBnD,EAAlB,CAAqBoD,QAArB,GAAuC,CAAvC;AACAhC,EAAAA,MAAM,CAAC+B,UAAP,CAAkB1D,SAAlB,CAA4B2D,QAA5B,GAAuC,CAAvC;AACA,SAAOhC,MAAP;AACD;;AAED,SAASqC,gBAAT,CAA0BlN,EAA1B,EAA8B;AAC5B,MAAI6K,MAAM,GAAGnM,YAAY,CAACsB,EAAD,EAAKL,UAAU,CAAC+M,MAAhB,EAAwB/M,UAAU,CAACgN,QAAnC,CAAzB;AACA9B,EAAAA,MAAM,CAAC+B,UAAP,CAAkBR,QAAlB,CAA2BS,QAA3B,GAAsC,CAAtC;AACAhC,EAAAA,MAAM,CAAC+B,UAAP,CAAkBhJ,EAAlB,CAAqBiJ,QAArB,GAAsC,CAAtC;AACA,SAAOhC,MAAP;AACD;;AAED,SAASsC,qBAAT,CAA+BnN,EAA/B,EAAmC;AACjC,MAAI6K,MAAM,GAAGnM,YAAY,CAACsB,EAAD,EAAKJ,eAAe,CAAC8M,MAArB,EAA6B9M,eAAe,CAAC+M,QAA7C,CAAzB;AACA9B,EAAAA,MAAM,CAAC+B,UAAP,CAAkBR,QAAlB,CAA2BS,QAA3B,GAAuC,CAAvC;AACAhC,EAAAA,MAAM,CAAC+B,UAAP,CAAkBhJ,EAAlB,CAAqBiJ,QAArB,GAAuC,CAAvC;AACAhC,EAAAA,MAAM,CAAC+B,UAAP,CAAkB1D,SAAlB,CAA4B2D,QAA5B,GAAuC,CAAvC;AACA,SAAOhC,MAAP;AACD;;AAED,SAASuC,mBAAT,CAA6BpN,EAA7B,EAAiC;AAC/B,MAAI6K,MAAM,GAAGnM,YAAY,CAACsB,EAAD,EAAKH,aAAa,CAAC6M,MAAnB,EAA2B7M,aAAa,CAAC8M,QAAzC,CAAzB;AACA9B,EAAAA,MAAM,CAAC+B,UAAP,CAAkBR,QAAlB,CAA2BS,QAA3B,GAAsC,CAAtC;AACA,SAAOhC,MAAP;AACD;;AAED,SAASwC,oBAAT,CAA8BrN,EAA9B,EAAkCkG,MAAlC,EAA0C;AACxC,MAAIoH,SAAS,CAACvJ,MAAV,KAAqB,CAAzB,EAA4B;AAC1BmC,IAAAA,MAAM,GAAGlG,EAAT;AACAA,IAAAA,EAAE,GAAGkG,MAAM,CAAClG,EAAZ;AACD,GAJuC,CAMxC;;;AACA,MAAIuN,GAAG,GAAGvN,EAAE,CAACwN,YAAH,CAAgB,0BAAhB,KAA+CxN,EAAE,CAACwN,YAAH,CAAgB,8BAAhB,CAA/C,IAAkGxN,EAAE,CAACwN,YAAH,CAAgB,iCAAhB,CAA5G;AACA,MAAI,CAACD,GAAL,EACE,MAAM,IAAIE,KAAJ,CAAU,2BAAV,CAAN;AAEF,MAAIvN,SAAS,GAASuM,gBAAgB,CAACzM,EAAD,CAAtC;AACA,MAAIG,UAAU,GAAQ6M,gBAAgB,CAAChN,EAAD,CAAtC;AACA,MAAIN,WAAW,GAAOuN,iBAAiB,CAACjN,EAAD,CAAvC;AACA,MAAIL,UAAU,GAAQuN,gBAAgB,CAAClN,EAAD,CAAtC;AACA,MAAIJ,eAAe,GAAGuN,qBAAqB,CAACnN,EAAD,CAA3C;AACA,MAAIH,aAAa,GAAKuN,mBAAmB,CAACpN,EAAD,CAAzC;AAEA,MAAI0N,WAAW,GAAS5O,aAAa,CAACkB,EAAD,EACnCd,OAAO,CAAC,IAAIsF,UAAJ,CAAe,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,EAAa,GAAb,CAAf,CAAD,EAAoC,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAApC,CAD4B,CAArC;AAEAkJ,EAAAA,WAAW,CAAC7G,cAAZ;AACA6G,EAAAA,WAAW,CAAClH,SAAZ,GAAwBxG,EAAE,CAACyG,oBAA3B;AACAiH,EAAAA,WAAW,CAAChH,SAAZ,GAAwB1G,EAAE,CAAC2G,MAA3B;AAEA,MAAIvG,iBAAiB,GAAGxB,YAAY,CAACoB,EAAD,CAApC;AACA,MAAIM,cAAc,GAAM1B,YAAY,CAACoB,EAAD,CAApC;AACA,MAAIO,WAAW,GAAS3B,YAAY,CAACoB,EAAD,CAApC;AACA,MAAIQ,eAAe,GAAK5B,YAAY,CAACoB,EAAD,CAApC;AACA,MAAIK,WAAW,GAASzB,YAAY,CAACoB,EAAD,CAApC;AACA,MAAIS,WAAW,GAAS5B,SAAS,CAACmB,EAAD,EAAK,CACpC;AAAE2N,IAAAA,MAAM,EAAEvN,iBAAV;AACEwN,IAAAA,IAAI,EAAE5N,EAAE,CAAC6N,KADX;AAEEC,IAAAA,IAAI,EAAE;AAFR,GADoC,EAKpC;AAAEH,IAAAA,MAAM,EAAEtN,WAAV;AACEuN,IAAAA,IAAI,EAAE5N,EAAE,CAAC+N,aADX;AAEED,IAAAA,IAAI,EAAE,CAFR;AAGEE,IAAAA,UAAU,EAAE;AAHd,GALoC,EAUpC;AAAEL,IAAAA,MAAM,EAAErN,cAAV;AACEsN,IAAAA,IAAI,EAAE5N,EAAE,CAAC6N,KADX;AAEEC,IAAAA,IAAI,EAAE;AAFR,GAVoC,EAcpC;AAAEH,IAAAA,MAAM,EAAEpN,WAAV;AACEqN,IAAAA,IAAI,EAAE5N,EAAE,CAAC6N,KADX;AAEEC,IAAAA,IAAI,EAAE;AAFR,GAdoC,EAkBpC;AAAEH,IAAAA,MAAM,EAAEnN,eAAV;AACEoN,IAAAA,IAAI,EAAE5N,EAAE,CAAC6N,KADX;AAEEC,IAAAA,IAAI,EAAE;AAFR,GAlBoC,CAAL,CAAjC;AAwBA,MAAIpN,aAAa,GAAG9B,YAAY,CAACoB,EAAD,CAAhC;AACA,MAAIY,UAAU,GAAMhC,YAAY,CAACoB,EAAD,CAAhC;AACA,MAAIa,OAAO,GAASjC,YAAY,CAACoB,EAAD,CAAhC;AACA,MAAIW,OAAO,GAAS/B,YAAY,CAACoB,EAAD,CAAhC;AACA,MAAIc,OAAO,GAASjC,SAAS,CAACmB,EAAD,EAAK,CAChC;AAAE2N,IAAAA,MAAM,EAAEjN,aAAV;AACEkN,IAAAA,IAAI,EAAE5N,EAAE,CAAC6N,KADX;AAEEC,IAAAA,IAAI,EAAE;AAFR,GADgC,EAKhC;AAAEH,IAAAA,MAAM,EAAEhN,OAAV;AACEiN,IAAAA,IAAI,EAAE5N,EAAE,CAAC+N,aADX;AAEED,IAAAA,IAAI,EAAE,CAFR;AAGEE,IAAAA,UAAU,EAAE;AAHd,GALgC,EAUhC;AAAEL,IAAAA,MAAM,EAAE/M,UAAV;AACEgN,IAAAA,IAAI,EAAE5N,EAAE,CAAC6N,KADX;AAEEC,IAAAA,IAAI,EAAE;AAFR,GAVgC,EAchC;AAAEH,IAAAA,MAAM,EAAE9M,OAAV;AACE+M,IAAAA,IAAI,EAAE5N,EAAE,CAAC6N,KADX;AAEEC,IAAAA,IAAI,EAAE;AAFR,GAdgC,CAAL,CAA7B;AAoBA,MAAI/M,cAAc,GAAInC,YAAY,CAACoB,EAAD,CAAlC;AACA,MAAIiB,WAAW,GAAOrC,YAAY,CAACoB,EAAD,CAAlC;AACA,MAAIkB,QAAQ,GAAUtC,YAAY,CAACoB,EAAD,CAAlC;AACA,MAAImB,UAAU,GAAQvC,YAAY,CAACoB,EAAD,CAAlC;AACA,MAAIgB,QAAQ,GAAUpC,YAAY,CAACoB,EAAD,CAAlC;AACA,MAAIoB,QAAQ,GAAUvC,SAAS,CAACmB,EAAD,EAAK,CAClC;AAAE2N,IAAAA,MAAM,EAAE5M,cAAV;AACE6M,IAAAA,IAAI,EAAE5N,EAAE,CAAC6N,KADX;AAEEC,IAAAA,IAAI,EAAE;AAFR,GADkC,EAKlC;AAAEH,IAAAA,MAAM,EAAE3M,QAAV;AACE4M,IAAAA,IAAI,EAAE5N,EAAE,CAAC+N,aADX;AAEED,IAAAA,IAAI,EAAE,CAFR;AAGEE,IAAAA,UAAU,EAAE;AAHd,GALkC,EAUlC;AAAEL,IAAAA,MAAM,EAAE1M,WAAV;AACE2M,IAAAA,IAAI,EAAE5N,EAAE,CAAC6N,KADX;AAEEC,IAAAA,IAAI,EAAE;AAFR,GAVkC,EAclC;AAAEH,IAAAA,MAAM,EAAEzM,QAAV;AACE0M,IAAAA,IAAI,EAAE5N,EAAE,CAAC6N,KADX;AAEEC,IAAAA,IAAI,EAAE;AAFR,GAdkC,EAkBlC;AAAEH,IAAAA,MAAM,EAAExM,UAAV;AACEyM,IAAAA,IAAI,EAAE5N,EAAE,CAAC6N,KADX;AAEEC,IAAAA,IAAI,EAAE;AAFR,GAlBkC,CAAL,CAA/B;AAwBA,MAAIzM,gBAAgB,GAAGzC,YAAY,CAACoB,EAAD,CAAnC;AACA,MAAIsB,UAAU,GAASzC,SAAS,CAACmB,EAAD,EAAK,CACnC;AAAE2N,IAAAA,MAAM,EAAEtM,gBAAV;AACEuM,IAAAA,IAAI,EAAI5N,EAAE,CAAC6N,KADb;AAEEC,IAAAA,IAAI,EAAI;AAFV,GADmC,CAAL,CAAhC;AAMA,MAAIG,IAAI,GAAG,IAAIlO,cAAJ,CAAmBC,EAAnB,EACP0N,WADO,EAEPxN,SAFO,EAGPC,UAHO,EAIPT,WAJO,EAKPC,UALO,EAMPC,eANO,EAOPC,aAPO,EAQPO,iBARO,EASPC,WATO,EAUPC,cAVO,EAWPC,WAXO,EAYPC,eAZO,EAaPC,WAbO,EAcPC,aAdO,EAePC,OAfO,EAgBPC,UAhBO,EAiBPC,OAjBO,EAkBPC,OAlBO,EAmBPC,cAnBO,EAoBPC,QApBO,EAqBPC,WArBO,EAsBPC,QAtBO,EAuBPC,UAvBO,EAwBPC,QAxBO,EAyBPC,gBAzBO,EA0BPC,UA1BO,CAAX;AA4BA2M,EAAAA,IAAI,CAAClI,MAAL,CAAYG,MAAZ;AAEA,SAAO+H,IAAP;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiBd,oBAAjB","sourcesContent":["'use strict'\n\nvar DEFAULT_VERTEX_NORMALS_EPSILON = 1e-6; // may be too large if triangles are very small\nvar DEFAULT_FACE_NORMALS_EPSILON = 1e-6;\n\nvar createShader  = require('gl-shader')\nvar createBuffer  = require('gl-buffer')\nvar createVAO     = require('gl-vao')\nvar createTexture = require('gl-texture2d')\nvar normals       = require('normals')\nvar multiply      = require('gl-mat4/multiply')\nvar invert        = require('gl-mat4/invert')\nvar ndarray       = require('ndarray')\nvar colormap      = require('colormap')\nvar getContour    = require('simplicial-complex-contour')\nvar pool          = require('typedarray-pool')\nvar shaders       = require('./lib/shaders')\nvar closestPoint  = require('./lib/closest-point')\n\nvar meshShader    = shaders.meshShader\nvar wireShader    = shaders.wireShader\nvar pointShader   = shaders.pointShader\nvar pickShader    = shaders.pickShader\nvar pointPickShader = shaders.pointPickShader\nvar contourShader = shaders.contourShader\n\nvar IDENTITY = [\n  1,0,0,0,\n  0,1,0,0,\n  0,0,1,0,\n  0,0,0,1]\n\n\nfunction SimplicialMesh(gl\n  , texture\n  , triShader\n  , lineShader\n  , pointShader\n  , pickShader\n  , pointPickShader\n  , contourShader\n  , trianglePositions\n  , triangleIds\n  , triangleColors\n  , triangleUVs\n  , triangleNormals\n  , triangleVAO\n  , edgePositions\n  , edgeIds\n  , edgeColors\n  , edgeUVs\n  , edgeVAO\n  , pointPositions\n  , pointIds\n  , pointColors\n  , pointUVs\n  , pointSizes\n  , pointVAO\n  , contourPositions\n  , contourVAO) {\n\n  this.gl                = gl\n  this.pixelRatio         = 1\n  this.cells             = []\n  this.positions         = []\n  this.intensity         = []\n  this.texture           = texture\n  this.dirty             = true\n\n  this.triShader         = triShader\n  this.lineShader        = lineShader\n  this.pointShader       = pointShader\n  this.pickShader        = pickShader\n  this.pointPickShader   = pointPickShader\n  this.contourShader     = contourShader\n\n  this.trianglePositions = trianglePositions\n  this.triangleColors    = triangleColors\n  this.triangleNormals   = triangleNormals\n  this.triangleUVs       = triangleUVs\n  this.triangleIds       = triangleIds\n  this.triangleVAO       = triangleVAO\n  this.triangleCount     = 0\n\n  this.lineWidth         = 1\n  this.edgePositions     = edgePositions\n  this.edgeColors        = edgeColors\n  this.edgeUVs           = edgeUVs\n  this.edgeIds           = edgeIds\n  this.edgeVAO           = edgeVAO\n  this.edgeCount         = 0\n\n  this.pointPositions    = pointPositions\n  this.pointColors       = pointColors\n  this.pointUVs          = pointUVs\n  this.pointSizes        = pointSizes\n  this.pointIds          = pointIds\n  this.pointVAO          = pointVAO\n  this.pointCount        = 0\n\n  this.contourLineWidth  = 1\n  this.contourPositions  = contourPositions\n  this.contourVAO        = contourVAO\n  this.contourCount      = 0\n  this.contourColor      = [0,0,0]\n  this.contourEnable     = true\n\n  this.pickVertex        = true;\n  this.pickId            = 1\n  this.bounds            = [\n    [ Infinity, Infinity, Infinity],\n    [-Infinity,-Infinity,-Infinity] ]\n  this.clipBounds        = [\n    [-Infinity,-Infinity,-Infinity],\n    [ Infinity, Infinity, Infinity] ]\n\n  this.lightPosition = [1e5, 1e5, 0]\n  this.ambientLight  = 0.8\n  this.diffuseLight  = 0.8\n  this.specularLight = 2.0\n  this.roughness     = 0.5\n  this.fresnel       = 1.5\n\n  this.opacity       = 1.0\n  this.hasAlpha      = false\n  this.opacityscale  = false\n\n  this._model       = IDENTITY\n  this._view        = IDENTITY\n  this._projection  = IDENTITY\n  this._resolution  = [1,1]\n}\n\nvar proto = SimplicialMesh.prototype\n\nproto.isOpaque = function() {\n  return !this.hasAlpha\n}\n\nproto.isTransparent = function() {\n  return this.hasAlpha\n}\n\nproto.pickSlots = 1\n\nproto.setPickBase = function(id) {\n  this.pickId = id\n}\n\nfunction getOpacityFromScale(ratio, opacityscale) {\n\n  if(!opacityscale) return 1\n  if(!opacityscale.length) return 1\n\n  for(var i = 0; i < opacityscale.length; ++i) {\n    if(opacityscale.length < 2) return 1\n    if(opacityscale[i][0] === ratio) return opacityscale[i][1]\n    if(opacityscale[i][0] > ratio && i > 0) {\n      var d = (opacityscale[i][0] - ratio) / (opacityscale[i][0] - opacityscale[i - 1][0])\n      return opacityscale[i][1] * (1 - d) + d * opacityscale[i - 1][1]\n    }\n  }\n\n  return 1\n}\n\nfunction genColormap(param, opacityscale) {\n  var colors = colormap({\n      colormap: param\n    , nshades:  256\n    , format:  'rgba'\n  })\n\n  var result = new Uint8Array(256*4)\n  for(var i=0; i<256; ++i) {\n    var c = colors[i]\n    for(var j=0; j<3; ++j) {\n      result[4*i+j] = c[j]\n    }\n    if(!opacityscale) {\n      result[4*i+3] = 255 * c[3]\n    } else {\n      result[4*i+3] = 255 * getOpacityFromScale(i / 255.0, opacityscale)\n    }\n  }\n\n  return ndarray(result, [256,256,4], [4,0,1])\n}\n\nfunction takeZComponent(array) {\n  var n = array.length\n  var result = new Array(n)\n  for(var i=0; i<n; ++i) {\n    result[i] = array[i][2]\n  }\n  return result\n}\n\nproto.highlight = function(selection) {\n  if(!selection || !this.contourEnable) {\n    this.contourCount = 0\n    return\n  }\n  var level = getContour(this.cells, this.intensity, selection.intensity)\n  var cells         = level.cells\n  var vertexIds     = level.vertexIds\n  var vertexWeights = level.vertexWeights\n  var numCells = cells.length\n  var result = pool.mallocFloat32(2 * 3 * numCells)\n  var ptr = 0\n  for(var i=0; i<numCells; ++i) {\n    var c = cells[i]\n    for(var j=0; j<2; ++j) {\n      var v = c[0]\n      if(c.length === 2) {\n        v = c[j]\n      }\n      var a = vertexIds[v][0]\n      var b = vertexIds[v][1]\n      var w = vertexWeights[v]\n      var wi = 1.0 - w\n      var pa = this.positions[a]\n      var pb = this.positions[b]\n      for(var k=0; k<3; ++k) {\n        result[ptr++] = w * pa[k] + wi * pb[k]\n      }\n    }\n  }\n  this.contourCount = (ptr / 3)|0\n  this.contourPositions.update(result.subarray(0, ptr))\n  pool.free(result)\n}\n\nproto.update = function(params) {\n  params = params || {}\n  var gl = this.gl\n\n  this.dirty = true\n\n  if('contourEnable' in params) {\n    this.contourEnable = params.contourEnable\n  }\n  if('contourColor' in params) {\n    this.contourColor = params.contourColor\n  }\n  if('lineWidth' in params) {\n    this.lineWidth = params.lineWidth\n  }\n  if('lightPosition' in params) {\n    this.lightPosition = params.lightPosition\n  }\n\n  this.hasAlpha = false // default to no transparent draw\n  if('opacity' in params) {\n    this.opacity = params.opacity\n    if(this.opacity < 1) {\n      this.hasAlpha = true;\n    }\n  }\n  if('opacityscale' in params) {\n    this.opacityscale = params.opacityscale\n    this.hasAlpha = true;\n  }\n\n  if('ambient' in params) {\n    this.ambientLight  = params.ambient\n  }\n  if('diffuse' in params) {\n    this.diffuseLight = params.diffuse\n  }\n  if('specular' in params) {\n    this.specularLight = params.specular\n  }\n  if('roughness' in params) {\n    this.roughness = params.roughness\n  }\n  if('fresnel' in params) {\n    this.fresnel = params.fresnel\n  }\n\n  if(params.texture) {\n    this.texture.dispose()\n    this.texture = createTexture(gl, params.texture)\n  } else if (params.colormap) {\n    this.texture.shape = [256,256]\n    this.texture.minFilter = gl.LINEAR_MIPMAP_LINEAR\n    this.texture.magFilter = gl.LINEAR\n    this.texture.setPixels(genColormap(params.colormap, this.opacityscale))\n    this.texture.generateMipmap()\n  }\n\n  var cells = params.cells\n  var positions = params.positions\n\n  if(!positions || !cells) {\n    return\n  }\n\n  var tPos = []\n  var tCol = []\n  var tNor = []\n  var tUVs = []\n  var tIds = []\n\n  var ePos = []\n  var eCol = []\n  var eUVs = []\n  var eIds = []\n\n  var pPos = []\n  var pCol = []\n  var pUVs = []\n  var pSiz = []\n  var pIds = []\n\n  //Save geometry data for picking calculations\n  this.cells     = cells\n  this.positions = positions\n\n  //Compute normals\n  var vertexNormals = params.vertexNormals\n  var cellNormals   = params.cellNormals\n  var vertexNormalsEpsilon = params.vertexNormalsEpsilon === void(0) ? DEFAULT_VERTEX_NORMALS_EPSILON : params.vertexNormalsEpsilon\n  var faceNormalsEpsilon = params.faceNormalsEpsilon === void(0) ? DEFAULT_FACE_NORMALS_EPSILON : params.faceNormalsEpsilon\n  if(params.useFacetNormals && !cellNormals) {\n    cellNormals = normals.faceNormals(cells, positions, faceNormalsEpsilon)\n  }\n  if(!cellNormals && !vertexNormals) {\n    vertexNormals = normals.vertexNormals(cells, positions, vertexNormalsEpsilon)\n  }\n\n  //Compute colors\n  var vertexColors    = params.vertexColors\n  var cellColors      = params.cellColors\n  var meshColor       = params.meshColor || [1,1,1,1]\n\n  //UVs\n  var vertexUVs       = params.vertexUVs\n  var vertexIntensity = params.vertexIntensity\n  var cellUVs         = params.cellUVs\n  var cellIntensity   = params.cellIntensity\n\n  var intensityLo     = Infinity\n  var intensityHi     = -Infinity\n  if(!vertexUVs && !cellUVs) {\n    if(vertexIntensity) {\n      if(params.vertexIntensityBounds) {\n        intensityLo = +params.vertexIntensityBounds[0]\n        intensityHi = +params.vertexIntensityBounds[1]\n      } else {\n        for(var i=0; i<vertexIntensity.length; ++i) {\n          var f = vertexIntensity[i]\n          intensityLo = Math.min(intensityLo, f)\n          intensityHi = Math.max(intensityHi, f)\n        }\n      }\n    } else if(cellIntensity) {\n      if(params.cellIntensityBounds) {\n        intensityLo = +params.cellIntensityBounds[0]\n        intensityHi = +params.cellIntensityBounds[1]\n      } else {\n        for(var i=0; i<cellIntensity.length; ++i) {\n          var f = cellIntensity[i]\n          intensityLo = Math.min(intensityLo, f)\n          intensityHi = Math.max(intensityHi, f)\n        }\n      }\n    } else {\n      for(var i=0; i<positions.length; ++i) {\n        var f = positions[i][2]\n        intensityLo = Math.min(intensityLo, f)\n        intensityHi = Math.max(intensityHi, f)\n      }\n    }\n  }\n\n  if(vertexIntensity) {\n    this.intensity = vertexIntensity\n  } else if(cellIntensity) {\n    this.intensity = cellIntensity\n  } else {\n    this.intensity = takeZComponent(positions)\n  }\n\n  this.pickVertex = !(cellIntensity || cellColors)\n\n  //Point size\n  var pointSizes      = params.pointSizes\n  var meshPointSize   = params.pointSize || 1.0\n\n  //Update bounds\n  this.bounds       = [[Infinity,Infinity,Infinity], [-Infinity,-Infinity,-Infinity]]\n  for(var i=0; i<positions.length; ++i) {\n    var p = positions[i]\n    for(var j=0; j<3; ++j) {\n      if(isNaN(p[j]) || !isFinite(p[j])) {\n        continue\n      }\n      this.bounds[0][j] = Math.min(this.bounds[0][j], p[j])\n      this.bounds[1][j] = Math.max(this.bounds[1][j], p[j])\n    }\n  }\n\n  //Pack cells into buffers\n  var triangleCount = 0\n  var edgeCount = 0\n  var pointCount = 0\n\nfill_loop:\n  for(var i=0; i<cells.length; ++i) {\n    var cell = cells[i]\n    switch(cell.length) {\n      case 1:\n\n        var v = cell[0]\n        var p = positions[v]\n\n        //Check NaNs\n        for(var j=0; j<3; ++j) {\n          if(isNaN(p[j]) || !isFinite(p[j])) {\n            continue fill_loop\n          }\n        }\n\n        pPos.push(p[0], p[1], p[2])\n\n        var c\n        if(vertexColors) {\n          c = vertexColors[v]\n        } else if(cellColors) {\n          c = cellColors[i]\n        } else {\n          c = meshColor\n        }\n        if(this.opacityscale && vertexIntensity) {\n          tCol.push(c[0], c[1], c[2],\n            this.opacity * getOpacityFromScale(\n              (vertexIntensity[v] - intensityLo) / (intensityHi - intensityLo),\n              this.opacityscale\n            )\n          )\n        } else if(c.length === 3) {\n          pCol.push(c[0], c[1], c[2], this.opacity)\n        } else {\n          pCol.push(c[0], c[1], c[2], c[3] * this.opacity)\n          if(c[3] < 1) this.hasAlpha = true\n        }\n\n        var uv\n        if(vertexUVs) {\n          uv = vertexUVs[v]\n        } else if(vertexIntensity) {\n          uv = [\n            (vertexIntensity[v] - intensityLo) /\n            (intensityHi - intensityLo), 0]\n        } else if(cellUVs) {\n          uv = cellUVs[i]\n        } else if(cellIntensity) {\n          uv = [\n            (cellIntensity[i] - intensityLo) /\n            (intensityHi - intensityLo), 0]\n        } else {\n          uv = [\n            (p[2] - intensityLo) /\n            (intensityHi - intensityLo), 0]\n        }\n        pUVs.push(uv[0], uv[1])\n\n        if(pointSizes) {\n          pSiz.push(pointSizes[v])\n        } else {\n          pSiz.push(meshPointSize)\n        }\n\n        pIds.push(i)\n\n        pointCount += 1\n      break\n\n      case 2:\n\n        //Check NaNs\n        for(var j=0; j<2; ++j) {\n          var v = cell[j]\n          var p = positions[v]\n          for(var k=0; k<3; ++k) {\n            if(isNaN(p[k]) || !isFinite(p[k])) {\n              continue fill_loop\n            }\n          }\n        }\n\n        for(var j=0; j<2; ++j) {\n          var v = cell[j]\n          var p = positions[v]\n\n          ePos.push(p[0], p[1], p[2])\n\n          var c\n          if(vertexColors) {\n            c = vertexColors[v]\n          } else if(cellColors) {\n            c = cellColors[i]\n          } else {\n            c = meshColor\n          }\n          if(this.opacityscale && vertexIntensity) {\n            tCol.push(c[0], c[1], c[2],\n              this.opacity * getOpacityFromScale(\n                (vertexIntensity[v] - intensityLo) / (intensityHi - intensityLo),\n                this.opacityscale\n              )\n            )\n          } else if(c.length === 3) {\n            eCol.push(c[0], c[1], c[2], this.opacity)\n          } else {\n            eCol.push(c[0], c[1], c[2], c[3] * this.opacity)\n            if(c[3] < 1) this.hasAlpha = true\n          }\n\n          var uv\n          if(vertexUVs) {\n            uv = vertexUVs[v]\n          } else if(vertexIntensity) {\n            uv = [\n              (vertexIntensity[v] - intensityLo) /\n              (intensityHi - intensityLo), 0]\n          } else if(cellUVs) {\n            uv = cellUVs[i]\n          } else if(cellIntensity) {\n            uv = [\n              (cellIntensity[i] - intensityLo) /\n              (intensityHi - intensityLo), 0]\n          } else {\n            uv = [\n              (p[2] - intensityLo) /\n              (intensityHi - intensityLo), 0]\n          }\n          eUVs.push(uv[0], uv[1])\n\n          eIds.push(i)\n        }\n        edgeCount += 1\n      break\n\n      case 3:\n        //Check NaNs\n        for(var j=0; j<3; ++j) {\n          var v = cell[j]\n          var p = positions[v]\n          for(var k=0; k<3; ++k) {\n            if(isNaN(p[k]) || !isFinite(p[k])) {\n              continue fill_loop\n            }\n          }\n        }\n\n        for(var j=0; j<3; ++j) {\n          var v = cell[2 - j]\n\n          var p = positions[v]\n          tPos.push(p[0], p[1], p[2])\n\n          var c\n          if(vertexColors) {\n            c = vertexColors[v]\n          } else if(cellColors) {\n            c = cellColors[i]\n          } else {\n            c = meshColor\n          }\n\n          if(!c) {\n            tCol.push(0.5,0.5,0.5,1)\n          } else if(this.opacityscale && vertexIntensity) {\n            tCol.push(c[0], c[1], c[2],\n              this.opacity * getOpacityFromScale(\n                (vertexIntensity[v] - intensityLo) / (intensityHi - intensityLo),\n                this.opacityscale\n              )\n            )\n          } else if(c.length === 3) {\n            tCol.push(c[0], c[1], c[2], this.opacity)\n          } else {\n            tCol.push(c[0], c[1], c[2], c[3] * this.opacity)\n            if(c[3] < 1) this.hasAlpha = true\n          }\n\n          var uv\n          if(vertexUVs) {\n            uv = vertexUVs[v]\n          } else if(vertexIntensity) {\n            uv = [\n              (vertexIntensity[v] - intensityLo) /\n              (intensityHi - intensityLo), 0]\n          } else if(cellUVs) {\n            uv = cellUVs[i]\n          } else if(cellIntensity) {\n            uv = [\n              (cellIntensity[i] - intensityLo) /\n              (intensityHi - intensityLo), 0]\n          } else {\n            uv = [\n              (p[2] - intensityLo) /\n              (intensityHi - intensityLo), 0]\n          }\n          tUVs.push(uv[0], uv[1])\n\n          var q\n          if(vertexNormals) {\n            q = vertexNormals[v]\n          } else {\n            q = cellNormals[i]\n          }\n          tNor.push(q[0], q[1], q[2])\n\n          tIds.push(i)\n        }\n        triangleCount += 1\n      break\n\n      default:\n      break\n    }\n  }\n\n  this.pointCount     = pointCount\n  this.edgeCount      = edgeCount\n  this.triangleCount  = triangleCount\n\n  this.pointPositions.update(pPos)\n  this.pointColors.update(pCol)\n  this.pointUVs.update(pUVs)\n  this.pointSizes.update(pSiz)\n  this.pointIds.update(new Uint32Array(pIds))\n\n  this.edgePositions.update(ePos)\n  this.edgeColors.update(eCol)\n  this.edgeUVs.update(eUVs)\n  this.edgeIds.update(new Uint32Array(eIds))\n\n  this.trianglePositions.update(tPos)\n  this.triangleColors.update(tCol)\n  this.triangleUVs.update(tUVs)\n  this.triangleNormals.update(tNor)\n  this.triangleIds.update(new Uint32Array(tIds))\n}\n\nproto.drawTransparent = proto.draw = function(params) {\n  params = params || {}\n  var gl          = this.gl\n  var model       = params.model      || IDENTITY\n  var view        = params.view       || IDENTITY\n  var projection  = params.projection || IDENTITY\n\n  var clipBounds = [[-1e6,-1e6,-1e6],[1e6,1e6,1e6]]\n  for(var i=0; i<3; ++i) {\n    clipBounds[0][i] = Math.max(clipBounds[0][i], this.clipBounds[0][i])\n    clipBounds[1][i] = Math.min(clipBounds[1][i], this.clipBounds[1][i])\n  }\n\n  var uniforms = {\n    model:      model,\n    view:       view,\n    projection: projection,\n    inverseModel: IDENTITY.slice(),\n\n    clipBounds: clipBounds,\n\n    kambient:   this.ambientLight,\n    kdiffuse:   this.diffuseLight,\n    kspecular:  this.specularLight,\n    roughness:  this.roughness,\n    fresnel:    this.fresnel,\n\n    eyePosition:   [0,0,0],\n    lightPosition: [0,0,0],\n\n    contourColor: this.contourColor,\n\n    texture:    0\n  }\n\n  uniforms.inverseModel = invert(uniforms.inverseModel, uniforms.model)\n\n  gl.disable(gl.CULL_FACE)\n\n  this.texture.bind(0)\n\n  var invCameraMatrix = new Array(16)\n  multiply(invCameraMatrix, uniforms.view, uniforms.model)\n  multiply(invCameraMatrix, uniforms.projection, invCameraMatrix)\n  invert(invCameraMatrix, invCameraMatrix)\n\n  for(var i=0; i<3; ++i) {\n    uniforms.eyePosition[i] = invCameraMatrix[12+i] / invCameraMatrix[15]\n  }\n\n  var w = invCameraMatrix[15]\n  for(var i=0; i<3; ++i) {\n    w += this.lightPosition[i] * invCameraMatrix[4*i+3]\n  }\n  for(var i=0; i<3; ++i) {\n    var s = invCameraMatrix[12+i]\n    for(var j=0; j<3; ++j) {\n      s += invCameraMatrix[4*j+i] * this.lightPosition[j]\n    }\n    uniforms.lightPosition[i] = s / w\n  }\n\n  if(this.triangleCount > 0) {\n    var shader = this.triShader\n    shader.bind()\n    shader.uniforms = uniforms\n\n    this.triangleVAO.bind()\n    gl.drawArrays(gl.TRIANGLES, 0, this.triangleCount*3)\n    this.triangleVAO.unbind()\n  }\n\n  if(this.edgeCount > 0 && this.lineWidth > 0) {\n    var shader = this.lineShader\n    shader.bind()\n    shader.uniforms = uniforms\n\n    this.edgeVAO.bind()\n    gl.lineWidth(this.lineWidth * this.pixelRatio)\n    gl.drawArrays(gl.LINES, 0, this.edgeCount*2)\n    this.edgeVAO.unbind()\n  }\n\n  if(this.pointCount > 0) {\n    var shader = this.pointShader\n    shader.bind()\n    shader.uniforms = uniforms\n\n    this.pointVAO.bind()\n    gl.drawArrays(gl.POINTS, 0, this.pointCount)\n    this.pointVAO.unbind()\n  }\n\n  if(this.contourEnable && this.contourCount > 0 && this.contourLineWidth > 0) {\n    var shader = this.contourShader\n    shader.bind()\n    shader.uniforms = uniforms\n\n    this.contourVAO.bind()\n    gl.drawArrays(gl.LINES, 0, this.contourCount)\n    this.contourVAO.unbind()\n  }\n}\n\nproto.drawPick = function(params) {\n  params = params || {}\n\n  var gl         = this.gl\n\n  var model      = params.model      || IDENTITY\n  var view       = params.view       || IDENTITY\n  var projection = params.projection || IDENTITY\n\n  var clipBounds = [[-1e6,-1e6,-1e6],[1e6,1e6,1e6]]\n  for(var i=0; i<3; ++i) {\n    clipBounds[0][i] = Math.max(clipBounds[0][i], this.clipBounds[0][i])\n    clipBounds[1][i] = Math.min(clipBounds[1][i], this.clipBounds[1][i])\n  }\n\n  //Save camera parameters\n  this._model      = [].slice.call(model)\n  this._view       = [].slice.call(view)\n  this._projection = [].slice.call(projection)\n  this._resolution = [gl.drawingBufferWidth, gl.drawingBufferHeight]\n\n  var uniforms = {\n    model:      model,\n    view:       view,\n    projection: projection,\n    clipBounds: clipBounds,\n    pickId:     this.pickId / 255.0,\n  }\n\n  var shader = this.pickShader\n  shader.bind()\n  shader.uniforms = uniforms\n\n  if(this.triangleCount > 0) {\n    this.triangleVAO.bind()\n    gl.drawArrays(gl.TRIANGLES, 0, this.triangleCount*3)\n    this.triangleVAO.unbind()\n  }\n\n  if(this.edgeCount > 0) {\n    this.edgeVAO.bind()\n    gl.lineWidth(this.lineWidth * this.pixelRatio)\n    gl.drawArrays(gl.LINES, 0, this.edgeCount*2)\n    this.edgeVAO.unbind()\n  }\n\n  if(this.pointCount > 0) {\n    var shader = this.pointPickShader\n    shader.bind()\n    shader.uniforms = uniforms\n\n    this.pointVAO.bind()\n    gl.drawArrays(gl.POINTS, 0, this.pointCount)\n    this.pointVAO.unbind()\n  }\n}\n\n\nproto.pick = function(pickData) {\n  if(!pickData) {\n    return null\n  }\n  if(pickData.id !== this.pickId) {\n    return null\n  }\n\n  var cellId    = pickData.value[0] + 256*pickData.value[1] + 65536*pickData.value[2]\n  var cell      = this.cells[cellId]\n  var positions = this.positions\n\n  var simplex   = new Array(cell.length)\n  for(var i=0; i<cell.length; ++i) {\n    simplex[i] = positions[cell[i]]\n  }\n\n  var x = pickData.coord[0];\n  var y = pickData.coord[1];\n\n  if(!this.pickVertex) {\n    var A = this.positions[cell[0]];\n    var B = this.positions[cell[1]];\n    var C = this.positions[cell[2]];\n\n    var dataCoordinate = [\n      (A[0] + B[0] + C[0]) / 3,\n      (A[1] + B[1] + C[1]) / 3,\n      (A[2] + B[2] + C[2]) / 3\n    ]\n\n    return {\n      _cellCenter : true,\n      position: [x, y],\n      index:    cellId,\n      cell:     cell,\n      cellId:   cellId,\n      intensity:  this.intensity[cellId],\n      dataCoordinate: dataCoordinate\n    }\n  }\n\n  var data = closestPoint(\n    simplex,\n    [x * this.pixelRatio, this._resolution[1] - y * this.pixelRatio],\n    this._model,\n    this._view,\n    this._projection,\n    this._resolution)\n\n  if(!data) {\n    return null\n  }\n\n  var weights = data[2]\n  var interpIntensity = 0.0\n  for(var i=0; i<cell.length; ++i) {\n    interpIntensity += weights[i] * this.intensity[cell[i]]\n  }\n\n  return {\n    position: data[1],\n    index:    cell[data[0]],\n    cell:     cell,\n    cellId:   cellId,\n    intensity:  interpIntensity,\n    dataCoordinate: this.positions[cell[data[0]]]\n  }\n}\n\n\nproto.dispose = function() {\n  this.texture.dispose()\n\n  this.triShader.dispose()\n  this.lineShader.dispose()\n  this.pointShader.dispose()\n  this.pickShader.dispose()\n  this.pointPickShader.dispose()\n\n  this.triangleVAO.dispose()\n  this.trianglePositions.dispose()\n  this.triangleColors.dispose()\n  this.triangleUVs.dispose()\n  this.triangleNormals.dispose()\n  this.triangleIds.dispose()\n\n  this.edgeVAO.dispose()\n  this.edgePositions.dispose()\n  this.edgeColors.dispose()\n  this.edgeUVs.dispose()\n  this.edgeIds.dispose()\n\n  this.pointVAO.dispose()\n  this.pointPositions.dispose()\n  this.pointColors.dispose()\n  this.pointUVs.dispose()\n  this.pointSizes.dispose()\n  this.pointIds.dispose()\n\n  this.contourVAO.dispose()\n  this.contourPositions.dispose()\n  this.contourShader.dispose()\n}\n\nfunction createMeshShader(gl) {\n  var shader = createShader(gl, meshShader.vertex, meshShader.fragment)\n  shader.attributes.position.location = 0\n  shader.attributes.color.location    = 2\n  shader.attributes.uv.location       = 3\n  shader.attributes.normal.location   = 4\n  return shader\n}\n\nfunction createWireShader(gl) {\n  var shader = createShader(gl, wireShader.vertex, wireShader.fragment)\n  shader.attributes.position.location = 0\n  shader.attributes.color.location    = 2\n  shader.attributes.uv.location       = 3\n  return shader\n}\n\nfunction createPointShader(gl) {\n  var shader = createShader(gl, pointShader.vertex, pointShader.fragment)\n  shader.attributes.position.location  = 0\n  shader.attributes.color.location     = 2\n  shader.attributes.uv.location        = 3\n  shader.attributes.pointSize.location = 4\n  return shader\n}\n\nfunction createPickShader(gl) {\n  var shader = createShader(gl, pickShader.vertex, pickShader.fragment)\n  shader.attributes.position.location = 0\n  shader.attributes.id.location       = 1\n  return shader\n}\n\nfunction createPointPickShader(gl) {\n  var shader = createShader(gl, pointPickShader.vertex, pointPickShader.fragment)\n  shader.attributes.position.location  = 0\n  shader.attributes.id.location        = 1\n  shader.attributes.pointSize.location = 4\n  return shader\n}\n\nfunction createContourShader(gl) {\n  var shader = createShader(gl, contourShader.vertex, contourShader.fragment)\n  shader.attributes.position.location = 0\n  return shader\n}\n\nfunction createSimplicialMesh(gl, params) {\n  if (arguments.length === 1) {\n    params = gl;\n    gl = params.gl;\n  }\n\n  //enable derivatives for face normals\n  var ext = gl.getExtension('OES_standard_derivatives') || gl.getExtension('MOZ_OES_standard_derivatives') || gl.getExtension('WEBKIT_OES_standard_derivatives')\n  if (!ext)\n    throw new Error('derivatives not supported')\n\n  var triShader       = createMeshShader(gl)\n  var lineShader      = createWireShader(gl)\n  var pointShader     = createPointShader(gl)\n  var pickShader      = createPickShader(gl)\n  var pointPickShader = createPointPickShader(gl)\n  var contourShader   = createContourShader(gl)\n\n  var meshTexture       = createTexture(gl,\n    ndarray(new Uint8Array([255,255,255,255]), [1,1,4]))\n  meshTexture.generateMipmap()\n  meshTexture.minFilter = gl.LINEAR_MIPMAP_LINEAR\n  meshTexture.magFilter = gl.LINEAR\n\n  var trianglePositions = createBuffer(gl)\n  var triangleColors    = createBuffer(gl)\n  var triangleUVs       = createBuffer(gl)\n  var triangleNormals   = createBuffer(gl)\n  var triangleIds       = createBuffer(gl)\n  var triangleVAO       = createVAO(gl, [\n    { buffer: trianglePositions,\n      type: gl.FLOAT,\n      size: 3\n    },\n    { buffer: triangleIds,\n      type: gl.UNSIGNED_BYTE,\n      size: 4,\n      normalized: true\n    },\n    { buffer: triangleColors,\n      type: gl.FLOAT,\n      size: 4\n    },\n    { buffer: triangleUVs,\n      type: gl.FLOAT,\n      size: 2\n    },\n    { buffer: triangleNormals,\n      type: gl.FLOAT,\n      size: 3\n    }\n  ])\n\n  var edgePositions = createBuffer(gl)\n  var edgeColors    = createBuffer(gl)\n  var edgeUVs       = createBuffer(gl)\n  var edgeIds       = createBuffer(gl)\n  var edgeVAO       = createVAO(gl, [\n    { buffer: edgePositions,\n      type: gl.FLOAT,\n      size: 3\n    },\n    { buffer: edgeIds,\n      type: gl.UNSIGNED_BYTE,\n      size: 4,\n      normalized: true\n    },\n    { buffer: edgeColors,\n      type: gl.FLOAT,\n      size: 4\n    },\n    { buffer: edgeUVs,\n      type: gl.FLOAT,\n      size: 2\n    }\n  ])\n\n  var pointPositions  = createBuffer(gl)\n  var pointColors     = createBuffer(gl)\n  var pointUVs        = createBuffer(gl)\n  var pointSizes      = createBuffer(gl)\n  var pointIds        = createBuffer(gl)\n  var pointVAO        = createVAO(gl, [\n    { buffer: pointPositions,\n      type: gl.FLOAT,\n      size: 3\n    },\n    { buffer: pointIds,\n      type: gl.UNSIGNED_BYTE,\n      size: 4,\n      normalized: true\n    },\n    { buffer: pointColors,\n      type: gl.FLOAT,\n      size: 4\n    },\n    { buffer: pointUVs,\n      type: gl.FLOAT,\n      size: 2\n    },\n    { buffer: pointSizes,\n      type: gl.FLOAT,\n      size: 1\n    }\n  ])\n\n  var contourPositions = createBuffer(gl)\n  var contourVAO       = createVAO(gl, [\n    { buffer: contourPositions,\n      type:   gl.FLOAT,\n      size:   3\n    }])\n\n  var mesh = new SimplicialMesh(gl\n    , meshTexture\n    , triShader\n    , lineShader\n    , pointShader\n    , pickShader\n    , pointPickShader\n    , contourShader\n    , trianglePositions\n    , triangleIds\n    , triangleColors\n    , triangleUVs\n    , triangleNormals\n    , triangleVAO\n    , edgePositions\n    , edgeIds\n    , edgeColors\n    , edgeUVs\n    , edgeVAO\n    , pointPositions\n    , pointIds\n    , pointColors\n    , pointUVs\n    , pointSizes\n    , pointVAO\n    , contourPositions\n    , contourVAO)\n\n  mesh.update(params)\n\n  return mesh\n}\n\nmodule.exports = createSimplicialMesh\n"]},"metadata":{},"sourceType":"script"}