{"ast":null,"code":"'use strict';\n\nmodule.exports = makeReflectTypes; //Construct type info for reflection.\n//\n// This iterates over the flattened list of uniform type values and smashes them into a JSON object.\n//\n// The leaves of the resulting object are either indices or type strings representing primitive glslify types\n\nfunction makeReflectTypes(uniforms, useIndex) {\n  var obj = {};\n\n  for (var i = 0; i < uniforms.length; ++i) {\n    var n = uniforms[i].name;\n    var parts = n.split(\".\");\n    var o = obj;\n\n    for (var j = 0; j < parts.length; ++j) {\n      var x = parts[j].split(\"[\");\n\n      if (x.length > 1) {\n        if (!(x[0] in o)) {\n          o[x[0]] = [];\n        }\n\n        o = o[x[0]];\n\n        for (var k = 1; k < x.length; ++k) {\n          var y = parseInt(x[k]);\n\n          if (k < x.length - 1 || j < parts.length - 1) {\n            if (!(y in o)) {\n              if (k < x.length - 1) {\n                o[y] = [];\n              } else {\n                o[y] = {};\n              }\n            }\n\n            o = o[y];\n          } else {\n            if (useIndex) {\n              o[y] = i;\n            } else {\n              o[y] = uniforms[i].type;\n            }\n          }\n        }\n      } else if (j < parts.length - 1) {\n        if (!(x[0] in o)) {\n          o[x[0]] = {};\n        }\n\n        o = o[x[0]];\n      } else {\n        if (useIndex) {\n          o[x[0]] = i;\n        } else {\n          o[x[0]] = uniforms[i].type;\n        }\n      }\n    }\n  }\n\n  return obj;\n}","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/gl-shader/lib/reflect.js"],"names":["module","exports","makeReflectTypes","uniforms","useIndex","obj","i","length","n","name","parts","split","o","j","x","k","y","parseInt","type"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,gBAAjB,C,CAEA;AACA;AACA;AACA;AACA;;AACA,SAASA,gBAAT,CAA0BC,QAA1B,EAAoCC,QAApC,EAA8C;AAC5C,MAAIC,GAAG,GAAG,EAAV;;AACA,OAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACH,QAAQ,CAACI,MAAxB,EAAgC,EAAED,CAAlC,EAAqC;AACnC,QAAIE,CAAC,GAAGL,QAAQ,CAACG,CAAD,CAAR,CAAYG,IAApB;AACA,QAAIC,KAAK,GAAGF,CAAC,CAACG,KAAF,CAAQ,GAAR,CAAZ;AACA,QAAIC,CAAC,GAAGP,GAAR;;AACA,SAAI,IAAIQ,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACH,KAAK,CAACH,MAArB,EAA6B,EAAEM,CAA/B,EAAkC;AAChC,UAAIC,CAAC,GAAGJ,KAAK,CAACG,CAAD,CAAL,CAASF,KAAT,CAAe,GAAf,CAAR;;AACA,UAAGG,CAAC,CAACP,MAAF,GAAW,CAAd,EAAiB;AACf,YAAG,EAAEO,CAAC,CAAC,CAAD,CAAD,IAAQF,CAAV,CAAH,EAAiB;AACfA,UAAAA,CAAC,CAACE,CAAC,CAAC,CAAD,CAAF,CAAD,GAAU,EAAV;AACD;;AACDF,QAAAA,CAAC,GAAGA,CAAC,CAACE,CAAC,CAAC,CAAD,CAAF,CAAL;;AACA,aAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACD,CAAC,CAACP,MAAjB,EAAyB,EAAEQ,CAA3B,EAA8B;AAC5B,cAAIC,CAAC,GAAGC,QAAQ,CAACH,CAAC,CAACC,CAAD,CAAF,CAAhB;;AACA,cAAGA,CAAC,GAACD,CAAC,CAACP,MAAF,GAAS,CAAX,IAAgBM,CAAC,GAACH,KAAK,CAACH,MAAN,GAAa,CAAlC,EAAqC;AACnC,gBAAG,EAAES,CAAC,IAAIJ,CAAP,CAAH,EAAc;AACZ,kBAAGG,CAAC,GAAGD,CAAC,CAACP,MAAF,GAAS,CAAhB,EAAmB;AACjBK,gBAAAA,CAAC,CAACI,CAAD,CAAD,GAAO,EAAP;AACD,eAFD,MAEO;AACLJ,gBAAAA,CAAC,CAACI,CAAD,CAAD,GAAO,EAAP;AACD;AACF;;AACDJ,YAAAA,CAAC,GAAGA,CAAC,CAACI,CAAD,CAAL;AACD,WATD,MASO;AACL,gBAAGZ,QAAH,EAAa;AACXQ,cAAAA,CAAC,CAACI,CAAD,CAAD,GAAOV,CAAP;AACD,aAFD,MAEO;AACLM,cAAAA,CAAC,CAACI,CAAD,CAAD,GAAOb,QAAQ,CAACG,CAAD,CAAR,CAAYY,IAAnB;AACD;AACF;AACF;AACF,OAxBD,MAwBO,IAAGL,CAAC,GAAGH,KAAK,CAACH,MAAN,GAAa,CAApB,EAAuB;AAC5B,YAAG,EAAEO,CAAC,CAAC,CAAD,CAAD,IAAQF,CAAV,CAAH,EAAiB;AACfA,UAAAA,CAAC,CAACE,CAAC,CAAC,CAAD,CAAF,CAAD,GAAU,EAAV;AACD;;AACDF,QAAAA,CAAC,GAAGA,CAAC,CAACE,CAAC,CAAC,CAAD,CAAF,CAAL;AACD,OALM,MAKA;AACL,YAAGV,QAAH,EAAa;AACXQ,UAAAA,CAAC,CAACE,CAAC,CAAC,CAAD,CAAF,CAAD,GAAUR,CAAV;AACD,SAFD,MAEO;AACLM,UAAAA,CAAC,CAACE,CAAC,CAAC,CAAD,CAAF,CAAD,GAAUX,QAAQ,CAACG,CAAD,CAAR,CAAYY,IAAtB;AACD;AACF;AACF;AACF;;AACD,SAAOb,GAAP;AACD","sourcesContent":["'use strict'\n\nmodule.exports = makeReflectTypes\n\n//Construct type info for reflection.\n//\n// This iterates over the flattened list of uniform type values and smashes them into a JSON object.\n//\n// The leaves of the resulting object are either indices or type strings representing primitive glslify types\nfunction makeReflectTypes(uniforms, useIndex) {\n  var obj = {}\n  for(var i=0; i<uniforms.length; ++i) {\n    var n = uniforms[i].name\n    var parts = n.split(\".\")\n    var o = obj\n    for(var j=0; j<parts.length; ++j) {\n      var x = parts[j].split(\"[\")\n      if(x.length > 1) {\n        if(!(x[0] in o)) {\n          o[x[0]] = []\n        }\n        o = o[x[0]]\n        for(var k=1; k<x.length; ++k) {\n          var y = parseInt(x[k])\n          if(k<x.length-1 || j<parts.length-1) {\n            if(!(y in o)) {\n              if(k < x.length-1) {\n                o[y] = []\n              } else {\n                o[y] = {}\n              }\n            }\n            o = o[y]\n          } else {\n            if(useIndex) {\n              o[y] = i\n            } else {\n              o[y] = uniforms[i].type\n            }\n          }\n        }\n      } else if(j < parts.length-1) {\n        if(!(x[0] in o)) {\n          o[x[0]] = {}\n        }\n        o = o[x[0]]\n      } else {\n        if(useIndex) {\n          o[x[0]] = i\n        } else {\n          o[x[0]] = uniforms[i].type\n        }\n      }\n    }\n  }\n  return obj\n}"]},"metadata":{},"sourceType":"script"}