{"ast":null,"code":"'use strict';\n\nexports.shader = getShaderReference;\nexports.program = createProgram;\n\nvar GLError = require(\"./GLError\");\n\nvar formatCompilerError = require('gl-format-compiler-error');\n\nvar weakMap = typeof WeakMap === 'undefined' ? require('weakmap-shim') : WeakMap;\nvar CACHE = new weakMap();\nvar SHADER_COUNTER = 0;\n\nfunction ShaderReference(id, src, type, shader, programs, count, cache) {\n  this.id = id;\n  this.src = src;\n  this.type = type;\n  this.shader = shader;\n  this.count = count;\n  this.programs = [];\n  this.cache = cache;\n}\n\nShaderReference.prototype.dispose = function () {\n  if (--this.count === 0) {\n    var cache = this.cache;\n    var gl = cache.gl; //Remove program references\n\n    var programs = this.programs;\n\n    for (var i = 0, n = programs.length; i < n; ++i) {\n      var p = cache.programs[programs[i]];\n\n      if (p) {\n        delete cache.programs[i];\n        gl.deleteProgram(p);\n      }\n    } //Remove shader reference\n\n\n    gl.deleteShader(this.shader);\n    delete cache.shaders[this.type === gl.FRAGMENT_SHADER | 0][this.src];\n  }\n};\n\nfunction ContextCache(gl) {\n  this.gl = gl;\n  this.shaders = [{}, {}];\n  this.programs = {};\n}\n\nvar proto = ContextCache.prototype;\n\nfunction compileShader(gl, type, src) {\n  var shader = gl.createShader(type);\n  gl.shaderSource(shader, src);\n  gl.compileShader(shader);\n\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    var errLog = gl.getShaderInfoLog(shader);\n\n    try {\n      var fmt = formatCompilerError(errLog, src, type);\n    } catch (e) {\n      console.warn('Failed to format compiler error: ' + e);\n      throw new GLError(errLog, 'Error compiling shader:\\n' + errLog);\n    }\n\n    throw new GLError(errLog, fmt.short, fmt.long);\n  }\n\n  return shader;\n}\n\nproto.getShaderReference = function (type, src) {\n  var gl = this.gl;\n  var shaders = this.shaders[type === gl.FRAGMENT_SHADER | 0];\n  var shader = shaders[src];\n\n  if (!shader || !gl.isShader(shader.shader)) {\n    var shaderObj = compileShader(gl, type, src);\n    shader = shaders[src] = new ShaderReference(SHADER_COUNTER++, src, type, shaderObj, [], 1, this);\n  } else {\n    shader.count += 1;\n  }\n\n  return shader;\n};\n\nfunction linkProgram(gl, vshader, fshader, attribs, locations) {\n  var program = gl.createProgram();\n  gl.attachShader(program, vshader);\n  gl.attachShader(program, fshader);\n\n  for (var i = 0; i < attribs.length; ++i) {\n    gl.bindAttribLocation(program, locations[i], attribs[i]);\n  }\n\n  gl.linkProgram(program);\n\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n    var errLog = gl.getProgramInfoLog(program);\n    throw new GLError(errLog, 'Error linking program: ' + errLog);\n  }\n\n  return program;\n}\n\nproto.getProgram = function (vref, fref, attribs, locations) {\n  var token = [vref.id, fref.id, attribs.join(':'), locations.join(':')].join('@');\n  var prog = this.programs[token];\n\n  if (!prog || !this.gl.isProgram(prog)) {\n    this.programs[token] = prog = linkProgram(this.gl, vref.shader, fref.shader, attribs, locations);\n    vref.programs.push(token);\n    fref.programs.push(token);\n  }\n\n  return prog;\n};\n\nfunction getCache(gl) {\n  var ctxCache = CACHE.get(gl);\n\n  if (!ctxCache) {\n    ctxCache = new ContextCache(gl);\n    CACHE.set(gl, ctxCache);\n  }\n\n  return ctxCache;\n}\n\nfunction getShaderReference(gl, type, src) {\n  return getCache(gl).getShaderReference(type, src);\n}\n\nfunction createProgram(gl, vref, fref, attribs, locations) {\n  return getCache(gl).getProgram(vref, fref, attribs, locations);\n}","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/gl-shader/lib/shader-cache.js"],"names":["exports","shader","getShaderReference","program","createProgram","GLError","require","formatCompilerError","weakMap","WeakMap","CACHE","SHADER_COUNTER","ShaderReference","id","src","type","programs","count","cache","prototype","dispose","gl","i","n","length","p","deleteProgram","deleteShader","shaders","FRAGMENT_SHADER","ContextCache","proto","compileShader","createShader","shaderSource","getShaderParameter","COMPILE_STATUS","errLog","getShaderInfoLog","fmt","e","console","warn","short","long","isShader","shaderObj","linkProgram","vshader","fshader","attribs","locations","attachShader","bindAttribLocation","getProgramParameter","LINK_STATUS","getProgramInfoLog","getProgram","vref","fref","token","join","prog","isProgram","push","getCache","ctxCache","get","set"],"mappings":"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","sourcesContent":["'use strict'\n\nexports.shader   = getShaderReference\nexports.program  = createProgram\n\nvar GLError = require(\"./GLError\")\nvar formatCompilerError = require('gl-format-compiler-error');\n\nvar weakMap = typeof WeakMap === 'undefined' ? require('weakmap-shim') : WeakMap\nvar CACHE = new weakMap()\n\nvar SHADER_COUNTER = 0\n\nfunction ShaderReference(id, src, type, shader, programs, count, cache) {\n  this.id       = id\n  this.src      = src\n  this.type     = type\n  this.shader   = shader\n  this.count    = count\n  this.programs = []\n  this.cache    = cache\n}\n\nShaderReference.prototype.dispose = function() {\n  if(--this.count === 0) {\n    var cache    = this.cache\n    var gl       = cache.gl\n\n    //Remove program references\n    var programs = this.programs\n    for(var i=0, n=programs.length; i<n; ++i) {\n      var p = cache.programs[programs[i]]\n      if(p) {\n        delete cache.programs[i]\n        gl.deleteProgram(p)\n      }\n    }\n\n    //Remove shader reference\n    gl.deleteShader(this.shader)\n    delete cache.shaders[(this.type === gl.FRAGMENT_SHADER)|0][this.src]\n  }\n}\n\nfunction ContextCache(gl) {\n  this.gl       = gl\n  this.shaders  = [{}, {}]\n  this.programs = {}\n}\n\nvar proto = ContextCache.prototype\n\nfunction compileShader(gl, type, src) {\n  var shader = gl.createShader(type)\n  gl.shaderSource(shader, src)\n  gl.compileShader(shader)\n  if(!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    var errLog = gl.getShaderInfoLog(shader)\n    try {\n        var fmt = formatCompilerError(errLog, src, type);\n    } catch (e){\n        console.warn('Failed to format compiler error: ' + e);\n        throw new GLError(errLog, 'Error compiling shader:\\n' + errLog)\n    }\n    throw new GLError(errLog, fmt.short, fmt.long)\n  }\n  return shader\n}\n\nproto.getShaderReference = function(type, src) {\n  var gl      = this.gl\n  var shaders = this.shaders[(type === gl.FRAGMENT_SHADER)|0]\n  var shader  = shaders[src]\n  if(!shader || !gl.isShader(shader.shader)) {\n    var shaderObj = compileShader(gl, type, src)\n    shader = shaders[src] = new ShaderReference(\n      SHADER_COUNTER++,\n      src,\n      type,\n      shaderObj,\n      [],\n      1,\n      this)\n  } else {\n    shader.count += 1\n  }\n  return shader\n}\n\nfunction linkProgram(gl, vshader, fshader, attribs, locations) {\n  var program = gl.createProgram()\n  gl.attachShader(program, vshader)\n  gl.attachShader(program, fshader)\n  for(var i=0; i<attribs.length; ++i) {\n    gl.bindAttribLocation(program, locations[i], attribs[i])\n  }\n  gl.linkProgram(program)\n  if(!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n    var errLog = gl.getProgramInfoLog(program)\n    throw new GLError(errLog, 'Error linking program: ' + errLog)\n  }\n  return program\n}\n\nproto.getProgram = function(vref, fref, attribs, locations) {\n  var token = [vref.id, fref.id, attribs.join(':'), locations.join(':')].join('@')\n  var prog  = this.programs[token]\n  if(!prog || !this.gl.isProgram(prog)) {\n    this.programs[token] = prog = linkProgram(\n      this.gl,\n      vref.shader,\n      fref.shader,\n      attribs,\n      locations)\n    vref.programs.push(token)\n    fref.programs.push(token)\n  }\n  return prog\n}\n\nfunction getCache(gl) {\n  var ctxCache = CACHE.get(gl)\n  if(!ctxCache) {\n    ctxCache = new ContextCache(gl)\n    CACHE.set(gl, ctxCache)\n  }\n  return ctxCache\n}\n\nfunction getShaderReference(gl, type, src) {\n  return getCache(gl).getShaderReference(type, src)\n}\n\nfunction createProgram(gl, vref, fref, attribs, locations) {\n  return getCache(gl).getProgram(vref, fref, attribs, locations)\n}\n"]},"metadata":{},"sourceType":"script"}