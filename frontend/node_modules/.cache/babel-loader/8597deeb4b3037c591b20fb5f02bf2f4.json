{"ast":null,"code":"'use strict';\n\nvar hasColorscale = require('../../components/colorscale/helpers').hasColorscale;\n\nvar colorscaleCalc = require('../../components/colorscale/calc');\n\nvar arraysToCalcdata = require('../bar/arrays_to_calcdata');\n\nvar setGroupPositions = require('../bar/cross_trace_calc').setGroupPositions;\n\nvar calcSelection = require('../scatter/calc_selection');\n\nvar traceIs = require('../../registry').traceIs;\n\nvar extendFlat = require('../../lib').extendFlat;\n\nfunction calc(gd, trace) {\n  var fullLayout = gd._fullLayout;\n  var subplotId = trace.subplot;\n  var radialAxis = fullLayout[subplotId].radialaxis;\n  var angularAxis = fullLayout[subplotId].angularaxis;\n  var rArray = radialAxis.makeCalcdata(trace, 'r');\n  var thetaArray = angularAxis.makeCalcdata(trace, 'theta');\n  var len = trace._length;\n  var cd = new Array(len); // 'size' axis variables\n\n  var sArray = rArray; // 'pos' axis variables\n\n  var pArray = thetaArray;\n\n  for (var i = 0; i < len; i++) {\n    cd[i] = {\n      p: pArray[i],\n      s: sArray[i]\n    };\n  } // convert width and offset in 'c' coordinate,\n  // set 'c' value(s) in trace._width and trace._offset,\n  // to make Bar.crossTraceCalc \"just work\"\n\n\n  function d2c(attr) {\n    var val = trace[attr];\n\n    if (val !== undefined) {\n      trace['_' + attr] = Array.isArray(val) ? angularAxis.makeCalcdata(trace, attr) : angularAxis.d2c(val, trace.thetaunit);\n    }\n  }\n\n  if (angularAxis.type === 'linear') {\n    d2c('width');\n    d2c('offset');\n  }\n\n  if (hasColorscale(trace, 'marker')) {\n    colorscaleCalc(gd, trace, {\n      vals: trace.marker.color,\n      containerStr: 'marker',\n      cLetter: 'c'\n    });\n  }\n\n  if (hasColorscale(trace, 'marker.line')) {\n    colorscaleCalc(gd, trace, {\n      vals: trace.marker.line.color,\n      containerStr: 'marker.line',\n      cLetter: 'c'\n    });\n  }\n\n  arraysToCalcdata(cd, trace);\n  calcSelection(cd, trace);\n  return cd;\n}\n\nfunction crossTraceCalc(gd, polarLayout, subplotId) {\n  var calcdata = gd.calcdata;\n  var barPolarCd = [];\n\n  for (var i = 0; i < calcdata.length; i++) {\n    var cdi = calcdata[i];\n    var trace = cdi[0].trace;\n\n    if (trace.visible === true && traceIs(trace, 'bar') && trace.subplot === subplotId) {\n      barPolarCd.push(cdi);\n    }\n  } // to make _extremes is filled in correctly so that\n  // polar._subplot.radialAxis can get auotrange'd\n  // TODO clean up!\n  // I think we want to call getAutorange on polar.radialaxis\n  // NOT on polar._subplot.radialAxis\n\n\n  var rAxis = extendFlat({}, polarLayout.radialaxis, {\n    _id: 'x'\n  });\n  var aAxis = polarLayout.angularaxis;\n  setGroupPositions(gd, aAxis, rAxis, barPolarCd, {\n    mode: polarLayout.barmode,\n    norm: polarLayout.barnorm,\n    gap: polarLayout.bargap,\n    groupgap: polarLayout.bargroupgap\n  });\n}\n\nmodule.exports = {\n  calc: calc,\n  crossTraceCalc: crossTraceCalc\n};","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/plotly.js/src/traces/barpolar/calc.js"],"names":["hasColorscale","require","colorscaleCalc","arraysToCalcdata","setGroupPositions","calcSelection","traceIs","extendFlat","calc","gd","trace","fullLayout","_fullLayout","subplotId","subplot","radialAxis","radialaxis","angularAxis","angularaxis","rArray","makeCalcdata","thetaArray","len","_length","cd","Array","sArray","pArray","i","p","s","d2c","attr","val","undefined","isArray","thetaunit","type","vals","marker","color","containerStr","cLetter","line","crossTraceCalc","polarLayout","calcdata","barPolarCd","length","cdi","visible","push","rAxis","_id","aAxis","mode","barmode","norm","barnorm","gap","bargap","groupgap","bargroupgap","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar hasColorscale = require('../../components/colorscale/helpers').hasColorscale;\nvar colorscaleCalc = require('../../components/colorscale/calc');\nvar arraysToCalcdata = require('../bar/arrays_to_calcdata');\nvar setGroupPositions = require('../bar/cross_trace_calc').setGroupPositions;\nvar calcSelection = require('../scatter/calc_selection');\nvar traceIs = require('../../registry').traceIs;\nvar extendFlat = require('../../lib').extendFlat;\n\nfunction calc(gd, trace) {\n    var fullLayout = gd._fullLayout;\n    var subplotId = trace.subplot;\n    var radialAxis = fullLayout[subplotId].radialaxis;\n    var angularAxis = fullLayout[subplotId].angularaxis;\n    var rArray = radialAxis.makeCalcdata(trace, 'r');\n    var thetaArray = angularAxis.makeCalcdata(trace, 'theta');\n    var len = trace._length;\n    var cd = new Array(len);\n\n    // 'size' axis variables\n    var sArray = rArray;\n    // 'pos' axis variables\n    var pArray = thetaArray;\n\n    for(var i = 0; i < len; i++) {\n        cd[i] = {p: pArray[i], s: sArray[i]};\n    }\n\n    // convert width and offset in 'c' coordinate,\n    // set 'c' value(s) in trace._width and trace._offset,\n    // to make Bar.crossTraceCalc \"just work\"\n    function d2c(attr) {\n        var val = trace[attr];\n        if(val !== undefined) {\n            trace['_' + attr] = Array.isArray(val) ?\n                angularAxis.makeCalcdata(trace, attr) :\n                angularAxis.d2c(val, trace.thetaunit);\n        }\n    }\n\n    if(angularAxis.type === 'linear') {\n        d2c('width');\n        d2c('offset');\n    }\n\n    if(hasColorscale(trace, 'marker')) {\n        colorscaleCalc(gd, trace, {\n            vals: trace.marker.color,\n            containerStr: 'marker',\n            cLetter: 'c'\n        });\n    }\n    if(hasColorscale(trace, 'marker.line')) {\n        colorscaleCalc(gd, trace, {\n            vals: trace.marker.line.color,\n            containerStr: 'marker.line',\n            cLetter: 'c'\n        });\n    }\n\n    arraysToCalcdata(cd, trace);\n    calcSelection(cd, trace);\n\n    return cd;\n}\n\nfunction crossTraceCalc(gd, polarLayout, subplotId) {\n    var calcdata = gd.calcdata;\n    var barPolarCd = [];\n\n    for(var i = 0; i < calcdata.length; i++) {\n        var cdi = calcdata[i];\n        var trace = cdi[0].trace;\n\n        if(trace.visible === true && traceIs(trace, 'bar') &&\n            trace.subplot === subplotId\n        ) {\n            barPolarCd.push(cdi);\n        }\n    }\n\n    // to make _extremes is filled in correctly so that\n    // polar._subplot.radialAxis can get auotrange'd\n    // TODO clean up!\n    // I think we want to call getAutorange on polar.radialaxis\n    // NOT on polar._subplot.radialAxis\n    var rAxis = extendFlat({}, polarLayout.radialaxis, {_id: 'x'});\n    var aAxis = polarLayout.angularaxis;\n\n    setGroupPositions(gd, aAxis, rAxis, barPolarCd, {\n        mode: polarLayout.barmode,\n        norm: polarLayout.barnorm,\n        gap: polarLayout.bargap,\n        groupgap: polarLayout.bargroupgap\n    });\n}\n\nmodule.exports = {\n    calc: calc,\n    crossTraceCalc: crossTraceCalc\n};\n"]},"metadata":{},"sourceType":"script"}