{"ast":null,"code":"'use strict';\n\nvar hovertemplateAttrs = require('../../plots/template_attributes').hovertemplateAttrs;\n\nvar texttemplateAttrs = require('../../plots/template_attributes').texttemplateAttrs;\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nvar scatterAttrs = require('../scatter/attributes');\n\nvar baseAttrs = require('../../plots/attributes');\n\nvar lineAttrs = scatterAttrs.line;\nmodule.exports = {\n  mode: scatterAttrs.mode,\n  r: {\n    valType: 'data_array',\n    editType: 'calc+clearAxisTypes',\n    description: 'Sets the radial coordinates'\n  },\n  theta: {\n    valType: 'data_array',\n    editType: 'calc+clearAxisTypes',\n    description: 'Sets the angular coordinates'\n  },\n  r0: {\n    valType: 'any',\n    dflt: 0,\n    editType: 'calc+clearAxisTypes',\n    description: ['Alternate to `r`.', 'Builds a linear space of r coordinates.', 'Use with `dr`', 'where `r0` is the starting coordinate and `dr` the step.'].join(' ')\n  },\n  dr: {\n    valType: 'number',\n    dflt: 1,\n    editType: 'calc',\n    description: 'Sets the r coordinate step.'\n  },\n  theta0: {\n    valType: 'any',\n    dflt: 0,\n    editType: 'calc+clearAxisTypes',\n    description: ['Alternate to `theta`.', 'Builds a linear space of theta coordinates.', 'Use with `dtheta`', 'where `theta0` is the starting coordinate and `dtheta` the step.'].join(' ')\n  },\n  dtheta: {\n    valType: 'number',\n    editType: 'calc',\n    description: ['Sets the theta coordinate step.', 'By default, the `dtheta` step equals the subplot\\'s period divided', 'by the length of the `r` coordinates.'].join(' ')\n  },\n  thetaunit: {\n    valType: 'enumerated',\n    values: ['radians', 'degrees', 'gradians'],\n    dflt: 'degrees',\n    editType: 'calc+clearAxisTypes',\n    description: ['Sets the unit of input *theta* values.', 'Has an effect only when on *linear* angular axes.'].join(' ')\n  },\n  text: scatterAttrs.text,\n  texttemplate: texttemplateAttrs({\n    editType: 'plot'\n  }, {\n    keys: ['r', 'theta', 'text']\n  }),\n  hovertext: scatterAttrs.hovertext,\n  line: {\n    color: lineAttrs.color,\n    width: lineAttrs.width,\n    dash: lineAttrs.dash,\n    shape: extendFlat({}, lineAttrs.shape, {\n      values: ['linear', 'spline']\n    }),\n    smoothing: lineAttrs.smoothing,\n    editType: 'calc'\n  },\n  connectgaps: scatterAttrs.connectgaps,\n  marker: scatterAttrs.marker,\n  cliponaxis: extendFlat({}, scatterAttrs.cliponaxis, {\n    dflt: false\n  }),\n  textposition: scatterAttrs.textposition,\n  textfont: scatterAttrs.textfont,\n  fill: extendFlat({}, scatterAttrs.fill, {\n    values: ['none', 'toself', 'tonext'],\n    dflt: 'none',\n    description: ['Sets the area to fill with a solid color.', 'Use with `fillcolor` if not *none*.', 'scatterpolar has a subset of the options available to scatter.', '*toself* connects the endpoints of the trace (or each segment', 'of the trace if it has gaps) into a closed shape.', '*tonext* fills the space between two traces if one completely', 'encloses the other (eg consecutive contour lines), and behaves like', '*toself* if there is no trace before it. *tonext* should not be', 'used if one trace does not enclose the other.'].join(' ')\n  }),\n  fillcolor: scatterAttrs.fillcolor,\n  // TODO error bars\n  // https://stackoverflow.com/a/26597487/4068492\n  // error_x (error_r, error_theta)\n  // error_y\n  hoverinfo: extendFlat({}, baseAttrs.hoverinfo, {\n    flags: ['r', 'theta', 'text', 'name']\n  }),\n  hoveron: scatterAttrs.hoveron,\n  hovertemplate: hovertemplateAttrs(),\n  selected: scatterAttrs.selected,\n  unselected: scatterAttrs.unselected\n};","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/plotly.js/src/traces/scatterpolar/attributes.js"],"names":["hovertemplateAttrs","require","texttemplateAttrs","extendFlat","scatterAttrs","baseAttrs","lineAttrs","line","module","exports","mode","r","valType","editType","description","theta","r0","dflt","join","dr","theta0","dtheta","thetaunit","values","text","texttemplate","keys","hovertext","color","width","dash","shape","smoothing","connectgaps","marker","cliponaxis","textposition","textfont","fill","fillcolor","hoverinfo","flags","hoveron","hovertemplate","selected","unselected"],"mappings":"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","sourcesContent":["'use strict';\n\nvar hovertemplateAttrs = require('../../plots/template_attributes').hovertemplateAttrs;\nvar texttemplateAttrs = require('../../plots/template_attributes').texttemplateAttrs;\nvar extendFlat = require('../../lib/extend').extendFlat;\nvar scatterAttrs = require('../scatter/attributes');\nvar baseAttrs = require('../../plots/attributes');\nvar lineAttrs = scatterAttrs.line;\n\nmodule.exports = {\n    mode: scatterAttrs.mode,\n\n    r: {\n        valType: 'data_array',\n        editType: 'calc+clearAxisTypes',\n        description: 'Sets the radial coordinates'\n    },\n\n    theta: {\n        valType: 'data_array',\n        editType: 'calc+clearAxisTypes',\n        description: 'Sets the angular coordinates'\n    },\n\n    r0: {\n        valType: 'any',\n        dflt: 0,\n        editType: 'calc+clearAxisTypes',\n        description: [\n            'Alternate to `r`.',\n            'Builds a linear space of r coordinates.',\n            'Use with `dr`',\n            'where `r0` is the starting coordinate and `dr` the step.'\n        ].join(' ')\n    },\n    dr: {\n        valType: 'number',\n        dflt: 1,\n        editType: 'calc',\n        description: 'Sets the r coordinate step.'\n    },\n\n    theta0: {\n        valType: 'any',\n        dflt: 0,\n        editType: 'calc+clearAxisTypes',\n        description: [\n            'Alternate to `theta`.',\n            'Builds a linear space of theta coordinates.',\n            'Use with `dtheta`',\n            'where `theta0` is the starting coordinate and `dtheta` the step.'\n        ].join(' ')\n    },\n    dtheta: {\n        valType: 'number',\n        editType: 'calc',\n        description: [\n            'Sets the theta coordinate step.',\n            'By default, the `dtheta` step equals the subplot\\'s period divided',\n            'by the length of the `r` coordinates.'\n        ].join(' ')\n    },\n\n    thetaunit: {\n        valType: 'enumerated',\n        values: ['radians', 'degrees', 'gradians'],\n        dflt: 'degrees',\n        editType: 'calc+clearAxisTypes',\n        description: [\n            'Sets the unit of input *theta* values.',\n            'Has an effect only when on *linear* angular axes.'\n        ].join(' ')\n    },\n\n    text: scatterAttrs.text,\n    texttemplate: texttemplateAttrs({editType: 'plot'}, {\n        keys: ['r', 'theta', 'text']\n    }),\n    hovertext: scatterAttrs.hovertext,\n\n    line: {\n        color: lineAttrs.color,\n        width: lineAttrs.width,\n        dash: lineAttrs.dash,\n        shape: extendFlat({}, lineAttrs.shape, {\n            values: ['linear', 'spline']\n        }),\n        smoothing: lineAttrs.smoothing,\n        editType: 'calc'\n    },\n    connectgaps: scatterAttrs.connectgaps,\n\n    marker: scatterAttrs.marker,\n    cliponaxis: extendFlat({}, scatterAttrs.cliponaxis, {dflt: false}),\n\n    textposition: scatterAttrs.textposition,\n    textfont: scatterAttrs.textfont,\n\n    fill: extendFlat({}, scatterAttrs.fill, {\n        values: ['none', 'toself', 'tonext'],\n        dflt: 'none',\n        description: [\n            'Sets the area to fill with a solid color.',\n            'Use with `fillcolor` if not *none*.',\n            'scatterpolar has a subset of the options available to scatter.',\n            '*toself* connects the endpoints of the trace (or each segment',\n            'of the trace if it has gaps) into a closed shape.',\n            '*tonext* fills the space between two traces if one completely',\n            'encloses the other (eg consecutive contour lines), and behaves like',\n            '*toself* if there is no trace before it. *tonext* should not be',\n            'used if one trace does not enclose the other.'\n        ].join(' ')\n    }),\n    fillcolor: scatterAttrs.fillcolor,\n\n    // TODO error bars\n    // https://stackoverflow.com/a/26597487/4068492\n    // error_x (error_r, error_theta)\n    // error_y\n\n    hoverinfo: extendFlat({}, baseAttrs.hoverinfo, {\n        flags: ['r', 'theta', 'text', 'name']\n    }),\n    hoveron: scatterAttrs.hoveron,\n    hovertemplate: hovertemplateAttrs(),\n\n    selected: scatterAttrs.selected,\n    unselected: scatterAttrs.unselected\n};\n"]},"metadata":{},"sourceType":"script"}