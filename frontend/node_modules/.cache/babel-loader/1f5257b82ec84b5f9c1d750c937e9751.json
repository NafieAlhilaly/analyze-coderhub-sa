{"ast":null,"code":"'use strict';\n\nvar constants = require('./constants');\n\nvar search = require('../../lib/search').findBin;\n\nvar computeControlPoints = require('./compute_control_points');\n\nvar createSplineEvaluator = require('./create_spline_evaluator');\n\nvar createIDerivativeEvaluator = require('./create_i_derivative_evaluator');\n\nvar createJDerivativeEvaluator = require('./create_j_derivative_evaluator');\n/*\n * Create conversion functions to go from one basis to another. In particular the letter\n * abbreviations are:\n *\n *   i: i/j coordinates along the grid. Integer values correspond to data points\n *   a: real-valued coordinates along the a/b axes\n *   c: cartesian x-y coordinates\n *   p: screen-space pixel coordinates\n */\n\n\nmodule.exports = function setConvert(trace) {\n  var a = trace._a;\n  var b = trace._b;\n  var na = a.length;\n  var nb = b.length;\n  var aax = trace.aaxis;\n  var bax = trace.baxis; // Grab the limits once rather than recomputing the bounds for every point\n  // independently:\n\n  var amin = a[0];\n  var amax = a[na - 1];\n  var bmin = b[0];\n  var bmax = b[nb - 1];\n  var arange = a[a.length - 1] - a[0];\n  var brange = b[b.length - 1] - b[0]; // Compute the tolerance so that points are visible slightly outside the\n  // defined carpet axis:\n\n  var atol = arange * constants.RELATIVE_CULL_TOLERANCE;\n  var btol = brange * constants.RELATIVE_CULL_TOLERANCE; // Expand the limits to include the relative tolerance:\n\n  amin -= atol;\n  amax += atol;\n  bmin -= btol;\n  bmax += btol;\n\n  trace.isVisible = function (a, b) {\n    return a > amin && a < amax && b > bmin && b < bmax;\n  };\n\n  trace.isOccluded = function (a, b) {\n    return a < amin || a > amax || b < bmin || b > bmax;\n  };\n\n  trace.setScale = function () {\n    var x = trace._x;\n    var y = trace._y; // This is potentially a very expensive step! It does the bulk of the work of constructing\n    // an expanded basis of control points. Note in particular that it overwrites the existing\n    // basis without creating a new array since that would potentially thrash the garbage\n    // collector.\n\n    var result = computeControlPoints(trace._xctrl, trace._yctrl, x, y, aax.smoothing, bax.smoothing);\n    trace._xctrl = result[0];\n    trace._yctrl = result[1]; // This step is the second step in the process, but it's somewhat simpler. It just unrolls\n    // some logic since it would be unnecessarily expensive to compute both interpolations\n    // nearly identically but separately and to include a bunch of linear vs. bicubic logic in\n    // every single call.\n\n    trace.evalxy = createSplineEvaluator([trace._xctrl, trace._yctrl], na, nb, aax.smoothing, bax.smoothing);\n    trace.dxydi = createIDerivativeEvaluator([trace._xctrl, trace._yctrl], aax.smoothing, bax.smoothing);\n    trace.dxydj = createJDerivativeEvaluator([trace._xctrl, trace._yctrl], aax.smoothing, bax.smoothing);\n  };\n  /*\n   * Convert from i/j data grid coordinates to a/b values. Note in particular that this\n   * is *linear* interpolation, even if the data is interpolated bicubically.\n   */\n\n\n  trace.i2a = function (i) {\n    var i0 = Math.max(0, Math.floor(i[0]), na - 2);\n    var ti = i[0] - i0;\n    return (1 - ti) * a[i0] + ti * a[i0 + 1];\n  };\n\n  trace.j2b = function (j) {\n    var j0 = Math.max(0, Math.floor(j[1]), na - 2);\n    var tj = j[1] - j0;\n    return (1 - tj) * b[j0] + tj * b[j0 + 1];\n  };\n\n  trace.ij2ab = function (ij) {\n    return [trace.i2a(ij[0]), trace.j2b(ij[1])];\n  };\n  /*\n   * Convert from a/b coordinates to i/j grid-numbered coordinates. This requires searching\n   * through the a/b data arrays and assumes they are monotonic, which is presumed to have\n   * been enforced already.\n   */\n\n\n  trace.a2i = function (aval) {\n    var i0 = Math.max(0, Math.min(search(aval, a), na - 2));\n    var a0 = a[i0];\n    var a1 = a[i0 + 1];\n    return Math.max(0, Math.min(na - 1, i0 + (aval - a0) / (a1 - a0)));\n  };\n\n  trace.b2j = function (bval) {\n    var j0 = Math.max(0, Math.min(search(bval, b), nb - 2));\n    var b0 = b[j0];\n    var b1 = b[j0 + 1];\n    return Math.max(0, Math.min(nb - 1, j0 + (bval - b0) / (b1 - b0)));\n  };\n\n  trace.ab2ij = function (ab) {\n    return [trace.a2i(ab[0]), trace.b2j(ab[1])];\n  };\n  /*\n   * Convert from i/j coordinates to x/y caretesian coordinates. This means either bilinear\n   * or bicubic spline evaluation, but the hard part is already done at this point.\n   */\n\n\n  trace.i2c = function (i, j) {\n    return trace.evalxy([], i, j);\n  };\n\n  trace.ab2xy = function (aval, bval, extrapolate) {\n    if (!extrapolate && (aval < a[0] || aval > a[na - 1] | bval < b[0] || bval > b[nb - 1])) {\n      return [false, false];\n    }\n\n    var i = trace.a2i(aval);\n    var j = trace.b2j(bval);\n    var pt = trace.evalxy([], i, j);\n\n    if (extrapolate) {\n      // This section uses the boundary derivatives to extrapolate linearly outside\n      // the defined range. Consider a scatter line with one point inside the carpet\n      // axis and one point outside. If we don't extrapolate, we can't draw the line\n      // at all.\n      var iex = 0;\n      var jex = 0;\n      var der = [];\n      var i0, ti, j0, tj;\n\n      if (aval < a[0]) {\n        i0 = 0;\n        ti = 0;\n        iex = (aval - a[0]) / (a[1] - a[0]);\n      } else if (aval > a[na - 1]) {\n        i0 = na - 2;\n        ti = 1;\n        iex = (aval - a[na - 1]) / (a[na - 1] - a[na - 2]);\n      } else {\n        i0 = Math.max(0, Math.min(na - 2, Math.floor(i)));\n        ti = i - i0;\n      }\n\n      if (bval < b[0]) {\n        j0 = 0;\n        tj = 0;\n        jex = (bval - b[0]) / (b[1] - b[0]);\n      } else if (bval > b[nb - 1]) {\n        j0 = nb - 2;\n        tj = 1;\n        jex = (bval - b[nb - 1]) / (b[nb - 1] - b[nb - 2]);\n      } else {\n        j0 = Math.max(0, Math.min(nb - 2, Math.floor(j)));\n        tj = j - j0;\n      }\n\n      if (iex) {\n        trace.dxydi(der, i0, j0, ti, tj);\n        pt[0] += der[0] * iex;\n        pt[1] += der[1] * iex;\n      }\n\n      if (jex) {\n        trace.dxydj(der, i0, j0, ti, tj);\n        pt[0] += der[0] * jex;\n        pt[1] += der[1] * jex;\n      }\n    }\n\n    return pt;\n  };\n\n  trace.c2p = function (xy, xa, ya) {\n    return [xa.c2p(xy[0]), ya.c2p(xy[1])];\n  };\n\n  trace.p2x = function (p, xa, ya) {\n    return [xa.p2c(p[0]), ya.p2c(p[1])];\n  };\n\n  trace.dadi = function (i\n  /* , u*/\n  ) {\n    // Right now only a piecewise linear a or b basis is permitted since smoother interpolation\n    // would cause monotonicity problems. As a retult, u is entirely disregarded in this\n    // computation, though we'll specify it as a parameter for the sake of completeness and\n    // future-proofing. It would be possible to use monotonic cubic interpolation, for example.\n    //\n    // See: https://en.wikipedia.org/wiki/Monotone_cubic_interpolation\n    // u = u || 0;\n    var i0 = Math.max(0, Math.min(a.length - 2, i)); // The step (denominator) is implicitly 1 since that's the grid spacing.\n\n    return a[i0 + 1] - a[i0];\n  };\n\n  trace.dbdj = function (j\n  /* , v*/\n  ) {\n    // See above caveats for dadi which also apply here\n    var j0 = Math.max(0, Math.min(b.length - 2, j)); // The step (denominator) is implicitly 1 since that's the grid spacing.\n\n    return b[j0 + 1] - b[j0];\n  }; // Takes: grid cell coordinate (i, j) and fractional grid cell coordinates (u, v)\n  // Returns: (dx/da, dy/db)\n  //\n  // NB: separate grid cell + fractional grid cell coordinate format is due to the discontinuous\n  // derivative, as described better in create_i_derivative_evaluator.js\n\n\n  trace.dxyda = function (i0, j0, u, v) {\n    var dxydi = trace.dxydi(null, i0, j0, u, v);\n    var dadi = trace.dadi(i0, u);\n    return [dxydi[0] / dadi, dxydi[1] / dadi];\n  };\n\n  trace.dxydb = function (i0, j0, u, v) {\n    var dxydj = trace.dxydj(null, i0, j0, u, v);\n    var dbdj = trace.dbdj(j0, v);\n    return [dxydj[0] / dbdj, dxydj[1] / dbdj];\n  }; // Sometimes we don't care about precision and all we really want is decent rough\n  // directions (as is the case with labels). In that case, we can do a very rough finite\n  // difference and spare having to worry about precise grid coordinates:\n\n\n  trace.dxyda_rough = function (a, b, reldiff) {\n    var h = arange * (reldiff || 0.1);\n    var plus = trace.ab2xy(a + h, b, true);\n    var minus = trace.ab2xy(a - h, b, true);\n    return [(plus[0] - minus[0]) * 0.5 / h, (plus[1] - minus[1]) * 0.5 / h];\n  };\n\n  trace.dxydb_rough = function (a, b, reldiff) {\n    var h = brange * (reldiff || 0.1);\n    var plus = trace.ab2xy(a, b + h, true);\n    var minus = trace.ab2xy(a, b - h, true);\n    return [(plus[0] - minus[0]) * 0.5 / h, (plus[1] - minus[1]) * 0.5 / h];\n  };\n\n  trace.dpdx = function (xa) {\n    return xa._m;\n  };\n\n  trace.dpdy = function (ya) {\n    return ya._m;\n  };\n};","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/plotly.js/src/traces/carpet/set_convert.js"],"names":["constants","require","search","findBin","computeControlPoints","createSplineEvaluator","createIDerivativeEvaluator","createJDerivativeEvaluator","module","exports","setConvert","trace","a","_a","b","_b","na","length","nb","aax","aaxis","bax","baxis","amin","amax","bmin","bmax","arange","brange","atol","RELATIVE_CULL_TOLERANCE","btol","isVisible","isOccluded","setScale","x","_x","y","_y","result","_xctrl","_yctrl","smoothing","evalxy","dxydi","dxydj","i2a","i","i0","Math","max","floor","ti","j2b","j","j0","tj","ij2ab","ij","a2i","aval","min","a0","a1","b2j","bval","b0","b1","ab2ij","ab","i2c","ab2xy","extrapolate","pt","iex","jex","der","c2p","xy","xa","ya","p2x","p","p2c","dadi","dbdj","dxyda","u","v","dxydb","dxyda_rough","reldiff","h","plus","minus","dxydb_rough","dpdx","_m","dpdy"],"mappings":"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","sourcesContent":["'use strict';\n\nvar constants = require('./constants');\nvar search = require('../../lib/search').findBin;\nvar computeControlPoints = require('./compute_control_points');\nvar createSplineEvaluator = require('./create_spline_evaluator');\nvar createIDerivativeEvaluator = require('./create_i_derivative_evaluator');\nvar createJDerivativeEvaluator = require('./create_j_derivative_evaluator');\n\n/*\n * Create conversion functions to go from one basis to another. In particular the letter\n * abbreviations are:\n *\n *   i: i/j coordinates along the grid. Integer values correspond to data points\n *   a: real-valued coordinates along the a/b axes\n *   c: cartesian x-y coordinates\n *   p: screen-space pixel coordinates\n */\nmodule.exports = function setConvert(trace) {\n    var a = trace._a;\n    var b = trace._b;\n    var na = a.length;\n    var nb = b.length;\n    var aax = trace.aaxis;\n    var bax = trace.baxis;\n\n    // Grab the limits once rather than recomputing the bounds for every point\n    // independently:\n    var amin = a[0];\n    var amax = a[na - 1];\n    var bmin = b[0];\n    var bmax = b[nb - 1];\n    var arange = a[a.length - 1] - a[0];\n    var brange = b[b.length - 1] - b[0];\n\n    // Compute the tolerance so that points are visible slightly outside the\n    // defined carpet axis:\n    var atol = arange * constants.RELATIVE_CULL_TOLERANCE;\n    var btol = brange * constants.RELATIVE_CULL_TOLERANCE;\n\n    // Expand the limits to include the relative tolerance:\n    amin -= atol;\n    amax += atol;\n    bmin -= btol;\n    bmax += btol;\n\n    trace.isVisible = function(a, b) {\n        return a > amin && a < amax && b > bmin && b < bmax;\n    };\n\n    trace.isOccluded = function(a, b) {\n        return a < amin || a > amax || b < bmin || b > bmax;\n    };\n\n    trace.setScale = function() {\n        var x = trace._x;\n        var y = trace._y;\n\n        // This is potentially a very expensive step! It does the bulk of the work of constructing\n        // an expanded basis of control points. Note in particular that it overwrites the existing\n        // basis without creating a new array since that would potentially thrash the garbage\n        // collector.\n        var result = computeControlPoints(trace._xctrl, trace._yctrl, x, y, aax.smoothing, bax.smoothing);\n        trace._xctrl = result[0];\n        trace._yctrl = result[1];\n\n        // This step is the second step in the process, but it's somewhat simpler. It just unrolls\n        // some logic since it would be unnecessarily expensive to compute both interpolations\n        // nearly identically but separately and to include a bunch of linear vs. bicubic logic in\n        // every single call.\n        trace.evalxy = createSplineEvaluator([trace._xctrl, trace._yctrl], na, nb, aax.smoothing, bax.smoothing);\n\n        trace.dxydi = createIDerivativeEvaluator([trace._xctrl, trace._yctrl], aax.smoothing, bax.smoothing);\n        trace.dxydj = createJDerivativeEvaluator([trace._xctrl, trace._yctrl], aax.smoothing, bax.smoothing);\n    };\n\n    /*\n     * Convert from i/j data grid coordinates to a/b values. Note in particular that this\n     * is *linear* interpolation, even if the data is interpolated bicubically.\n     */\n    trace.i2a = function(i) {\n        var i0 = Math.max(0, Math.floor(i[0]), na - 2);\n        var ti = i[0] - i0;\n        return (1 - ti) * a[i0] + ti * a[i0 + 1];\n    };\n\n    trace.j2b = function(j) {\n        var j0 = Math.max(0, Math.floor(j[1]), na - 2);\n        var tj = j[1] - j0;\n        return (1 - tj) * b[j0] + tj * b[j0 + 1];\n    };\n\n    trace.ij2ab = function(ij) {\n        return [trace.i2a(ij[0]), trace.j2b(ij[1])];\n    };\n\n    /*\n     * Convert from a/b coordinates to i/j grid-numbered coordinates. This requires searching\n     * through the a/b data arrays and assumes they are monotonic, which is presumed to have\n     * been enforced already.\n     */\n    trace.a2i = function(aval) {\n        var i0 = Math.max(0, Math.min(search(aval, a), na - 2));\n        var a0 = a[i0];\n        var a1 = a[i0 + 1];\n        return Math.max(0, Math.min(na - 1, i0 + (aval - a0) / (a1 - a0)));\n    };\n\n    trace.b2j = function(bval) {\n        var j0 = Math.max(0, Math.min(search(bval, b), nb - 2));\n        var b0 = b[j0];\n        var b1 = b[j0 + 1];\n        return Math.max(0, Math.min(nb - 1, j0 + (bval - b0) / (b1 - b0)));\n    };\n\n    trace.ab2ij = function(ab) {\n        return [trace.a2i(ab[0]), trace.b2j(ab[1])];\n    };\n\n    /*\n     * Convert from i/j coordinates to x/y caretesian coordinates. This means either bilinear\n     * or bicubic spline evaluation, but the hard part is already done at this point.\n     */\n    trace.i2c = function(i, j) {\n        return trace.evalxy([], i, j);\n    };\n\n    trace.ab2xy = function(aval, bval, extrapolate) {\n        if(!extrapolate && (aval < a[0] || aval > a[na - 1] | bval < b[0] || bval > b[nb - 1])) {\n            return [false, false];\n        }\n        var i = trace.a2i(aval);\n        var j = trace.b2j(bval);\n\n        var pt = trace.evalxy([], i, j);\n\n        if(extrapolate) {\n            // This section uses the boundary derivatives to extrapolate linearly outside\n            // the defined range. Consider a scatter line with one point inside the carpet\n            // axis and one point outside. If we don't extrapolate, we can't draw the line\n            // at all.\n            var iex = 0;\n            var jex = 0;\n            var der = [];\n\n            var i0, ti, j0, tj;\n            if(aval < a[0]) {\n                i0 = 0;\n                ti = 0;\n                iex = (aval - a[0]) / (a[1] - a[0]);\n            } else if(aval > a[na - 1]) {\n                i0 = na - 2;\n                ti = 1;\n                iex = (aval - a[na - 1]) / (a[na - 1] - a[na - 2]);\n            } else {\n                i0 = Math.max(0, Math.min(na - 2, Math.floor(i)));\n                ti = i - i0;\n            }\n\n            if(bval < b[0]) {\n                j0 = 0;\n                tj = 0;\n                jex = (bval - b[0]) / (b[1] - b[0]);\n            } else if(bval > b[nb - 1]) {\n                j0 = nb - 2;\n                tj = 1;\n                jex = (bval - b[nb - 1]) / (b[nb - 1] - b[nb - 2]);\n            } else {\n                j0 = Math.max(0, Math.min(nb - 2, Math.floor(j)));\n                tj = j - j0;\n            }\n\n            if(iex) {\n                trace.dxydi(der, i0, j0, ti, tj);\n                pt[0] += der[0] * iex;\n                pt[1] += der[1] * iex;\n            }\n\n            if(jex) {\n                trace.dxydj(der, i0, j0, ti, tj);\n                pt[0] += der[0] * jex;\n                pt[1] += der[1] * jex;\n            }\n        }\n\n        return pt;\n    };\n\n\n    trace.c2p = function(xy, xa, ya) {\n        return [xa.c2p(xy[0]), ya.c2p(xy[1])];\n    };\n\n    trace.p2x = function(p, xa, ya) {\n        return [xa.p2c(p[0]), ya.p2c(p[1])];\n    };\n\n    trace.dadi = function(i /* , u*/) {\n        // Right now only a piecewise linear a or b basis is permitted since smoother interpolation\n        // would cause monotonicity problems. As a retult, u is entirely disregarded in this\n        // computation, though we'll specify it as a parameter for the sake of completeness and\n        // future-proofing. It would be possible to use monotonic cubic interpolation, for example.\n        //\n        // See: https://en.wikipedia.org/wiki/Monotone_cubic_interpolation\n\n        // u = u || 0;\n\n        var i0 = Math.max(0, Math.min(a.length - 2, i));\n\n        // The step (denominator) is implicitly 1 since that's the grid spacing.\n        return a[i0 + 1] - a[i0];\n    };\n\n    trace.dbdj = function(j /* , v*/) {\n        // See above caveats for dadi which also apply here\n        var j0 = Math.max(0, Math.min(b.length - 2, j));\n\n        // The step (denominator) is implicitly 1 since that's the grid spacing.\n        return b[j0 + 1] - b[j0];\n    };\n\n    // Takes: grid cell coordinate (i, j) and fractional grid cell coordinates (u, v)\n    // Returns: (dx/da, dy/db)\n    //\n    // NB: separate grid cell + fractional grid cell coordinate format is due to the discontinuous\n    // derivative, as described better in create_i_derivative_evaluator.js\n    trace.dxyda = function(i0, j0, u, v) {\n        var dxydi = trace.dxydi(null, i0, j0, u, v);\n        var dadi = trace.dadi(i0, u);\n\n        return [dxydi[0] / dadi, dxydi[1] / dadi];\n    };\n\n    trace.dxydb = function(i0, j0, u, v) {\n        var dxydj = trace.dxydj(null, i0, j0, u, v);\n        var dbdj = trace.dbdj(j0, v);\n\n        return [dxydj[0] / dbdj, dxydj[1] / dbdj];\n    };\n\n    // Sometimes we don't care about precision and all we really want is decent rough\n    // directions (as is the case with labels). In that case, we can do a very rough finite\n    // difference and spare having to worry about precise grid coordinates:\n    trace.dxyda_rough = function(a, b, reldiff) {\n        var h = arange * (reldiff || 0.1);\n        var plus = trace.ab2xy(a + h, b, true);\n        var minus = trace.ab2xy(a - h, b, true);\n\n        return [\n            (plus[0] - minus[0]) * 0.5 / h,\n            (plus[1] - minus[1]) * 0.5 / h\n        ];\n    };\n\n    trace.dxydb_rough = function(a, b, reldiff) {\n        var h = brange * (reldiff || 0.1);\n        var plus = trace.ab2xy(a, b + h, true);\n        var minus = trace.ab2xy(a, b - h, true);\n\n        return [\n            (plus[0] - minus[0]) * 0.5 / h,\n            (plus[1] - minus[1]) * 0.5 / h\n        ];\n    };\n\n    trace.dpdx = function(xa) {\n        return xa._m;\n    };\n\n    trace.dpdy = function(ya) {\n        return ya._m;\n    };\n};\n"]},"metadata":{},"sourceType":"script"}