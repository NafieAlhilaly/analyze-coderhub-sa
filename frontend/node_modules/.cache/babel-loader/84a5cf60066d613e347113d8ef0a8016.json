{"ast":null,"code":"'use strict';\n\nvar annAttrs = require('../../components/annotations/attributes');\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\n\nvar fontAttrs = require('../../plots/font_attributes');\n\nvar domainAttrs = require('../../plots/domain').attributes;\n\nvar descriptionOnlyNumbers = require('../../plots/cartesian/axis_format_attributes').descriptionOnlyNumbers;\n\nvar attrs = module.exports = overrideAll({\n  domain: domainAttrs({\n    name: 'table',\n    trace: true\n  }),\n  columnwidth: {\n    valType: 'number',\n    arrayOk: true,\n    dflt: null,\n    description: ['The width of columns expressed as a ratio. Columns fill the available width', 'in proportion of their specified column widths.'].join(' ')\n  },\n  columnorder: {\n    valType: 'data_array',\n    description: ['Specifies the rendered order of the data columns; for example, a value `2` at position `0`', 'means that column index `0` in the data will be rendered as the', 'third column, as columns have an index base of zero.'].join(' ')\n  },\n  header: {\n    values: {\n      valType: 'data_array',\n      dflt: [],\n      description: ['Header cell values. `values[m][n]` represents the value of the `n`th point in column `m`,', 'therefore the `values[m]` vector length for all columns must be the same (longer vectors', 'will be truncated). Each value must be a finite number or a string.'].join(' ')\n    },\n    format: {\n      valType: 'data_array',\n      dflt: [],\n      description: descriptionOnlyNumbers('cell value')\n    },\n    prefix: {\n      valType: 'string',\n      arrayOk: true,\n      dflt: null,\n      description: 'Prefix for cell values.'\n    },\n    suffix: {\n      valType: 'string',\n      arrayOk: true,\n      dflt: null,\n      description: 'Suffix for cell values.'\n    },\n    height: {\n      valType: 'number',\n      dflt: 28,\n      description: 'The height of cells.'\n    },\n    align: extendFlat({}, annAttrs.align, {\n      arrayOk: true\n    }),\n    line: {\n      width: {\n        valType: 'number',\n        arrayOk: true,\n        dflt: 1\n      },\n      color: {\n        valType: 'color',\n        arrayOk: true,\n        dflt: 'grey'\n      }\n    },\n    fill: {\n      color: {\n        valType: 'color',\n        arrayOk: true,\n        dflt: 'white',\n        description: ['Sets the cell fill color. It accepts either a specific color', ' or an array of colors or a 2D array of colors.'].join('')\n      }\n    },\n    font: extendFlat({}, fontAttrs({\n      arrayOk: true\n    }))\n  },\n  cells: {\n    values: {\n      valType: 'data_array',\n      dflt: [],\n      description: ['Cell values. `values[m][n]` represents the value of the `n`th point in column `m`,', 'therefore the `values[m]` vector length for all columns must be the same (longer vectors', 'will be truncated). Each value must be a finite number or a string.'].join(' ')\n    },\n    format: {\n      valType: 'data_array',\n      dflt: [],\n      description: descriptionOnlyNumbers('cell value')\n    },\n    prefix: {\n      valType: 'string',\n      arrayOk: true,\n      dflt: null,\n      description: 'Prefix for cell values.'\n    },\n    suffix: {\n      valType: 'string',\n      arrayOk: true,\n      dflt: null,\n      description: 'Suffix for cell values.'\n    },\n    height: {\n      valType: 'number',\n      dflt: 20,\n      description: 'The height of cells.'\n    },\n    align: extendFlat({}, annAttrs.align, {\n      arrayOk: true\n    }),\n    line: {\n      width: {\n        valType: 'number',\n        arrayOk: true,\n        dflt: 1\n      },\n      color: {\n        valType: 'color',\n        arrayOk: true,\n        dflt: 'grey'\n      }\n    },\n    fill: {\n      color: {\n        valType: 'color',\n        arrayOk: true,\n        dflt: 'white',\n        description: ['Sets the cell fill color. It accepts either a specific color', ' or an array of colors or a 2D array of colors.'].join('')\n      }\n    },\n    font: extendFlat({}, fontAttrs({\n      arrayOk: true\n    }))\n  }\n}, 'calc', 'from-root');\nattrs.transforms = undefined;","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/plotly.js/src/traces/table/attributes.js"],"names":["annAttrs","require","extendFlat","overrideAll","fontAttrs","domainAttrs","attributes","descriptionOnlyNumbers","attrs","module","exports","domain","name","trace","columnwidth","valType","arrayOk","dflt","description","join","columnorder","header","values","format","prefix","suffix","height","align","line","width","color","fill","font","cells","transforms","undefined"],"mappings":"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","sourcesContent":["'use strict';\n\nvar annAttrs = require('../../components/annotations/attributes');\nvar extendFlat = require('../../lib/extend').extendFlat;\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\nvar fontAttrs = require('../../plots/font_attributes');\nvar domainAttrs = require('../../plots/domain').attributes;\nvar descriptionOnlyNumbers = require('../../plots/cartesian/axis_format_attributes').descriptionOnlyNumbers;\n\nvar attrs = module.exports = overrideAll({\n    domain: domainAttrs({name: 'table', trace: true}),\n\n    columnwidth: {\n        valType: 'number',\n        arrayOk: true,\n        dflt: null,\n        description: [\n            'The width of columns expressed as a ratio. Columns fill the available width',\n            'in proportion of their specified column widths.'\n        ].join(' ')\n    },\n\n    columnorder: {\n        valType: 'data_array',\n        description: [\n            'Specifies the rendered order of the data columns; for example, a value `2` at position `0`',\n            'means that column index `0` in the data will be rendered as the',\n            'third column, as columns have an index base of zero.'\n        ].join(' ')\n    },\n\n    header: {\n\n        values: {\n            valType: 'data_array',\n            dflt: [],\n            description: [\n                'Header cell values. `values[m][n]` represents the value of the `n`th point in column `m`,',\n                'therefore the `values[m]` vector length for all columns must be the same (longer vectors',\n                'will be truncated). Each value must be a finite number or a string.'\n            ].join(' ')\n        },\n\n        format: {\n            valType: 'data_array',\n            dflt: [],\n            description: descriptionOnlyNumbers('cell value')\n        },\n\n        prefix: {\n            valType: 'string',\n            arrayOk: true,\n            dflt: null,\n            description: 'Prefix for cell values.'\n        },\n\n        suffix: {\n            valType: 'string',\n            arrayOk: true,\n            dflt: null,\n            description: 'Suffix for cell values.'\n        },\n\n        height: {\n            valType: 'number',\n            dflt: 28,\n            description: 'The height of cells.'\n        },\n\n        align: extendFlat({}, annAttrs.align, {arrayOk: true}),\n\n        line: {\n            width: {\n                valType: 'number',\n                arrayOk: true,\n                dflt: 1,\n            },\n            color: {\n                valType: 'color',\n                arrayOk: true,\n                dflt: 'grey',\n            }\n        },\n\n        fill: {\n            color: {\n                valType: 'color',\n                arrayOk: true,\n                dflt: 'white',\n                description: [\n                    'Sets the cell fill color. It accepts either a specific color',\n                    ' or an array of colors or a 2D array of colors.'\n                ].join('')\n            }\n        },\n\n        font: extendFlat({}, fontAttrs({arrayOk: true}))\n    },\n\n    cells: {\n\n        values: {\n            valType: 'data_array',\n            dflt: [],\n            description: [\n                'Cell values. `values[m][n]` represents the value of the `n`th point in column `m`,',\n                'therefore the `values[m]` vector length for all columns must be the same (longer vectors',\n                'will be truncated). Each value must be a finite number or a string.'\n            ].join(' ')\n        },\n\n        format: {\n            valType: 'data_array',\n            dflt: [],\n            description: descriptionOnlyNumbers('cell value')\n        },\n\n        prefix: {\n            valType: 'string',\n            arrayOk: true,\n            dflt: null,\n            description: 'Prefix for cell values.'\n        },\n\n        suffix: {\n            valType: 'string',\n            arrayOk: true,\n            dflt: null,\n            description: 'Suffix for cell values.'\n        },\n\n        height: {\n            valType: 'number',\n            dflt: 20,\n            description: 'The height of cells.'\n        },\n\n        align: extendFlat({}, annAttrs.align, {arrayOk: true}),\n\n        line: {\n            width: {\n                valType: 'number',\n                arrayOk: true,\n                dflt: 1,\n            },\n            color: {\n                valType: 'color',\n                arrayOk: true,\n                dflt: 'grey',\n            }\n        },\n\n        fill: {\n            color: {\n                valType: 'color',\n                arrayOk: true,\n                dflt: 'white',\n                description: [\n                    'Sets the cell fill color. It accepts either a specific color',\n                    ' or an array of colors or a 2D array of colors.'\n                ].join('')\n            }\n        },\n\n        font: extendFlat({}, fontAttrs({arrayOk: true}))\n    }\n}, 'calc', 'from-root');\nattrs.transforms = undefined;\n"]},"metadata":{},"sourceType":"script"}