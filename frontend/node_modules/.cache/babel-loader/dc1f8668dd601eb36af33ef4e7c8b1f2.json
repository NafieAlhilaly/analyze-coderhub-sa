{"ast":null,"code":"'use strict';\n\nvar Lib = require('../../lib');\n\nvar handleSubplotDefaults = require('../subplot_defaults');\n\nvar getSubplotData = require('../get_data').getSubplotData;\n\nvar constants = require('./constants');\n\nvar layoutAttributes = require('./layout_attributes');\n\nvar axesNames = constants.axesNames;\n\nmodule.exports = function supplyLayoutDefaults(layoutIn, layoutOut, fullData) {\n  handleSubplotDefaults(layoutIn, layoutOut, fullData, {\n    type: 'geo',\n    attributes: layoutAttributes,\n    handleDefaults: handleGeoDefaults,\n    fullData: fullData,\n    partition: 'y'\n  });\n};\n\nfunction handleGeoDefaults(geoLayoutIn, geoLayoutOut, coerce, opts) {\n  var subplotData = getSubplotData(opts.fullData, 'geo', opts.id);\n  var traceIndices = subplotData.map(function (t) {\n    return t._expandedIndex;\n  });\n  var resolution = coerce('resolution');\n  var scope = coerce('scope');\n  var scopeParams = constants.scopeDefaults[scope];\n  var projType = coerce('projection.type', scopeParams.projType);\n  var isAlbersUsa = geoLayoutOut._isAlbersUsa = projType === 'albers usa'; // no other scopes are allowed for 'albers usa' projection\n\n  if (isAlbersUsa) scope = geoLayoutOut.scope = 'usa';\n  var isScoped = geoLayoutOut._isScoped = scope !== 'world';\n  var isSatellite = geoLayoutOut._isSatellite = projType === 'satellite';\n  var isConic = geoLayoutOut._isConic = projType.indexOf('conic') !== -1 || projType === 'albers';\n  var isClipped = geoLayoutOut._isClipped = !!constants.lonaxisSpan[projType];\n\n  if (geoLayoutIn.visible === false) {\n    // should override template.layout.geo.show* - see issue 4482\n    // make a copy\n    var newTemplate = Lib.extendDeep({}, geoLayoutOut._template); // override show*\n\n    newTemplate.showcoastlines = false;\n    newTemplate.showcountries = false;\n    newTemplate.showframe = false;\n    newTemplate.showlakes = false;\n    newTemplate.showland = false;\n    newTemplate.showocean = false;\n    newTemplate.showrivers = false;\n    newTemplate.showsubunits = false;\n    if (newTemplate.lonaxis) newTemplate.lonaxis.showgrid = false;\n    if (newTemplate.lataxis) newTemplate.lataxis.showgrid = false; // set ref to copy\n\n    geoLayoutOut._template = newTemplate;\n  }\n\n  var visible = coerce('visible');\n  var show;\n\n  for (var i = 0; i < axesNames.length; i++) {\n    var axisName = axesNames[i];\n    var dtickDflt = [30, 10][i];\n    var rangeDflt;\n\n    if (isScoped) {\n      rangeDflt = scopeParams[axisName + 'Range'];\n    } else {\n      var dfltSpans = constants[axisName + 'Span'];\n      var hSpan = (dfltSpans[projType] || dfltSpans['*']) / 2;\n      var rot = coerce('projection.rotation.' + axisName.substr(0, 3), scopeParams.projRotate[i]);\n      rangeDflt = [rot - hSpan, rot + hSpan];\n    }\n\n    var range = coerce(axisName + '.range', rangeDflt);\n    coerce(axisName + '.tick0');\n    coerce(axisName + '.dtick', dtickDflt);\n    show = coerce(axisName + '.showgrid', !visible ? false : undefined);\n\n    if (show) {\n      coerce(axisName + '.gridcolor');\n      coerce(axisName + '.gridwidth');\n    } // mock axis for autorange computations\n\n\n    geoLayoutOut[axisName]._ax = {\n      type: 'linear',\n      _id: axisName.slice(0, 3),\n      _traceIndices: traceIndices,\n      setScale: Lib.identity,\n      c2l: Lib.identity,\n      r2l: Lib.identity,\n      autorange: true,\n      range: range.slice(),\n      _m: 1,\n      _input: {}\n    };\n  }\n\n  var lonRange = geoLayoutOut.lonaxis.range;\n  var latRange = geoLayoutOut.lataxis.range; // to cross antimeridian w/o ambiguity\n\n  var lon0 = lonRange[0];\n  var lon1 = lonRange[1];\n  if (lon0 > 0 && lon1 < 0) lon1 += 360;\n  var centerLon = (lon0 + lon1) / 2;\n  var projLon;\n\n  if (!isAlbersUsa) {\n    var dfltProjRotate = isScoped ? scopeParams.projRotate : [centerLon, 0, 0];\n    projLon = coerce('projection.rotation.lon', dfltProjRotate[0]);\n    coerce('projection.rotation.lat', dfltProjRotate[1]);\n    coerce('projection.rotation.roll', dfltProjRotate[2]);\n    show = coerce('showcoastlines', !isScoped && visible);\n\n    if (show) {\n      coerce('coastlinecolor');\n      coerce('coastlinewidth');\n    }\n\n    show = coerce('showocean', !visible ? false : undefined);\n    if (show) coerce('oceancolor');\n  }\n\n  var centerLonDflt;\n  var centerLatDflt;\n\n  if (isAlbersUsa) {\n    // 'albers usa' does not have a 'center',\n    // these values were found using via:\n    //   projection.invert([geoLayout.center.lon, geoLayoutIn.center.lat])\n    centerLonDflt = -96.6;\n    centerLatDflt = 38.7;\n  } else {\n    centerLonDflt = isScoped ? centerLon : projLon;\n    centerLatDflt = (latRange[0] + latRange[1]) / 2;\n  }\n\n  coerce('center.lon', centerLonDflt);\n  coerce('center.lat', centerLatDflt);\n\n  if (isSatellite) {\n    coerce('projection.tilt');\n    coerce('projection.distance');\n  }\n\n  if (isConic) {\n    var dfltProjParallels = scopeParams.projParallels || [0, 60];\n    coerce('projection.parallels', dfltProjParallels);\n  }\n\n  coerce('projection.scale');\n  show = coerce('showland', !visible ? false : undefined);\n  if (show) coerce('landcolor');\n  show = coerce('showlakes', !visible ? false : undefined);\n  if (show) coerce('lakecolor');\n  show = coerce('showrivers', !visible ? false : undefined);\n\n  if (show) {\n    coerce('rivercolor');\n    coerce('riverwidth');\n  }\n\n  show = coerce('showcountries', isScoped && scope !== 'usa' && visible);\n\n  if (show) {\n    coerce('countrycolor');\n    coerce('countrywidth');\n  }\n\n  if (scope === 'usa' || scope === 'north america' && resolution === 50) {\n    // Only works for:\n    //   USA states at 110m\n    //   USA states + Canada provinces at 50m\n    coerce('showsubunits', visible);\n    coerce('subunitcolor');\n    coerce('subunitwidth');\n  }\n\n  if (!isScoped) {\n    // Does not work in non-world scopes\n    show = coerce('showframe', visible);\n\n    if (show) {\n      coerce('framecolor');\n      coerce('framewidth');\n    }\n  }\n\n  coerce('bgcolor');\n  var fitBounds = coerce('fitbounds'); // clear attributes that will get auto-filled later\n\n  if (fitBounds) {\n    delete geoLayoutOut.projection.scale;\n\n    if (isScoped) {\n      delete geoLayoutOut.center.lon;\n      delete geoLayoutOut.center.lat;\n    } else if (isClipped) {\n      delete geoLayoutOut.center.lon;\n      delete geoLayoutOut.center.lat;\n      delete geoLayoutOut.projection.rotation.lon;\n      delete geoLayoutOut.projection.rotation.lat;\n      delete geoLayoutOut.lonaxis.range;\n      delete geoLayoutOut.lataxis.range;\n    } else {\n      delete geoLayoutOut.center.lon;\n      delete geoLayoutOut.center.lat;\n      delete geoLayoutOut.projection.rotation.lon;\n    }\n  }\n}","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/plotly.js/src/plots/geo/layout_defaults.js"],"names":["Lib","require","handleSubplotDefaults","getSubplotData","constants","layoutAttributes","axesNames","module","exports","supplyLayoutDefaults","layoutIn","layoutOut","fullData","type","attributes","handleDefaults","handleGeoDefaults","partition","geoLayoutIn","geoLayoutOut","coerce","opts","subplotData","id","traceIndices","map","t","_expandedIndex","resolution","scope","scopeParams","scopeDefaults","projType","isAlbersUsa","_isAlbersUsa","isScoped","_isScoped","isSatellite","_isSatellite","isConic","_isConic","indexOf","isClipped","_isClipped","lonaxisSpan","visible","newTemplate","extendDeep","_template","showcoastlines","showcountries","showframe","showlakes","showland","showocean","showrivers","showsubunits","lonaxis","showgrid","lataxis","show","i","length","axisName","dtickDflt","rangeDflt","dfltSpans","hSpan","rot","substr","projRotate","range","undefined","_ax","_id","slice","_traceIndices","setScale","identity","c2l","r2l","autorange","_m","_input","lonRange","latRange","lon0","lon1","centerLon","projLon","dfltProjRotate","centerLonDflt","centerLatDflt","dfltProjParallels","projParallels","fitBounds","projection","scale","center","lon","lat","rotation"],"mappings":"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","sourcesContent":["'use strict';\n\nvar Lib = require('../../lib');\nvar handleSubplotDefaults = require('../subplot_defaults');\nvar getSubplotData = require('../get_data').getSubplotData;\n\nvar constants = require('./constants');\nvar layoutAttributes = require('./layout_attributes');\n\nvar axesNames = constants.axesNames;\n\nmodule.exports = function supplyLayoutDefaults(layoutIn, layoutOut, fullData) {\n    handleSubplotDefaults(layoutIn, layoutOut, fullData, {\n        type: 'geo',\n        attributes: layoutAttributes,\n        handleDefaults: handleGeoDefaults,\n        fullData: fullData,\n        partition: 'y'\n    });\n};\n\nfunction handleGeoDefaults(geoLayoutIn, geoLayoutOut, coerce, opts) {\n    var subplotData = getSubplotData(opts.fullData, 'geo', opts.id);\n    var traceIndices = subplotData.map(function(t) { return t._expandedIndex; });\n\n    var resolution = coerce('resolution');\n    var scope = coerce('scope');\n    var scopeParams = constants.scopeDefaults[scope];\n\n    var projType = coerce('projection.type', scopeParams.projType);\n    var isAlbersUsa = geoLayoutOut._isAlbersUsa = projType === 'albers usa';\n\n    // no other scopes are allowed for 'albers usa' projection\n    if(isAlbersUsa) scope = geoLayoutOut.scope = 'usa';\n\n    var isScoped = geoLayoutOut._isScoped = (scope !== 'world');\n    var isSatellite = geoLayoutOut._isSatellite = projType === 'satellite';\n    var isConic = geoLayoutOut._isConic = projType.indexOf('conic') !== -1 || projType === 'albers';\n    var isClipped = geoLayoutOut._isClipped = !!constants.lonaxisSpan[projType];\n\n    if(geoLayoutIn.visible === false) {\n        // should override template.layout.geo.show* - see issue 4482\n\n        // make a copy\n        var newTemplate = Lib.extendDeep({}, geoLayoutOut._template);\n\n        // override show*\n        newTemplate.showcoastlines = false;\n        newTemplate.showcountries = false;\n        newTemplate.showframe = false;\n        newTemplate.showlakes = false;\n        newTemplate.showland = false;\n        newTemplate.showocean = false;\n        newTemplate.showrivers = false;\n        newTemplate.showsubunits = false;\n        if(newTemplate.lonaxis) newTemplate.lonaxis.showgrid = false;\n        if(newTemplate.lataxis) newTemplate.lataxis.showgrid = false;\n\n        // set ref to copy\n        geoLayoutOut._template = newTemplate;\n    }\n    var visible = coerce('visible');\n\n    var show;\n    for(var i = 0; i < axesNames.length; i++) {\n        var axisName = axesNames[i];\n        var dtickDflt = [30, 10][i];\n        var rangeDflt;\n\n        if(isScoped) {\n            rangeDflt = scopeParams[axisName + 'Range'];\n        } else {\n            var dfltSpans = constants[axisName + 'Span'];\n            var hSpan = (dfltSpans[projType] || dfltSpans['*']) / 2;\n            var rot = coerce(\n                'projection.rotation.' + axisName.substr(0, 3),\n                scopeParams.projRotate[i]\n            );\n            rangeDflt = [rot - hSpan, rot + hSpan];\n        }\n\n        var range = coerce(axisName + '.range', rangeDflt);\n        coerce(axisName + '.tick0');\n        coerce(axisName + '.dtick', dtickDflt);\n\n        show = coerce(axisName + '.showgrid', !visible ? false : undefined);\n        if(show) {\n            coerce(axisName + '.gridcolor');\n            coerce(axisName + '.gridwidth');\n        }\n\n        // mock axis for autorange computations\n        geoLayoutOut[axisName]._ax = {\n            type: 'linear',\n            _id: axisName.slice(0, 3),\n            _traceIndices: traceIndices,\n            setScale: Lib.identity,\n            c2l: Lib.identity,\n            r2l: Lib.identity,\n            autorange: true,\n            range: range.slice(),\n            _m: 1,\n            _input: {}\n        };\n    }\n\n    var lonRange = geoLayoutOut.lonaxis.range;\n    var latRange = geoLayoutOut.lataxis.range;\n\n    // to cross antimeridian w/o ambiguity\n    var lon0 = lonRange[0];\n    var lon1 = lonRange[1];\n    if(lon0 > 0 && lon1 < 0) lon1 += 360;\n\n    var centerLon = (lon0 + lon1) / 2;\n    var projLon;\n\n    if(!isAlbersUsa) {\n        var dfltProjRotate = isScoped ? scopeParams.projRotate : [centerLon, 0, 0];\n\n        projLon = coerce('projection.rotation.lon', dfltProjRotate[0]);\n        coerce('projection.rotation.lat', dfltProjRotate[1]);\n        coerce('projection.rotation.roll', dfltProjRotate[2]);\n\n        show = coerce('showcoastlines', !isScoped && visible);\n        if(show) {\n            coerce('coastlinecolor');\n            coerce('coastlinewidth');\n        }\n\n        show = coerce('showocean', !visible ? false : undefined);\n        if(show) coerce('oceancolor');\n    }\n\n    var centerLonDflt;\n    var centerLatDflt;\n\n    if(isAlbersUsa) {\n        // 'albers usa' does not have a 'center',\n        // these values were found using via:\n        //   projection.invert([geoLayout.center.lon, geoLayoutIn.center.lat])\n        centerLonDflt = -96.6;\n        centerLatDflt = 38.7;\n    } else {\n        centerLonDflt = isScoped ? centerLon : projLon;\n        centerLatDflt = (latRange[0] + latRange[1]) / 2;\n    }\n\n    coerce('center.lon', centerLonDflt);\n    coerce('center.lat', centerLatDflt);\n\n    if(isSatellite) {\n        coerce('projection.tilt');\n        coerce('projection.distance');\n    }\n\n    if(isConic) {\n        var dfltProjParallels = scopeParams.projParallels || [0, 60];\n        coerce('projection.parallels', dfltProjParallels);\n    }\n\n    coerce('projection.scale');\n\n    show = coerce('showland', !visible ? false : undefined);\n    if(show) coerce('landcolor');\n\n    show = coerce('showlakes', !visible ? false : undefined);\n    if(show) coerce('lakecolor');\n\n    show = coerce('showrivers', !visible ? false : undefined);\n    if(show) {\n        coerce('rivercolor');\n        coerce('riverwidth');\n    }\n\n    show = coerce('showcountries', isScoped && scope !== 'usa' && visible);\n    if(show) {\n        coerce('countrycolor');\n        coerce('countrywidth');\n    }\n\n    if(scope === 'usa' || (scope === 'north america' && resolution === 50)) {\n        // Only works for:\n        //   USA states at 110m\n        //   USA states + Canada provinces at 50m\n        coerce('showsubunits', visible);\n        coerce('subunitcolor');\n        coerce('subunitwidth');\n    }\n\n    if(!isScoped) {\n        // Does not work in non-world scopes\n        show = coerce('showframe', visible);\n        if(show) {\n            coerce('framecolor');\n            coerce('framewidth');\n        }\n    }\n\n    coerce('bgcolor');\n\n    var fitBounds = coerce('fitbounds');\n\n    // clear attributes that will get auto-filled later\n    if(fitBounds) {\n        delete geoLayoutOut.projection.scale;\n\n        if(isScoped) {\n            delete geoLayoutOut.center.lon;\n            delete geoLayoutOut.center.lat;\n        } else if(isClipped) {\n            delete geoLayoutOut.center.lon;\n            delete geoLayoutOut.center.lat;\n            delete geoLayoutOut.projection.rotation.lon;\n            delete geoLayoutOut.projection.rotation.lat;\n            delete geoLayoutOut.lonaxis.range;\n            delete geoLayoutOut.lataxis.range;\n        } else {\n            delete geoLayoutOut.center.lon;\n            delete geoLayoutOut.center.lat;\n            delete geoLayoutOut.projection.rotation.lon;\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"script"}