{"ast":null,"code":"/*\n * World Calendars\n * https://github.com/alexcjohnson/world-calendars\n *\n * Batch-converted from kbwood/calendars\n * Many thanks to Keith Wood and all of the contributors to the original project!\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/* http://keith-wood.name/calendars.html\n  Julian calendar for jQuery v2.0.2.\n  Written by Keith Wood (wood.keith{at}optusnet.com.au) August 2009.\n  Available under the MIT (http://keith-wood.name/licence.html) license. \n  Please attribute the author if you use it. */\nvar main = require('../main');\n\nvar assign = require('object-assign');\n/** Implementation of the Julian calendar.\n    Based on code from <a href=\"http://www.fourmilab.ch/documents/calendar/\">http://www.fourmilab.ch/documents/calendar/</a>.\n    See also <a href=\"http://en.wikipedia.org/wiki/Julian_calendar\">http://en.wikipedia.org/wiki/Julian_calendar</a>.\n    @class JulianCalendar\n    @augments BaseCalendar\n    @param [language=''] {string} The language code (default English) for localisation. */\n\n\nfunction JulianCalendar(language) {\n  this.local = this.regionalOptions[language || ''] || this.regionalOptions[''];\n}\n\nJulianCalendar.prototype = new main.baseCalendar();\nassign(JulianCalendar.prototype, {\n  /** The calendar name.\n      @memberof JulianCalendar */\n  name: 'Julian',\n\n  /** Julian date of start of Julian epoch: 1 January 0001 AD = 30 December 0001 BCE.\n      @memberof JulianCalendar */\n  jdEpoch: 1721423.5,\n\n  /** Days per month in a common year.\n      @memberof JulianCalendar */\n  daysPerMonth: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n\n  /** <code>true</code> if has a year zero, <code>false</code> if not.\n      @memberof JulianCalendar */\n  hasYearZero: false,\n\n  /** The minimum month number.\n      @memberof JulianCalendar */\n  minMonth: 1,\n\n  /** The first month in the year.\n      @memberof JulianCalendar */\n  firstMonth: 1,\n\n  /** The minimum day number.\n      @memberof JulianCalendar */\n  minDay: 1,\n\n  /** Localisations for the plugin.\n      Entries are objects indexed by the language code ('' being the default US/English).\n      Each object has the following attributes.\n      @memberof JulianCalendar\n      @property name {string} The calendar name.\n      @property epochs {string[]} The epoch names.\n      @property monthNames {string[]} The long names of the months of the year.\n      @property monthNamesShort {string[]} The short names of the months of the year.\n      @property dayNames {string[]} The long names of the days of the week.\n      @property dayNamesShort {string[]} The short names of the days of the week.\n      @property dayNamesMin {string[]} The minimal names of the days of the week.\n      @property dateFormat {string} The date format for this calendar.\n              See the options on <a href=\"BaseCalendar.html#formatDate\"><code>formatDate</code></a> for details.\n      @property firstDay {number} The number of the first day of the week, starting at 0.\n      @property isRTL {number} <code>true</code> if this localisation reads right-to-left. */\n  regionalOptions: {\n    // Localisations\n    '': {\n      name: 'Julian',\n      epochs: ['BC', 'AD'],\n      monthNames: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n      monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n      dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n      dayNamesShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n      dayNamesMin: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],\n      digits: null,\n      dateFormat: 'mm/dd/yyyy',\n      firstDay: 0,\n      isRTL: false\n    }\n  },\n\n  /** Determine whether this date is in a leap year.\n      @memberof JulianCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @return {boolean} <code>true</code> if this is a leap year, <code>false</code> if not.\n      @throws Error if an invalid year or a different calendar used. */\n  leapYear: function (year) {\n    var date = this._validate(year, this.minMonth, this.minDay, main.local.invalidYear);\n\n    var year = date.year() < 0 ? date.year() + 1 : date.year(); // No year zero\n\n    return year % 4 === 0;\n  },\n\n  /** Determine the week of the year for a date - ISO 8601.\n      @memberof JulianCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @param [month] {number} The month to examine.\n      @param [day] {number} The day to examine.\n      @return {number} The week of the year.\n      @throws Error if an invalid date or a different calendar used. */\n  weekOfYear: function (year, month, day) {\n    // Find Thursday of this week starting on Monday\n    var checkDate = this.newDate(year, month, day);\n    checkDate.add(4 - (checkDate.dayOfWeek() || 7), 'd');\n    return Math.floor((checkDate.dayOfYear() - 1) / 7) + 1;\n  },\n\n  /** Retrieve the number of days in a month.\n      @memberof JulianCalendar\n      @param year {CDate|number} The date to examine or the year of the month.\n      @param [month] {number} The month.\n      @return {number} The number of days in this month.\n      @throws Error if an invalid month/year or a different calendar used. */\n  daysInMonth: function (year, month) {\n    var date = this._validate(year, month, this.minDay, main.local.invalidMonth);\n\n    return this.daysPerMonth[date.month() - 1] + (date.month() === 2 && this.leapYear(date.year()) ? 1 : 0);\n  },\n\n  /** Determine whether this date is a week day.\n      @memberof JulianCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @param [month] {number} The month to examine.\n      @param [day] {number} The day to examine.\n      @return {boolean} True if a week day, false if not.\n      @throws Error if an invalid date or a different calendar used. */\n  weekDay: function (year, month, day) {\n    return (this.dayOfWeek(year, month, day) || 7) < 6;\n  },\n\n  /** Retrieve the Julian date equivalent for this date,\n      i.e. days since January 1, 4713 BCE Greenwich noon.\n      @memberof JulianCalendar\n      @param year {CDate|number} The date to convert or the year to convert.\n      @param [month] {number} The month to convert.\n      @param [day] {number} The day to convert.\n      @return {number} The equivalent Julian date.\n      @throws Error if an invalid date or a different calendar used. */\n  toJD: function (year, month, day) {\n    var date = this._validate(year, month, day, main.local.invalidDate);\n\n    year = date.year();\n    month = date.month();\n    day = date.day();\n\n    if (year < 0) {\n      year++;\n    } // No year zero\n    // Jean Meeus algorithm, \"Astronomical Algorithms\", 1991\n\n\n    if (month <= 2) {\n      year--;\n      month += 12;\n    }\n\n    return Math.floor(365.25 * (year + 4716)) + Math.floor(30.6001 * (month + 1)) + day - 1524.5;\n  },\n\n  /** Create a new date from a Julian date.\n      @memberof JulianCalendar\n      @param jd {number} The Julian date to convert.\n      @return {CDate} The equivalent date. */\n  fromJD: function (jd) {\n    // Jean Meeus algorithm, \"Astronomical Algorithms\", 1991\n    var a = Math.floor(jd + 0.5);\n    var b = a + 1524;\n    var c = Math.floor((b - 122.1) / 365.25);\n    var d = Math.floor(365.25 * c);\n    var e = Math.floor((b - d) / 30.6001);\n    var month = e - Math.floor(e < 14 ? 1 : 13);\n    var year = c - Math.floor(month > 2 ? 4716 : 4715);\n    var day = b - d - Math.floor(30.6001 * e);\n\n    if (year <= 0) {\n      year--;\n    } // No year zero\n\n\n    return this.newDate(year, month, day);\n  }\n}); // Julian calendar implementation\n\nmain.calendars.julian = JulianCalendar;","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/world-calendars/dist/calendars/julian.js"],"names":["main","require","assign","JulianCalendar","language","local","regionalOptions","prototype","baseCalendar","name","jdEpoch","daysPerMonth","hasYearZero","minMonth","firstMonth","minDay","epochs","monthNames","monthNamesShort","dayNames","dayNamesShort","dayNamesMin","digits","dateFormat","firstDay","isRTL","leapYear","year","date","_validate","invalidYear","weekOfYear","month","day","checkDate","newDate","add","dayOfWeek","Math","floor","dayOfYear","daysInMonth","invalidMonth","weekDay","toJD","invalidDate","fromJD","jd","a","b","c","d","e","calendars","julian"],"mappings":"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","sourcesContent":["/*\n * World Calendars\n * https://github.com/alexcjohnson/world-calendars\n *\n * Batch-converted from kbwood/calendars\n * Many thanks to Keith Wood and all of the contributors to the original project!\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n﻿/* http://keith-wood.name/calendars.html\n   Julian calendar for jQuery v2.0.2.\n   Written by Keith Wood (wood.keith{at}optusnet.com.au) August 2009.\n   Available under the MIT (http://keith-wood.name/licence.html) license. \n   Please attribute the author if you use it. */\n\nvar main = require('../main');\nvar assign = require('object-assign');\n\n\n/** Implementation of the Julian calendar.\n    Based on code from <a href=\"http://www.fourmilab.ch/documents/calendar/\">http://www.fourmilab.ch/documents/calendar/</a>.\n    See also <a href=\"http://en.wikipedia.org/wiki/Julian_calendar\">http://en.wikipedia.org/wiki/Julian_calendar</a>.\n    @class JulianCalendar\n    @augments BaseCalendar\n    @param [language=''] {string} The language code (default English) for localisation. */\nfunction JulianCalendar(language) {\n    this.local = this.regionalOptions[language || ''] || this.regionalOptions[''];\n}\n\nJulianCalendar.prototype = new main.baseCalendar;\n\nassign(JulianCalendar.prototype, {\n    /** The calendar name.\n        @memberof JulianCalendar */\n    name: 'Julian',\n    /** Julian date of start of Julian epoch: 1 January 0001 AD = 30 December 0001 BCE.\n        @memberof JulianCalendar */\n    jdEpoch: 1721423.5,\n    /** Days per month in a common year.\n        @memberof JulianCalendar */\n    daysPerMonth: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n    /** <code>true</code> if has a year zero, <code>false</code> if not.\n        @memberof JulianCalendar */\n    hasYearZero: false,\n    /** The minimum month number.\n        @memberof JulianCalendar */\n    minMonth: 1,\n    /** The first month in the year.\n        @memberof JulianCalendar */\n    firstMonth: 1,\n    /** The minimum day number.\n        @memberof JulianCalendar */\n    minDay: 1,\n\n    /** Localisations for the plugin.\n        Entries are objects indexed by the language code ('' being the default US/English).\n        Each object has the following attributes.\n        @memberof JulianCalendar\n        @property name {string} The calendar name.\n        @property epochs {string[]} The epoch names.\n        @property monthNames {string[]} The long names of the months of the year.\n        @property monthNamesShort {string[]} The short names of the months of the year.\n        @property dayNames {string[]} The long names of the days of the week.\n        @property dayNamesShort {string[]} The short names of the days of the week.\n        @property dayNamesMin {string[]} The minimal names of the days of the week.\n        @property dateFormat {string} The date format for this calendar.\n                See the options on <a href=\"BaseCalendar.html#formatDate\"><code>formatDate</code></a> for details.\n        @property firstDay {number} The number of the first day of the week, starting at 0.\n        @property isRTL {number} <code>true</code> if this localisation reads right-to-left. */\n    regionalOptions: { // Localisations\n        '': {\n            name: 'Julian',\n            epochs: ['BC', 'AD'],\n            monthNames: ['January', 'February', 'March', 'April', 'May', 'June',\n            'July', 'August', 'September', 'October', 'November', 'December'],\n            monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n            dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n            dayNamesShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n            dayNamesMin: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],\n            digits: null,\n            dateFormat: 'mm/dd/yyyy',\n            firstDay: 0,\n            isRTL: false\n        }\n    },\n\n    /** Determine whether this date is in a leap year.\n        @memberof JulianCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @return {boolean} <code>true</code> if this is a leap year, <code>false</code> if not.\n        @throws Error if an invalid year or a different calendar used. */\n    leapYear: function(year) {\n        var date = this._validate(year, this.minMonth, this.minDay, main.local.invalidYear);\n        var year = (date.year() < 0 ? date.year() + 1 : date.year()); // No year zero\n        return (year % 4) === 0;\n    },\n\n    /** Determine the week of the year for a date - ISO 8601.\n        @memberof JulianCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @param [month] {number} The month to examine.\n        @param [day] {number} The day to examine.\n        @return {number} The week of the year.\n        @throws Error if an invalid date or a different calendar used. */\n    weekOfYear: function(year, month, day) {\n        // Find Thursday of this week starting on Monday\n        var checkDate = this.newDate(year, month, day);\n        checkDate.add(4 - (checkDate.dayOfWeek() || 7), 'd');\n        return Math.floor((checkDate.dayOfYear() - 1) / 7) + 1;\n    },\n\n    /** Retrieve the number of days in a month.\n        @memberof JulianCalendar\n        @param year {CDate|number} The date to examine or the year of the month.\n        @param [month] {number} The month.\n        @return {number} The number of days in this month.\n        @throws Error if an invalid month/year or a different calendar used. */\n    daysInMonth: function(year, month) {\n        var date = this._validate(year, month, this.minDay, main.local.invalidMonth);\n        return this.daysPerMonth[date.month() - 1] +\n            (date.month() === 2 && this.leapYear(date.year()) ? 1 : 0);\n    },\n\n    /** Determine whether this date is a week day.\n        @memberof JulianCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @param [month] {number} The month to examine.\n        @param [day] {number} The day to examine.\n        @return {boolean} True if a week day, false if not.\n        @throws Error if an invalid date or a different calendar used. */\n    weekDay: function(year, month, day) {\n        return (this.dayOfWeek(year, month, day) || 7) < 6;\n    },\n\n    /** Retrieve the Julian date equivalent for this date,\n        i.e. days since January 1, 4713 BCE Greenwich noon.\n        @memberof JulianCalendar\n        @param year {CDate|number} The date to convert or the year to convert.\n        @param [month] {number} The month to convert.\n        @param [day] {number} The day to convert.\n        @return {number} The equivalent Julian date.\n        @throws Error if an invalid date or a different calendar used. */\n    toJD: function(year, month, day) {\n        var date = this._validate(year, month, day, main.local.invalidDate);\n        year = date.year();\n        month = date.month();\n        day = date.day();\n        if (year < 0) { year++; } // No year zero\n        // Jean Meeus algorithm, \"Astronomical Algorithms\", 1991\n        if (month <= 2) {\n            year--;\n            month += 12;\n        }\n        return Math.floor(365.25 * (year + 4716)) +\n            Math.floor(30.6001 * (month + 1)) + day - 1524.5;\n    },\n\n    /** Create a new date from a Julian date.\n        @memberof JulianCalendar\n        @param jd {number} The Julian date to convert.\n        @return {CDate} The equivalent date. */\n    fromJD: function(jd) {\n        // Jean Meeus algorithm, \"Astronomical Algorithms\", 1991\n        var a = Math.floor(jd + 0.5);\n        var b = a + 1524;\n        var c = Math.floor((b - 122.1) / 365.25);\n        var d = Math.floor(365.25 * c);\n        var e = Math.floor((b - d) / 30.6001);\n        var month = e - Math.floor(e < 14 ? 1 : 13);\n        var year = c - Math.floor(month > 2 ? 4716 : 4715);\n        var day = b - d - Math.floor(30.6001 * e);\n        if (year <= 0) { year--; } // No year zero\n        return this.newDate(year, month, day);\n    }\n});\n\n// Julian calendar implementation\nmain.calendars.julian = JulianCalendar;\n\n"]},"metadata":{},"sourceType":"script"}