{"ast":null,"code":"module.exports = angle;\n\nvar fromValues = require('./fromValues');\n\nvar normalize = require('./normalize');\n\nvar dot = require('./dot');\n/**\n * Get the angle between two 3D vectors\n * @param {vec3} a The first operand\n * @param {vec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\n\nfunction angle(a, b) {\n  var tempA = fromValues(a[0], a[1], a[2]);\n  var tempB = fromValues(b[0], b[1], b[2]);\n  normalize(tempA, tempA);\n  normalize(tempB, tempB);\n  var cosine = dot(tempA, tempB);\n\n  if (cosine > 1.0) {\n    return 0;\n  } else {\n    return Math.acos(cosine);\n  }\n}","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/gl-vec3/angle.js"],"names":["module","exports","angle","fromValues","require","normalize","dot","a","b","tempA","tempB","cosine","Math","acos"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiBC,KAAjB;;AAEA,IAAIC,UAAU,GAAGC,OAAO,CAAC,cAAD,CAAxB;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,aAAD,CAAvB;;AACA,IAAIE,GAAG,GAAGF,OAAO,CAAC,OAAD,CAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,KAAT,CAAeK,CAAf,EAAkBC,CAAlB,EAAqB;AACjB,MAAIC,KAAK,GAAGN,UAAU,CAACI,CAAC,CAAC,CAAD,CAAF,EAAOA,CAAC,CAAC,CAAD,CAAR,EAAaA,CAAC,CAAC,CAAD,CAAd,CAAtB;AACA,MAAIG,KAAK,GAAGP,UAAU,CAACK,CAAC,CAAC,CAAD,CAAF,EAAOA,CAAC,CAAC,CAAD,CAAR,EAAaA,CAAC,CAAC,CAAD,CAAd,CAAtB;AAEAH,EAAAA,SAAS,CAACI,KAAD,EAAQA,KAAR,CAAT;AACAJ,EAAAA,SAAS,CAACK,KAAD,EAAQA,KAAR,CAAT;AAEA,MAAIC,MAAM,GAAGL,GAAG,CAACG,KAAD,EAAQC,KAAR,CAAhB;;AAEA,MAAGC,MAAM,GAAG,GAAZ,EAAgB;AACZ,WAAO,CAAP;AACH,GAFD,MAEO;AACH,WAAOC,IAAI,CAACC,IAAL,CAAUF,MAAV,CAAP;AACH;AACJ","sourcesContent":["module.exports = angle\n\nvar fromValues = require('./fromValues')\nvar normalize = require('./normalize')\nvar dot = require('./dot')\n\n/**\n * Get the angle between two 3D vectors\n * @param {vec3} a The first operand\n * @param {vec3} b The second operand\n * @returns {Number} The angle in radians\n */\nfunction angle(a, b) {\n    var tempA = fromValues(a[0], a[1], a[2])\n    var tempB = fromValues(b[0], b[1], b[2])\n \n    normalize(tempA, tempA)\n    normalize(tempB, tempB)\n \n    var cosine = dot(tempA, tempB)\n\n    if(cosine > 1.0){\n        return 0\n    } else {\n        return Math.acos(cosine)\n    }     \n}\n"]},"metadata":{},"sourceType":"script"}