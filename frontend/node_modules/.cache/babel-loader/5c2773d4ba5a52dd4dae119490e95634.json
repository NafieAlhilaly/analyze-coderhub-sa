{"ast":null,"code":"'use strict';\n\nvar dragElement = require('../../dragelement');\n\nvar dragHelpers = require('../../dragelement/helpers');\n\nvar drawMode = dragHelpers.drawMode;\n\nvar Registry = require('../../../registry');\n\nvar constants = require('./constants');\n\nvar i000 = constants.i000;\nvar i090 = constants.i090;\nvar i180 = constants.i180;\nvar i270 = constants.i270;\n\nvar handleOutline = require('../../../plots/cartesian/handle_outline');\n\nvar clearOutlineControllers = handleOutline.clearOutlineControllers;\n\nvar helpers = require('./helpers');\n\nvar pointsShapeRectangle = helpers.pointsShapeRectangle;\nvar pointsShapeEllipse = helpers.pointsShapeEllipse;\nvar writePaths = helpers.writePaths;\n\nvar newShapes = require('./newshapes');\n\nmodule.exports = function displayOutlines(polygons, outlines, dragOptions, nCalls) {\n  if (!nCalls) nCalls = 0;\n  var gd = dragOptions.gd;\n\n  function redraw() {\n    // recursive call\n    displayOutlines(polygons, outlines, dragOptions, nCalls++);\n\n    if (pointsShapeEllipse(polygons[0])) {\n      update({\n        redrawing: true\n      });\n    }\n  }\n\n  function update(opts) {\n    dragOptions.isActiveShape = false; // i.e. to disable controllers\n\n    var updateObject = newShapes(outlines, dragOptions);\n\n    if (Object.keys(updateObject).length) {\n      Registry.call((opts || {}).redrawing ? 'relayout' : '_guiRelayout', gd, updateObject);\n    }\n  }\n\n  var isActiveShape = dragOptions.isActiveShape;\n  var fullLayout = gd._fullLayout;\n  var zoomLayer = fullLayout._zoomlayer;\n  var dragmode = dragOptions.dragmode;\n  var isDrawMode = drawMode(dragmode);\n  if (isDrawMode) gd._fullLayout._drawing = true;else if (gd._fullLayout._activeShapeIndex >= 0) clearOutlineControllers(gd); // make outline\n\n  outlines.attr('d', writePaths(polygons)); // add controllers\n\n  var vertexDragOptions;\n  var shapeDragOptions;\n  var indexI; // cell index\n\n  var indexJ; // vertex or cell-controller index\n\n  var copyPolygons;\n\n  if (isActiveShape && !nCalls) {\n    copyPolygons = recordPositions([], polygons);\n    var g = zoomLayer.append('g').attr('class', 'outline-controllers');\n    addVertexControllers(g);\n    addShapeControllers();\n  }\n\n  function startDragVertex(evt) {\n    indexI = +evt.srcElement.getAttribute('data-i');\n    indexJ = +evt.srcElement.getAttribute('data-j');\n    vertexDragOptions[indexI][indexJ].moveFn = moveVertexController;\n  }\n\n  function moveVertexController(dx, dy) {\n    if (!polygons.length) return;\n    var x0 = copyPolygons[indexI][indexJ][1];\n    var y0 = copyPolygons[indexI][indexJ][2];\n    var cell = polygons[indexI];\n    var len = cell.length;\n\n    if (pointsShapeRectangle(cell)) {\n      for (var q = 0; q < len; q++) {\n        if (q === indexJ) continue; // move other corners of rectangle\n\n        var pos = cell[q];\n\n        if (pos[1] === cell[indexJ][1]) {\n          pos[1] = x0 + dx;\n        }\n\n        if (pos[2] === cell[indexJ][2]) {\n          pos[2] = y0 + dy;\n        }\n      } // move the corner\n\n\n      cell[indexJ][1] = x0 + dx;\n      cell[indexJ][2] = y0 + dy;\n\n      if (!pointsShapeRectangle(cell)) {\n        // reject result to rectangles with ensure areas\n        for (var j = 0; j < len; j++) {\n          for (var k = 0; k < cell[j].length; k++) {\n            cell[j][k] = copyPolygons[indexI][j][k];\n          }\n        }\n      }\n    } else {\n      // other polylines\n      cell[indexJ][1] = x0 + dx;\n      cell[indexJ][2] = y0 + dy;\n    }\n\n    redraw();\n  }\n\n  function endDragVertexController() {\n    update();\n  }\n\n  function removeVertex() {\n    if (!polygons.length) return;\n    if (!polygons[indexI]) return;\n    if (!polygons[indexI].length) return;\n    var newPolygon = [];\n\n    for (var j = 0; j < polygons[indexI].length; j++) {\n      if (j !== indexJ) {\n        newPolygon.push(polygons[indexI][j]);\n      }\n    }\n\n    if (newPolygon.length > 1 && !(newPolygon.length === 2 && newPolygon[1][0] === 'Z')) {\n      if (indexJ === 0) {\n        newPolygon[0][0] = 'M';\n      }\n\n      polygons[indexI] = newPolygon;\n      redraw();\n      update();\n    }\n  }\n\n  function clickVertexController(numClicks, evt) {\n    if (numClicks === 2) {\n      indexI = +evt.srcElement.getAttribute('data-i');\n      indexJ = +evt.srcElement.getAttribute('data-j');\n      var cell = polygons[indexI];\n\n      if (!pointsShapeRectangle(cell) && !pointsShapeEllipse(cell)) {\n        removeVertex();\n      }\n    }\n  }\n\n  function addVertexControllers(g) {\n    vertexDragOptions = [];\n\n    for (var i = 0; i < polygons.length; i++) {\n      var cell = polygons[i];\n      var onRect = pointsShapeRectangle(cell);\n      var onEllipse = !onRect && pointsShapeEllipse(cell);\n      vertexDragOptions[i] = [];\n\n      for (var j = 0; j < cell.length; j++) {\n        if (cell[j][0] === 'Z') continue;\n\n        if (onEllipse && j !== i000 && j !== i090 && j !== i180 && j !== i270) {\n          continue;\n        }\n\n        var x = cell[j][1];\n        var y = cell[j][2];\n        var vertex = g.append('circle').classed('cursor-grab', true).attr('data-i', i).attr('data-j', j).attr('cx', x).attr('cy', y).attr('r', 4).style({\n          'mix-blend-mode': 'luminosity',\n          fill: 'black',\n          stroke: 'white',\n          'stroke-width': 1\n        });\n        vertexDragOptions[i][j] = {\n          element: vertex.node(),\n          gd: gd,\n          prepFn: startDragVertex,\n          doneFn: endDragVertexController,\n          clickFn: clickVertexController\n        };\n        dragElement.init(vertexDragOptions[i][j]);\n      }\n    }\n  }\n\n  function moveShape(dx, dy) {\n    if (!polygons.length) return;\n\n    for (var i = 0; i < polygons.length; i++) {\n      for (var j = 0; j < polygons[i].length; j++) {\n        for (var k = 0; k + 2 < polygons[i][j].length; k += 2) {\n          polygons[i][j][k + 1] = copyPolygons[i][j][k + 1] + dx;\n          polygons[i][j][k + 2] = copyPolygons[i][j][k + 2] + dy;\n        }\n      }\n    }\n  }\n\n  function moveShapeController(dx, dy) {\n    moveShape(dx, dy);\n    redraw();\n  }\n\n  function startDragShapeController(evt) {\n    indexI = +evt.srcElement.getAttribute('data-i');\n    if (!indexI) indexI = 0; // ensure non-existing move button get zero index\n\n    shapeDragOptions[indexI].moveFn = moveShapeController;\n  }\n\n  function endDragShapeController() {\n    update();\n  }\n\n  function addShapeControllers() {\n    shapeDragOptions = [];\n    if (!polygons.length) return;\n    var i = 0;\n    shapeDragOptions[i] = {\n      element: outlines[0][0],\n      gd: gd,\n      prepFn: startDragShapeController,\n      doneFn: endDragShapeController\n    };\n    dragElement.init(shapeDragOptions[i]);\n  }\n};\n\nfunction recordPositions(polygonsOut, polygonsIn) {\n  for (var i = 0; i < polygonsIn.length; i++) {\n    var cell = polygonsIn[i];\n    polygonsOut[i] = [];\n\n    for (var j = 0; j < cell.length; j++) {\n      polygonsOut[i][j] = [];\n\n      for (var k = 0; k < cell[j].length; k++) {\n        polygonsOut[i][j][k] = cell[j][k];\n      }\n    }\n  }\n\n  return polygonsOut;\n}","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/plotly.js/src/components/shapes/draw_newshape/display_outlines.js"],"names":["dragElement","require","dragHelpers","drawMode","Registry","constants","i000","i090","i180","i270","handleOutline","clearOutlineControllers","helpers","pointsShapeRectangle","pointsShapeEllipse","writePaths","newShapes","module","exports","displayOutlines","polygons","outlines","dragOptions","nCalls","gd","redraw","update","redrawing","opts","isActiveShape","updateObject","Object","keys","length","call","fullLayout","_fullLayout","zoomLayer","_zoomlayer","dragmode","isDrawMode","_drawing","_activeShapeIndex","attr","vertexDragOptions","shapeDragOptions","indexI","indexJ","copyPolygons","recordPositions","g","append","addVertexControllers","addShapeControllers","startDragVertex","evt","srcElement","getAttribute","moveFn","moveVertexController","dx","dy","x0","y0","cell","len","q","pos","j","k","endDragVertexController","removeVertex","newPolygon","push","clickVertexController","numClicks","i","onRect","onEllipse","x","y","vertex","classed","style","fill","stroke","element","node","prepFn","doneFn","clickFn","init","moveShape","moveShapeController","startDragShapeController","endDragShapeController","polygonsOut","polygonsIn"],"mappings":"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","sourcesContent":["'use strict';\n\nvar dragElement = require('../../dragelement');\nvar dragHelpers = require('../../dragelement/helpers');\nvar drawMode = dragHelpers.drawMode;\n\nvar Registry = require('../../../registry');\n\nvar constants = require('./constants');\nvar i000 = constants.i000;\nvar i090 = constants.i090;\nvar i180 = constants.i180;\nvar i270 = constants.i270;\n\nvar handleOutline = require('../../../plots/cartesian/handle_outline');\nvar clearOutlineControllers = handleOutline.clearOutlineControllers;\n\nvar helpers = require('./helpers');\nvar pointsShapeRectangle = helpers.pointsShapeRectangle;\nvar pointsShapeEllipse = helpers.pointsShapeEllipse;\nvar writePaths = helpers.writePaths;\nvar newShapes = require('./newshapes');\n\nmodule.exports = function displayOutlines(polygons, outlines, dragOptions, nCalls) {\n    if(!nCalls) nCalls = 0;\n\n    var gd = dragOptions.gd;\n\n    function redraw() {\n        // recursive call\n        displayOutlines(polygons, outlines, dragOptions, nCalls++);\n\n        if(pointsShapeEllipse(polygons[0])) {\n            update({redrawing: true});\n        }\n    }\n\n    function update(opts) {\n        dragOptions.isActiveShape = false; // i.e. to disable controllers\n\n        var updateObject = newShapes(outlines, dragOptions);\n        if(Object.keys(updateObject).length) {\n            Registry.call((opts || {}).redrawing ? 'relayout' : '_guiRelayout', gd, updateObject);\n        }\n    }\n\n\n    var isActiveShape = dragOptions.isActiveShape;\n    var fullLayout = gd._fullLayout;\n    var zoomLayer = fullLayout._zoomlayer;\n\n    var dragmode = dragOptions.dragmode;\n    var isDrawMode = drawMode(dragmode);\n\n    if(isDrawMode) gd._fullLayout._drawing = true;\n    else if(gd._fullLayout._activeShapeIndex >= 0) clearOutlineControllers(gd);\n\n    // make outline\n    outlines.attr('d', writePaths(polygons));\n\n    // add controllers\n    var vertexDragOptions;\n    var shapeDragOptions;\n    var indexI; // cell index\n    var indexJ; // vertex or cell-controller index\n    var copyPolygons;\n\n    if(isActiveShape && !nCalls) {\n        copyPolygons = recordPositions([], polygons);\n\n        var g = zoomLayer.append('g').attr('class', 'outline-controllers');\n        addVertexControllers(g);\n        addShapeControllers();\n    }\n\n    function startDragVertex(evt) {\n        indexI = +evt.srcElement.getAttribute('data-i');\n        indexJ = +evt.srcElement.getAttribute('data-j');\n\n        vertexDragOptions[indexI][indexJ].moveFn = moveVertexController;\n    }\n\n    function moveVertexController(dx, dy) {\n        if(!polygons.length) return;\n\n        var x0 = copyPolygons[indexI][indexJ][1];\n        var y0 = copyPolygons[indexI][indexJ][2];\n\n        var cell = polygons[indexI];\n        var len = cell.length;\n        if(pointsShapeRectangle(cell)) {\n            for(var q = 0; q < len; q++) {\n                if(q === indexJ) continue;\n\n                // move other corners of rectangle\n                var pos = cell[q];\n\n                if(pos[1] === cell[indexJ][1]) {\n                    pos[1] = x0 + dx;\n                }\n\n                if(pos[2] === cell[indexJ][2]) {\n                    pos[2] = y0 + dy;\n                }\n            }\n            // move the corner\n            cell[indexJ][1] = x0 + dx;\n            cell[indexJ][2] = y0 + dy;\n\n            if(!pointsShapeRectangle(cell)) {\n                // reject result to rectangles with ensure areas\n                for(var j = 0; j < len; j++) {\n                    for(var k = 0; k < cell[j].length; k++) {\n                        cell[j][k] = copyPolygons[indexI][j][k];\n                    }\n                }\n            }\n        } else { // other polylines\n            cell[indexJ][1] = x0 + dx;\n            cell[indexJ][2] = y0 + dy;\n        }\n\n        redraw();\n    }\n\n    function endDragVertexController() {\n        update();\n    }\n\n    function removeVertex() {\n        if(!polygons.length) return;\n        if(!polygons[indexI]) return;\n        if(!polygons[indexI].length) return;\n\n        var newPolygon = [];\n        for(var j = 0; j < polygons[indexI].length; j++) {\n            if(j !== indexJ) {\n                newPolygon.push(\n                    polygons[indexI][j]\n                );\n            }\n        }\n\n        if(newPolygon.length > 1 && !(\n            newPolygon.length === 2 && newPolygon[1][0] === 'Z')\n        ) {\n            if(indexJ === 0) {\n                newPolygon[0][0] = 'M';\n            }\n\n            polygons[indexI] = newPolygon;\n\n            redraw();\n            update();\n        }\n    }\n\n    function clickVertexController(numClicks, evt) {\n        if(numClicks === 2) {\n            indexI = +evt.srcElement.getAttribute('data-i');\n            indexJ = +evt.srcElement.getAttribute('data-j');\n\n            var cell = polygons[indexI];\n            if(\n                !pointsShapeRectangle(cell) &&\n                !pointsShapeEllipse(cell)\n            ) {\n                removeVertex();\n            }\n        }\n    }\n\n    function addVertexControllers(g) {\n        vertexDragOptions = [];\n\n        for(var i = 0; i < polygons.length; i++) {\n            var cell = polygons[i];\n\n            var onRect = pointsShapeRectangle(cell);\n            var onEllipse = !onRect && pointsShapeEllipse(cell);\n\n            vertexDragOptions[i] = [];\n            for(var j = 0; j < cell.length; j++) {\n                if(cell[j][0] === 'Z') continue;\n\n                if(onEllipse &&\n                    j !== i000 &&\n                    j !== i090 &&\n                    j !== i180 &&\n                    j !== i270\n                ) {\n                    continue;\n                }\n\n                var x = cell[j][1];\n                var y = cell[j][2];\n\n                var vertex = g.append('circle')\n                    .classed('cursor-grab', true)\n                    .attr('data-i', i)\n                    .attr('data-j', j)\n                    .attr('cx', x)\n                    .attr('cy', y)\n                    .attr('r', 4)\n                    .style({\n                        'mix-blend-mode': 'luminosity',\n                        fill: 'black',\n                        stroke: 'white',\n                        'stroke-width': 1\n                    });\n\n                vertexDragOptions[i][j] = {\n                    element: vertex.node(),\n                    gd: gd,\n                    prepFn: startDragVertex,\n                    doneFn: endDragVertexController,\n                    clickFn: clickVertexController\n                };\n\n                dragElement.init(vertexDragOptions[i][j]);\n            }\n        }\n    }\n\n    function moveShape(dx, dy) {\n        if(!polygons.length) return;\n\n        for(var i = 0; i < polygons.length; i++) {\n            for(var j = 0; j < polygons[i].length; j++) {\n                for(var k = 0; k + 2 < polygons[i][j].length; k += 2) {\n                    polygons[i][j][k + 1] = copyPolygons[i][j][k + 1] + dx;\n                    polygons[i][j][k + 2] = copyPolygons[i][j][k + 2] + dy;\n                }\n            }\n        }\n    }\n\n    function moveShapeController(dx, dy) {\n        moveShape(dx, dy);\n\n        redraw();\n    }\n\n    function startDragShapeController(evt) {\n        indexI = +evt.srcElement.getAttribute('data-i');\n        if(!indexI) indexI = 0; // ensure non-existing move button get zero index\n\n        shapeDragOptions[indexI].moveFn = moveShapeController;\n    }\n\n    function endDragShapeController() {\n        update();\n    }\n\n    function addShapeControllers() {\n        shapeDragOptions = [];\n\n        if(!polygons.length) return;\n\n        var i = 0;\n        shapeDragOptions[i] = {\n            element: outlines[0][0],\n            gd: gd,\n            prepFn: startDragShapeController,\n            doneFn: endDragShapeController\n        };\n\n        dragElement.init(shapeDragOptions[i]);\n    }\n};\n\nfunction recordPositions(polygonsOut, polygonsIn) {\n    for(var i = 0; i < polygonsIn.length; i++) {\n        var cell = polygonsIn[i];\n        polygonsOut[i] = [];\n        for(var j = 0; j < cell.length; j++) {\n            polygonsOut[i][j] = [];\n            for(var k = 0; k < cell[j].length; k++) {\n                polygonsOut[i][j][k] = cell[j][k];\n            }\n        }\n    }\n    return polygonsOut;\n}\n"]},"metadata":{},"sourceType":"script"}