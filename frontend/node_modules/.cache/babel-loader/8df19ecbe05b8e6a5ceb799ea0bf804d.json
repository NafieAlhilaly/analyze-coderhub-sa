{"ast":null,"code":"module.exports = perspectiveFromFieldOfView;\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nfunction perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0),\n      downTan = Math.tan(fov.downDegrees * Math.PI / 180.0),\n      leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0),\n      rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0),\n      xScale = 2.0 / (leftTan + rightTan),\n      yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/gl-mat4/perspectiveFromFieldOfView.js"],"names":["module","exports","perspectiveFromFieldOfView","out","fov","near","far","upTan","Math","tan","upDegrees","PI","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiBC,0BAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,0BAAT,CAAoCC,GAApC,EAAyCC,GAAzC,EAA8CC,IAA9C,EAAoDC,GAApD,EAAyD;AACrD,MAAIC,KAAK,GAAGC,IAAI,CAACC,GAAL,CAASL,GAAG,CAACM,SAAJ,GAAgBF,IAAI,CAACG,EAArB,GAAwB,KAAjC,CAAZ;AAAA,MACIC,OAAO,GAAGJ,IAAI,CAACC,GAAL,CAASL,GAAG,CAACS,WAAJ,GAAkBL,IAAI,CAACG,EAAvB,GAA0B,KAAnC,CADd;AAAA,MAEIG,OAAO,GAAGN,IAAI,CAACC,GAAL,CAASL,GAAG,CAACW,WAAJ,GAAkBP,IAAI,CAACG,EAAvB,GAA0B,KAAnC,CAFd;AAAA,MAGIK,QAAQ,GAAGR,IAAI,CAACC,GAAL,CAASL,GAAG,CAACa,YAAJ,GAAmBT,IAAI,CAACG,EAAxB,GAA2B,KAApC,CAHf;AAAA,MAIIO,MAAM,GAAG,OAAOJ,OAAO,GAAGE,QAAjB,CAJb;AAAA,MAKIG,MAAM,GAAG,OAAOZ,KAAK,GAAGK,OAAf,CALb;AAOAT,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASe,MAAT;AACAf,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,GAAT;AACAA,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,GAAT;AACAA,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,GAAT;AACAA,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,GAAT;AACAA,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASgB,MAAT;AACAhB,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,GAAT;AACAA,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,GAAT;AACAA,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,EAAE,CAACW,OAAO,GAAGE,QAAX,IAAuBE,MAAvB,GAAgC,GAAlC,CAAT;AACAf,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAU,CAACI,KAAK,GAAGK,OAAT,IAAoBO,MAApB,GAA6B,GAAvC;AACAhB,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAUG,GAAG,IAAID,IAAI,GAAGC,GAAX,CAAb;AACAH,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAU,CAAC,GAAX;AACAA,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAU,GAAV;AACAA,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAU,GAAV;AACAA,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAWG,GAAG,GAAGD,IAAP,IAAgBA,IAAI,GAAGC,GAAvB,CAAV;AACAH,EAAAA,GAAG,CAAC,EAAD,CAAH,GAAU,GAAV;AACA,SAAOA,GAAP;AACH","sourcesContent":["module.exports = perspectiveFromFieldOfView;\n\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nfunction perspectiveFromFieldOfView(out, fov, near, far) {\n    var upTan = Math.tan(fov.upDegrees * Math.PI/180.0),\n        downTan = Math.tan(fov.downDegrees * Math.PI/180.0),\n        leftTan = Math.tan(fov.leftDegrees * Math.PI/180.0),\n        rightTan = Math.tan(fov.rightDegrees * Math.PI/180.0),\n        xScale = 2.0 / (leftTan + rightTan),\n        yScale = 2.0 / (upTan + downTan);\n\n    out[0] = xScale;\n    out[1] = 0.0;\n    out[2] = 0.0;\n    out[3] = 0.0;\n    out[4] = 0.0;\n    out[5] = yScale;\n    out[6] = 0.0;\n    out[7] = 0.0;\n    out[8] = -((leftTan - rightTan) * xScale * 0.5);\n    out[9] = ((upTan - downTan) * yScale * 0.5);\n    out[10] = far / (near - far);\n    out[11] = -1.0;\n    out[12] = 0.0;\n    out[13] = 0.0;\n    out[14] = (far * near) / (near - far);\n    out[15] = 0.0;\n    return out;\n}\n\n"]},"metadata":{},"sourceType":"script"}