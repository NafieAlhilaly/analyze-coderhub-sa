{"ast":null,"code":"\"use strict\";\n\nfunction CwiseOp() {\n  return function (SS, a0, t0, p0, Y0) {\n    var s0 = SS[0],\n        s1 = SS[1],\n        s2 = SS[2],\n        t0p0 = t0[0],\n        t0p1 = t0[1],\n        t0p2 = t0[2],\n        index = [0, 0, 0];\n    p0 |= 0;\n    var i0 = 0,\n        i1 = 0,\n        i2 = 0,\n        d0s0 = t0p2,\n        d0s1 = t0p1 - s2 * t0p2,\n        d0s2 = t0p0 - s1 * t0p1;\n\n    for (i2 = 0; i2 < s0; ++i2) {\n      for (i1 = 0; i1 < s1; ++i1) {\n        for (i0 = 0; i0 < s2; ++i0) {\n          {\n            var _inline_1_v = Y0,\n                _inline_1_i;\n\n            for (_inline_1_i = 0; _inline_1_i < index.length - 1; ++_inline_1_i) {\n              _inline_1_v = _inline_1_v[index[_inline_1_i]];\n            }\n\n            a0[p0] = _inline_1_v[index[index.length - 1]];\n          }\n          p0 += d0s0;\n          ++index[2];\n        }\n\n        p0 += d0s1;\n        index[2] -= s2;\n        ++index[1];\n      }\n\n      p0 += d0s2;\n      index[1] -= s1;\n      ++index[0];\n    }\n  };\n} //Generates a cwise operator\n\n\nfunction generateCWiseOp() {\n  return CwiseOp();\n}\n\nvar compile = generateCWiseOp;\n\nfunction thunk(compile) {\n  var CACHED = {};\n  return function convert_cwise_thunk(array0, scalar1) {\n    var t0 = array0.dtype,\n        r0 = array0.order,\n        type = [t0, r0.join()].join(),\n        proc = CACHED[type];\n\n    if (!proc) {\n      CACHED[type] = proc = compile([t0, r0]);\n    }\n\n    return proc(array0.shape.slice(0), array0.data, array0.stride, array0.offset | 0, scalar1);\n  };\n}\n\nfunction createThunk(proc) {\n  return thunk(compile.bind(undefined, proc));\n}\n\nfunction compileCwise(user_args) {\n  return createThunk({\n    funcName: user_args.funcName\n  });\n}\n\nmodule.exports = compileCwise({\n  funcName: \"convert\"\n});","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/ndarray-pack/doConvert.js"],"names":["CwiseOp","SS","a0","t0","p0","Y0","s0","s1","s2","t0p0","t0p1","t0p2","index","i0","i1","i2","d0s0","d0s1","d0s2","_inline_1_v","_inline_1_i","length","generateCWiseOp","compile","thunk","CACHED","convert_cwise_thunk","array0","scalar1","dtype","r0","order","type","join","proc","shape","slice","data","stride","offset","createThunk","bind","undefined","compileCwise","user_args","funcName","module","exports"],"mappings":"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","sourcesContent":["\"use strict\"\r\n\r\nfunction CwiseOp() {\r\n  return function (SS, a0, t0, p0, Y0) {\r\n    var s0 = SS[0],\r\n      s1 = SS[1],\r\n      s2 = SS[2],\r\n      t0p0 = t0[0],\r\n      t0p1 = t0[1],\r\n      t0p2 = t0[2],\r\n      index = [0, 0, 0];\r\n    p0 |= 0;\r\n    var i0 = 0,\r\n      i1 = 0,\r\n      i2 = 0,\r\n      d0s0 = t0p2,\r\n      d0s1 = t0p1 - s2 * t0p2,\r\n      d0s2 = t0p0 - s1 * t0p1;\r\n    for (i2 = 0; i2 < s0; ++i2) {\r\n      for (i1 = 0; i1 < s1; ++i1) {\r\n        for (i0 = 0; i0 < s2; ++i0) {\r\n          {\r\n            var _inline_1_v = Y0,\r\n              _inline_1_i;\r\n            for (\r\n              _inline_1_i = 0;\r\n              _inline_1_i < index.length - 1;\r\n              ++_inline_1_i\r\n            ) {\r\n              _inline_1_v = _inline_1_v[index[_inline_1_i]];\r\n            }\r\n            a0[p0] = _inline_1_v[index[index.length - 1]];\r\n          }\r\n          p0 += d0s0;\r\n          ++index[2];\r\n        }\r\n        p0 += d0s1;\r\n        index[2] -= s2;\r\n        ++index[1];\r\n      }\r\n      p0 += d0s2;\r\n      index[1] -= s1;\r\n      ++index[0];\r\n    }\r\n  };\r\n}\r\n\r\n//Generates a cwise operator\r\nfunction generateCWiseOp() {\r\n  return CwiseOp()\r\n}\r\n\r\nvar compile = generateCWiseOp\r\n\r\nfunction thunk(compile) {\r\n  var CACHED = {};\r\n  return function convert_cwise_thunk(array0, scalar1) {\r\n    var t0 = array0.dtype,\r\n      r0 = array0.order,\r\n      type = [t0, r0.join()].join(),\r\n      proc = CACHED[type];\r\n    if (!proc) {\r\n      CACHED[type] = proc = compile([t0, r0]);\r\n    }\r\n    return proc(\r\n      array0.shape.slice(0),\r\n      array0.data,\r\n      array0.stride,\r\n      array0.offset | 0,\r\n      scalar1\r\n    );\r\n  };\r\n}\r\n\r\nfunction createThunk(proc) {\r\n  return thunk(compile.bind(undefined, proc))\r\n}\r\n\r\nfunction compileCwise(user_args) {\r\n  return createThunk({\r\n    funcName: user_args.funcName\r\n  })\r\n}\r\n\r\nmodule.exports = compileCwise({\r\n  funcName: \"convert\"\r\n});\r\n"]},"metadata":{},"sourceType":"script"}