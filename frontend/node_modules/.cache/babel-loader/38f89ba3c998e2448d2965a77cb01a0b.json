{"ast":null,"code":"'use strict';\n\nvar d3 = require('@plotly/d3');\n\nvar map1dArray = require('../carpet/map_1d_array');\n\nvar makepath = require('../carpet/makepath');\n\nvar Drawing = require('../../components/drawing');\n\nvar Lib = require('../../lib');\n\nvar makeCrossings = require('../contour/make_crossings');\n\nvar findAllPaths = require('../contour/find_all_paths');\n\nvar contourPlot = require('../contour/plot');\n\nvar constants = require('../contour/constants');\n\nvar convertToConstraints = require('../contour/convert_to_constraints');\n\nvar emptyPathinfo = require('../contour/empty_pathinfo');\n\nvar closeBoundaries = require('../contour/close_boundaries');\n\nvar lookupCarpet = require('../carpet/lookup_carpetid');\n\nvar axisAlignedLine = require('../carpet/axis_aligned_line');\n\nmodule.exports = function plot(gd, plotinfo, cdcontours, contourcarpetLayer) {\n  var xa = plotinfo.xaxis;\n  var ya = plotinfo.yaxis;\n  Lib.makeTraceGroups(contourcarpetLayer, cdcontours, 'contour').each(function (cd) {\n    var plotGroup = d3.select(this);\n    var cd0 = cd[0];\n    var trace = cd0.trace;\n    var carpet = trace._carpetTrace = lookupCarpet(gd, trace);\n    var carpetcd = gd.calcdata[carpet.index][0];\n    if (!carpet.visible || carpet.visible === 'legendonly') return;\n    var a = cd0.a;\n    var b = cd0.b;\n    var contours = trace.contours;\n    var pathinfo = emptyPathinfo(contours, plotinfo, cd0);\n    var isConstraint = contours.type === 'constraint';\n    var operation = contours._operation;\n    var coloring = isConstraint ? operation === '=' ? 'lines' : 'fill' : contours.coloring; // Map [a, b] (data) --> [i, j] (pixels)\n\n    function ab2p(ab) {\n      var pt = carpet.ab2xy(ab[0], ab[1], true);\n      return [xa.c2p(pt[0]), ya.c2p(pt[1])];\n    } // Define the perimeter in a/b coordinates:\n\n\n    var perimeter = [[a[0], b[b.length - 1]], [a[a.length - 1], b[b.length - 1]], [a[a.length - 1], b[0]], [a[0], b[0]]]; // Extract the contour levels:\n\n    makeCrossings(pathinfo);\n    var atol = (a[a.length - 1] - a[0]) * 1e-8;\n    var btol = (b[b.length - 1] - b[0]) * 1e-8;\n    findAllPaths(pathinfo, atol, btol); // Constraints might need to be draw inverted, which is not something contours\n    // handle by default since they're assumed fully opaque so that they can be\n    // drawn overlapping. This function flips the paths as necessary so that they're\n    // drawn correctly.\n    //\n    // TODO: Perhaps this should be generalized and *all* paths should be drawn as\n    // closed regions so that translucent contour levels would be valid.\n    // See: https://github.com/plotly/plotly.js/issues/1356\n\n    var fillPathinfo = pathinfo;\n\n    if (contours.type === 'constraint') {\n      fillPathinfo = convertToConstraints(pathinfo, operation);\n    } // Map the paths in a/b coordinates to pixel coordinates:\n\n\n    mapPathinfo(pathinfo, ab2p); // draw everything\n    // Compute the boundary path\n\n    var seg, xp, yp, i;\n    var segs = [];\n\n    for (i = carpetcd.clipsegments.length - 1; i >= 0; i--) {\n      seg = carpetcd.clipsegments[i];\n      xp = map1dArray([], seg.x, xa.c2p);\n      yp = map1dArray([], seg.y, ya.c2p);\n      xp.reverse();\n      yp.reverse();\n      segs.push(makepath(xp, yp, seg.bicubic));\n    }\n\n    var boundaryPath = 'M' + segs.join('L') + 'Z'; // Draw the baseline background fill that fills in the space behind any other\n    // contour levels:\n\n    makeBackground(plotGroup, carpetcd.clipsegments, xa, ya, isConstraint, coloring); // Draw the specific contour fills. As a simplification, they're assumed to be\n    // fully opaque so that it's easy to draw them simply overlapping. The alternative\n    // would be to flip adjacent paths and draw closed paths for each level instead.\n\n    makeFills(trace, plotGroup, xa, ya, fillPathinfo, perimeter, ab2p, carpet, carpetcd, coloring, boundaryPath); // Draw contour lines:\n\n    makeLinesAndLabels(plotGroup, pathinfo, gd, cd0, contours, plotinfo, carpet); // Clip the boundary of the plot\n\n    Drawing.setClipUrl(plotGroup, carpet._clipPathId, gd);\n  });\n};\n\nfunction mapPathinfo(pathinfo, map) {\n  var i, j, k, pi, pedgepaths, ppaths, pedgepath, ppath, path;\n\n  for (i = 0; i < pathinfo.length; i++) {\n    pi = pathinfo[i];\n    pedgepaths = pi.pedgepaths = [];\n    ppaths = pi.ppaths = [];\n\n    for (j = 0; j < pi.edgepaths.length; j++) {\n      path = pi.edgepaths[j];\n      pedgepath = [];\n\n      for (k = 0; k < path.length; k++) {\n        pedgepath[k] = map(path[k]);\n      }\n\n      pedgepaths.push(pedgepath);\n    }\n\n    for (j = 0; j < pi.paths.length; j++) {\n      path = pi.paths[j];\n      ppath = [];\n\n      for (k = 0; k < path.length; k++) {\n        ppath[k] = map(path[k]);\n      }\n\n      ppaths.push(ppath);\n    }\n  }\n}\n\nfunction makeLinesAndLabels(plotgroup, pathinfo, gd, cd0, contours, plotinfo, carpet) {\n  var lineContainer = Lib.ensureSingle(plotgroup, 'g', 'contourlines');\n  var showLines = contours.showlines !== false;\n  var showLabels = contours.showlabels;\n  var clipLinesForLabels = showLines && showLabels; // Even if we're not going to show lines, we need to create them\n  // if we're showing labels, because the fill paths include the perimeter\n  // so can't be used to position the labels correctly.\n  // In this case we'll remove the lines after making the labels.\n\n  var linegroup = contourPlot.createLines(lineContainer, showLines || showLabels, pathinfo);\n  var lineClip = contourPlot.createLineClip(lineContainer, clipLinesForLabels, gd, cd0.trace.uid);\n  var labelGroup = plotgroup.selectAll('g.contourlabels').data(showLabels ? [0] : []);\n  labelGroup.exit().remove();\n  labelGroup.enter().append('g').classed('contourlabels', true);\n\n  if (showLabels) {\n    var xa = plotinfo.xaxis;\n    var ya = plotinfo.yaxis;\n    var xLen = xa._length;\n    var yLen = ya._length; // for simplicity use the xy box for label clipping outline.\n\n    var labelClipPathData = [[[0, 0], [xLen, 0], [xLen, yLen], [0, yLen]]];\n    var labelData = []; // invalidate the getTextLocation cache in case paths changed\n\n    Lib.clearLocationCache();\n    var contourFormat = contourPlot.labelFormatter(gd, cd0);\n    var dummyText = Drawing.tester.append('text').attr('data-notex', 1).call(Drawing.font, contours.labelfont); // use `bounds` only to keep labels away from the x/y boundaries\n    // `constrainToCarpet` below ensures labels don't go off the\n    // carpet edges\n\n    var bounds = {\n      left: 0,\n      right: xLen,\n      center: xLen / 2,\n      top: 0,\n      bottom: yLen,\n      middle: yLen / 2\n    };\n    var plotDiagonal = Math.sqrt(xLen * xLen + yLen * yLen); // the path length to use to scale the number of labels to draw:\n\n    var normLength = constants.LABELDISTANCE * plotDiagonal / Math.max(1, pathinfo.length / constants.LABELINCREASE);\n    linegroup.each(function (d) {\n      var textOpts = contourPlot.calcTextOpts(d.level, contourFormat, dummyText, gd);\n      d3.select(this).selectAll('path').each(function (pathData) {\n        var path = this;\n        var pathBounds = Lib.getVisibleSegment(path, bounds, textOpts.height / 2);\n        if (!pathBounds) return;\n        constrainToCarpet(path, pathData, d, pathBounds, carpet, textOpts.height);\n        if (pathBounds.len < (textOpts.width + textOpts.height) * constants.LABELMIN) return;\n        var maxLabels = Math.min(Math.ceil(pathBounds.len / normLength), constants.LABELMAX);\n\n        for (var i = 0; i < maxLabels; i++) {\n          var loc = contourPlot.findBestTextLocation(path, pathBounds, textOpts, labelData, bounds);\n          if (!loc) break;\n          contourPlot.addLabelData(loc, textOpts, labelData, labelClipPathData);\n        }\n      });\n    });\n    dummyText.remove();\n    contourPlot.drawLabels(labelGroup, labelData, gd, lineClip, clipLinesForLabels ? labelClipPathData : null);\n  }\n\n  if (showLabels && !showLines) linegroup.remove();\n} // figure out if this path goes off the edge of the carpet\n// and shorten the part we call visible to keep labels away from the edge\n\n\nfunction constrainToCarpet(path, pathData, levelData, pathBounds, carpet, textHeight) {\n  var pathABData;\n\n  for (var i = 0; i < levelData.pedgepaths.length; i++) {\n    if (pathData === levelData.pedgepaths[i]) {\n      pathABData = levelData.edgepaths[i];\n    }\n  }\n\n  if (!pathABData) return;\n  var aMin = carpet.a[0];\n  var aMax = carpet.a[carpet.a.length - 1];\n  var bMin = carpet.b[0];\n  var bMax = carpet.b[carpet.b.length - 1];\n\n  function getOffset(abPt, pathVector) {\n    var offset = 0;\n    var edgeVector;\n    var dAB = 0.1;\n\n    if (Math.abs(abPt[0] - aMin) < dAB || Math.abs(abPt[0] - aMax) < dAB) {\n      edgeVector = normalizeVector(carpet.dxydb_rough(abPt[0], abPt[1], dAB));\n      offset = Math.max(offset, textHeight * vectorTan(pathVector, edgeVector) / 2);\n    }\n\n    if (Math.abs(abPt[1] - bMin) < dAB || Math.abs(abPt[1] - bMax) < dAB) {\n      edgeVector = normalizeVector(carpet.dxyda_rough(abPt[0], abPt[1], dAB));\n      offset = Math.max(offset, textHeight * vectorTan(pathVector, edgeVector) / 2);\n    }\n\n    return offset;\n  }\n\n  var startVector = getUnitVector(path, 0, 1);\n  var endVector = getUnitVector(path, pathBounds.total, pathBounds.total - 1);\n  var minStart = getOffset(pathABData[0], startVector);\n  var maxEnd = pathBounds.total - getOffset(pathABData[pathABData.length - 1], endVector);\n  if (pathBounds.min < minStart) pathBounds.min = minStart;\n  if (pathBounds.max > maxEnd) pathBounds.max = maxEnd;\n  pathBounds.len = pathBounds.max - pathBounds.min;\n}\n\nfunction getUnitVector(path, p0, p1) {\n  var pt0 = path.getPointAtLength(p0);\n  var pt1 = path.getPointAtLength(p1);\n  var dx = pt1.x - pt0.x;\n  var dy = pt1.y - pt0.y;\n  var len = Math.sqrt(dx * dx + dy * dy);\n  return [dx / len, dy / len];\n}\n\nfunction normalizeVector(v) {\n  var len = Math.sqrt(v[0] * v[0] + v[1] * v[1]);\n  return [v[0] / len, v[1] / len];\n}\n\nfunction vectorTan(v0, v1) {\n  var cos = Math.abs(v0[0] * v1[0] + v0[1] * v1[1]);\n  var sin = Math.sqrt(1 - cos * cos);\n  return sin / cos;\n}\n\nfunction makeBackground(plotgroup, clipsegments, xaxis, yaxis, isConstraint, coloring) {\n  var seg, xp, yp, i;\n  var bggroup = Lib.ensureSingle(plotgroup, 'g', 'contourbg');\n  var bgfill = bggroup.selectAll('path').data(coloring === 'fill' && !isConstraint ? [0] : []);\n  bgfill.enter().append('path');\n  bgfill.exit().remove();\n  var segs = [];\n\n  for (i = 0; i < clipsegments.length; i++) {\n    seg = clipsegments[i];\n    xp = map1dArray([], seg.x, xaxis.c2p);\n    yp = map1dArray([], seg.y, yaxis.c2p);\n    segs.push(makepath(xp, yp, seg.bicubic));\n  }\n\n  bgfill.attr('d', 'M' + segs.join('L') + 'Z').style('stroke', 'none');\n}\n\nfunction makeFills(trace, plotgroup, xa, ya, pathinfo, perimeter, ab2p, carpet, carpetcd, coloring, boundaryPath) {\n  var hasFills = coloring === 'fill'; // fills prefixBoundary in pathinfo items\n\n  if (hasFills) {\n    closeBoundaries(pathinfo, trace.contours);\n  }\n\n  var fillgroup = Lib.ensureSingle(plotgroup, 'g', 'contourfill');\n  var fillitems = fillgroup.selectAll('path').data(hasFills ? pathinfo : []);\n  fillitems.enter().append('path');\n  fillitems.exit().remove();\n  fillitems.each(function (pi) {\n    // join all paths for this level together into a single path\n    // first follow clockwise around the perimeter to close any open paths\n    // if the whole perimeter is above this level, start with a path\n    // enclosing the whole thing. With all that, the parity should mean\n    // that we always fill everything above the contour, nothing below\n    var fullpath = (pi.prefixBoundary ? boundaryPath : '') + joinAllPaths(trace, pi, perimeter, ab2p, carpet, carpetcd, xa, ya);\n\n    if (!fullpath) {\n      d3.select(this).remove();\n    } else {\n      d3.select(this).attr('d', fullpath).style('stroke', 'none');\n    }\n  });\n}\n\nfunction joinAllPaths(trace, pi, perimeter, ab2p, carpet, carpetcd, xa, ya) {\n  var i;\n  var fullpath = '';\n  var startsleft = pi.edgepaths.map(function (v, i) {\n    return i;\n  });\n  var newloop = true;\n  var endpt, newendpt, cnt, nexti, possiblei, addpath;\n  var atol = Math.abs(perimeter[0][0] - perimeter[2][0]) * 1e-4;\n  var btol = Math.abs(perimeter[0][1] - perimeter[2][1]) * 1e-4;\n\n  function istop(pt) {\n    return Math.abs(pt[1] - perimeter[0][1]) < btol;\n  }\n\n  function isbottom(pt) {\n    return Math.abs(pt[1] - perimeter[2][1]) < btol;\n  }\n\n  function isleft(pt) {\n    return Math.abs(pt[0] - perimeter[0][0]) < atol;\n  }\n\n  function isright(pt) {\n    return Math.abs(pt[0] - perimeter[2][0]) < atol;\n  }\n\n  function pathto(pt0, pt1) {\n    var i, j, segments, axis;\n    var path = '';\n\n    if (istop(pt0) && !isright(pt0) || isbottom(pt0) && !isleft(pt0)) {\n      axis = carpet.aaxis;\n      segments = axisAlignedLine(carpet, carpetcd, [pt0[0], pt1[0]], 0.5 * (pt0[1] + pt1[1]));\n    } else {\n      axis = carpet.baxis;\n      segments = axisAlignedLine(carpet, carpetcd, 0.5 * (pt0[0] + pt1[0]), [pt0[1], pt1[1]]);\n    }\n\n    for (i = 1; i < segments.length; i++) {\n      path += axis.smoothing ? 'C' : 'L';\n\n      for (j = 0; j < segments[i].length; j++) {\n        var pt = segments[i][j];\n        path += [xa.c2p(pt[0]), ya.c2p(pt[1])] + ' ';\n      }\n    }\n\n    return path;\n  }\n\n  i = 0;\n  endpt = null;\n\n  while (startsleft.length) {\n    var startpt = pi.edgepaths[i][0];\n\n    if (endpt) {\n      fullpath += pathto(endpt, startpt);\n    }\n\n    addpath = Drawing.smoothopen(pi.edgepaths[i].map(ab2p), pi.smoothing);\n    fullpath += newloop ? addpath : addpath.replace(/^M/, 'L');\n    startsleft.splice(startsleft.indexOf(i), 1);\n    endpt = pi.edgepaths[i][pi.edgepaths[i].length - 1];\n    nexti = -1; // now loop through sides, moving our endpoint until we find a new start\n\n    for (cnt = 0; cnt < 4; cnt++) {\n      // just to prevent infinite loops\n      if (!endpt) {\n        Lib.log('Missing end?', i, pi);\n        break;\n      }\n\n      if (istop(endpt) && !isright(endpt)) {\n        newendpt = perimeter[1]; // left top ---> right top\n      } else if (isleft(endpt)) {\n        newendpt = perimeter[0]; // left bottom ---> left top\n      } else if (isbottom(endpt)) {\n        newendpt = perimeter[3]; // right bottom\n      } else if (isright(endpt)) {\n        newendpt = perimeter[2]; // left bottom\n      }\n\n      for (possiblei = 0; possiblei < pi.edgepaths.length; possiblei++) {\n        var ptNew = pi.edgepaths[possiblei][0]; // is ptNew on the (horz. or vert.) segment from endpt to newendpt?\n\n        if (Math.abs(endpt[0] - newendpt[0]) < atol) {\n          if (Math.abs(endpt[0] - ptNew[0]) < atol && (ptNew[1] - endpt[1]) * (newendpt[1] - ptNew[1]) >= 0) {\n            newendpt = ptNew;\n            nexti = possiblei;\n          }\n        } else if (Math.abs(endpt[1] - newendpt[1]) < btol) {\n          if (Math.abs(endpt[1] - ptNew[1]) < btol && (ptNew[0] - endpt[0]) * (newendpt[0] - ptNew[0]) >= 0) {\n            newendpt = ptNew;\n            nexti = possiblei;\n          }\n        } else {\n          Lib.log('endpt to newendpt is not vert. or horz.', endpt, newendpt, ptNew);\n        }\n      }\n\n      if (nexti >= 0) break;\n      fullpath += pathto(endpt, newendpt);\n      endpt = newendpt;\n    }\n\n    if (nexti === pi.edgepaths.length) {\n      Lib.log('unclosed perimeter path');\n      break;\n    }\n\n    i = nexti; // if we closed back on a loop we already included,\n    // close it and start a new loop\n\n    newloop = startsleft.indexOf(i) === -1;\n\n    if (newloop) {\n      i = startsleft[0];\n      fullpath += pathto(endpt, newendpt) + 'Z';\n      endpt = null;\n    }\n  } // finally add the interior paths\n\n\n  for (i = 0; i < pi.paths.length; i++) {\n    fullpath += Drawing.smoothclosed(pi.paths[i].map(ab2p), pi.smoothing);\n  }\n\n  return fullpath;\n}","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/plotly.js/src/traces/contourcarpet/plot.js"],"names":["d3","require","map1dArray","makepath","Drawing","Lib","makeCrossings","findAllPaths","contourPlot","constants","convertToConstraints","emptyPathinfo","closeBoundaries","lookupCarpet","axisAlignedLine","module","exports","plot","gd","plotinfo","cdcontours","contourcarpetLayer","xa","xaxis","ya","yaxis","makeTraceGroups","each","cd","plotGroup","select","cd0","trace","carpet","_carpetTrace","carpetcd","calcdata","index","visible","a","b","contours","pathinfo","isConstraint","type","operation","_operation","coloring","ab2p","ab","pt","ab2xy","c2p","perimeter","length","atol","btol","fillPathinfo","mapPathinfo","seg","xp","yp","i","segs","clipsegments","x","y","reverse","push","bicubic","boundaryPath","join","makeBackground","makeFills","makeLinesAndLabels","setClipUrl","_clipPathId","map","j","k","pi","pedgepaths","ppaths","pedgepath","ppath","path","edgepaths","paths","plotgroup","lineContainer","ensureSingle","showLines","showlines","showLabels","showlabels","clipLinesForLabels","linegroup","createLines","lineClip","createLineClip","uid","labelGroup","selectAll","data","exit","remove","enter","append","classed","xLen","_length","yLen","labelClipPathData","labelData","clearLocationCache","contourFormat","labelFormatter","dummyText","tester","attr","call","font","labelfont","bounds","left","right","center","top","bottom","middle","plotDiagonal","Math","sqrt","normLength","LABELDISTANCE","max","LABELINCREASE","d","textOpts","calcTextOpts","level","pathData","pathBounds","getVisibleSegment","height","constrainToCarpet","len","width","LABELMIN","maxLabels","min","ceil","LABELMAX","loc","findBestTextLocation","addLabelData","drawLabels","levelData","textHeight","pathABData","aMin","aMax","bMin","bMax","getOffset","abPt","pathVector","offset","edgeVector","dAB","abs","normalizeVector","dxydb_rough","vectorTan","dxyda_rough","startVector","getUnitVector","endVector","total","minStart","maxEnd","p0","p1","pt0","getPointAtLength","pt1","dx","dy","v","v0","v1","cos","sin","bggroup","bgfill","style","hasFills","fillgroup","fillitems","fullpath","prefixBoundary","joinAllPaths","startsleft","newloop","endpt","newendpt","cnt","nexti","possiblei","addpath","istop","isbottom","isleft","isright","pathto","segments","axis","aaxis","baxis","smoothing","startpt","smoothopen","replace","splice","indexOf","log","ptNew","smoothclosed"],"mappings":"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","sourcesContent":["'use strict';\n\nvar d3 = require('@plotly/d3');\nvar map1dArray = require('../carpet/map_1d_array');\nvar makepath = require('../carpet/makepath');\nvar Drawing = require('../../components/drawing');\nvar Lib = require('../../lib');\n\nvar makeCrossings = require('../contour/make_crossings');\nvar findAllPaths = require('../contour/find_all_paths');\nvar contourPlot = require('../contour/plot');\nvar constants = require('../contour/constants');\nvar convertToConstraints = require('../contour/convert_to_constraints');\nvar emptyPathinfo = require('../contour/empty_pathinfo');\nvar closeBoundaries = require('../contour/close_boundaries');\nvar lookupCarpet = require('../carpet/lookup_carpetid');\nvar axisAlignedLine = require('../carpet/axis_aligned_line');\n\nmodule.exports = function plot(gd, plotinfo, cdcontours, contourcarpetLayer) {\n    var xa = plotinfo.xaxis;\n    var ya = plotinfo.yaxis;\n\n    Lib.makeTraceGroups(contourcarpetLayer, cdcontours, 'contour').each(function(cd) {\n        var plotGroup = d3.select(this);\n        var cd0 = cd[0];\n        var trace = cd0.trace;\n\n        var carpet = trace._carpetTrace = lookupCarpet(gd, trace);\n        var carpetcd = gd.calcdata[carpet.index][0];\n\n        if(!carpet.visible || carpet.visible === 'legendonly') return;\n\n        var a = cd0.a;\n        var b = cd0.b;\n        var contours = trace.contours;\n        var pathinfo = emptyPathinfo(contours, plotinfo, cd0);\n        var isConstraint = contours.type === 'constraint';\n        var operation = contours._operation;\n        var coloring = isConstraint ? (operation === '=' ? 'lines' : 'fill') : contours.coloring;\n\n        // Map [a, b] (data) --> [i, j] (pixels)\n        function ab2p(ab) {\n            var pt = carpet.ab2xy(ab[0], ab[1], true);\n            return [xa.c2p(pt[0]), ya.c2p(pt[1])];\n        }\n\n        // Define the perimeter in a/b coordinates:\n        var perimeter = [\n            [a[0], b[b.length - 1]],\n            [a[a.length - 1], b[b.length - 1]],\n            [a[a.length - 1], b[0]],\n            [a[0], b[0]]\n        ];\n\n        // Extract the contour levels:\n        makeCrossings(pathinfo);\n        var atol = (a[a.length - 1] - a[0]) * 1e-8;\n        var btol = (b[b.length - 1] - b[0]) * 1e-8;\n        findAllPaths(pathinfo, atol, btol);\n\n        // Constraints might need to be draw inverted, which is not something contours\n        // handle by default since they're assumed fully opaque so that they can be\n        // drawn overlapping. This function flips the paths as necessary so that they're\n        // drawn correctly.\n        //\n        // TODO: Perhaps this should be generalized and *all* paths should be drawn as\n        // closed regions so that translucent contour levels would be valid.\n        // See: https://github.com/plotly/plotly.js/issues/1356\n        var fillPathinfo = pathinfo;\n        if(contours.type === 'constraint') {\n            fillPathinfo = convertToConstraints(pathinfo, operation);\n        }\n\n        // Map the paths in a/b coordinates to pixel coordinates:\n        mapPathinfo(pathinfo, ab2p);\n\n        // draw everything\n\n        // Compute the boundary path\n        var seg, xp, yp, i;\n        var segs = [];\n        for(i = carpetcd.clipsegments.length - 1; i >= 0; i--) {\n            seg = carpetcd.clipsegments[i];\n            xp = map1dArray([], seg.x, xa.c2p);\n            yp = map1dArray([], seg.y, ya.c2p);\n            xp.reverse();\n            yp.reverse();\n            segs.push(makepath(xp, yp, seg.bicubic));\n        }\n\n        var boundaryPath = 'M' + segs.join('L') + 'Z';\n\n        // Draw the baseline background fill that fills in the space behind any other\n        // contour levels:\n        makeBackground(plotGroup, carpetcd.clipsegments, xa, ya, isConstraint, coloring);\n\n        // Draw the specific contour fills. As a simplification, they're assumed to be\n        // fully opaque so that it's easy to draw them simply overlapping. The alternative\n        // would be to flip adjacent paths and draw closed paths for each level instead.\n        makeFills(trace, plotGroup, xa, ya, fillPathinfo, perimeter, ab2p, carpet, carpetcd, coloring, boundaryPath);\n\n        // Draw contour lines:\n        makeLinesAndLabels(plotGroup, pathinfo, gd, cd0, contours, plotinfo, carpet);\n\n        // Clip the boundary of the plot\n        Drawing.setClipUrl(plotGroup, carpet._clipPathId, gd);\n    });\n};\n\nfunction mapPathinfo(pathinfo, map) {\n    var i, j, k, pi, pedgepaths, ppaths, pedgepath, ppath, path;\n\n    for(i = 0; i < pathinfo.length; i++) {\n        pi = pathinfo[i];\n        pedgepaths = pi.pedgepaths = [];\n        ppaths = pi.ppaths = [];\n        for(j = 0; j < pi.edgepaths.length; j++) {\n            path = pi.edgepaths[j];\n            pedgepath = [];\n            for(k = 0; k < path.length; k++) {\n                pedgepath[k] = map(path[k]);\n            }\n            pedgepaths.push(pedgepath);\n        }\n        for(j = 0; j < pi.paths.length; j++) {\n            path = pi.paths[j];\n            ppath = [];\n            for(k = 0; k < path.length; k++) {\n                ppath[k] = map(path[k]);\n            }\n            ppaths.push(ppath);\n        }\n    }\n}\n\nfunction makeLinesAndLabels(plotgroup, pathinfo, gd, cd0, contours, plotinfo, carpet) {\n    var lineContainer = Lib.ensureSingle(plotgroup, 'g', 'contourlines');\n    var showLines = contours.showlines !== false;\n    var showLabels = contours.showlabels;\n    var clipLinesForLabels = showLines && showLabels;\n\n    // Even if we're not going to show lines, we need to create them\n    // if we're showing labels, because the fill paths include the perimeter\n    // so can't be used to position the labels correctly.\n    // In this case we'll remove the lines after making the labels.\n    var linegroup = contourPlot.createLines(lineContainer, showLines || showLabels, pathinfo);\n\n    var lineClip = contourPlot.createLineClip(lineContainer, clipLinesForLabels, gd, cd0.trace.uid);\n\n    var labelGroup = plotgroup.selectAll('g.contourlabels')\n        .data(showLabels ? [0] : []);\n\n    labelGroup.exit().remove();\n\n    labelGroup.enter().append('g')\n        .classed('contourlabels', true);\n\n    if(showLabels) {\n        var xa = plotinfo.xaxis;\n        var ya = plotinfo.yaxis;\n        var xLen = xa._length;\n        var yLen = ya._length;\n        // for simplicity use the xy box for label clipping outline.\n        var labelClipPathData = [[\n            [0, 0],\n            [xLen, 0],\n            [xLen, yLen],\n            [0, yLen]\n        ]];\n\n\n        var labelData = [];\n\n        // invalidate the getTextLocation cache in case paths changed\n        Lib.clearLocationCache();\n\n        var contourFormat = contourPlot.labelFormatter(gd, cd0);\n\n        var dummyText = Drawing.tester.append('text')\n            .attr('data-notex', 1)\n            .call(Drawing.font, contours.labelfont);\n\n        // use `bounds` only to keep labels away from the x/y boundaries\n        // `constrainToCarpet` below ensures labels don't go off the\n        // carpet edges\n        var bounds = {\n            left: 0,\n            right: xLen,\n            center: xLen / 2,\n            top: 0,\n            bottom: yLen,\n            middle: yLen / 2\n        };\n\n        var plotDiagonal = Math.sqrt(xLen * xLen + yLen * yLen);\n\n        // the path length to use to scale the number of labels to draw:\n        var normLength = constants.LABELDISTANCE * plotDiagonal /\n            Math.max(1, pathinfo.length / constants.LABELINCREASE);\n\n        linegroup.each(function(d) {\n            var textOpts = contourPlot.calcTextOpts(d.level, contourFormat, dummyText, gd);\n\n            d3.select(this).selectAll('path').each(function(pathData) {\n                var path = this;\n                var pathBounds = Lib.getVisibleSegment(path, bounds, textOpts.height / 2);\n                if(!pathBounds) return;\n\n                constrainToCarpet(path, pathData, d, pathBounds, carpet, textOpts.height);\n\n                if(pathBounds.len < (textOpts.width + textOpts.height) * constants.LABELMIN) return;\n\n                var maxLabels = Math.min(Math.ceil(pathBounds.len / normLength),\n                    constants.LABELMAX);\n\n                for(var i = 0; i < maxLabels; i++) {\n                    var loc = contourPlot.findBestTextLocation(path, pathBounds, textOpts,\n                        labelData, bounds);\n\n                    if(!loc) break;\n\n                    contourPlot.addLabelData(loc, textOpts, labelData, labelClipPathData);\n                }\n            });\n        });\n\n        dummyText.remove();\n\n        contourPlot.drawLabels(labelGroup, labelData, gd, lineClip,\n            clipLinesForLabels ? labelClipPathData : null);\n    }\n\n    if(showLabels && !showLines) linegroup.remove();\n}\n\n// figure out if this path goes off the edge of the carpet\n// and shorten the part we call visible to keep labels away from the edge\nfunction constrainToCarpet(path, pathData, levelData, pathBounds, carpet, textHeight) {\n    var pathABData;\n    for(var i = 0; i < levelData.pedgepaths.length; i++) {\n        if(pathData === levelData.pedgepaths[i]) {\n            pathABData = levelData.edgepaths[i];\n        }\n    }\n    if(!pathABData) return;\n\n    var aMin = carpet.a[0];\n    var aMax = carpet.a[carpet.a.length - 1];\n    var bMin = carpet.b[0];\n    var bMax = carpet.b[carpet.b.length - 1];\n\n    function getOffset(abPt, pathVector) {\n        var offset = 0;\n        var edgeVector;\n        var dAB = 0.1;\n        if(Math.abs(abPt[0] - aMin) < dAB || Math.abs(abPt[0] - aMax) < dAB) {\n            edgeVector = normalizeVector(carpet.dxydb_rough(abPt[0], abPt[1], dAB));\n            offset = Math.max(offset, textHeight * vectorTan(pathVector, edgeVector) / 2);\n        }\n\n        if(Math.abs(abPt[1] - bMin) < dAB || Math.abs(abPt[1] - bMax) < dAB) {\n            edgeVector = normalizeVector(carpet.dxyda_rough(abPt[0], abPt[1], dAB));\n            offset = Math.max(offset, textHeight * vectorTan(pathVector, edgeVector) / 2);\n        }\n        return offset;\n    }\n\n    var startVector = getUnitVector(path, 0, 1);\n    var endVector = getUnitVector(path, pathBounds.total, pathBounds.total - 1);\n    var minStart = getOffset(pathABData[0], startVector);\n    var maxEnd = pathBounds.total - getOffset(pathABData[pathABData.length - 1], endVector);\n\n    if(pathBounds.min < minStart) pathBounds.min = minStart;\n    if(pathBounds.max > maxEnd) pathBounds.max = maxEnd;\n\n    pathBounds.len = pathBounds.max - pathBounds.min;\n}\n\nfunction getUnitVector(path, p0, p1) {\n    var pt0 = path.getPointAtLength(p0);\n    var pt1 = path.getPointAtLength(p1);\n    var dx = pt1.x - pt0.x;\n    var dy = pt1.y - pt0.y;\n    var len = Math.sqrt(dx * dx + dy * dy);\n    return [dx / len, dy / len];\n}\n\nfunction normalizeVector(v) {\n    var len = Math.sqrt(v[0] * v[0] + v[1] * v[1]);\n    return [v[0] / len, v[1] / len];\n}\n\nfunction vectorTan(v0, v1) {\n    var cos = Math.abs(v0[0] * v1[0] + v0[1] * v1[1]);\n    var sin = Math.sqrt(1 - cos * cos);\n    return sin / cos;\n}\n\nfunction makeBackground(plotgroup, clipsegments, xaxis, yaxis, isConstraint, coloring) {\n    var seg, xp, yp, i;\n    var bggroup = Lib.ensureSingle(plotgroup, 'g', 'contourbg');\n\n    var bgfill = bggroup.selectAll('path')\n        .data((coloring === 'fill' && !isConstraint) ? [0] : []);\n    bgfill.enter().append('path');\n    bgfill.exit().remove();\n\n    var segs = [];\n    for(i = 0; i < clipsegments.length; i++) {\n        seg = clipsegments[i];\n        xp = map1dArray([], seg.x, xaxis.c2p);\n        yp = map1dArray([], seg.y, yaxis.c2p);\n        segs.push(makepath(xp, yp, seg.bicubic));\n    }\n\n    bgfill\n        .attr('d', 'M' + segs.join('L') + 'Z')\n        .style('stroke', 'none');\n}\n\nfunction makeFills(trace, plotgroup, xa, ya, pathinfo, perimeter, ab2p, carpet, carpetcd, coloring, boundaryPath) {\n    var hasFills = coloring === 'fill';\n\n    // fills prefixBoundary in pathinfo items\n    if(hasFills) {\n        closeBoundaries(pathinfo, trace.contours);\n    }\n\n    var fillgroup = Lib.ensureSingle(plotgroup, 'g', 'contourfill');\n    var fillitems = fillgroup.selectAll('path').data(hasFills ? pathinfo : []);\n    fillitems.enter().append('path');\n    fillitems.exit().remove();\n    fillitems.each(function(pi) {\n        // join all paths for this level together into a single path\n        // first follow clockwise around the perimeter to close any open paths\n        // if the whole perimeter is above this level, start with a path\n        // enclosing the whole thing. With all that, the parity should mean\n        // that we always fill everything above the contour, nothing below\n        var fullpath = (pi.prefixBoundary ? boundaryPath : '') +\n            joinAllPaths(trace, pi, perimeter, ab2p, carpet, carpetcd, xa, ya);\n\n        if(!fullpath) {\n            d3.select(this).remove();\n        } else {\n            d3.select(this)\n                .attr('d', fullpath)\n                .style('stroke', 'none');\n        }\n    });\n}\n\nfunction joinAllPaths(trace, pi, perimeter, ab2p, carpet, carpetcd, xa, ya) {\n    var i;\n    var fullpath = '';\n\n    var startsleft = pi.edgepaths.map(function(v, i) { return i; });\n    var newloop = true;\n    var endpt, newendpt, cnt, nexti, possiblei, addpath;\n\n    var atol = Math.abs(perimeter[0][0] - perimeter[2][0]) * 1e-4;\n    var btol = Math.abs(perimeter[0][1] - perimeter[2][1]) * 1e-4;\n\n    function istop(pt) { return Math.abs(pt[1] - perimeter[0][1]) < btol; }\n    function isbottom(pt) { return Math.abs(pt[1] - perimeter[2][1]) < btol; }\n    function isleft(pt) { return Math.abs(pt[0] - perimeter[0][0]) < atol; }\n    function isright(pt) { return Math.abs(pt[0] - perimeter[2][0]) < atol; }\n\n    function pathto(pt0, pt1) {\n        var i, j, segments, axis;\n        var path = '';\n\n        if((istop(pt0) && !isright(pt0)) || (isbottom(pt0) && !isleft(pt0))) {\n            axis = carpet.aaxis;\n            segments = axisAlignedLine(carpet, carpetcd, [pt0[0], pt1[0]], 0.5 * (pt0[1] + pt1[1]));\n        } else {\n            axis = carpet.baxis;\n            segments = axisAlignedLine(carpet, carpetcd, 0.5 * (pt0[0] + pt1[0]), [pt0[1], pt1[1]]);\n        }\n\n        for(i = 1; i < segments.length; i++) {\n            path += axis.smoothing ? 'C' : 'L';\n            for(j = 0; j < segments[i].length; j++) {\n                var pt = segments[i][j];\n                path += [xa.c2p(pt[0]), ya.c2p(pt[1])] + ' ';\n            }\n        }\n\n        return path;\n    }\n\n    i = 0;\n    endpt = null;\n    while(startsleft.length) {\n        var startpt = pi.edgepaths[i][0];\n\n        if(endpt) {\n            fullpath += pathto(endpt, startpt);\n        }\n\n        addpath = Drawing.smoothopen(pi.edgepaths[i].map(ab2p), pi.smoothing);\n        fullpath += newloop ? addpath : addpath.replace(/^M/, 'L');\n        startsleft.splice(startsleft.indexOf(i), 1);\n        endpt = pi.edgepaths[i][pi.edgepaths[i].length - 1];\n        nexti = -1;\n\n        // now loop through sides, moving our endpoint until we find a new start\n        for(cnt = 0; cnt < 4; cnt++) { // just to prevent infinite loops\n            if(!endpt) {\n                Lib.log('Missing end?', i, pi);\n                break;\n            }\n\n            if(istop(endpt) && !isright(endpt)) {\n                newendpt = perimeter[1]; // left top ---> right top\n            } else if(isleft(endpt)) {\n                newendpt = perimeter[0]; // left bottom ---> left top\n            } else if(isbottom(endpt)) {\n                newendpt = perimeter[3]; // right bottom\n            } else if(isright(endpt)) {\n                newendpt = perimeter[2]; // left bottom\n            }\n\n            for(possiblei = 0; possiblei < pi.edgepaths.length; possiblei++) {\n                var ptNew = pi.edgepaths[possiblei][0];\n                // is ptNew on the (horz. or vert.) segment from endpt to newendpt?\n                if(Math.abs(endpt[0] - newendpt[0]) < atol) {\n                    if(Math.abs(endpt[0] - ptNew[0]) < atol &&\n                            (ptNew[1] - endpt[1]) * (newendpt[1] - ptNew[1]) >= 0) {\n                        newendpt = ptNew;\n                        nexti = possiblei;\n                    }\n                } else if(Math.abs(endpt[1] - newendpt[1]) < btol) {\n                    if(Math.abs(endpt[1] - ptNew[1]) < btol &&\n                            (ptNew[0] - endpt[0]) * (newendpt[0] - ptNew[0]) >= 0) {\n                        newendpt = ptNew;\n                        nexti = possiblei;\n                    }\n                } else {\n                    Lib.log('endpt to newendpt is not vert. or horz.', endpt, newendpt, ptNew);\n                }\n            }\n\n            if(nexti >= 0) break;\n            fullpath += pathto(endpt, newendpt);\n            endpt = newendpt;\n        }\n\n        if(nexti === pi.edgepaths.length) {\n            Lib.log('unclosed perimeter path');\n            break;\n        }\n\n        i = nexti;\n\n        // if we closed back on a loop we already included,\n        // close it and start a new loop\n        newloop = (startsleft.indexOf(i) === -1);\n        if(newloop) {\n            i = startsleft[0];\n            fullpath += pathto(endpt, newendpt) + 'Z';\n            endpt = null;\n        }\n    }\n\n    // finally add the interior paths\n    for(i = 0; i < pi.paths.length; i++) {\n        fullpath += Drawing.smoothclosed(pi.paths[i].map(ab2p), pi.smoothing);\n    }\n\n    return fullpath;\n}\n"]},"metadata":{},"sourceType":"script"}