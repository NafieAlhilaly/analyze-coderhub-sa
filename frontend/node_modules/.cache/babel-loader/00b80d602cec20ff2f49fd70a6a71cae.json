{"ast":null,"code":"'use strict';\n\nvar d3 = require('@plotly/d3');\n\nvar isNumeric = require('fast-isnumeric');\n\nvar Drawing = require('../drawing');\n\nvar subTypes = require('../../traces/scatter/subtypes');\n\nmodule.exports = function plot(gd, traces, plotinfo, transitionOpts) {\n  var isNew;\n  var xa = plotinfo.xaxis;\n  var ya = plotinfo.yaxis;\n  var hasAnimation = transitionOpts && transitionOpts.duration > 0;\n  traces.each(function (d) {\n    var trace = d[0].trace; // || {} is in case the trace (specifically scatterternary)\n    // doesn't support error bars at all, but does go through\n    // the scatter.plot mechanics, which calls ErrorBars.plot\n    // internally\n\n    var xObj = trace.error_x || {};\n    var yObj = trace.error_y || {};\n    var keyFunc;\n\n    if (trace.ids) {\n      keyFunc = function (d) {\n        return d.id;\n      };\n    }\n\n    var sparse = subTypes.hasMarkers(trace) && trace.marker.maxdisplayed > 0;\n    if (!yObj.visible && !xObj.visible) d = [];\n    var errorbars = d3.select(this).selectAll('g.errorbar').data(d, keyFunc);\n    errorbars.exit().remove();\n    if (!d.length) return;\n    if (!xObj.visible) errorbars.selectAll('path.xerror').remove();\n    if (!yObj.visible) errorbars.selectAll('path.yerror').remove();\n    errorbars.style('opacity', 1);\n    var enter = errorbars.enter().append('g').classed('errorbar', true);\n\n    if (hasAnimation) {\n      enter.style('opacity', 0).transition().duration(transitionOpts.duration).style('opacity', 1);\n    }\n\n    Drawing.setClipUrl(errorbars, plotinfo.layerClipId, gd);\n    errorbars.each(function (d) {\n      var errorbar = d3.select(this);\n      var coords = errorCoords(d, xa, ya);\n      if (sparse && !d.vis) return;\n      var path;\n      var yerror = errorbar.select('path.yerror');\n\n      if (yObj.visible && isNumeric(coords.x) && isNumeric(coords.yh) && isNumeric(coords.ys)) {\n        var yw = yObj.width;\n        path = 'M' + (coords.x - yw) + ',' + coords.yh + 'h' + 2 * yw + // hat\n        'm-' + yw + ',0V' + coords.ys; // bar\n\n        if (!coords.noYS) path += 'm-' + yw + ',0h' + 2 * yw; // shoe\n\n        isNew = !yerror.size();\n\n        if (isNew) {\n          yerror = errorbar.append('path').style('vector-effect', 'non-scaling-stroke').classed('yerror', true);\n        } else if (hasAnimation) {\n          yerror = yerror.transition().duration(transitionOpts.duration).ease(transitionOpts.easing);\n        }\n\n        yerror.attr('d', path);\n      } else yerror.remove();\n\n      var xerror = errorbar.select('path.xerror');\n\n      if (xObj.visible && isNumeric(coords.y) && isNumeric(coords.xh) && isNumeric(coords.xs)) {\n        var xw = (xObj.copy_ystyle ? yObj : xObj).width;\n        path = 'M' + coords.xh + ',' + (coords.y - xw) + 'v' + 2 * xw + // hat\n        'm0,-' + xw + 'H' + coords.xs; // bar\n\n        if (!coords.noXS) path += 'm0,-' + xw + 'v' + 2 * xw; // shoe\n\n        isNew = !xerror.size();\n\n        if (isNew) {\n          xerror = errorbar.append('path').style('vector-effect', 'non-scaling-stroke').classed('xerror', true);\n        } else if (hasAnimation) {\n          xerror = xerror.transition().duration(transitionOpts.duration).ease(transitionOpts.easing);\n        }\n\n        xerror.attr('d', path);\n      } else xerror.remove();\n    });\n  });\n}; // compute the coordinates of the error-bar objects\n\n\nfunction errorCoords(d, xa, ya) {\n  var out = {\n    x: xa.c2p(d.x),\n    y: ya.c2p(d.y)\n  }; // calculate the error bar size and hat and shoe locations\n\n  if (d.yh !== undefined) {\n    out.yh = ya.c2p(d.yh);\n    out.ys = ya.c2p(d.ys); // if the shoes go off-scale (ie log scale, error bars past zero)\n    // clip the bar and hide the shoes\n\n    if (!isNumeric(out.ys)) {\n      out.noYS = true;\n      out.ys = ya.c2p(d.ys, true);\n    }\n  }\n\n  if (d.xh !== undefined) {\n    out.xh = xa.c2p(d.xh);\n    out.xs = xa.c2p(d.xs);\n\n    if (!isNumeric(out.xs)) {\n      out.noXS = true;\n      out.xs = xa.c2p(d.xs, true);\n    }\n  }\n\n  return out;\n}","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/plotly.js/src/components/errorbars/plot.js"],"names":["d3","require","isNumeric","Drawing","subTypes","module","exports","plot","gd","traces","plotinfo","transitionOpts","isNew","xa","xaxis","ya","yaxis","hasAnimation","duration","each","d","trace","xObj","error_x","yObj","error_y","keyFunc","ids","id","sparse","hasMarkers","marker","maxdisplayed","visible","errorbars","select","selectAll","data","exit","remove","length","style","enter","append","classed","transition","setClipUrl","layerClipId","errorbar","coords","errorCoords","vis","path","yerror","x","yh","ys","yw","width","noYS","size","ease","easing","attr","xerror","y","xh","xs","xw","copy_ystyle","noXS","out","c2p","undefined"],"mappings":"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","sourcesContent":["'use strict';\n\nvar d3 = require('@plotly/d3');\nvar isNumeric = require('fast-isnumeric');\n\nvar Drawing = require('../drawing');\nvar subTypes = require('../../traces/scatter/subtypes');\n\nmodule.exports = function plot(gd, traces, plotinfo, transitionOpts) {\n    var isNew;\n\n    var xa = plotinfo.xaxis;\n    var ya = plotinfo.yaxis;\n\n    var hasAnimation = transitionOpts && transitionOpts.duration > 0;\n\n    traces.each(function(d) {\n        var trace = d[0].trace;\n        // || {} is in case the trace (specifically scatterternary)\n        // doesn't support error bars at all, but does go through\n        // the scatter.plot mechanics, which calls ErrorBars.plot\n        // internally\n        var xObj = trace.error_x || {};\n        var yObj = trace.error_y || {};\n\n        var keyFunc;\n\n        if(trace.ids) {\n            keyFunc = function(d) {return d.id;};\n        }\n\n        var sparse = (\n            subTypes.hasMarkers(trace) &&\n            trace.marker.maxdisplayed > 0\n        );\n\n        if(!yObj.visible && !xObj.visible) d = [];\n\n        var errorbars = d3.select(this).selectAll('g.errorbar')\n            .data(d, keyFunc);\n\n        errorbars.exit().remove();\n\n        if(!d.length) return;\n\n        if(!xObj.visible) errorbars.selectAll('path.xerror').remove();\n        if(!yObj.visible) errorbars.selectAll('path.yerror').remove();\n\n        errorbars.style('opacity', 1);\n\n        var enter = errorbars.enter().append('g')\n            .classed('errorbar', true);\n\n        if(hasAnimation) {\n            enter.style('opacity', 0).transition()\n                .duration(transitionOpts.duration)\n                .style('opacity', 1);\n        }\n\n        Drawing.setClipUrl(errorbars, plotinfo.layerClipId, gd);\n\n        errorbars.each(function(d) {\n            var errorbar = d3.select(this);\n            var coords = errorCoords(d, xa, ya);\n\n            if(sparse && !d.vis) return;\n\n            var path;\n\n            var yerror = errorbar.select('path.yerror');\n            if(yObj.visible && isNumeric(coords.x) &&\n                    isNumeric(coords.yh) &&\n                    isNumeric(coords.ys)) {\n                var yw = yObj.width;\n\n                path = 'M' + (coords.x - yw) + ',' +\n                    coords.yh + 'h' + (2 * yw) + // hat\n                    'm-' + yw + ',0V' + coords.ys; // bar\n\n\n                if(!coords.noYS) path += 'm-' + yw + ',0h' + (2 * yw); // shoe\n\n                isNew = !yerror.size();\n\n                if(isNew) {\n                    yerror = errorbar.append('path')\n                        .style('vector-effect', 'non-scaling-stroke')\n                        .classed('yerror', true);\n                } else if(hasAnimation) {\n                    yerror = yerror\n                        .transition()\n                            .duration(transitionOpts.duration)\n                            .ease(transitionOpts.easing);\n                }\n\n                yerror.attr('d', path);\n            } else yerror.remove();\n\n            var xerror = errorbar.select('path.xerror');\n            if(xObj.visible && isNumeric(coords.y) &&\n                    isNumeric(coords.xh) &&\n                    isNumeric(coords.xs)) {\n                var xw = (xObj.copy_ystyle ? yObj : xObj).width;\n\n                path = 'M' + coords.xh + ',' +\n                    (coords.y - xw) + 'v' + (2 * xw) + // hat\n                    'm0,-' + xw + 'H' + coords.xs; // bar\n\n                if(!coords.noXS) path += 'm0,-' + xw + 'v' + (2 * xw); // shoe\n\n                isNew = !xerror.size();\n\n                if(isNew) {\n                    xerror = errorbar.append('path')\n                        .style('vector-effect', 'non-scaling-stroke')\n                        .classed('xerror', true);\n                } else if(hasAnimation) {\n                    xerror = xerror\n                        .transition()\n                            .duration(transitionOpts.duration)\n                            .ease(transitionOpts.easing);\n                }\n\n                xerror.attr('d', path);\n            } else xerror.remove();\n        });\n    });\n};\n\n// compute the coordinates of the error-bar objects\nfunction errorCoords(d, xa, ya) {\n    var out = {\n        x: xa.c2p(d.x),\n        y: ya.c2p(d.y)\n    };\n\n    // calculate the error bar size and hat and shoe locations\n    if(d.yh !== undefined) {\n        out.yh = ya.c2p(d.yh);\n        out.ys = ya.c2p(d.ys);\n\n        // if the shoes go off-scale (ie log scale, error bars past zero)\n        // clip the bar and hide the shoes\n        if(!isNumeric(out.ys)) {\n            out.noYS = true;\n            out.ys = ya.c2p(d.ys, true);\n        }\n    }\n\n    if(d.xh !== undefined) {\n        out.xh = xa.c2p(d.xh);\n        out.xs = xa.c2p(d.xs);\n\n        if(!isNumeric(out.xs)) {\n            out.noXS = true;\n            out.xs = xa.c2p(d.xs, true);\n        }\n    }\n\n    return out;\n}\n"]},"metadata":{},"sourceType":"script"}