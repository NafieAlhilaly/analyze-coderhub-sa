{"ast":null,"code":"// (c) Copyright 2016, Sean Connelly (@voidqk), http://syntheti.cc\n// MIT License\n// Project Home: https://github.com/voidqk/polybooljs\n//\n// filter a list of segments based on boolean operations\n//\nfunction select(segments, selection, buildLog) {\n  var result = [];\n  segments.forEach(function (seg) {\n    var index = (seg.myFill.above ? 8 : 0) + (seg.myFill.below ? 4 : 0) + (seg.otherFill && seg.otherFill.above ? 2 : 0) + (seg.otherFill && seg.otherFill.below ? 1 : 0);\n\n    if (selection[index] !== 0) {\n      // copy the segment to the results, while also calculating the fill status\n      result.push({\n        id: buildLog ? buildLog.segmentId() : -1,\n        start: seg.start,\n        end: seg.end,\n        myFill: {\n          above: selection[index] === 1,\n          // 1 if filled above\n          below: selection[index] === 2 // 2 if filled below\n\n        },\n        otherFill: null\n      });\n    }\n  });\n  if (buildLog) buildLog.selected(result);\n  return result;\n}\n\nvar SegmentSelector = {\n  union: function (segments, buildLog) {\n    // primary | secondary\n    // above1 below1 above2 below2    Keep?               Value\n    //    0      0      0      0   =>   no                  0\n    //    0      0      0      1   =>   yes filled below    2\n    //    0      0      1      0   =>   yes filled above    1\n    //    0      0      1      1   =>   no                  0\n    //    0      1      0      0   =>   yes filled below    2\n    //    0      1      0      1   =>   yes filled below    2\n    //    0      1      1      0   =>   no                  0\n    //    0      1      1      1   =>   no                  0\n    //    1      0      0      0   =>   yes filled above    1\n    //    1      0      0      1   =>   no                  0\n    //    1      0      1      0   =>   yes filled above    1\n    //    1      0      1      1   =>   no                  0\n    //    1      1      0      0   =>   no                  0\n    //    1      1      0      1   =>   no                  0\n    //    1      1      1      0   =>   no                  0\n    //    1      1      1      1   =>   no                  0\n    return select(segments, [0, 2, 1, 0, 2, 2, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], buildLog);\n  },\n  intersect: function (segments, buildLog) {\n    // primary & secondary\n    // above1 below1 above2 below2    Keep?               Value\n    //    0      0      0      0   =>   no                  0\n    //    0      0      0      1   =>   no                  0\n    //    0      0      1      0   =>   no                  0\n    //    0      0      1      1   =>   no                  0\n    //    0      1      0      0   =>   no                  0\n    //    0      1      0      1   =>   yes filled below    2\n    //    0      1      1      0   =>   no                  0\n    //    0      1      1      1   =>   yes filled below    2\n    //    1      0      0      0   =>   no                  0\n    //    1      0      0      1   =>   no                  0\n    //    1      0      1      0   =>   yes filled above    1\n    //    1      0      1      1   =>   yes filled above    1\n    //    1      1      0      0   =>   no                  0\n    //    1      1      0      1   =>   yes filled below    2\n    //    1      1      1      0   =>   yes filled above    1\n    //    1      1      1      1   =>   no                  0\n    return select(segments, [0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 1, 1, 0, 2, 1, 0], buildLog);\n  },\n  difference: function (segments, buildLog) {\n    // primary - secondary\n    // above1 below1 above2 below2    Keep?               Value\n    //    0      0      0      0   =>   no                  0\n    //    0      0      0      1   =>   no                  0\n    //    0      0      1      0   =>   no                  0\n    //    0      0      1      1   =>   no                  0\n    //    0      1      0      0   =>   yes filled below    2\n    //    0      1      0      1   =>   no                  0\n    //    0      1      1      0   =>   yes filled below    2\n    //    0      1      1      1   =>   no                  0\n    //    1      0      0      0   =>   yes filled above    1\n    //    1      0      0      1   =>   yes filled above    1\n    //    1      0      1      0   =>   no                  0\n    //    1      0      1      1   =>   no                  0\n    //    1      1      0      0   =>   no                  0\n    //    1      1      0      1   =>   yes filled above    1\n    //    1      1      1      0   =>   yes filled below    2\n    //    1      1      1      1   =>   no                  0\n    return select(segments, [0, 0, 0, 0, 2, 0, 2, 0, 1, 1, 0, 0, 0, 1, 2, 0], buildLog);\n  },\n  differenceRev: function (segments, buildLog) {\n    // secondary - primary\n    // above1 below1 above2 below2    Keep?               Value\n    //    0      0      0      0   =>   no                  0\n    //    0      0      0      1   =>   yes filled below    2\n    //    0      0      1      0   =>   yes filled above    1\n    //    0      0      1      1   =>   no                  0\n    //    0      1      0      0   =>   no                  0\n    //    0      1      0      1   =>   no                  0\n    //    0      1      1      0   =>   yes filled above    1\n    //    0      1      1      1   =>   yes filled above    1\n    //    1      0      0      0   =>   no                  0\n    //    1      0      0      1   =>   yes filled below    2\n    //    1      0      1      0   =>   no                  0\n    //    1      0      1      1   =>   yes filled below    2\n    //    1      1      0      0   =>   no                  0\n    //    1      1      0      1   =>   no                  0\n    //    1      1      1      0   =>   no                  0\n    //    1      1      1      1   =>   no                  0\n    return select(segments, [0, 2, 1, 0, 0, 0, 1, 1, 0, 2, 0, 2, 0, 0, 0, 0], buildLog);\n  },\n  xor: function (segments, buildLog) {\n    // primary ^ secondary\n    // above1 below1 above2 below2    Keep?               Value\n    //    0      0      0      0   =>   no                  0\n    //    0      0      0      1   =>   yes filled below    2\n    //    0      0      1      0   =>   yes filled above    1\n    //    0      0      1      1   =>   no                  0\n    //    0      1      0      0   =>   yes filled below    2\n    //    0      1      0      1   =>   no                  0\n    //    0      1      1      0   =>   no                  0\n    //    0      1      1      1   =>   yes filled above    1\n    //    1      0      0      0   =>   yes filled above    1\n    //    1      0      0      1   =>   no                  0\n    //    1      0      1      0   =>   no                  0\n    //    1      0      1      1   =>   yes filled below    2\n    //    1      1      0      0   =>   no                  0\n    //    1      1      0      1   =>   yes filled above    1\n    //    1      1      1      0   =>   yes filled below    2\n    //    1      1      1      1   =>   no                  0\n    return select(segments, [0, 2, 1, 0, 2, 0, 0, 1, 1, 0, 0, 2, 0, 1, 2, 0], buildLog);\n  }\n};\nmodule.exports = SegmentSelector;","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/polybooljs/lib/segment-selector.js"],"names":["select","segments","selection","buildLog","result","forEach","seg","index","myFill","above","below","otherFill","push","id","segmentId","start","end","selected","SegmentSelector","union","intersect","difference","differenceRev","xor","module","exports"],"mappings":"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","sourcesContent":["// (c) Copyright 2016, Sean Connelly (@voidqk), http://syntheti.cc\n// MIT License\n// Project Home: https://github.com/voidqk/polybooljs\n\n//\n// filter a list of segments based on boolean operations\n//\n\nfunction select(segments, selection, buildLog){\n\tvar result = [];\n\tsegments.forEach(function(seg){\n\t\tvar index =\n\t\t\t(seg.myFill.above ? 8 : 0) +\n\t\t\t(seg.myFill.below ? 4 : 0) +\n\t\t\t((seg.otherFill && seg.otherFill.above) ? 2 : 0) +\n\t\t\t((seg.otherFill && seg.otherFill.below) ? 1 : 0);\n\t\tif (selection[index] !== 0){\n\t\t\t// copy the segment to the results, while also calculating the fill status\n\t\t\tresult.push({\n\t\t\t\tid: buildLog ? buildLog.segmentId() : -1,\n\t\t\t\tstart: seg.start,\n\t\t\t\tend: seg.end,\n\t\t\t\tmyFill: {\n\t\t\t\t\tabove: selection[index] === 1, // 1 if filled above\n\t\t\t\t\tbelow: selection[index] === 2  // 2 if filled below\n\t\t\t\t},\n\t\t\t\totherFill: null\n\t\t\t});\n\t\t}\n\t});\n\n\tif (buildLog)\n\t\tbuildLog.selected(result);\n\n\treturn result;\n}\n\nvar SegmentSelector = {\n\tunion: function(segments, buildLog){ // primary | secondary\n\t\t// above1 below1 above2 below2    Keep?               Value\n\t\t//    0      0      0      0   =>   no                  0\n\t\t//    0      0      0      1   =>   yes filled below    2\n\t\t//    0      0      1      0   =>   yes filled above    1\n\t\t//    0      0      1      1   =>   no                  0\n\t\t//    0      1      0      0   =>   yes filled below    2\n\t\t//    0      1      0      1   =>   yes filled below    2\n\t\t//    0      1      1      0   =>   no                  0\n\t\t//    0      1      1      1   =>   no                  0\n\t\t//    1      0      0      0   =>   yes filled above    1\n\t\t//    1      0      0      1   =>   no                  0\n\t\t//    1      0      1      0   =>   yes filled above    1\n\t\t//    1      0      1      1   =>   no                  0\n\t\t//    1      1      0      0   =>   no                  0\n\t\t//    1      1      0      1   =>   no                  0\n\t\t//    1      1      1      0   =>   no                  0\n\t\t//    1      1      1      1   =>   no                  0\n\t\treturn select(segments, [\n\t\t\t0, 2, 1, 0,\n\t\t\t2, 2, 0, 0,\n\t\t\t1, 0, 1, 0,\n\t\t\t0, 0, 0, 0\n\t\t], buildLog);\n\t},\n\tintersect: function(segments, buildLog){ // primary & secondary\n\t\t// above1 below1 above2 below2    Keep?               Value\n\t\t//    0      0      0      0   =>   no                  0\n\t\t//    0      0      0      1   =>   no                  0\n\t\t//    0      0      1      0   =>   no                  0\n\t\t//    0      0      1      1   =>   no                  0\n\t\t//    0      1      0      0   =>   no                  0\n\t\t//    0      1      0      1   =>   yes filled below    2\n\t\t//    0      1      1      0   =>   no                  0\n\t\t//    0      1      1      1   =>   yes filled below    2\n\t\t//    1      0      0      0   =>   no                  0\n\t\t//    1      0      0      1   =>   no                  0\n\t\t//    1      0      1      0   =>   yes filled above    1\n\t\t//    1      0      1      1   =>   yes filled above    1\n\t\t//    1      1      0      0   =>   no                  0\n\t\t//    1      1      0      1   =>   yes filled below    2\n\t\t//    1      1      1      0   =>   yes filled above    1\n\t\t//    1      1      1      1   =>   no                  0\n\t\treturn select(segments, [\n\t\t\t0, 0, 0, 0,\n\t\t\t0, 2, 0, 2,\n\t\t\t0, 0, 1, 1,\n\t\t\t0, 2, 1, 0\n\t\t], buildLog);\n\t},\n\tdifference: function(segments, buildLog){ // primary - secondary\n\t\t// above1 below1 above2 below2    Keep?               Value\n\t\t//    0      0      0      0   =>   no                  0\n\t\t//    0      0      0      1   =>   no                  0\n\t\t//    0      0      1      0   =>   no                  0\n\t\t//    0      0      1      1   =>   no                  0\n\t\t//    0      1      0      0   =>   yes filled below    2\n\t\t//    0      1      0      1   =>   no                  0\n\t\t//    0      1      1      0   =>   yes filled below    2\n\t\t//    0      1      1      1   =>   no                  0\n\t\t//    1      0      0      0   =>   yes filled above    1\n\t\t//    1      0      0      1   =>   yes filled above    1\n\t\t//    1      0      1      0   =>   no                  0\n\t\t//    1      0      1      1   =>   no                  0\n\t\t//    1      1      0      0   =>   no                  0\n\t\t//    1      1      0      1   =>   yes filled above    1\n\t\t//    1      1      1      0   =>   yes filled below    2\n\t\t//    1      1      1      1   =>   no                  0\n\t\treturn select(segments, [\n\t\t\t0, 0, 0, 0,\n\t\t\t2, 0, 2, 0,\n\t\t\t1, 1, 0, 0,\n\t\t\t0, 1, 2, 0\n\t\t], buildLog);\n\t},\n\tdifferenceRev: function(segments, buildLog){ // secondary - primary\n\t\t// above1 below1 above2 below2    Keep?               Value\n\t\t//    0      0      0      0   =>   no                  0\n\t\t//    0      0      0      1   =>   yes filled below    2\n\t\t//    0      0      1      0   =>   yes filled above    1\n\t\t//    0      0      1      1   =>   no                  0\n\t\t//    0      1      0      0   =>   no                  0\n\t\t//    0      1      0      1   =>   no                  0\n\t\t//    0      1      1      0   =>   yes filled above    1\n\t\t//    0      1      1      1   =>   yes filled above    1\n\t\t//    1      0      0      0   =>   no                  0\n\t\t//    1      0      0      1   =>   yes filled below    2\n\t\t//    1      0      1      0   =>   no                  0\n\t\t//    1      0      1      1   =>   yes filled below    2\n\t\t//    1      1      0      0   =>   no                  0\n\t\t//    1      1      0      1   =>   no                  0\n\t\t//    1      1      1      0   =>   no                  0\n\t\t//    1      1      1      1   =>   no                  0\n\t\treturn select(segments, [\n\t\t\t0, 2, 1, 0,\n\t\t\t0, 0, 1, 1,\n\t\t\t0, 2, 0, 2,\n\t\t\t0, 0, 0, 0\n\t\t], buildLog);\n\t},\n\txor: function(segments, buildLog){ // primary ^ secondary\n\t\t// above1 below1 above2 below2    Keep?               Value\n\t\t//    0      0      0      0   =>   no                  0\n\t\t//    0      0      0      1   =>   yes filled below    2\n\t\t//    0      0      1      0   =>   yes filled above    1\n\t\t//    0      0      1      1   =>   no                  0\n\t\t//    0      1      0      0   =>   yes filled below    2\n\t\t//    0      1      0      1   =>   no                  0\n\t\t//    0      1      1      0   =>   no                  0\n\t\t//    0      1      1      1   =>   yes filled above    1\n\t\t//    1      0      0      0   =>   yes filled above    1\n\t\t//    1      0      0      1   =>   no                  0\n\t\t//    1      0      1      0   =>   no                  0\n\t\t//    1      0      1      1   =>   yes filled below    2\n\t\t//    1      1      0      0   =>   no                  0\n\t\t//    1      1      0      1   =>   yes filled above    1\n\t\t//    1      1      1      0   =>   yes filled below    2\n\t\t//    1      1      1      1   =>   no                  0\n\t\treturn select(segments, [\n\t\t\t0, 2, 1, 0,\n\t\t\t2, 0, 0, 1,\n\t\t\t1, 0, 0, 2,\n\t\t\t0, 1, 2, 0\n\t\t], buildLog);\n\t}\n};\n\nmodule.exports = SegmentSelector;\n"]},"metadata":{},"sourceType":"script"}