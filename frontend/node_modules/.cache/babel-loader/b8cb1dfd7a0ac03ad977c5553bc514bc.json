{"ast":null,"code":"'use strict';\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nvar extendDeep = require('../../lib/extend').extendDeep;\n\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\n\nvar fontAttrs = require('../../plots/font_attributes');\n\nvar colorAttrs = require('../../components/color/attributes');\n\nvar domainAttrs = require('../../plots/domain').attributes;\n\nvar axesAttrs = require('../../plots/cartesian/layout_attributes');\n\nvar templatedArray = require('../../plot_api/plot_template').templatedArray;\n\nvar delta = require('../../constants/delta.js');\n\nvar descriptionOnlyNumbers = require('../../plots/cartesian/axis_format_attributes').descriptionOnlyNumbers;\n\nvar textFontAttrs = fontAttrs({\n  editType: 'plot',\n  colorEditType: 'plot'\n});\nvar gaugeBarAttrs = {\n  color: {\n    valType: 'color',\n    editType: 'plot',\n    description: ['Sets the background color of the arc.'].join(' ')\n  },\n  line: {\n    color: {\n      valType: 'color',\n      dflt: colorAttrs.defaultLine,\n      editType: 'plot',\n      description: ['Sets the color of the line enclosing each sector.'].join(' ')\n    },\n    width: {\n      valType: 'number',\n      min: 0,\n      dflt: 0,\n      editType: 'plot',\n      description: ['Sets the width (in px) of the line enclosing each sector.'].join(' ')\n    },\n    editType: 'calc'\n  },\n  thickness: {\n    valType: 'number',\n    min: 0,\n    max: 1,\n    dflt: 1,\n    editType: 'plot',\n    description: ['Sets the thickness of the bar as a fraction of the total thickness of the gauge.'].join(' ')\n  },\n  editType: 'calc'\n};\nvar rangeAttr = {\n  valType: 'info_array',\n  items: [{\n    valType: 'number',\n    editType: 'plot'\n  }, {\n    valType: 'number',\n    editType: 'plot'\n  }],\n  editType: 'plot',\n  description: ['Sets the range of this axis.' // TODO: add support for other axis type\n  // 'If the axis `type` is *log*, then you must take the log of your',\n  // 'desired range (e.g. to set the range from 1 to 100,',\n  // 'set the range from 0 to 2).',\n  // 'If the axis `type` is *date*, it should be date strings,',\n  // 'like date data, though Date objects and unix milliseconds',\n  // 'will be accepted and converted to strings.',\n  // 'If the axis `type` is *category*, it should be numbers,',\n  // 'using the scale where each category is assigned a serial',\n  // 'number from zero in the order it appears.'\n  ].join(' ')\n};\nvar stepsAttrs = templatedArray('step', extendDeep({}, gaugeBarAttrs, {\n  range: rangeAttr\n}));\nmodule.exports = {\n  mode: {\n    valType: 'flaglist',\n    editType: 'calc',\n    flags: ['number', 'delta', 'gauge'],\n    dflt: 'number',\n    description: ['Determines how the value is displayed on the graph.', '`number` displays the value numerically in text.', '`delta` displays the difference to a reference value in text.', 'Finally, `gauge` displays the value graphically on an axis.'].join(' ')\n  },\n  value: {\n    valType: 'number',\n    editType: 'calc',\n    anim: true,\n    description: ['Sets the number to be displayed.'].join(' ')\n  },\n  align: {\n    valType: 'enumerated',\n    values: ['left', 'center', 'right'],\n    editType: 'plot',\n    description: ['Sets the horizontal alignment of the `text` within the box.', 'Note that this attribute has no effect if an angular gauge is displayed:', 'in this case, it is always centered'].join(' ')\n  },\n  // position\n  domain: domainAttrs({\n    name: 'indicator',\n    trace: true,\n    editType: 'calc'\n  }),\n  title: {\n    text: {\n      valType: 'string',\n      editType: 'plot',\n      description: ['Sets the title of this indicator.'].join(' ')\n    },\n    align: {\n      valType: 'enumerated',\n      values: ['left', 'center', 'right'],\n      editType: 'plot',\n      description: ['Sets the horizontal alignment of the title.', 'It defaults to `center` except for bullet charts', 'for which it defaults to right.'].join(' ')\n    },\n    font: extendFlat({}, textFontAttrs, {\n      description: ['Set the font used to display the title'].join(' ')\n    }),\n    editType: 'plot'\n  },\n  number: {\n    valueformat: {\n      valType: 'string',\n      dflt: '',\n      editType: 'plot',\n      description: descriptionOnlyNumbers('value')\n    },\n    font: extendFlat({}, textFontAttrs, {\n      description: ['Set the font used to display main number'].join(' ')\n    }),\n    prefix: {\n      valType: 'string',\n      dflt: '',\n      editType: 'plot',\n      description: ['Sets a prefix appearing before the number.'].join(' ')\n    },\n    suffix: {\n      valType: 'string',\n      dflt: '',\n      editType: 'plot',\n      description: ['Sets a suffix appearing next to the number.'].join(' ')\n    },\n    editType: 'plot'\n  },\n  delta: {\n    reference: {\n      valType: 'number',\n      editType: 'calc',\n      description: ['Sets the reference value to compute the delta.', 'By default, it is set to the current value.'].join(' ')\n    },\n    position: {\n      valType: 'enumerated',\n      values: ['top', 'bottom', 'left', 'right'],\n      dflt: 'bottom',\n      editType: 'plot',\n      description: ['Sets the position of delta with respect to the number.'].join(' ')\n    },\n    relative: {\n      valType: 'boolean',\n      editType: 'plot',\n      dflt: false,\n      description: ['Show relative change'].join(' ')\n    },\n    valueformat: {\n      valType: 'string',\n      editType: 'plot',\n      description: descriptionOnlyNumbers('value')\n    },\n    increasing: {\n      symbol: {\n        valType: 'string',\n        dflt: delta.INCREASING.SYMBOL,\n        editType: 'plot',\n        description: ['Sets the symbol to display for increasing value'].join(' ')\n      },\n      color: {\n        valType: 'color',\n        dflt: delta.INCREASING.COLOR,\n        editType: 'plot',\n        description: ['Sets the color for increasing value.'].join(' ')\n      },\n      // TODO: add attribute to show sign\n      editType: 'plot'\n    },\n    decreasing: {\n      symbol: {\n        valType: 'string',\n        dflt: delta.DECREASING.SYMBOL,\n        editType: 'plot',\n        description: ['Sets the symbol to display for increasing value'].join(' ')\n      },\n      color: {\n        valType: 'color',\n        dflt: delta.DECREASING.COLOR,\n        editType: 'plot',\n        description: ['Sets the color for increasing value.'].join(' ')\n      },\n      // TODO: add attribute to hide sign\n      editType: 'plot'\n    },\n    font: extendFlat({}, textFontAttrs, {\n      description: ['Set the font used to display the delta'].join(' ')\n    }),\n    editType: 'calc'\n  },\n  gauge: {\n    shape: {\n      valType: 'enumerated',\n      editType: 'plot',\n      dflt: 'angular',\n      values: ['angular', 'bullet'],\n      description: ['Set the shape of the gauge'].join(' ')\n    },\n    bar: extendDeep({}, gaugeBarAttrs, {\n      color: {\n        dflt: 'green'\n      },\n      description: ['Set the appearance of the gauge\\'s value'].join(' ')\n    }),\n    // Background of the gauge\n    bgcolor: {\n      valType: 'color',\n      editType: 'plot',\n      description: 'Sets the gauge background color.'\n    },\n    bordercolor: {\n      valType: 'color',\n      dflt: colorAttrs.defaultLine,\n      editType: 'plot',\n      description: 'Sets the color of the border enclosing the gauge.'\n    },\n    borderwidth: {\n      valType: 'number',\n      min: 0,\n      dflt: 1,\n      editType: 'plot',\n      description: 'Sets the width (in px) of the border enclosing the gauge.'\n    },\n    axis: overrideAll({\n      range: rangeAttr,\n      visible: extendFlat({}, axesAttrs.visible, {\n        dflt: true\n      }),\n      // tick and title properties named and function exactly as in axes\n      tickmode: axesAttrs.tickmode,\n      nticks: axesAttrs.nticks,\n      tick0: axesAttrs.tick0,\n      dtick: axesAttrs.dtick,\n      tickvals: axesAttrs.tickvals,\n      ticktext: axesAttrs.ticktext,\n      ticks: extendFlat({}, axesAttrs.ticks, {\n        dflt: 'outside'\n      }),\n      ticklen: axesAttrs.ticklen,\n      tickwidth: axesAttrs.tickwidth,\n      tickcolor: axesAttrs.tickcolor,\n      showticklabels: axesAttrs.showticklabels,\n      tickfont: fontAttrs({\n        description: 'Sets the color bar\\'s tick label font'\n      }),\n      tickangle: axesAttrs.tickangle,\n      tickformat: axesAttrs.tickformat,\n      tickformatstops: axesAttrs.tickformatstops,\n      tickprefix: axesAttrs.tickprefix,\n      showtickprefix: axesAttrs.showtickprefix,\n      ticksuffix: axesAttrs.ticksuffix,\n      showticksuffix: axesAttrs.showticksuffix,\n      separatethousands: axesAttrs.separatethousands,\n      exponentformat: axesAttrs.exponentformat,\n      minexponent: axesAttrs.minexponent,\n      showexponent: axesAttrs.showexponent,\n      editType: 'plot'\n    }, 'plot'),\n    // Steps (or ranges) and thresholds\n    steps: stepsAttrs,\n    threshold: {\n      line: {\n        color: extendFlat({}, gaugeBarAttrs.line.color, {\n          description: ['Sets the color of the threshold line.'].join(' ')\n        }),\n        width: extendFlat({}, gaugeBarAttrs.line.width, {\n          dflt: 1,\n          description: ['Sets the width (in px) of the threshold line.'].join(' ')\n        }),\n        editType: 'plot'\n      },\n      thickness: extendFlat({}, gaugeBarAttrs.thickness, {\n        dflt: 0.85,\n        description: ['Sets the thickness of the threshold line as a fraction of the thickness of the gauge.'].join(' ')\n      }),\n      value: {\n        valType: 'number',\n        editType: 'calc',\n        dflt: false,\n        description: ['Sets a treshold value drawn as a line.'].join(' ')\n      },\n      editType: 'plot'\n    },\n    description: 'The gauge of the Indicator plot.',\n    editType: 'plot' // TODO: in future version, add marker: (bar|needle)\n\n  }\n};","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/plotly.js/src/traces/indicator/attributes.js"],"names":["extendFlat","require","extendDeep","overrideAll","fontAttrs","colorAttrs","domainAttrs","attributes","axesAttrs","templatedArray","delta","descriptionOnlyNumbers","textFontAttrs","editType","colorEditType","gaugeBarAttrs","color","valType","description","join","line","dflt","defaultLine","width","min","thickness","max","rangeAttr","items","stepsAttrs","range","module","exports","mode","flags","value","anim","align","values","domain","name","trace","title","text","font","number","valueformat","prefix","suffix","reference","position","relative","increasing","symbol","INCREASING","SYMBOL","COLOR","decreasing","DECREASING","gauge","shape","bar","bgcolor","bordercolor","borderwidth","axis","visible","tickmode","nticks","tick0","dtick","tickvals","ticktext","ticks","ticklen","tickwidth","tickcolor","showticklabels","tickfont","tickangle","tickformat","tickformatstops","tickprefix","showtickprefix","ticksuffix","showticksuffix","separatethousands","exponentformat","minexponent","showexponent","steps","threshold"],"mappings":"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","sourcesContent":["'use strict';\n\nvar extendFlat = require('../../lib/extend').extendFlat;\nvar extendDeep = require('../../lib/extend').extendDeep;\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\nvar fontAttrs = require('../../plots/font_attributes');\nvar colorAttrs = require('../../components/color/attributes');\nvar domainAttrs = require('../../plots/domain').attributes;\nvar axesAttrs = require('../../plots/cartesian/layout_attributes');\nvar templatedArray = require('../../plot_api/plot_template').templatedArray;\nvar delta = require('../../constants/delta.js');\nvar descriptionOnlyNumbers = require('../../plots/cartesian/axis_format_attributes').descriptionOnlyNumbers;\n\nvar textFontAttrs = fontAttrs({\n    editType: 'plot',\n    colorEditType: 'plot'\n});\n\nvar gaugeBarAttrs = {\n    color: {\n        valType: 'color',\n        editType: 'plot',\n        description: [\n            'Sets the background color of the arc.'\n        ].join(' ')\n    },\n    line: {\n        color: {\n            valType: 'color',\n            dflt: colorAttrs.defaultLine,\n            editType: 'plot',\n            description: [\n                'Sets the color of the line enclosing each sector.'\n            ].join(' ')\n        },\n        width: {\n            valType: 'number',\n            min: 0,\n            dflt: 0,\n            editType: 'plot',\n            description: [\n                'Sets the width (in px) of the line enclosing each sector.'\n            ].join(' ')\n        },\n        editType: 'calc'\n    },\n    thickness: {\n        valType: 'number',\n        min: 0,\n        max: 1,\n        dflt: 1,\n        editType: 'plot',\n        description: [\n            'Sets the thickness of the bar as a fraction of the total thickness of the gauge.'\n        ].join(' ')\n    },\n    editType: 'calc'\n};\n\nvar rangeAttr = {\n    valType: 'info_array',\n    items: [\n            {valType: 'number', editType: 'plot'},\n            {valType: 'number', editType: 'plot'}\n    ],\n    editType: 'plot',\n    description: [\n        'Sets the range of this axis.'\n        // TODO: add support for other axis type\n        // 'If the axis `type` is *log*, then you must take the log of your',\n        // 'desired range (e.g. to set the range from 1 to 100,',\n        // 'set the range from 0 to 2).',\n        // 'If the axis `type` is *date*, it should be date strings,',\n        // 'like date data, though Date objects and unix milliseconds',\n        // 'will be accepted and converted to strings.',\n        // 'If the axis `type` is *category*, it should be numbers,',\n        // 'using the scale where each category is assigned a serial',\n        // 'number from zero in the order it appears.'\n    ].join(' ')\n};\n\nvar stepsAttrs = templatedArray('step', extendDeep({}, gaugeBarAttrs, {\n    range: rangeAttr\n}));\n\nmodule.exports = {\n    mode: {\n        valType: 'flaglist',\n        editType: 'calc',\n        flags: ['number', 'delta', 'gauge'],\n        dflt: 'number',\n        description: [\n            'Determines how the value is displayed on the graph.',\n            '`number` displays the value numerically in text.',\n            '`delta` displays the difference to a reference value in text.',\n            'Finally, `gauge` displays the value graphically on an axis.',\n        ].join(' ')\n    },\n    value: {\n        valType: 'number',\n        editType: 'calc',\n        anim: true,\n        description: [\n            'Sets the number to be displayed.'\n        ].join(' ')\n    },\n    align: {\n        valType: 'enumerated',\n        values: ['left', 'center', 'right'],\n        editType: 'plot',\n        description: [\n            'Sets the horizontal alignment of the `text` within the box.',\n            'Note that this attribute has no effect if an angular gauge is displayed:',\n            'in this case, it is always centered'\n        ].join(' ')\n    },\n    // position\n    domain: domainAttrs({name: 'indicator', trace: true, editType: 'calc'}),\n\n    title: {\n        text: {\n            valType: 'string',\n            editType: 'plot',\n            description: [\n                'Sets the title of this indicator.'\n            ].join(' ')\n        },\n        align: {\n            valType: 'enumerated',\n            values: ['left', 'center', 'right'],\n            editType: 'plot',\n            description: [\n                'Sets the horizontal alignment of the title.',\n                'It defaults to `center` except for bullet charts',\n                'for which it defaults to right.'\n            ].join(' ')\n        },\n        font: extendFlat({}, textFontAttrs, {\n            description: [\n                'Set the font used to display the title'\n            ].join(' ')\n        }),\n        editType: 'plot'\n    },\n    number: {\n        valueformat: {\n            valType: 'string',\n            dflt: '',\n            editType: 'plot',\n            description: descriptionOnlyNumbers('value')\n        },\n        font: extendFlat({}, textFontAttrs, {\n            description: [\n                'Set the font used to display main number'\n            ].join(' ')\n        }),\n        prefix: {\n            valType: 'string',\n            dflt: '',\n            editType: 'plot',\n            description: [\n                'Sets a prefix appearing before the number.'\n            ].join(' ')\n        },\n        suffix: {\n            valType: 'string',\n            dflt: '',\n            editType: 'plot',\n            description: [\n                'Sets a suffix appearing next to the number.'\n            ].join(' ')\n        },\n        editType: 'plot'\n    },\n    delta: {\n        reference: {\n            valType: 'number',\n            editType: 'calc',\n            description: [\n                'Sets the reference value to compute the delta.',\n                'By default, it is set to the current value.'\n            ].join(' ')\n        },\n        position: {\n            valType: 'enumerated',\n            values: ['top', 'bottom', 'left', 'right'],\n            dflt: 'bottom',\n            editType: 'plot',\n            description: [\n                'Sets the position of delta with respect to the number.'\n            ].join(' ')\n        },\n        relative: {\n            valType: 'boolean',\n            editType: 'plot',\n            dflt: false,\n            description: [\n                'Show relative change'\n            ].join(' ')\n        },\n        valueformat: {\n            valType: 'string',\n            editType: 'plot',\n            description: descriptionOnlyNumbers('value')\n        },\n        increasing: {\n            symbol: {\n                valType: 'string',\n                dflt: delta.INCREASING.SYMBOL,\n                editType: 'plot',\n                description: [\n                    'Sets the symbol to display for increasing value'\n                ].join(' ')\n            },\n            color: {\n                valType: 'color',\n                dflt: delta.INCREASING.COLOR,\n                editType: 'plot',\n                description: [\n                    'Sets the color for increasing value.'\n                ].join(' ')\n            },\n            // TODO: add attribute to show sign\n            editType: 'plot'\n        },\n        decreasing: {\n            symbol: {\n                valType: 'string',\n                dflt: delta.DECREASING.SYMBOL,\n                editType: 'plot',\n                description: [\n                    'Sets the symbol to display for increasing value'\n                ].join(' ')\n            },\n            color: {\n                valType: 'color',\n                dflt: delta.DECREASING.COLOR,\n                editType: 'plot',\n                description: [\n                    'Sets the color for increasing value.'\n                ].join(' ')\n            },\n            // TODO: add attribute to hide sign\n            editType: 'plot'\n        },\n        font: extendFlat({}, textFontAttrs, {\n            description: [\n                'Set the font used to display the delta'\n            ].join(' ')\n        }),\n        editType: 'calc'\n    },\n    gauge: {\n        shape: {\n            valType: 'enumerated',\n            editType: 'plot',\n            dflt: 'angular',\n            values: ['angular', 'bullet'],\n            description: [\n                'Set the shape of the gauge'\n            ].join(' ')\n        },\n        bar: extendDeep({}, gaugeBarAttrs, {\n            color: {dflt: 'green'},\n            description: [\n                'Set the appearance of the gauge\\'s value'\n            ].join(' ')\n        }),\n        // Background of the gauge\n        bgcolor: {\n            valType: 'color',\n            editType: 'plot',\n            description: 'Sets the gauge background color.'\n        },\n        bordercolor: {\n            valType: 'color',\n            dflt: colorAttrs.defaultLine,\n            editType: 'plot',\n            description: 'Sets the color of the border enclosing the gauge.'\n        },\n        borderwidth: {\n            valType: 'number',\n            min: 0,\n            dflt: 1,\n            editType: 'plot',\n            description: 'Sets the width (in px) of the border enclosing the gauge.'\n        },\n        axis: overrideAll({\n            range: rangeAttr,\n            visible: extendFlat({}, axesAttrs.visible, {\n                dflt: true\n            }),\n            // tick and title properties named and function exactly as in axes\n            tickmode: axesAttrs.tickmode,\n            nticks: axesAttrs.nticks,\n            tick0: axesAttrs.tick0,\n            dtick: axesAttrs.dtick,\n            tickvals: axesAttrs.tickvals,\n            ticktext: axesAttrs.ticktext,\n            ticks: extendFlat({}, axesAttrs.ticks, {dflt: 'outside'}),\n            ticklen: axesAttrs.ticklen,\n            tickwidth: axesAttrs.tickwidth,\n            tickcolor: axesAttrs.tickcolor,\n            showticklabels: axesAttrs.showticklabels,\n            tickfont: fontAttrs({\n                description: 'Sets the color bar\\'s tick label font'\n            }),\n            tickangle: axesAttrs.tickangle,\n            tickformat: axesAttrs.tickformat,\n            tickformatstops: axesAttrs.tickformatstops,\n            tickprefix: axesAttrs.tickprefix,\n            showtickprefix: axesAttrs.showtickprefix,\n            ticksuffix: axesAttrs.ticksuffix,\n            showticksuffix: axesAttrs.showticksuffix,\n            separatethousands: axesAttrs.separatethousands,\n            exponentformat: axesAttrs.exponentformat,\n            minexponent: axesAttrs.minexponent,\n            showexponent: axesAttrs.showexponent,\n            editType: 'plot'\n        }, 'plot'),\n        // Steps (or ranges) and thresholds\n        steps: stepsAttrs,\n        threshold: {\n            line: {\n                color: extendFlat({}, gaugeBarAttrs.line.color, {\n                    description: [\n                        'Sets the color of the threshold line.'\n                    ].join(' ')\n                }),\n                width: extendFlat({}, gaugeBarAttrs.line.width, {\n                    dflt: 1,\n                    description: [\n                        'Sets the width (in px) of the threshold line.'\n                    ].join(' ')\n                }),\n                editType: 'plot'\n            },\n            thickness: extendFlat({}, gaugeBarAttrs.thickness, {\n                dflt: 0.85,\n                description: [\n                    'Sets the thickness of the threshold line as a fraction of the thickness of the gauge.'\n                ].join(' ')\n            }),\n            value: {\n                valType: 'number',\n                editType: 'calc',\n                dflt: false,\n                description: [\n                    'Sets a treshold value drawn as a line.'\n                ].join(' ')\n            },\n            editType: 'plot'\n        },\n        description: 'The gauge of the Indicator plot.',\n        editType: 'plot'\n        // TODO: in future version, add marker: (bar|needle)\n    }\n};\n"]},"metadata":{},"sourceType":"script"}