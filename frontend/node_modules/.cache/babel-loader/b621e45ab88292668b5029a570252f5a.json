{"ast":null,"code":"'use strict';\n\nvar showNoWebGlMsg = require('./show_no_webgl_msg'); // Note that this module should be ONLY required into\n// files corresponding to regl trace modules\n// so that bundles with non-regl only don't include\n// regl and all its bytes.\n\n\nvar createRegl = require('regl');\n/**\n * Idempotent version of createRegl. Create regl instances\n * in the correct canvases with the correct attributes and\n * options\n *\n * @param {DOM node or object} gd : graph div object\n * @param {array} extensions : list of extension to pass to createRegl\n *\n * @return {boolean} true if all createRegl calls succeeded, false otherwise\n */\n\n\nmodule.exports = function prepareRegl(gd, extensions) {\n  var fullLayout = gd._fullLayout;\n  var success = true;\n\n  fullLayout._glcanvas.each(function (d) {\n    if (d.regl) return; // only parcoords needs pick layer\n\n    if (d.pick && !fullLayout._has('parcoords')) return;\n\n    try {\n      d.regl = createRegl({\n        canvas: this,\n        attributes: {\n          antialias: !d.pick,\n          preserveDrawingBuffer: true\n        },\n        pixelRatio: gd._context.plotGlPixelRatio || global.devicePixelRatio,\n        extensions: extensions || []\n      });\n    } catch (e) {\n      success = false;\n    }\n\n    if (!d.regl) success = false;\n\n    if (success) {\n      this.addEventListener('webglcontextlost', function (event) {\n        if (gd && gd.emit) {\n          gd.emit('plotly_webglcontextlost', {\n            event: event,\n            layer: d.key\n          });\n        }\n      }, false);\n    }\n  });\n\n  if (!success) {\n    showNoWebGlMsg({\n      container: fullLayout._glcontainer.node()\n    });\n  }\n\n  return success;\n};","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/plotly.js/src/lib/prepare_regl.js"],"names":["showNoWebGlMsg","require","createRegl","module","exports","prepareRegl","gd","extensions","fullLayout","_fullLayout","success","_glcanvas","each","d","regl","pick","_has","canvas","attributes","antialias","preserveDrawingBuffer","pixelRatio","_context","plotGlPixelRatio","global","devicePixelRatio","e","addEventListener","event","emit","layer","key","container","_glcontainer","node"],"mappings":"AAAA;;AAEA,IAAIA,cAAc,GAAGC,OAAO,CAAC,qBAAD,CAA5B,C,CAEA;AACA;AACA;AACA;;;AACA,IAAIC,UAAU,GAAGD,OAAO,CAAC,MAAD,CAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAE,MAAM,CAACC,OAAP,GAAiB,SAASC,WAAT,CAAqBC,EAArB,EAAyBC,UAAzB,EAAqC;AAClD,MAAIC,UAAU,GAAGF,EAAE,CAACG,WAApB;AACA,MAAIC,OAAO,GAAG,IAAd;;AAEAF,EAAAA,UAAU,CAACG,SAAX,CAAqBC,IAArB,CAA0B,UAASC,CAAT,EAAY;AAClC,QAAGA,CAAC,CAACC,IAAL,EAAW,OADuB,CAElC;;AACA,QAAGD,CAAC,CAACE,IAAF,IAAU,CAACP,UAAU,CAACQ,IAAX,CAAgB,WAAhB,CAAd,EAA4C;;AAE5C,QAAI;AACAH,MAAAA,CAAC,CAACC,IAAF,GAASZ,UAAU,CAAC;AAChBe,QAAAA,MAAM,EAAE,IADQ;AAEhBC,QAAAA,UAAU,EAAE;AACRC,UAAAA,SAAS,EAAE,CAACN,CAAC,CAACE,IADN;AAERK,UAAAA,qBAAqB,EAAE;AAFf,SAFI;AAMhBC,QAAAA,UAAU,EAAEf,EAAE,CAACgB,QAAH,CAAYC,gBAAZ,IAAgCC,MAAM,CAACC,gBANnC;AAOhBlB,QAAAA,UAAU,EAAEA,UAAU,IAAI;AAPV,OAAD,CAAnB;AASH,KAVD,CAUE,OAAMmB,CAAN,EAAS;AACPhB,MAAAA,OAAO,GAAG,KAAV;AACH;;AAED,QAAG,CAACG,CAAC,CAACC,IAAN,EAAYJ,OAAO,GAAG,KAAV;;AAEZ,QAAGA,OAAH,EAAY;AACR,WAAKiB,gBAAL,CAAsB,kBAAtB,EAA0C,UAASC,KAAT,EAAgB;AACtD,YAAGtB,EAAE,IAAIA,EAAE,CAACuB,IAAZ,EAAkB;AACdvB,UAAAA,EAAE,CAACuB,IAAH,CAAQ,yBAAR,EAAmC;AAC/BD,YAAAA,KAAK,EAAEA,KADwB;AAE/BE,YAAAA,KAAK,EAAEjB,CAAC,CAACkB;AAFsB,WAAnC;AAIH;AACJ,OAPD,EAOG,KAPH;AAQH;AACJ,GA/BD;;AAiCA,MAAG,CAACrB,OAAJ,EAAa;AACTV,IAAAA,cAAc,CAAC;AAACgC,MAAAA,SAAS,EAAExB,UAAU,CAACyB,YAAX,CAAwBC,IAAxB;AAAZ,KAAD,CAAd;AACH;;AACD,SAAOxB,OAAP;AACH,CAzCD","sourcesContent":["'use strict';\n\nvar showNoWebGlMsg = require('./show_no_webgl_msg');\n\n// Note that this module should be ONLY required into\n// files corresponding to regl trace modules\n// so that bundles with non-regl only don't include\n// regl and all its bytes.\nvar createRegl = require('regl');\n\n/**\n * Idempotent version of createRegl. Create regl instances\n * in the correct canvases with the correct attributes and\n * options\n *\n * @param {DOM node or object} gd : graph div object\n * @param {array} extensions : list of extension to pass to createRegl\n *\n * @return {boolean} true if all createRegl calls succeeded, false otherwise\n */\nmodule.exports = function prepareRegl(gd, extensions) {\n    var fullLayout = gd._fullLayout;\n    var success = true;\n\n    fullLayout._glcanvas.each(function(d) {\n        if(d.regl) return;\n        // only parcoords needs pick layer\n        if(d.pick && !fullLayout._has('parcoords')) return;\n\n        try {\n            d.regl = createRegl({\n                canvas: this,\n                attributes: {\n                    antialias: !d.pick,\n                    preserveDrawingBuffer: true\n                },\n                pixelRatio: gd._context.plotGlPixelRatio || global.devicePixelRatio,\n                extensions: extensions || []\n            });\n        } catch(e) {\n            success = false;\n        }\n\n        if(!d.regl) success = false;\n\n        if(success) {\n            this.addEventListener('webglcontextlost', function(event) {\n                if(gd && gd.emit) {\n                    gd.emit('plotly_webglcontextlost', {\n                        event: event,\n                        layer: d.key\n                    });\n                }\n            }, false);\n        }\n    });\n\n    if(!success) {\n        showNoWebGlMsg({container: fullLayout._glcontainer.node()});\n    }\n    return success;\n};\n"]},"metadata":{},"sourceType":"script"}