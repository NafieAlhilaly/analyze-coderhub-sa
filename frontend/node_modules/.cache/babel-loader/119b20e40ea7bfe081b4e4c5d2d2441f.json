{"ast":null,"code":"'use strict';\n\nvar calcColorscale = require('../scatter/colorscale_calc');\n\nvar calcMarkerSize = require('../scatter/calc').calcMarkerSize;\n\nvar convert = require('../scattergl/convert');\n\nvar Axes = require('../../plots/cartesian/axes');\n\nvar TOO_MANY_POINTS = require('../scattergl/constants').TOO_MANY_POINTS;\n\nmodule.exports = function calc(gd, trace) {\n  var fullLayout = gd._fullLayout;\n  var subplotId = trace.subplot;\n  var radialAxis = fullLayout[subplotId].radialaxis;\n  var angularAxis = fullLayout[subplotId].angularaxis;\n  var rArray = trace._r = radialAxis.makeCalcdata(trace, 'r');\n  var thetaArray = trace._theta = angularAxis.makeCalcdata(trace, 'theta');\n  var len = trace._length;\n  var stash = {};\n  if (len < rArray.length) rArray = rArray.slice(0, len);\n  if (len < thetaArray.length) thetaArray = thetaArray.slice(0, len);\n  stash.r = rArray;\n  stash.theta = thetaArray;\n  calcColorscale(gd, trace); // only compute 'style' options in calc, as position options\n  // depend on the radial range and must be set in plot\n\n  var opts = stash.opts = convert.style(gd, trace); // For graphs with very large number of points and array marker.size,\n  // use average marker size instead to speed things up.\n\n  var ppad;\n\n  if (len < TOO_MANY_POINTS) {\n    ppad = calcMarkerSize(trace, len);\n  } else if (opts.marker) {\n    ppad = 2 * (opts.marker.sizeAvg || Math.max(opts.marker.size, 3));\n  }\n\n  trace._extremes.x = Axes.findExtremes(radialAxis, rArray, {\n    ppad: ppad\n  });\n  return [{\n    x: false,\n    y: false,\n    t: stash,\n    trace: trace\n  }];\n};","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/plotly.js/src/traces/scatterpolargl/calc.js"],"names":["calcColorscale","require","calcMarkerSize","convert","Axes","TOO_MANY_POINTS","module","exports","calc","gd","trace","fullLayout","_fullLayout","subplotId","subplot","radialAxis","radialaxis","angularAxis","angularaxis","rArray","_r","makeCalcdata","thetaArray","_theta","len","_length","stash","length","slice","r","theta","opts","style","ppad","marker","sizeAvg","Math","max","size","_extremes","x","findExtremes","y","t"],"mappings":"AAAA;;AAEA,IAAIA,cAAc,GAAGC,OAAO,CAAC,4BAAD,CAA5B;;AACA,IAAIC,cAAc,GAAGD,OAAO,CAAC,iBAAD,CAAP,CAA2BC,cAAhD;;AACA,IAAIC,OAAO,GAAGF,OAAO,CAAC,sBAAD,CAArB;;AACA,IAAIG,IAAI,GAAGH,OAAO,CAAC,4BAAD,CAAlB;;AACA,IAAII,eAAe,GAAGJ,OAAO,CAAC,wBAAD,CAAP,CAAkCI,eAAxD;;AAEAC,MAAM,CAACC,OAAP,GAAiB,SAASC,IAAT,CAAcC,EAAd,EAAkBC,KAAlB,EAAyB;AACtC,MAAIC,UAAU,GAAGF,EAAE,CAACG,WAApB;AACA,MAAIC,SAAS,GAAGH,KAAK,CAACI,OAAtB;AACA,MAAIC,UAAU,GAAGJ,UAAU,CAACE,SAAD,CAAV,CAAsBG,UAAvC;AACA,MAAIC,WAAW,GAAGN,UAAU,CAACE,SAAD,CAAV,CAAsBK,WAAxC;AACA,MAAIC,MAAM,GAAGT,KAAK,CAACU,EAAN,GAAWL,UAAU,CAACM,YAAX,CAAwBX,KAAxB,EAA+B,GAA/B,CAAxB;AACA,MAAIY,UAAU,GAAGZ,KAAK,CAACa,MAAN,GAAeN,WAAW,CAACI,YAAZ,CAAyBX,KAAzB,EAAgC,OAAhC,CAAhC;AACA,MAAIc,GAAG,GAAGd,KAAK,CAACe,OAAhB;AACA,MAAIC,KAAK,GAAG,EAAZ;AAEA,MAAGF,GAAG,GAAGL,MAAM,CAACQ,MAAhB,EAAwBR,MAAM,GAAGA,MAAM,CAACS,KAAP,CAAa,CAAb,EAAgBJ,GAAhB,CAAT;AACxB,MAAGA,GAAG,GAAGF,UAAU,CAACK,MAApB,EAA4BL,UAAU,GAAGA,UAAU,CAACM,KAAX,CAAiB,CAAjB,EAAoBJ,GAApB,CAAb;AAE5BE,EAAAA,KAAK,CAACG,CAAN,GAAUV,MAAV;AACAO,EAAAA,KAAK,CAACI,KAAN,GAAcR,UAAd;AAEAtB,EAAAA,cAAc,CAACS,EAAD,EAAKC,KAAL,CAAd,CAhBsC,CAkBtC;AACA;;AACA,MAAIqB,IAAI,GAAGL,KAAK,CAACK,IAAN,GAAa5B,OAAO,CAAC6B,KAAR,CAAcvB,EAAd,EAAkBC,KAAlB,CAAxB,CApBsC,CAsBtC;AACA;;AACA,MAAIuB,IAAJ;;AACA,MAAGT,GAAG,GAAGnB,eAAT,EAA0B;AACtB4B,IAAAA,IAAI,GAAG/B,cAAc,CAACQ,KAAD,EAAQc,GAAR,CAArB;AACH,GAFD,MAEO,IAAGO,IAAI,CAACG,MAAR,EAAgB;AACnBD,IAAAA,IAAI,GAAG,KAAKF,IAAI,CAACG,MAAL,CAAYC,OAAZ,IAAuBC,IAAI,CAACC,GAAL,CAASN,IAAI,CAACG,MAAL,CAAYI,IAArB,EAA2B,CAA3B,CAA5B,CAAP;AACH;;AACD5B,EAAAA,KAAK,CAAC6B,SAAN,CAAgBC,CAAhB,GAAoBpC,IAAI,CAACqC,YAAL,CAAkB1B,UAAlB,EAA8BI,MAA9B,EAAsC;AAACc,IAAAA,IAAI,EAAEA;AAAP,GAAtC,CAApB;AAEA,SAAO,CAAC;AAACO,IAAAA,CAAC,EAAE,KAAJ;AAAWE,IAAAA,CAAC,EAAE,KAAd;AAAqBC,IAAAA,CAAC,EAAEjB,KAAxB;AAA+BhB,IAAAA,KAAK,EAAEA;AAAtC,GAAD,CAAP;AACH,CAjCD","sourcesContent":["'use strict';\n\nvar calcColorscale = require('../scatter/colorscale_calc');\nvar calcMarkerSize = require('../scatter/calc').calcMarkerSize;\nvar convert = require('../scattergl/convert');\nvar Axes = require('../../plots/cartesian/axes');\nvar TOO_MANY_POINTS = require('../scattergl/constants').TOO_MANY_POINTS;\n\nmodule.exports = function calc(gd, trace) {\n    var fullLayout = gd._fullLayout;\n    var subplotId = trace.subplot;\n    var radialAxis = fullLayout[subplotId].radialaxis;\n    var angularAxis = fullLayout[subplotId].angularaxis;\n    var rArray = trace._r = radialAxis.makeCalcdata(trace, 'r');\n    var thetaArray = trace._theta = angularAxis.makeCalcdata(trace, 'theta');\n    var len = trace._length;\n    var stash = {};\n\n    if(len < rArray.length) rArray = rArray.slice(0, len);\n    if(len < thetaArray.length) thetaArray = thetaArray.slice(0, len);\n\n    stash.r = rArray;\n    stash.theta = thetaArray;\n\n    calcColorscale(gd, trace);\n\n    // only compute 'style' options in calc, as position options\n    // depend on the radial range and must be set in plot\n    var opts = stash.opts = convert.style(gd, trace);\n\n    // For graphs with very large number of points and array marker.size,\n    // use average marker size instead to speed things up.\n    var ppad;\n    if(len < TOO_MANY_POINTS) {\n        ppad = calcMarkerSize(trace, len);\n    } else if(opts.marker) {\n        ppad = 2 * (opts.marker.sizeAvg || Math.max(opts.marker.size, 3));\n    }\n    trace._extremes.x = Axes.findExtremes(radialAxis, rArray, {ppad: ppad});\n\n    return [{x: false, y: false, t: stash, trace: trace}];\n};\n"]},"metadata":{},"sourceType":"script"}