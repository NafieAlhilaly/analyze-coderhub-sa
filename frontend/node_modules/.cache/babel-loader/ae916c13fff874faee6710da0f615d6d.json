{"ast":null,"code":"'use strict';\n\nvar colorAttrs = require('../../components/color/attributes');\n\nvar axesAttrs = require('../cartesian/layout_attributes');\n\nvar domainAttrs = require('../domain').attributes;\n\nvar extendFlat = require('../../lib').extendFlat;\n\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\n\nvar axisLineGridAttr = overrideAll({\n  color: axesAttrs.color,\n  showline: extendFlat({}, axesAttrs.showline, {\n    dflt: true\n  }),\n  linecolor: axesAttrs.linecolor,\n  linewidth: axesAttrs.linewidth,\n  showgrid: extendFlat({}, axesAttrs.showgrid, {\n    dflt: true\n  }),\n  gridcolor: axesAttrs.gridcolor,\n  gridwidth: axesAttrs.gridwidth // TODO add spike* attributes down the road\n  // should we add zeroline* attributes?\n\n}, 'plot', 'from-root');\nvar axisTickAttrs = overrideAll({\n  tickmode: axesAttrs.tickmode,\n  nticks: axesAttrs.nticks,\n  tick0: axesAttrs.tick0,\n  dtick: axesAttrs.dtick,\n  tickvals: axesAttrs.tickvals,\n  ticktext: axesAttrs.ticktext,\n  ticks: axesAttrs.ticks,\n  ticklen: axesAttrs.ticklen,\n  tickwidth: axesAttrs.tickwidth,\n  tickcolor: axesAttrs.tickcolor,\n  showticklabels: axesAttrs.showticklabels,\n  showtickprefix: axesAttrs.showtickprefix,\n  tickprefix: axesAttrs.tickprefix,\n  showticksuffix: axesAttrs.showticksuffix,\n  ticksuffix: axesAttrs.ticksuffix,\n  showexponent: axesAttrs.showexponent,\n  exponentformat: axesAttrs.exponentformat,\n  minexponent: axesAttrs.minexponent,\n  separatethousands: axesAttrs.separatethousands,\n  tickfont: axesAttrs.tickfont,\n  tickangle: axesAttrs.tickangle,\n  tickformat: axesAttrs.tickformat,\n  tickformatstops: axesAttrs.tickformatstops,\n  layer: axesAttrs.layer\n}, 'plot', 'from-root');\nvar radialAxisAttrs = {\n  visible: extendFlat({}, axesAttrs.visible, {\n    dflt: true\n  }),\n  type: extendFlat({}, axesAttrs.type, {\n    values: ['-', 'linear', 'log', 'date', 'category']\n  }),\n  autotypenumbers: axesAttrs.autotypenumbers,\n  autorange: extendFlat({}, axesAttrs.autorange, {\n    editType: 'plot'\n  }),\n  rangemode: {\n    valType: 'enumerated',\n    values: ['tozero', 'nonnegative', 'normal'],\n    dflt: 'tozero',\n    editType: 'calc',\n    description: ['If *tozero*`, the range extends to 0,', 'regardless of the input data', 'If *nonnegative*, the range is non-negative,', 'regardless of the input data.', 'If *normal*, the range is computed in relation to the extrema', 'of the input data (same behavior as for cartesian axes).'].join(' ')\n  },\n  range: extendFlat({}, axesAttrs.range, {\n    items: [{\n      valType: 'any',\n      editType: 'plot',\n      impliedEdits: {\n        '^autorange': false\n      }\n    }, {\n      valType: 'any',\n      editType: 'plot',\n      impliedEdits: {\n        '^autorange': false\n      }\n    }],\n    editType: 'plot'\n  }),\n  categoryorder: axesAttrs.categoryorder,\n  categoryarray: axesAttrs.categoryarray,\n  angle: {\n    valType: 'angle',\n    editType: 'plot',\n    description: ['Sets the angle (in degrees) from which the radial axis is drawn.', 'Note that by default, radial axis line on the theta=0 line', 'corresponds to a line pointing right (like what mathematicians prefer).', 'Defaults to the first `polar.sector` angle.'].join(' ')\n  },\n  side: {\n    valType: 'enumerated',\n    // TODO add 'center' for `showline: false` radial axes\n    values: ['clockwise', 'counterclockwise'],\n    dflt: 'clockwise',\n    editType: 'plot',\n    description: ['Determines on which side of radial axis line', 'the tick and tick labels appear.'].join(' ')\n  },\n  title: {\n    // radial title is not gui-editable at the moment,\n    // so it needs dflt: '', similar to carpet axes.\n    text: extendFlat({}, axesAttrs.title.text, {\n      editType: 'plot',\n      dflt: ''\n    }),\n    font: extendFlat({}, axesAttrs.title.font, {\n      editType: 'plot'\n    }),\n    // TODO\n    // - might need a 'titleside' and even 'titledirection' down the road\n    // - what about standoff ??\n    editType: 'plot'\n  },\n  hoverformat: axesAttrs.hoverformat,\n  uirevision: {\n    valType: 'any',\n    editType: 'none',\n    description: ['Controls persistence of user-driven changes in axis `range`,', '`autorange`, `angle`, and `title` if in `editable: true` configuration.', 'Defaults to `polar<N>.uirevision`.'].join(' ')\n  },\n  editType: 'calc',\n  _deprecated: {\n    title: axesAttrs._deprecated.title,\n    titlefont: axesAttrs._deprecated.titlefont\n  }\n};\nextendFlat(radialAxisAttrs, // N.B. radialaxis grid lines are circular,\n// but radialaxis lines are straight from circle center to outer bound\naxisLineGridAttr, axisTickAttrs);\nvar angularAxisAttrs = {\n  visible: extendFlat({}, axesAttrs.visible, {\n    dflt: true\n  }),\n  type: {\n    valType: 'enumerated',\n    // 'linear' should maybe be called 'angle' or 'angular' here\n    // to make clear that axis here is periodic and more tightly match\n    // `thetaunit`?\n    //\n    // skip 'date' for first push\n    // no 'log' for now\n    values: ['-', 'linear', 'category'],\n    dflt: '-',\n    editType: 'calc',\n    _noTemplating: true,\n    description: ['Sets the angular axis type.', 'If *linear*, set `thetaunit` to determine the unit in which axis value are shown.', 'If *category, use `period` to set the number of integer coordinates around polar axis.'].join(' ')\n  },\n  autotypenumbers: axesAttrs.autotypenumbers,\n  categoryorder: axesAttrs.categoryorder,\n  categoryarray: axesAttrs.categoryarray,\n  thetaunit: {\n    valType: 'enumerated',\n    values: ['radians', 'degrees'],\n    dflt: 'degrees',\n    editType: 'calc',\n    description: ['Sets the format unit of the formatted *theta* values.', 'Has an effect only when `angularaxis.type` is *linear*.'].join(' ')\n  },\n  period: {\n    valType: 'number',\n    editType: 'calc',\n    min: 0,\n    description: ['Set the angular period.', 'Has an effect only when `angularaxis.type` is *category*.'].join(' ') // Examples for date axes:\n    //\n    // - period that equals the timeseries length\n    //  http://flowingdata.com/2017/01/24/one-dataset-visualized-25-ways/18-polar-coordinates/\n    // - and 1-year periods (focusing on seasonal change0\n    //  http://otexts.org/fpp2/seasonal-plots.html\n    //  https://blogs.scientificamerican.com/sa-visual/why-are-so-many-babies-born-around-8-00-a-m/\n    //  http://www.seasonaladjustment.com/2012/09/05/clock-plot-visualising-seasonality-using-r-and-ggplot2-part-3/\n    //  https://i.pinimg.com/736x/49/b9/72/49b972ccb3206a1a6d6f870dac543280.jpg\n    //  https://www.climate-lab-book.ac.uk/spirals/\n\n  },\n  direction: {\n    valType: 'enumerated',\n    values: ['counterclockwise', 'clockwise'],\n    dflt: 'counterclockwise',\n    editType: 'calc',\n    description: ['Sets the direction corresponding to positive angles.'].join(' ')\n  },\n  rotation: {\n    valType: 'angle',\n    editType: 'calc',\n    description: ['Sets that start position (in degrees) of the angular axis', 'By default, polar subplots with `direction` set to *counterclockwise*', 'get a `rotation` of *0*', 'which corresponds to due East (like what mathematicians prefer).', 'In turn, polar with `direction` set to *clockwise* get a rotation of *90*', 'which corresponds to due North (like on a compass),'].join(' ')\n  },\n  hoverformat: axesAttrs.hoverformat,\n  uirevision: {\n    valType: 'any',\n    editType: 'none',\n    description: ['Controls persistence of user-driven changes in axis `rotation`.', 'Defaults to `polar<N>.uirevision`.'].join(' ')\n  },\n  editType: 'calc'\n};\nextendFlat(angularAxisAttrs, // N.B. angular grid lines are straight lines from circle center to outer bound\n// the angular line is circular bounding the polar plot area.\naxisLineGridAttr, // N.B. ticksuffix defaults to 'Â°' for angular axes with `thetaunit: 'degrees'`\naxisTickAttrs);\nmodule.exports = {\n  // TODO for x/y/zoom system for paper-based zooming:\n  // x: {},\n  // y: {},\n  // zoom: {},\n  domain: domainAttrs({\n    name: 'polar',\n    editType: 'plot'\n  }),\n  sector: {\n    valType: 'info_array',\n    items: [{\n      valType: 'number',\n      editType: 'plot'\n    }, {\n      valType: 'number',\n      editType: 'plot'\n    }],\n    dflt: [0, 360],\n    editType: 'plot',\n    description: ['Sets angular span of this polar subplot with two angles (in degrees).', 'Sector are assumed to be spanned in the counterclockwise direction', 'with *0* corresponding to rightmost limit of the polar subplot.'].join(' ')\n  },\n  hole: {\n    valType: 'number',\n    min: 0,\n    max: 1,\n    dflt: 0,\n    editType: 'plot',\n    description: ['Sets the fraction of the radius to cut out of the polar subplot.'].join(' ')\n  },\n  bgcolor: {\n    valType: 'color',\n    editType: 'plot',\n    dflt: colorAttrs.background,\n    description: 'Set the background color of the subplot'\n  },\n  radialaxis: radialAxisAttrs,\n  angularaxis: angularAxisAttrs,\n  gridshape: {\n    valType: 'enumerated',\n    values: ['circular', 'linear'],\n    dflt: 'circular',\n    editType: 'plot',\n    description: ['Determines if the radial axis grid lines and angular axis line are drawn', 'as *circular* sectors or as *linear* (polygon) sectors.', 'Has an effect only when the angular axis has `type` *category*.', 'Note that `radialaxis.angle` is snapped to the angle of the closest', 'vertex when `gridshape` is *circular*', '(so that radial axis scale is the same as the data scale).'].join(' ')\n  },\n  // TODO maybe?\n  // annotations:\n  uirevision: {\n    valType: 'any',\n    editType: 'none',\n    description: ['Controls persistence of user-driven changes in axis attributes,', 'if not overridden in the individual axes.', 'Defaults to `layout.uirevision`.'].join(' ')\n  },\n  editType: 'calc'\n};","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/plotly.js/src/plots/polar/layout_attributes.js"],"names":["colorAttrs","require","axesAttrs","domainAttrs","attributes","extendFlat","overrideAll","axisLineGridAttr","color","showline","dflt","linecolor","linewidth","showgrid","gridcolor","gridwidth","axisTickAttrs","tickmode","nticks","tick0","dtick","tickvals","ticktext","ticks","ticklen","tickwidth","tickcolor","showticklabels","showtickprefix","tickprefix","showticksuffix","ticksuffix","showexponent","exponentformat","minexponent","separatethousands","tickfont","tickangle","tickformat","tickformatstops","layer","radialAxisAttrs","visible","type","values","autotypenumbers","autorange","editType","rangemode","valType","description","join","range","items","impliedEdits","categoryorder","categoryarray","angle","side","title","text","font","hoverformat","uirevision","_deprecated","titlefont","angularAxisAttrs","_noTemplating","thetaunit","period","min","direction","rotation","module","exports","domain","name","sector","hole","max","bgcolor","background","radialaxis","angularaxis","gridshape"],"mappings":"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","sourcesContent":["'use strict';\n\nvar colorAttrs = require('../../components/color/attributes');\nvar axesAttrs = require('../cartesian/layout_attributes');\nvar domainAttrs = require('../domain').attributes;\nvar extendFlat = require('../../lib').extendFlat;\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\n\nvar axisLineGridAttr = overrideAll({\n    color: axesAttrs.color,\n    showline: extendFlat({}, axesAttrs.showline, {dflt: true}),\n    linecolor: axesAttrs.linecolor,\n    linewidth: axesAttrs.linewidth,\n    showgrid: extendFlat({}, axesAttrs.showgrid, {dflt: true}),\n    gridcolor: axesAttrs.gridcolor,\n    gridwidth: axesAttrs.gridwidth\n\n    // TODO add spike* attributes down the road\n\n    // should we add zeroline* attributes?\n\n}, 'plot', 'from-root');\n\nvar axisTickAttrs = overrideAll({\n    tickmode: axesAttrs.tickmode,\n    nticks: axesAttrs.nticks,\n    tick0: axesAttrs.tick0,\n    dtick: axesAttrs.dtick,\n    tickvals: axesAttrs.tickvals,\n    ticktext: axesAttrs.ticktext,\n    ticks: axesAttrs.ticks,\n    ticklen: axesAttrs.ticklen,\n    tickwidth: axesAttrs.tickwidth,\n    tickcolor: axesAttrs.tickcolor,\n    showticklabels: axesAttrs.showticklabels,\n    showtickprefix: axesAttrs.showtickprefix,\n    tickprefix: axesAttrs.tickprefix,\n    showticksuffix: axesAttrs.showticksuffix,\n    ticksuffix: axesAttrs.ticksuffix,\n    showexponent: axesAttrs.showexponent,\n    exponentformat: axesAttrs.exponentformat,\n    minexponent: axesAttrs.minexponent,\n    separatethousands: axesAttrs.separatethousands,\n    tickfont: axesAttrs.tickfont,\n    tickangle: axesAttrs.tickangle,\n    tickformat: axesAttrs.tickformat,\n    tickformatstops: axesAttrs.tickformatstops,\n    layer: axesAttrs.layer\n}, 'plot', 'from-root');\n\nvar radialAxisAttrs = {\n    visible: extendFlat({}, axesAttrs.visible, {dflt: true}),\n    type: extendFlat({}, axesAttrs.type, {\n        values: ['-', 'linear', 'log', 'date', 'category']\n    }),\n    autotypenumbers: axesAttrs.autotypenumbers,\n\n    autorange: extendFlat({}, axesAttrs.autorange, {editType: 'plot'}),\n    rangemode: {\n        valType: 'enumerated',\n        values: ['tozero', 'nonnegative', 'normal'],\n        dflt: 'tozero',\n        editType: 'calc',\n        description: [\n            'If *tozero*`, the range extends to 0,',\n            'regardless of the input data',\n            'If *nonnegative*, the range is non-negative,',\n            'regardless of the input data.',\n            'If *normal*, the range is computed in relation to the extrema',\n            'of the input data (same behavior as for cartesian axes).'\n        ].join(' ')\n    },\n    range: extendFlat({}, axesAttrs.range, {\n        items: [\n            {valType: 'any', editType: 'plot', impliedEdits: {'^autorange': false}},\n            {valType: 'any', editType: 'plot', impliedEdits: {'^autorange': false}}\n        ],\n        editType: 'plot'\n    }),\n\n    categoryorder: axesAttrs.categoryorder,\n    categoryarray: axesAttrs.categoryarray,\n\n    angle: {\n        valType: 'angle',\n        editType: 'plot',\n        description: [\n            'Sets the angle (in degrees) from which the radial axis is drawn.',\n            'Note that by default, radial axis line on the theta=0 line',\n            'corresponds to a line pointing right (like what mathematicians prefer).',\n            'Defaults to the first `polar.sector` angle.'\n        ].join(' ')\n    },\n\n    side: {\n        valType: 'enumerated',\n        // TODO add 'center' for `showline: false` radial axes\n        values: ['clockwise', 'counterclockwise'],\n        dflt: 'clockwise',\n        editType: 'plot',\n        description: [\n            'Determines on which side of radial axis line',\n            'the tick and tick labels appear.'\n        ].join(' ')\n    },\n\n\n    title: {\n        // radial title is not gui-editable at the moment,\n        // so it needs dflt: '', similar to carpet axes.\n        text: extendFlat({}, axesAttrs.title.text, {editType: 'plot', dflt: ''}),\n        font: extendFlat({}, axesAttrs.title.font, {editType: 'plot'}),\n\n        // TODO\n        // - might need a 'titleside' and even 'titledirection' down the road\n        // - what about standoff ??\n\n        editType: 'plot'\n    },\n\n    hoverformat: axesAttrs.hoverformat,\n\n    uirevision: {\n        valType: 'any',\n        editType: 'none',\n        description: [\n            'Controls persistence of user-driven changes in axis `range`,',\n            '`autorange`, `angle`, and `title` if in `editable: true` configuration.',\n            'Defaults to `polar<N>.uirevision`.'\n        ].join(' ')\n    },\n\n    editType: 'calc',\n\n    _deprecated: {\n        title: axesAttrs._deprecated.title,\n        titlefont: axesAttrs._deprecated.titlefont\n    }\n};\n\nextendFlat(\n    radialAxisAttrs,\n\n    // N.B. radialaxis grid lines are circular,\n    // but radialaxis lines are straight from circle center to outer bound\n    axisLineGridAttr,\n    axisTickAttrs\n);\n\nvar angularAxisAttrs = {\n    visible: extendFlat({}, axesAttrs.visible, {dflt: true}),\n    type: {\n        valType: 'enumerated',\n        // 'linear' should maybe be called 'angle' or 'angular' here\n        // to make clear that axis here is periodic and more tightly match\n        // `thetaunit`?\n        //\n        // skip 'date' for first push\n        // no 'log' for now\n        values: ['-', 'linear', 'category'],\n        dflt: '-',\n        editType: 'calc',\n        _noTemplating: true,\n        description: [\n            'Sets the angular axis type.',\n            'If *linear*, set `thetaunit` to determine the unit in which axis value are shown.',\n            'If *category, use `period` to set the number of integer coordinates around polar axis.'\n        ].join(' ')\n    },\n    autotypenumbers: axesAttrs.autotypenumbers,\n\n    categoryorder: axesAttrs.categoryorder,\n    categoryarray: axesAttrs.categoryarray,\n\n    thetaunit: {\n        valType: 'enumerated',\n        values: ['radians', 'degrees'],\n        dflt: 'degrees',\n        editType: 'calc',\n        description: [\n            'Sets the format unit of the formatted *theta* values.',\n            'Has an effect only when `angularaxis.type` is *linear*.'\n        ].join(' ')\n    },\n\n    period: {\n        valType: 'number',\n        editType: 'calc',\n        min: 0,\n        description: [\n            'Set the angular period.',\n            'Has an effect only when `angularaxis.type` is *category*.',\n        ].join(' ')\n        // Examples for date axes:\n        //\n        // - period that equals the timeseries length\n        //  http://flowingdata.com/2017/01/24/one-dataset-visualized-25-ways/18-polar-coordinates/\n        // - and 1-year periods (focusing on seasonal change0\n        //  http://otexts.org/fpp2/seasonal-plots.html\n        //  https://blogs.scientificamerican.com/sa-visual/why-are-so-many-babies-born-around-8-00-a-m/\n        //  http://www.seasonaladjustment.com/2012/09/05/clock-plot-visualising-seasonality-using-r-and-ggplot2-part-3/\n        //  https://i.pinimg.com/736x/49/b9/72/49b972ccb3206a1a6d6f870dac543280.jpg\n        //  https://www.climate-lab-book.ac.uk/spirals/\n    },\n\n    direction: {\n        valType: 'enumerated',\n        values: ['counterclockwise', 'clockwise'],\n        dflt: 'counterclockwise',\n        editType: 'calc',\n        description: [\n            'Sets the direction corresponding to positive angles.'\n        ].join(' ')\n    },\n\n    rotation: {\n        valType: 'angle',\n        editType: 'calc',\n        description: [\n            'Sets that start position (in degrees) of the angular axis',\n            'By default, polar subplots with `direction` set to *counterclockwise*',\n            'get a `rotation` of *0*',\n            'which corresponds to due East (like what mathematicians prefer).',\n            'In turn, polar with `direction` set to *clockwise* get a rotation of *90*',\n            'which corresponds to due North (like on a compass),'\n        ].join(' ')\n    },\n\n    hoverformat: axesAttrs.hoverformat,\n\n    uirevision: {\n        valType: 'any',\n        editType: 'none',\n        description: [\n            'Controls persistence of user-driven changes in axis `rotation`.',\n            'Defaults to `polar<N>.uirevision`.'\n        ].join(' ')\n    },\n\n    editType: 'calc'\n};\n\nextendFlat(\n    angularAxisAttrs,\n\n    // N.B. angular grid lines are straight lines from circle center to outer bound\n    // the angular line is circular bounding the polar plot area.\n    axisLineGridAttr,\n\n    // N.B. ticksuffix defaults to 'Â°' for angular axes with `thetaunit: 'degrees'`\n    axisTickAttrs\n);\n\nmodule.exports = {\n    // TODO for x/y/zoom system for paper-based zooming:\n    // x: {},\n    // y: {},\n    // zoom: {},\n\n    domain: domainAttrs({name: 'polar', editType: 'plot'}),\n\n    sector: {\n        valType: 'info_array',\n        items: [\n            {valType: 'number', editType: 'plot'},\n            {valType: 'number', editType: 'plot'}\n        ],\n        dflt: [0, 360],\n        editType: 'plot',\n        description: [\n            'Sets angular span of this polar subplot with two angles (in degrees).',\n            'Sector are assumed to be spanned in the counterclockwise direction',\n            'with *0* corresponding to rightmost limit of the polar subplot.'\n        ].join(' ')\n    },\n    hole: {\n        valType: 'number',\n        min: 0,\n        max: 1,\n        dflt: 0,\n        editType: 'plot',\n        description: [\n            'Sets the fraction of the radius to cut out of the polar subplot.'\n        ].join(' ')\n    },\n\n    bgcolor: {\n        valType: 'color',\n        editType: 'plot',\n        dflt: colorAttrs.background,\n        description: 'Set the background color of the subplot'\n    },\n\n    radialaxis: radialAxisAttrs,\n    angularaxis: angularAxisAttrs,\n\n    gridshape: {\n        valType: 'enumerated',\n        values: ['circular', 'linear'],\n        dflt: 'circular',\n        editType: 'plot',\n        description: [\n            'Determines if the radial axis grid lines and angular axis line are drawn',\n            'as *circular* sectors or as *linear* (polygon) sectors.',\n            'Has an effect only when the angular axis has `type` *category*.',\n            'Note that `radialaxis.angle` is snapped to the angle of the closest',\n            'vertex when `gridshape` is *circular*',\n            '(so that radial axis scale is the same as the data scale).'\n        ].join(' ')\n    },\n\n    // TODO maybe?\n    // annotations:\n\n    uirevision: {\n        valType: 'any',\n        editType: 'none',\n        description: [\n            'Controls persistence of user-driven changes in axis attributes,',\n            'if not overridden in the individual axes.',\n            'Defaults to `layout.uirevision`.'\n        ].join(' ')\n    },\n\n    editType: 'calc'\n};\n"]},"metadata":{},"sourceType":"script"}