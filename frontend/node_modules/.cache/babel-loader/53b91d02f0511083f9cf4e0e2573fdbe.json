{"ast":null,"code":"'use strict';\n\nvar parseUnit = require('parse-unit');\n\nmodule.exports = toPX;\nvar PIXELS_PER_INCH = 96;\n\nfunction getPropertyInPX(element, prop) {\n  var parts = parseUnit(getComputedStyle(element).getPropertyValue(prop));\n  return parts[0] * toPX(parts[1], element);\n} //This brutal hack is needed\n\n\nfunction getSizeBrutal(unit, element) {\n  var testDIV = document.createElement('div');\n  testDIV.style['font-size'] = '128' + unit;\n  element.appendChild(testDIV);\n  var size = getPropertyInPX(testDIV, 'font-size') / 128;\n  element.removeChild(testDIV);\n  return size;\n}\n\nfunction toPX(str, element) {\n  element = element || document.body;\n  str = (str || 'px').trim().toLowerCase();\n\n  if (element === window || element === document) {\n    element = document.body;\n  }\n\n  switch (str) {\n    case '%':\n      //Ambiguous, not sure if we should use width or height\n      return element.clientHeight / 100.0;\n\n    case 'ch':\n    case 'ex':\n      return getSizeBrutal(str, element);\n\n    case 'em':\n      return getPropertyInPX(element, 'font-size');\n\n    case 'rem':\n      return getPropertyInPX(document.body, 'font-size');\n\n    case 'vw':\n      return window.innerWidth / 100;\n\n    case 'vh':\n      return window.innerHeight / 100;\n\n    case 'vmin':\n      return Math.min(window.innerWidth, window.innerHeight) / 100;\n\n    case 'vmax':\n      return Math.max(window.innerWidth, window.innerHeight) / 100;\n\n    case 'in':\n      return PIXELS_PER_INCH;\n\n    case 'cm':\n      return PIXELS_PER_INCH / 2.54;\n\n    case 'mm':\n      return PIXELS_PER_INCH / 25.4;\n\n    case 'pt':\n      return PIXELS_PER_INCH / 72;\n\n    case 'pc':\n      return PIXELS_PER_INCH / 6;\n  }\n\n  return 1;\n}","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/to-px/topx.js"],"names":["parseUnit","require","module","exports","toPX","PIXELS_PER_INCH","getPropertyInPX","element","prop","parts","getComputedStyle","getPropertyValue","getSizeBrutal","unit","testDIV","document","createElement","style","appendChild","size","removeChild","str","body","trim","toLowerCase","window","clientHeight","innerWidth","innerHeight","Math","min","max"],"mappings":"AAAA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,YAAD,CAAvB;;AAEAC,MAAM,CAACC,OAAP,GAAiBC,IAAjB;AAEA,IAAIC,eAAe,GAAG,EAAtB;;AAEA,SAASC,eAAT,CAAyBC,OAAzB,EAAkCC,IAAlC,EAAwC;AACtC,MAAIC,KAAK,GAAGT,SAAS,CAACU,gBAAgB,CAACH,OAAD,CAAhB,CAA0BI,gBAA1B,CAA2CH,IAA3C,CAAD,CAArB;AACA,SAAOC,KAAK,CAAC,CAAD,CAAL,GAAWL,IAAI,CAACK,KAAK,CAAC,CAAD,CAAN,EAAWF,OAAX,CAAtB;AACD,C,CAED;;;AACA,SAASK,aAAT,CAAuBC,IAAvB,EAA6BN,OAA7B,EAAsC;AACpC,MAAIO,OAAO,GAAGC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAd;AACAF,EAAAA,OAAO,CAACG,KAAR,CAAc,WAAd,IAA6B,QAAQJ,IAArC;AACAN,EAAAA,OAAO,CAACW,WAAR,CAAoBJ,OAApB;AACA,MAAIK,IAAI,GAAGb,eAAe,CAACQ,OAAD,EAAU,WAAV,CAAf,GAAwC,GAAnD;AACAP,EAAAA,OAAO,CAACa,WAAR,CAAoBN,OAApB;AACA,SAAOK,IAAP;AACD;;AAED,SAASf,IAAT,CAAciB,GAAd,EAAmBd,OAAnB,EAA4B;AAC1BA,EAAAA,OAAO,GAAGA,OAAO,IAAIQ,QAAQ,CAACO,IAA9B;AACAD,EAAAA,GAAG,GAAG,CAACA,GAAG,IAAI,IAAR,EAAcE,IAAd,GAAqBC,WAArB,EAAN;;AACA,MAAGjB,OAAO,KAAKkB,MAAZ,IAAsBlB,OAAO,KAAKQ,QAArC,EAA+C;AAC7CR,IAAAA,OAAO,GAAGQ,QAAQ,CAACO,IAAnB;AACD;;AACD,UAAOD,GAAP;AACE,SAAK,GAAL;AAAW;AACT,aAAOd,OAAO,CAACmB,YAAR,GAAuB,KAA9B;;AACF,SAAK,IAAL;AACA,SAAK,IAAL;AACE,aAAOd,aAAa,CAACS,GAAD,EAAMd,OAAN,CAApB;;AACF,SAAK,IAAL;AACE,aAAOD,eAAe,CAACC,OAAD,EAAU,WAAV,CAAtB;;AACF,SAAK,KAAL;AACE,aAAOD,eAAe,CAACS,QAAQ,CAACO,IAAV,EAAgB,WAAhB,CAAtB;;AACF,SAAK,IAAL;AACE,aAAOG,MAAM,CAACE,UAAP,GAAkB,GAAzB;;AACF,SAAK,IAAL;AACE,aAAOF,MAAM,CAACG,WAAP,GAAmB,GAA1B;;AACF,SAAK,MAAL;AACE,aAAOC,IAAI,CAACC,GAAL,CAASL,MAAM,CAACE,UAAhB,EAA4BF,MAAM,CAACG,WAAnC,IAAkD,GAAzD;;AACF,SAAK,MAAL;AACE,aAAOC,IAAI,CAACE,GAAL,CAASN,MAAM,CAACE,UAAhB,EAA4BF,MAAM,CAACG,WAAnC,IAAkD,GAAzD;;AACF,SAAK,IAAL;AACE,aAAOvB,eAAP;;AACF,SAAK,IAAL;AACE,aAAOA,eAAe,GAAG,IAAzB;;AACF,SAAK,IAAL;AACE,aAAOA,eAAe,GAAG,IAAzB;;AACF,SAAK,IAAL;AACE,aAAOA,eAAe,GAAG,EAAzB;;AACF,SAAK,IAAL;AACE,aAAOA,eAAe,GAAG,CAAzB;AA3BJ;;AA6BA,SAAO,CAAP;AACD","sourcesContent":["'use strict'\n\nvar parseUnit = require('parse-unit')\n\nmodule.exports = toPX\n\nvar PIXELS_PER_INCH = 96\n\nfunction getPropertyInPX(element, prop) {\n  var parts = parseUnit(getComputedStyle(element).getPropertyValue(prop))\n  return parts[0] * toPX(parts[1], element)\n}\n\n//This brutal hack is needed\nfunction getSizeBrutal(unit, element) {\n  var testDIV = document.createElement('div')\n  testDIV.style['font-size'] = '128' + unit\n  element.appendChild(testDIV)\n  var size = getPropertyInPX(testDIV, 'font-size') / 128\n  element.removeChild(testDIV)\n  return size\n}\n\nfunction toPX(str, element) {\n  element = element || document.body\n  str = (str || 'px').trim().toLowerCase()\n  if(element === window || element === document) {\n    element = document.body \n  }\n  switch(str) {\n    case '%':  //Ambiguous, not sure if we should use width or height\n      return element.clientHeight / 100.0\n    case 'ch':\n    case 'ex':\n      return getSizeBrutal(str, element)\n    case 'em':\n      return getPropertyInPX(element, 'font-size')\n    case 'rem':\n      return getPropertyInPX(document.body, 'font-size')\n    case 'vw':\n      return window.innerWidth/100\n    case 'vh':\n      return window.innerHeight/100\n    case 'vmin':\n      return Math.min(window.innerWidth, window.innerHeight) / 100\n    case 'vmax':\n      return Math.max(window.innerWidth, window.innerHeight) / 100\n    case 'in':\n      return PIXELS_PER_INCH\n    case 'cm':\n      return PIXELS_PER_INCH / 2.54\n    case 'mm':\n      return PIXELS_PER_INCH / 25.4\n    case 'pt':\n      return PIXELS_PER_INCH / 72\n    case 'pc':\n      return PIXELS_PER_INCH / 6\n  }\n  return 1\n}"]},"metadata":{},"sourceType":"script"}