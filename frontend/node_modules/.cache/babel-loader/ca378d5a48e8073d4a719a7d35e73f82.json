{"ast":null,"code":"\"use strict\";\n\nmodule.exports = getCubeEdges;\n\nvar bits = require('bit-twiddle');\n\nvar multiply = require('gl-mat4/multiply');\n\nvar splitPoly = require('split-polygon');\n\nvar orient = require('robust-orientation');\n\nvar mvp = new Array(16);\nvar pCubeVerts = new Array(8);\nvar cubeVerts = new Array(8);\nvar x = new Array(3);\nvar zero3 = [0, 0, 0];\n\n(function () {\n  for (var i = 0; i < 8; ++i) {\n    pCubeVerts[i] = [1, 1, 1, 1];\n    cubeVerts[i] = [1, 1, 1];\n  }\n})();\n\nfunction transformHg(result, x, mat) {\n  for (var i = 0; i < 4; ++i) {\n    result[i] = mat[12 + i];\n\n    for (var j = 0; j < 3; ++j) {\n      result[i] += x[j] * mat[4 * j + i];\n    }\n  }\n}\n\nvar FRUSTUM_PLANES = [[0, 0, 1, 0, 0], [0, 0, -1, 1, 0], [0, -1, 0, 1, 0], [0, 1, 0, 1, 0], [-1, 0, 0, 1, 0], [1, 0, 0, 1, 0]];\n\nfunction polygonArea(p) {\n  for (var i = 0; i < FRUSTUM_PLANES.length; ++i) {\n    p = splitPoly.positive(p, FRUSTUM_PLANES[i]);\n\n    if (p.length < 3) {\n      return 0;\n    }\n  }\n\n  var base = p[0];\n  var ax = base[0] / base[3];\n  var ay = base[1] / base[3];\n  var area = 0.0;\n\n  for (var i = 1; i + 1 < p.length; ++i) {\n    var b = p[i];\n    var c = p[i + 1];\n    var bx = b[0] / b[3];\n    var by = b[1] / b[3];\n    var cx = c[0] / c[3];\n    var cy = c[1] / c[3];\n    var ux = bx - ax;\n    var uy = by - ay;\n    var vx = cx - ax;\n    var vy = cy - ay;\n    area += Math.abs(ux * vy - uy * vx);\n  }\n\n  return area;\n}\n\nvar CUBE_EDGES = [1, 1, 1];\nvar CUBE_AXIS = [0, 0, 0];\nvar CUBE_RESULT = {\n  cubeEdges: CUBE_EDGES,\n  axis: CUBE_AXIS\n};\n\nfunction getCubeEdges(model, view, projection, bounds, ortho) {\n  //Concatenate matrices\n  multiply(mvp, view, model);\n  multiply(mvp, projection, mvp); //First project cube vertices\n\n  var ptr = 0;\n\n  for (var i = 0; i < 2; ++i) {\n    x[2] = bounds[i][2];\n\n    for (var j = 0; j < 2; ++j) {\n      x[1] = bounds[j][1];\n\n      for (var k = 0; k < 2; ++k) {\n        x[0] = bounds[k][0];\n        transformHg(pCubeVerts[ptr], x, mvp);\n        ptr += 1;\n      }\n    }\n  } //Classify camera against cube faces\n\n\n  var closest = -1;\n\n  for (var i = 0; i < 8; ++i) {\n    var w = pCubeVerts[i][3];\n\n    for (var l = 0; l < 3; ++l) {\n      cubeVerts[i][l] = pCubeVerts[i][l] / w;\n    }\n\n    if (ortho) cubeVerts[i][2] *= -1;\n\n    if (w < 0) {\n      if (closest < 0) {\n        closest = i;\n      } else if (cubeVerts[i][2] < cubeVerts[closest][2]) {\n        closest = i;\n      }\n    }\n  }\n\n  if (closest < 0) {\n    closest = 0;\n\n    for (var d = 0; d < 3; ++d) {\n      var u = (d + 2) % 3;\n      var v = (d + 1) % 3;\n      var o0 = -1;\n      var o1 = -1;\n\n      for (var s = 0; s < 2; ++s) {\n        var f0 = s << d;\n        var f1 = f0 + (s << u) + (1 - s << v);\n        var f2 = f0 + (1 - s << u) + (s << v);\n\n        if (orient(cubeVerts[f0], cubeVerts[f1], cubeVerts[f2], zero3) < 0) {\n          continue;\n        }\n\n        if (s) {\n          o0 = 1;\n        } else {\n          o1 = 1;\n        }\n      }\n\n      if (o0 < 0 || o1 < 0) {\n        if (o1 > o0) {\n          closest |= 1 << d;\n        }\n\n        continue;\n      }\n\n      for (var s = 0; s < 2; ++s) {\n        var f0 = s << d;\n        var f1 = f0 + (s << u) + (1 - s << v);\n        var f2 = f0 + (1 - s << u) + (s << v);\n        var o = polygonArea([pCubeVerts[f0], pCubeVerts[f1], pCubeVerts[f2], pCubeVerts[f0 + (1 << u) + (1 << v)]]);\n\n        if (s) {\n          o0 = o;\n        } else {\n          o1 = o;\n        }\n      }\n\n      if (o1 > o0) {\n        closest |= 1 << d;\n        continue;\n      }\n    }\n  }\n\n  var farthest = 7 ^ closest; //Find lowest vertex which is not closest closest\n\n  var bottom = -1;\n\n  for (var i = 0; i < 8; ++i) {\n    if (i === closest || i === farthest) {\n      continue;\n    }\n\n    if (bottom < 0) {\n      bottom = i;\n    } else if (cubeVerts[bottom][1] > cubeVerts[i][1]) {\n      bottom = i;\n    }\n  } //Find left/right neighbors of bottom vertex\n\n\n  var left = -1;\n\n  for (var i = 0; i < 3; ++i) {\n    var idx = bottom ^ 1 << i;\n\n    if (idx === closest || idx === farthest) {\n      continue;\n    }\n\n    if (left < 0) {\n      left = idx;\n    }\n\n    var v = cubeVerts[idx];\n\n    if (v[0] < cubeVerts[left][0]) {\n      left = idx;\n    }\n  }\n\n  var right = -1;\n\n  for (var i = 0; i < 3; ++i) {\n    var idx = bottom ^ 1 << i;\n\n    if (idx === closest || idx === farthest || idx === left) {\n      continue;\n    }\n\n    if (right < 0) {\n      right = idx;\n    }\n\n    var v = cubeVerts[idx];\n\n    if (v[0] > cubeVerts[right][0]) {\n      right = idx;\n    }\n  } //Determine edge axis coordinates\n\n\n  var cubeEdges = CUBE_EDGES;\n  cubeEdges[0] = cubeEdges[1] = cubeEdges[2] = 0;\n  cubeEdges[bits.log2(left ^ bottom)] = bottom & left;\n  cubeEdges[bits.log2(bottom ^ right)] = bottom & right;\n  var top = right ^ 7;\n\n  if (top === closest || top === farthest) {\n    top = left ^ 7;\n    cubeEdges[bits.log2(right ^ top)] = top & right;\n  } else {\n    cubeEdges[bits.log2(left ^ top)] = top & left;\n  } //Determine visible faces\n\n\n  var axis = CUBE_AXIS;\n  var cutCorner = closest;\n\n  for (var d = 0; d < 3; ++d) {\n    if (cutCorner & 1 << d) {\n      axis[d] = -1;\n    } else {\n      axis[d] = 1;\n    }\n  } //Return result\n\n\n  return CUBE_RESULT;\n}","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/gl-axes3d/lib/cube.js"],"names":["module","exports","getCubeEdges","bits","require","multiply","splitPoly","orient","mvp","Array","pCubeVerts","cubeVerts","x","zero3","i","transformHg","result","mat","j","FRUSTUM_PLANES","polygonArea","p","length","positive","base","ax","ay","area","b","c","bx","by","cx","cy","ux","uy","vx","vy","Math","abs","CUBE_EDGES","CUBE_AXIS","CUBE_RESULT","cubeEdges","axis","model","view","projection","bounds","ortho","ptr","k","closest","w","l","d","u","v","o0","o1","s","f0","f1","f2","o","farthest","bottom","left","idx","right","log2","top","cutCorner"],"mappings":"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","sourcesContent":["\"use strict\"\n\nmodule.exports = getCubeEdges\n\nvar bits      = require('bit-twiddle')\nvar multiply  = require('gl-mat4/multiply')\nvar splitPoly = require('split-polygon')\nvar orient    = require('robust-orientation')\n\nvar mvp        = new Array(16)\nvar pCubeVerts = new Array(8)\nvar cubeVerts  = new Array(8)\nvar x          = new Array(3)\nvar zero3      = [0,0,0]\n\n;(function() {\n  for(var i=0; i<8; ++i) {\n    pCubeVerts[i] =[1,1,1,1]\n    cubeVerts[i] = [1,1,1]\n  }\n})()\n\n\nfunction transformHg(result, x, mat) {\n  for(var i=0; i<4; ++i) {\n    result[i] = mat[12+i]\n    for(var j=0; j<3; ++j) {\n      result[i] += x[j]*mat[4*j+i]\n    }\n  }\n}\n\nvar FRUSTUM_PLANES = [\n  [ 0, 0, 1, 0, 0],\n  [ 0, 0,-1, 1, 0],\n  [ 0,-1, 0, 1, 0],\n  [ 0, 1, 0, 1, 0],\n  [-1, 0, 0, 1, 0],\n  [ 1, 0, 0, 1, 0]\n]\n\nfunction polygonArea(p) {\n  for(var i=0; i<FRUSTUM_PLANES.length; ++i) {\n    p = splitPoly.positive(p, FRUSTUM_PLANES[i])\n    if(p.length < 3) {\n      return 0\n    }\n  }\n\n  var base = p[0]\n  var ax = base[0] / base[3]\n  var ay = base[1] / base[3]\n  var area = 0.0\n  for(var i=1; i+1<p.length; ++i) {\n    var b = p[i]\n    var c = p[i+1]\n\n    var bx = b[0]/b[3]\n    var by = b[1]/b[3]\n    var cx = c[0]/c[3]\n    var cy = c[1]/c[3]\n\n    var ux = bx - ax\n    var uy = by - ay\n\n    var vx = cx - ax\n    var vy = cy - ay\n\n    area += Math.abs(ux * vy - uy * vx)\n  }\n\n  return area\n}\n\nvar CUBE_EDGES = [1,1,1]\nvar CUBE_AXIS  = [0,0,0]\nvar CUBE_RESULT = {\n  cubeEdges: CUBE_EDGES,\n  axis: CUBE_AXIS\n}\n\nfunction getCubeEdges(model, view, projection, bounds, ortho) {\n\n  //Concatenate matrices\n  multiply(mvp, view, model)\n  multiply(mvp, projection, mvp)\n\n  //First project cube vertices\n  var ptr = 0\n  for(var i=0; i<2; ++i) {\n    x[2] = bounds[i][2]\n    for(var j=0; j<2; ++j) {\n      x[1] = bounds[j][1]\n      for(var k=0; k<2; ++k) {\n        x[0] = bounds[k][0]\n        transformHg(pCubeVerts[ptr], x, mvp)\n        ptr += 1\n      }\n    }\n  }\n\n  //Classify camera against cube faces\n  var closest = -1\n\n  for(var i=0; i<8; ++i) {\n    var w = pCubeVerts[i][3]\n    for(var l=0; l<3; ++l) {\n      cubeVerts[i][l] = pCubeVerts[i][l] / w\n    }\n\n    if(ortho) cubeVerts[i][2] *= -1;\n\n    if(w < 0) {\n      if(closest < 0) {\n        closest = i\n      } else if(cubeVerts[i][2] < cubeVerts[closest][2]) {\n        closest = i\n      }\n    }\n  }\n\n  if(closest < 0) {\n    closest = 0\n    for(var d=0; d<3; ++d) {\n      var u = (d+2) % 3\n      var v = (d+1) % 3\n      var o0 = -1\n      var o1 = -1\n      for(var s=0; s<2; ++s) {\n        var f0 = (s<<d)\n        var f1 = f0 + (s << u) + ((1-s) << v)\n        var f2 = f0 + ((1-s) << u) + (s << v)\n        if(orient(cubeVerts[f0], cubeVerts[f1], cubeVerts[f2], zero3) < 0) {\n          continue\n        }\n        if(s) {\n          o0 = 1\n        } else {\n          o1 = 1\n        }\n      }\n      if(o0 < 0 || o1 < 0) {\n        if(o1 > o0) {\n          closest |= 1<<d\n        }\n        continue\n      }\n      for(var s=0; s<2; ++s) {\n        var f0 = (s<<d)\n        var f1 = f0 + (s << u) + ((1-s) << v)\n        var f2 = f0 + ((1-s) << u) + (s << v)\n        var o = polygonArea([\n            pCubeVerts[f0],\n            pCubeVerts[f1],\n            pCubeVerts[f2],\n            pCubeVerts[f0+(1<<u)+(1<<v)]])\n        if(s) {\n          o0 = o\n        } else {\n          o1 = o\n        }\n      }\n      if(o1 > o0) {\n        closest |= 1<<d\n        continue\n      }\n    }\n  }\n\n  var farthest = 7^closest\n\n  //Find lowest vertex which is not closest closest\n  var bottom = -1\n  for(var i=0; i<8; ++i) {\n    if(i === closest || i === farthest) {\n      continue\n    }\n    if(bottom < 0) {\n      bottom = i\n    } else if(cubeVerts[bottom][1] > cubeVerts[i][1]) {\n      bottom = i\n    }\n  }\n\n  //Find left/right neighbors of bottom vertex\n  var left = -1\n  for(var i=0; i<3; ++i) {\n    var idx = bottom ^ (1<<i)\n    if(idx === closest || idx === farthest) {\n      continue\n    }\n    if(left < 0) {\n      left = idx\n    }\n    var v = cubeVerts[idx]\n    if(v[0] < cubeVerts[left][0]) {\n      left = idx\n    }\n  }\n  var right = -1\n  for(var i=0; i<3; ++i) {\n    var idx = bottom ^ (1<<i)\n    if(idx === closest || idx === farthest || idx === left) {\n      continue\n    }\n    if(right < 0) {\n      right = idx\n    }\n    var v = cubeVerts[idx]\n    if(v[0] > cubeVerts[right][0]) {\n      right = idx\n    }\n  }\n\n  //Determine edge axis coordinates\n  var cubeEdges = CUBE_EDGES\n  cubeEdges[0] = cubeEdges[1] = cubeEdges[2] = 0\n  cubeEdges[bits.log2(left^bottom)] = bottom&left\n  cubeEdges[bits.log2(bottom^right)] = bottom&right\n  var top = right ^ 7\n  if(top === closest || top === farthest) {\n    top = left ^ 7\n    cubeEdges[bits.log2(right^top)] = top&right\n  } else {\n    cubeEdges[bits.log2(left^top)] = top&left\n  }\n\n  //Determine visible faces\n  var axis = CUBE_AXIS\n  var cutCorner = closest\n  for(var d=0; d<3; ++d) {\n    if(cutCorner & (1<<d)) {\n      axis[d] = -1\n    } else {\n      axis[d] = 1\n    }\n  }\n\n  //Return result\n  return CUBE_RESULT\n}"]},"metadata":{},"sourceType":"script"}