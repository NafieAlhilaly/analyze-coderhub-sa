{"ast":null,"code":"'use strict';\n/*\n * Return a function that evaluates a set of linear or bicubic control points.\n * This will get evaluated a lot, so we'll at least do a bit of extra work to\n * flatten some of the choices. In particular, we'll unroll the linear/bicubic\n * combinations and we'll allow computing results in parallel to cut down\n * on repeated arithmetic.\n *\n * Take note that we don't search for the correct range in this function. The\n * reason is for consistency due to the corrresponding derivative function. In\n * particular, the derivatives aren't continuous across cells, so it's important\n * to be able control whether the derivative at a cell boundary is approached\n * from one side or the other.\n */\n\nmodule.exports = function (arrays, na, nb, asmoothing, bsmoothing) {\n  var imax = na - 2;\n  var jmax = nb - 2;\n\n  if (asmoothing && bsmoothing) {\n    return function (out, i, j) {\n      if (!out) out = [];\n      var f0, f1, f2, f3, ak, k;\n      var i0 = Math.max(0, Math.min(Math.floor(i), imax));\n      var j0 = Math.max(0, Math.min(Math.floor(j), jmax));\n      var u = Math.max(0, Math.min(1, i - i0));\n      var v = Math.max(0, Math.min(1, j - j0)); // Since it's a grid of control points, the actual indices are * 3:\n\n      i0 *= 3;\n      j0 *= 3; // Precompute some numbers:\n\n      var u2 = u * u;\n      var u3 = u2 * u;\n      var ou = 1 - u;\n      var ou2 = ou * ou;\n      var ou3 = ou2 * ou;\n      var v2 = v * v;\n      var v3 = v2 * v;\n      var ov = 1 - v;\n      var ov2 = ov * ov;\n      var ov3 = ov2 * ov;\n\n      for (k = 0; k < arrays.length; k++) {\n        ak = arrays[k];\n        f0 = ou3 * ak[j0][i0] + 3 * (ou2 * u * ak[j0][i0 + 1] + ou * u2 * ak[j0][i0 + 2]) + u3 * ak[j0][i0 + 3];\n        f1 = ou3 * ak[j0 + 1][i0] + 3 * (ou2 * u * ak[j0 + 1][i0 + 1] + ou * u2 * ak[j0 + 1][i0 + 2]) + u3 * ak[j0 + 1][i0 + 3];\n        f2 = ou3 * ak[j0 + 2][i0] + 3 * (ou2 * u * ak[j0 + 2][i0 + 1] + ou * u2 * ak[j0 + 2][i0 + 2]) + u3 * ak[j0 + 2][i0 + 3];\n        f3 = ou3 * ak[j0 + 3][i0] + 3 * (ou2 * u * ak[j0 + 3][i0 + 1] + ou * u2 * ak[j0 + 3][i0 + 2]) + u3 * ak[j0 + 3][i0 + 3];\n        out[k] = ov3 * f0 + 3 * (ov2 * v * f1 + ov * v2 * f2) + v3 * f3;\n      }\n\n      return out;\n    };\n  } else if (asmoothing) {\n    // Handle smooth in the a-direction but linear in the b-direction by performing four\n    // linear interpolations followed by one cubic interpolation of the result\n    return function (out, i, j) {\n      if (!out) out = [];\n      var i0 = Math.max(0, Math.min(Math.floor(i), imax));\n      var j0 = Math.max(0, Math.min(Math.floor(j), jmax));\n      var u = Math.max(0, Math.min(1, i - i0));\n      var v = Math.max(0, Math.min(1, j - j0));\n      var f0, f1, f2, f3, k, ak;\n      i0 *= 3;\n      var u2 = u * u;\n      var u3 = u2 * u;\n      var ou = 1 - u;\n      var ou2 = ou * ou;\n      var ou3 = ou2 * ou;\n      var ov = 1 - v;\n\n      for (k = 0; k < arrays.length; k++) {\n        ak = arrays[k];\n        f0 = ov * ak[j0][i0] + v * ak[j0 + 1][i0];\n        f1 = ov * ak[j0][i0 + 1] + v * ak[j0 + 1][i0 + 1];\n        f2 = ov * ak[j0][i0 + 2] + v * ak[j0 + 1][i0 + 1];\n        f3 = ov * ak[j0][i0 + 3] + v * ak[j0 + 1][i0 + 1];\n        out[k] = ou3 * f0 + 3 * (ou2 * u * f1 + ou * u2 * f2) + u3 * f3;\n      }\n\n      return out;\n    };\n  } else if (bsmoothing) {\n    // Same as the above case, except reversed:\n    return function (out, i, j) {\n      if (!out) out = [];\n      var i0 = Math.max(0, Math.min(Math.floor(i), imax));\n      var j0 = Math.max(0, Math.min(Math.floor(j), jmax));\n      var u = Math.max(0, Math.min(1, i - i0));\n      var v = Math.max(0, Math.min(1, j - j0));\n      var f0, f1, f2, f3, k, ak;\n      j0 *= 3;\n      var v2 = v * v;\n      var v3 = v2 * v;\n      var ov = 1 - v;\n      var ov2 = ov * ov;\n      var ov3 = ov2 * ov;\n      var ou = 1 - u;\n\n      for (k = 0; k < arrays.length; k++) {\n        ak = arrays[k];\n        f0 = ou * ak[j0][i0] + u * ak[j0][i0 + 1];\n        f1 = ou * ak[j0 + 1][i0] + u * ak[j0 + 1][i0 + 1];\n        f2 = ou * ak[j0 + 2][i0] + u * ak[j0 + 2][i0 + 1];\n        f3 = ou * ak[j0 + 3][i0] + u * ak[j0 + 3][i0 + 1];\n        out[k] = ov3 * f0 + 3 * (ov2 * v * f1 + ov * v2 * f2) + v3 * f3;\n      }\n\n      return out;\n    };\n  } else {\n    // Finally, both directions are linear:\n    return function (out, i, j) {\n      if (!out) out = [];\n      var i0 = Math.max(0, Math.min(Math.floor(i), imax));\n      var j0 = Math.max(0, Math.min(Math.floor(j), jmax));\n      var u = Math.max(0, Math.min(1, i - i0));\n      var v = Math.max(0, Math.min(1, j - j0));\n      var f0, f1, k, ak;\n      var ov = 1 - v;\n      var ou = 1 - u;\n\n      for (k = 0; k < arrays.length; k++) {\n        ak = arrays[k];\n        f0 = ou * ak[j0][i0] + u * ak[j0][i0 + 1];\n        f1 = ou * ak[j0 + 1][i0] + u * ak[j0 + 1][i0 + 1];\n        out[k] = ov * f0 + v * f1;\n      }\n\n      return out;\n    };\n  }\n};","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/plotly.js/src/traces/carpet/create_spline_evaluator.js"],"names":["module","exports","arrays","na","nb","asmoothing","bsmoothing","imax","jmax","out","i","j","f0","f1","f2","f3","ak","k","i0","Math","max","min","floor","j0","u","v","u2","u3","ou","ou2","ou3","v2","v3","ov","ov2","ov3","length"],"mappings":"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","sourcesContent":["'use strict';\n\n/*\n * Return a function that evaluates a set of linear or bicubic control points.\n * This will get evaluated a lot, so we'll at least do a bit of extra work to\n * flatten some of the choices. In particular, we'll unroll the linear/bicubic\n * combinations and we'll allow computing results in parallel to cut down\n * on repeated arithmetic.\n *\n * Take note that we don't search for the correct range in this function. The\n * reason is for consistency due to the corrresponding derivative function. In\n * particular, the derivatives aren't continuous across cells, so it's important\n * to be able control whether the derivative at a cell boundary is approached\n * from one side or the other.\n */\nmodule.exports = function(arrays, na, nb, asmoothing, bsmoothing) {\n    var imax = na - 2;\n    var jmax = nb - 2;\n\n    if(asmoothing && bsmoothing) {\n        return function(out, i, j) {\n            if(!out) out = [];\n            var f0, f1, f2, f3, ak, k;\n\n            var i0 = Math.max(0, Math.min(Math.floor(i), imax));\n            var j0 = Math.max(0, Math.min(Math.floor(j), jmax));\n            var u = Math.max(0, Math.min(1, i - i0));\n            var v = Math.max(0, Math.min(1, j - j0));\n\n            // Since it's a grid of control points, the actual indices are * 3:\n            i0 *= 3;\n            j0 *= 3;\n\n            // Precompute some numbers:\n            var u2 = u * u;\n            var u3 = u2 * u;\n            var ou = 1 - u;\n            var ou2 = ou * ou;\n            var ou3 = ou2 * ou;\n\n            var v2 = v * v;\n            var v3 = v2 * v;\n            var ov = 1 - v;\n            var ov2 = ov * ov;\n            var ov3 = ov2 * ov;\n\n            for(k = 0; k < arrays.length; k++) {\n                ak = arrays[k];\n                f0 = ou3 * ak[j0][i0] + 3 * (ou2 * u * ak[j0][i0 + 1] + ou * u2 * ak[j0][i0 + 2]) + u3 * ak[j0][i0 + 3];\n                f1 = ou3 * ak[j0 + 1][i0] + 3 * (ou2 * u * ak[j0 + 1][i0 + 1] + ou * u2 * ak[j0 + 1][i0 + 2]) + u3 * ak[j0 + 1][i0 + 3];\n                f2 = ou3 * ak[j0 + 2][i0] + 3 * (ou2 * u * ak[j0 + 2][i0 + 1] + ou * u2 * ak[j0 + 2][i0 + 2]) + u3 * ak[j0 + 2][i0 + 3];\n                f3 = ou3 * ak[j0 + 3][i0] + 3 * (ou2 * u * ak[j0 + 3][i0 + 1] + ou * u2 * ak[j0 + 3][i0 + 2]) + u3 * ak[j0 + 3][i0 + 3];\n                out[k] = ov3 * f0 + 3 * (ov2 * v * f1 + ov * v2 * f2) + v3 * f3;\n            }\n\n            return out;\n        };\n    } else if(asmoothing) {\n        // Handle smooth in the a-direction but linear in the b-direction by performing four\n        // linear interpolations followed by one cubic interpolation of the result\n        return function(out, i, j) {\n            if(!out) out = [];\n\n            var i0 = Math.max(0, Math.min(Math.floor(i), imax));\n            var j0 = Math.max(0, Math.min(Math.floor(j), jmax));\n            var u = Math.max(0, Math.min(1, i - i0));\n            var v = Math.max(0, Math.min(1, j - j0));\n\n            var f0, f1, f2, f3, k, ak;\n            i0 *= 3;\n            var u2 = u * u;\n            var u3 = u2 * u;\n            var ou = 1 - u;\n            var ou2 = ou * ou;\n            var ou3 = ou2 * ou;\n            var ov = 1 - v;\n            for(k = 0; k < arrays.length; k++) {\n                ak = arrays[k];\n                f0 = ov * ak[j0][i0] + v * ak[j0 + 1][i0];\n                f1 = ov * ak[j0][i0 + 1] + v * ak[j0 + 1][i0 + 1];\n                f2 = ov * ak[j0][i0 + 2] + v * ak[j0 + 1][i0 + 1];\n                f3 = ov * ak[j0][i0 + 3] + v * ak[j0 + 1][i0 + 1];\n\n                out[k] = ou3 * f0 + 3 * (ou2 * u * f1 + ou * u2 * f2) + u3 * f3;\n            }\n            return out;\n        };\n    } else if(bsmoothing) {\n        // Same as the above case, except reversed:\n        return function(out, i, j) {\n            if(!out) out = [];\n\n            var i0 = Math.max(0, Math.min(Math.floor(i), imax));\n            var j0 = Math.max(0, Math.min(Math.floor(j), jmax));\n            var u = Math.max(0, Math.min(1, i - i0));\n            var v = Math.max(0, Math.min(1, j - j0));\n\n            var f0, f1, f2, f3, k, ak;\n            j0 *= 3;\n            var v2 = v * v;\n            var v3 = v2 * v;\n            var ov = 1 - v;\n            var ov2 = ov * ov;\n            var ov3 = ov2 * ov;\n            var ou = 1 - u;\n            for(k = 0; k < arrays.length; k++) {\n                ak = arrays[k];\n                f0 = ou * ak[j0][i0] + u * ak[j0][i0 + 1];\n                f1 = ou * ak[j0 + 1][i0] + u * ak[j0 + 1][i0 + 1];\n                f2 = ou * ak[j0 + 2][i0] + u * ak[j0 + 2][i0 + 1];\n                f3 = ou * ak[j0 + 3][i0] + u * ak[j0 + 3][i0 + 1];\n\n                out[k] = ov3 * f0 + 3 * (ov2 * v * f1 + ov * v2 * f2) + v3 * f3;\n            }\n            return out;\n        };\n    } else {\n        // Finally, both directions are linear:\n        return function(out, i, j) {\n            if(!out) out = [];\n\n            var i0 = Math.max(0, Math.min(Math.floor(i), imax));\n            var j0 = Math.max(0, Math.min(Math.floor(j), jmax));\n            var u = Math.max(0, Math.min(1, i - i0));\n            var v = Math.max(0, Math.min(1, j - j0));\n\n            var f0, f1, k, ak;\n            var ov = 1 - v;\n            var ou = 1 - u;\n            for(k = 0; k < arrays.length; k++) {\n                ak = arrays[k];\n                f0 = ou * ak[j0][i0] + u * ak[j0][i0 + 1];\n                f1 = ou * ak[j0 + 1][i0] + u * ak[j0 + 1][i0 + 1];\n\n                out[k] = ov * f0 + v * f1;\n            }\n            return out;\n        };\n    }\n};\n"]},"metadata":{},"sourceType":"script"}