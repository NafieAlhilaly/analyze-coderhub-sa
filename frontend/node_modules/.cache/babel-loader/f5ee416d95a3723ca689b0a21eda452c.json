{"ast":null,"code":"'use strict';\n\nvar Registry = require('../../registry');\n\nvar constants = require('./constants'); // convert between axis names (xaxis, xaxis2, etc, elements of gd.layout)\n// and axis id's (x, x2, etc). Would probably have ditched 'xaxis'\n// completely in favor of just 'x' if it weren't ingrained in the API etc.\n\n\nexports.id2name = function id2name(id) {\n  if (typeof id !== 'string' || !id.match(constants.AX_ID_PATTERN)) return;\n  var axNum = id.split(' ')[0].substr(1);\n  if (axNum === '1') axNum = '';\n  return id.charAt(0) + 'axis' + axNum;\n};\n\nexports.name2id = function name2id(name) {\n  if (!name.match(constants.AX_NAME_PATTERN)) return;\n  var axNum = name.substr(5);\n  if (axNum === '1') axNum = '';\n  return name.charAt(0) + axNum;\n};\n/*\n * Cleans up the number of an axis, e.g., 'x002'->'x2', 'x0'->'x', 'x1' -> 'x',\n * etc.\n * If domainId is true, then id could be a domain reference and if it is, the\n * ' domain' part is kept at the end of the axis ID string.\n */\n\n\nexports.cleanId = function cleanId(id, axLetter, domainId) {\n  var domainTest = /( domain)$/.test(id);\n  if (typeof id !== 'string' || !id.match(constants.AX_ID_PATTERN)) return;\n  if (axLetter && id.charAt(0) !== axLetter) return;\n  if (domainTest && !domainId) return;\n  var axNum = id.split(' ')[0].substr(1).replace(/^0+/, '');\n  if (axNum === '1') axNum = '';\n  return id.charAt(0) + axNum + (domainTest && domainId ? ' domain' : '');\n}; // get all axis objects, as restricted in listNames\n\n\nexports.list = function (gd, axLetter, only2d) {\n  var fullLayout = gd._fullLayout;\n  if (!fullLayout) return [];\n  var idList = exports.listIds(gd, axLetter);\n  var out = new Array(idList.length);\n  var i;\n\n  for (i = 0; i < idList.length; i++) {\n    var idi = idList[i];\n    out[i] = fullLayout[idi.charAt(0) + 'axis' + idi.substr(1)];\n  }\n\n  if (!only2d) {\n    var sceneIds3D = fullLayout._subplots.gl3d || [];\n\n    for (i = 0; i < sceneIds3D.length; i++) {\n      var scene = fullLayout[sceneIds3D[i]];\n      if (axLetter) out.push(scene[axLetter + 'axis']);else out.push(scene.xaxis, scene.yaxis, scene.zaxis);\n    }\n  }\n\n  return out;\n}; // get all axis ids, optionally restricted by letter\n// this only makes sense for 2d axes\n\n\nexports.listIds = function (gd, axLetter) {\n  var fullLayout = gd._fullLayout;\n  if (!fullLayout) return [];\n  var subplotLists = fullLayout._subplots;\n  if (axLetter) return subplotLists[axLetter + 'axis'];\n  return subplotLists.xaxis.concat(subplotLists.yaxis);\n}; // get an axis object from its id 'x','x2' etc\n// optionally, id can be a subplot (ie 'x2y3') and type gets x or y from it\n\n\nexports.getFromId = function (gd, id, type) {\n  var fullLayout = gd._fullLayout; // remove \"domain\" suffix\n\n  id = id === undefined || typeof id !== 'string' ? id : id.replace(' domain', '');\n  if (type === 'x') id = id.replace(/y[0-9]*/, '');else if (type === 'y') id = id.replace(/x[0-9]*/, '');\n  return fullLayout[exports.id2name(id)];\n}; // get an axis object of specified type from the containing trace\n\n\nexports.getFromTrace = function (gd, fullTrace, type) {\n  var fullLayout = gd._fullLayout;\n  var ax = null;\n\n  if (Registry.traceIs(fullTrace, 'gl3d')) {\n    var scene = fullTrace.scene;\n\n    if (scene.substr(0, 5) === 'scene') {\n      ax = fullLayout[scene][type + 'axis'];\n    }\n  } else {\n    ax = exports.getFromId(gd, fullTrace[type + 'axis'] || type);\n  }\n\n  return ax;\n}; // sort x, x2, x10, y, y2, y10...\n\n\nexports.idSort = function (id1, id2) {\n  var letter1 = id1.charAt(0);\n  var letter2 = id2.charAt(0);\n  if (letter1 !== letter2) return letter1 > letter2 ? 1 : -1;\n  return +(id1.substr(1) || 1) - +(id2.substr(1) || 1);\n};\n/*\n * An axis reference (e.g., the contents at the 'xref' key of an object) might\n * have extra information appended. Extract the axis ID only.\n *\n * ar: the axis reference string\n *\n */\n\n\nexports.ref2id = function (ar) {\n  // This assumes ar has been coerced via coerceRef, and uses the shortcut of\n  // checking if the first letter matches [xyz] to determine if it should\n  // return the axis ID. Otherwise it returns false.\n  return /^[xyz]/.test(ar) ? ar.split(' ')[0] : false;\n};\n\nfunction isFound(axId, list) {\n  if (list && list.length) {\n    for (var i = 0; i < list.length; i++) {\n      if (list[i][axId]) return true;\n    }\n  }\n\n  return false;\n}\n\nexports.isLinked = function (fullLayout, axId) {\n  return isFound(axId, fullLayout._axisMatchGroups) || isFound(axId, fullLayout._axisConstraintGroups);\n};","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/plotly.js/src/plots/cartesian/axis_ids.js"],"names":["Registry","require","constants","exports","id2name","id","match","AX_ID_PATTERN","axNum","split","substr","charAt","name2id","name","AX_NAME_PATTERN","cleanId","axLetter","domainId","domainTest","test","replace","list","gd","only2d","fullLayout","_fullLayout","idList","listIds","out","Array","length","i","idi","sceneIds3D","_subplots","gl3d","scene","push","xaxis","yaxis","zaxis","subplotLists","concat","getFromId","type","undefined","getFromTrace","fullTrace","ax","traceIs","idSort","id1","id2","letter1","letter2","ref2id","ar","isFound","axId","isLinked","_axisMatchGroups","_axisConstraintGroups"],"mappings":"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","sourcesContent":["'use strict';\n\nvar Registry = require('../../registry');\n\nvar constants = require('./constants');\n\n\n// convert between axis names (xaxis, xaxis2, etc, elements of gd.layout)\n// and axis id's (x, x2, etc). Would probably have ditched 'xaxis'\n// completely in favor of just 'x' if it weren't ingrained in the API etc.\nexports.id2name = function id2name(id) {\n    if(typeof id !== 'string' || !id.match(constants.AX_ID_PATTERN)) return;\n    var axNum = id.split(' ')[0].substr(1);\n    if(axNum === '1') axNum = '';\n    return id.charAt(0) + 'axis' + axNum;\n};\n\nexports.name2id = function name2id(name) {\n    if(!name.match(constants.AX_NAME_PATTERN)) return;\n    var axNum = name.substr(5);\n    if(axNum === '1') axNum = '';\n    return name.charAt(0) + axNum;\n};\n\n/*\n * Cleans up the number of an axis, e.g., 'x002'->'x2', 'x0'->'x', 'x1' -> 'x',\n * etc.\n * If domainId is true, then id could be a domain reference and if it is, the\n * ' domain' part is kept at the end of the axis ID string.\n */\nexports.cleanId = function cleanId(id, axLetter, domainId) {\n    var domainTest = /( domain)$/.test(id);\n    if(typeof id !== 'string' || !id.match(constants.AX_ID_PATTERN)) return;\n    if(axLetter && id.charAt(0) !== axLetter) return;\n    if(domainTest && (!domainId)) return;\n    var axNum = id.split(' ')[0].substr(1).replace(/^0+/, '');\n    if(axNum === '1') axNum = '';\n    return id.charAt(0) + axNum + (domainTest && domainId ? ' domain' : '');\n};\n\n// get all axis objects, as restricted in listNames\nexports.list = function(gd, axLetter, only2d) {\n    var fullLayout = gd._fullLayout;\n    if(!fullLayout) return [];\n\n    var idList = exports.listIds(gd, axLetter);\n    var out = new Array(idList.length);\n    var i;\n\n    for(i = 0; i < idList.length; i++) {\n        var idi = idList[i];\n        out[i] = fullLayout[idi.charAt(0) + 'axis' + idi.substr(1)];\n    }\n\n    if(!only2d) {\n        var sceneIds3D = fullLayout._subplots.gl3d || [];\n\n        for(i = 0; i < sceneIds3D.length; i++) {\n            var scene = fullLayout[sceneIds3D[i]];\n\n            if(axLetter) out.push(scene[axLetter + 'axis']);\n            else out.push(scene.xaxis, scene.yaxis, scene.zaxis);\n        }\n    }\n\n    return out;\n};\n\n// get all axis ids, optionally restricted by letter\n// this only makes sense for 2d axes\nexports.listIds = function(gd, axLetter) {\n    var fullLayout = gd._fullLayout;\n    if(!fullLayout) return [];\n\n    var subplotLists = fullLayout._subplots;\n    if(axLetter) return subplotLists[axLetter + 'axis'];\n    return subplotLists.xaxis.concat(subplotLists.yaxis);\n};\n\n// get an axis object from its id 'x','x2' etc\n// optionally, id can be a subplot (ie 'x2y3') and type gets x or y from it\nexports.getFromId = function(gd, id, type) {\n    var fullLayout = gd._fullLayout;\n    // remove \"domain\" suffix\n    id = ((id === undefined) || (typeof(id) !== 'string')) ? id : id.replace(' domain', '');\n\n    if(type === 'x') id = id.replace(/y[0-9]*/, '');\n    else if(type === 'y') id = id.replace(/x[0-9]*/, '');\n\n    return fullLayout[exports.id2name(id)];\n};\n\n// get an axis object of specified type from the containing trace\nexports.getFromTrace = function(gd, fullTrace, type) {\n    var fullLayout = gd._fullLayout;\n    var ax = null;\n\n    if(Registry.traceIs(fullTrace, 'gl3d')) {\n        var scene = fullTrace.scene;\n        if(scene.substr(0, 5) === 'scene') {\n            ax = fullLayout[scene][type + 'axis'];\n        }\n    } else {\n        ax = exports.getFromId(gd, fullTrace[type + 'axis'] || type);\n    }\n\n    return ax;\n};\n\n// sort x, x2, x10, y, y2, y10...\nexports.idSort = function(id1, id2) {\n    var letter1 = id1.charAt(0);\n    var letter2 = id2.charAt(0);\n    if(letter1 !== letter2) return letter1 > letter2 ? 1 : -1;\n    return +(id1.substr(1) || 1) - +(id2.substr(1) || 1);\n};\n\n/*\n * An axis reference (e.g., the contents at the 'xref' key of an object) might\n * have extra information appended. Extract the axis ID only.\n *\n * ar: the axis reference string\n *\n */\nexports.ref2id = function(ar) {\n    // This assumes ar has been coerced via coerceRef, and uses the shortcut of\n    // checking if the first letter matches [xyz] to determine if it should\n    // return the axis ID. Otherwise it returns false.\n    return (/^[xyz]/.test(ar)) ? ar.split(' ')[0] : false;\n};\n\nfunction isFound(axId, list) {\n    if(list && list.length) {\n        for(var i = 0; i < list.length; i++) {\n            if(list[i][axId]) return true;\n        }\n    }\n    return false;\n}\n\nexports.isLinked = function(fullLayout, axId) {\n    return (\n        isFound(axId, fullLayout._axisMatchGroups) ||\n        isFound(axId, fullLayout._axisConstraintGroups)\n    );\n};\n"]},"metadata":{},"sourceType":"script"}