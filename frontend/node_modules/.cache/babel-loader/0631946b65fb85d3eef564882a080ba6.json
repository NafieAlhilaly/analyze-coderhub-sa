{"ast":null,"code":"'use strict';\n\nvar barAttrs = require('../bar/attributes');\n\nvar lineAttrs = require('../scatter/attributes').line;\n\nvar baseAttrs = require('../../plots/attributes');\n\nvar axisHoverFormat = require('../../plots/cartesian/axis_format_attributes').axisHoverFormat;\n\nvar hovertemplateAttrs = require('../../plots/template_attributes').hovertemplateAttrs;\n\nvar texttemplateAttrs = require('../../plots/template_attributes').texttemplateAttrs;\n\nvar constants = require('./constants');\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nvar Color = require('../../components/color');\n\nfunction directionAttrs(dirTxt) {\n  return {\n    marker: {\n      color: extendFlat({}, barAttrs.marker.color, {\n        arrayOk: false,\n        editType: 'style',\n        description: 'Sets the marker color of all ' + dirTxt + ' values.'\n      }),\n      line: {\n        color: extendFlat({}, barAttrs.marker.line.color, {\n          arrayOk: false,\n          editType: 'style',\n          description: 'Sets the line color of all ' + dirTxt + ' values.'\n        }),\n        width: extendFlat({}, barAttrs.marker.line.width, {\n          arrayOk: false,\n          editType: 'style',\n          description: 'Sets the line width of all ' + dirTxt + ' values.'\n        }),\n        editType: 'style'\n      },\n      editType: 'style'\n    },\n    editType: 'style'\n  };\n}\n\nmodule.exports = {\n  measure: {\n    valType: 'data_array',\n    dflt: [],\n    editType: 'calc',\n    description: ['An array containing types of values.', 'By default the values are considered as \\'relative\\'.', 'However; it is possible to use \\'total\\' to compute the sums.', 'Also \\'absolute\\' could be applied to reset the computed total', 'or to declare an initial value where needed.'].join(' ')\n  },\n  base: {\n    valType: 'number',\n    dflt: null,\n    arrayOk: false,\n    editType: 'calc',\n    description: ['Sets where the bar base is drawn (in position axis units).'].join(' ')\n  },\n  x: barAttrs.x,\n  x0: barAttrs.x0,\n  dx: barAttrs.dx,\n  y: barAttrs.y,\n  y0: barAttrs.y0,\n  dy: barAttrs.dy,\n  xperiod: barAttrs.xperiod,\n  yperiod: barAttrs.yperiod,\n  xperiod0: barAttrs.xperiod0,\n  yperiod0: barAttrs.yperiod0,\n  xperiodalignment: barAttrs.xperiodalignment,\n  yperiodalignment: barAttrs.yperiodalignment,\n  xhoverformat: axisHoverFormat('x'),\n  yhoverformat: axisHoverFormat('y'),\n  hovertext: barAttrs.hovertext,\n  hovertemplate: hovertemplateAttrs({}, {\n    keys: constants.eventDataKeys\n  }),\n  hoverinfo: extendFlat({}, baseAttrs.hoverinfo, {\n    flags: ['name', 'x', 'y', 'text', 'initial', 'delta', 'final']\n  }),\n  textinfo: {\n    valType: 'flaglist',\n    flags: ['label', 'text', 'initial', 'delta', 'final'],\n    extras: ['none'],\n    editType: 'plot',\n    arrayOk: false,\n    description: ['Determines which trace information appear on the graph.', 'In the case of having multiple waterfalls, totals', 'are computed separately (per trace).'].join(' ')\n  },\n  // TODO: incorporate `label` and `value` in the eventData\n  texttemplate: texttemplateAttrs({\n    editType: 'plot'\n  }, {\n    keys: constants.eventDataKeys.concat(['label'])\n  }),\n  text: barAttrs.text,\n  textposition: barAttrs.textposition,\n  insidetextanchor: barAttrs.insidetextanchor,\n  textangle: barAttrs.textangle,\n  textfont: barAttrs.textfont,\n  insidetextfont: barAttrs.insidetextfont,\n  outsidetextfont: barAttrs.outsidetextfont,\n  constraintext: barAttrs.constraintext,\n  cliponaxis: barAttrs.cliponaxis,\n  orientation: barAttrs.orientation,\n  offset: barAttrs.offset,\n  width: barAttrs.width,\n  increasing: directionAttrs('increasing'),\n  decreasing: directionAttrs('decreasing'),\n  totals: directionAttrs('intermediate sums and total'),\n  connector: {\n    line: {\n      color: extendFlat({}, lineAttrs.color, {\n        dflt: Color.defaultLine\n      }),\n      width: extendFlat({}, lineAttrs.width, {\n        editType: 'plot' // i.e. to adjust bars is mode: 'between'. See https://github.com/plotly/plotly.js/issues/3787\n\n      }),\n      dash: lineAttrs.dash,\n      editType: 'plot'\n    },\n    mode: {\n      valType: 'enumerated',\n      values: ['spanning', 'between'],\n      dflt: 'between',\n      editType: 'plot',\n      description: ['Sets the shape of connector lines.'].join(' ')\n    },\n    visible: {\n      valType: 'boolean',\n      dflt: true,\n      editType: 'plot',\n      description: ['Determines if connector lines are drawn. '].join(' ')\n    },\n    editType: 'plot'\n  },\n  offsetgroup: barAttrs.offsetgroup,\n  alignmentgroup: barAttrs.alignmentgroup\n};","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/plotly.js/src/traces/waterfall/attributes.js"],"names":["barAttrs","require","lineAttrs","line","baseAttrs","axisHoverFormat","hovertemplateAttrs","texttemplateAttrs","constants","extendFlat","Color","directionAttrs","dirTxt","marker","color","arrayOk","editType","description","width","module","exports","measure","valType","dflt","join","base","x","x0","dx","y","y0","dy","xperiod","yperiod","xperiod0","yperiod0","xperiodalignment","yperiodalignment","xhoverformat","yhoverformat","hovertext","hovertemplate","keys","eventDataKeys","hoverinfo","flags","textinfo","extras","texttemplate","concat","text","textposition","insidetextanchor","textangle","textfont","insidetextfont","outsidetextfont","constraintext","cliponaxis","orientation","offset","increasing","decreasing","totals","connector","defaultLine","dash","mode","values","visible","offsetgroup","alignmentgroup"],"mappings":"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","sourcesContent":["'use strict';\n\nvar barAttrs = require('../bar/attributes');\nvar lineAttrs = require('../scatter/attributes').line;\nvar baseAttrs = require('../../plots/attributes');\nvar axisHoverFormat = require('../../plots/cartesian/axis_format_attributes').axisHoverFormat;\nvar hovertemplateAttrs = require('../../plots/template_attributes').hovertemplateAttrs;\nvar texttemplateAttrs = require('../../plots/template_attributes').texttemplateAttrs;\nvar constants = require('./constants');\nvar extendFlat = require('../../lib/extend').extendFlat;\nvar Color = require('../../components/color');\n\nfunction directionAttrs(dirTxt) {\n    return {\n        marker: {\n            color: extendFlat({}, barAttrs.marker.color, {\n                arrayOk: false,\n                editType: 'style',\n                description: 'Sets the marker color of all ' + dirTxt + ' values.'\n            }),\n            line: {\n                color: extendFlat({}, barAttrs.marker.line.color, {\n                    arrayOk: false,\n                    editType: 'style',\n                    description: 'Sets the line color of all ' + dirTxt + ' values.'\n                }),\n                width: extendFlat({}, barAttrs.marker.line.width, {\n                    arrayOk: false,\n                    editType: 'style',\n                    description: 'Sets the line width of all ' + dirTxt + ' values.'\n                }),\n                editType: 'style',\n            },\n            editType: 'style'\n        },\n        editType: 'style'\n    };\n}\n\nmodule.exports = {\n    measure: {\n        valType: 'data_array',\n        dflt: [],\n        editType: 'calc',\n        description: [\n            'An array containing types of values.',\n            'By default the values are considered as \\'relative\\'.',\n            'However; it is possible to use \\'total\\' to compute the sums.',\n            'Also \\'absolute\\' could be applied to reset the computed total',\n            'or to declare an initial value where needed.'\n        ].join(' ')\n    },\n\n    base: {\n        valType: 'number',\n        dflt: null,\n        arrayOk: false,\n        editType: 'calc',\n        description: [\n            'Sets where the bar base is drawn (in position axis units).'\n        ].join(' ')\n    },\n\n    x: barAttrs.x,\n    x0: barAttrs.x0,\n    dx: barAttrs.dx,\n    y: barAttrs.y,\n    y0: barAttrs.y0,\n    dy: barAttrs.dy,\n\n    xperiod: barAttrs.xperiod,\n    yperiod: barAttrs.yperiod,\n    xperiod0: barAttrs.xperiod0,\n    yperiod0: barAttrs.yperiod0,\n    xperiodalignment: barAttrs.xperiodalignment,\n    yperiodalignment: barAttrs.yperiodalignment,\n    xhoverformat: axisHoverFormat('x'),\n    yhoverformat: axisHoverFormat('y'),\n\n    hovertext: barAttrs.hovertext,\n    hovertemplate: hovertemplateAttrs({}, {\n        keys: constants.eventDataKeys\n    }),\n\n    hoverinfo: extendFlat({}, baseAttrs.hoverinfo, {\n        flags: ['name', 'x', 'y', 'text', 'initial', 'delta', 'final']\n    }),\n\n    textinfo: {\n        valType: 'flaglist',\n        flags: ['label', 'text', 'initial', 'delta', 'final'],\n        extras: ['none'],\n        editType: 'plot',\n        arrayOk: false,\n        description: [\n            'Determines which trace information appear on the graph.',\n            'In the case of having multiple waterfalls, totals',\n            'are computed separately (per trace).'\n        ].join(' ')\n    },\n    // TODO: incorporate `label` and `value` in the eventData\n    texttemplate: texttemplateAttrs({editType: 'plot'}, {\n        keys: constants.eventDataKeys.concat(['label'])\n    }),\n    text: barAttrs.text,\n    textposition: barAttrs.textposition,\n    insidetextanchor: barAttrs.insidetextanchor,\n    textangle: barAttrs.textangle,\n    textfont: barAttrs.textfont,\n    insidetextfont: barAttrs.insidetextfont,\n    outsidetextfont: barAttrs.outsidetextfont,\n    constraintext: barAttrs.constraintext,\n\n    cliponaxis: barAttrs.cliponaxis,\n    orientation: barAttrs.orientation,\n\n    offset: barAttrs.offset,\n    width: barAttrs.width,\n\n    increasing: directionAttrs('increasing'),\n    decreasing: directionAttrs('decreasing'),\n    totals: directionAttrs('intermediate sums and total'),\n\n    connector: {\n        line: {\n            color: extendFlat({}, lineAttrs.color, {dflt: Color.defaultLine}),\n            width: extendFlat({}, lineAttrs.width, {\n                editType: 'plot', // i.e. to adjust bars is mode: 'between'. See https://github.com/plotly/plotly.js/issues/3787\n            }),\n            dash: lineAttrs.dash,\n            editType: 'plot'\n        },\n        mode: {\n            valType: 'enumerated',\n            values: ['spanning', 'between'],\n            dflt: 'between',\n            editType: 'plot',\n            description: [\n                'Sets the shape of connector lines.'\n            ].join(' ')\n        },\n        visible: {\n            valType: 'boolean',\n            dflt: true,\n            editType: 'plot',\n            description: [\n                'Determines if connector lines are drawn. '\n            ].join(' ')\n        },\n        editType: 'plot'\n    },\n\n    offsetgroup: barAttrs.offsetgroup,\n    alignmentgroup: barAttrs.alignmentgroup\n};\n"]},"metadata":{},"sourceType":"script"}