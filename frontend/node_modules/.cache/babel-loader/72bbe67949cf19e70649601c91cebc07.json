{"ast":null,"code":"'use strict';\n\nvar timerCache = {};\n/**\n * Throttle a callback. `callback` executes synchronously only if\n * more than `minInterval` milliseconds have already elapsed since the latest\n * call (if any). Otherwise we wait until `minInterval` is over and execute the\n * last callback received while waiting.\n * So the first and last events in a train are always executed (eventually)\n * but some of the events in the middle can be dropped.\n *\n * @param {string} id: an identifier to mark events to throttle together\n * @param {number} minInterval: minimum time, in milliseconds, between\n *   invocations of `callback`\n * @param {function} callback: the function to throttle. `callback` itself\n *   should be a purely synchronous function.\n */\n\nexports.throttle = function throttle(id, minInterval, callback) {\n  var cache = timerCache[id];\n  var now = Date.now();\n\n  if (!cache) {\n    /*\n     * Throw out old items before making a new one, to prevent the cache\n     * getting overgrown, for example from old plots that have been replaced.\n     * 1 minute age is arbitrary.\n     */\n    for (var idi in timerCache) {\n      if (timerCache[idi].ts < now - 60000) {\n        delete timerCache[idi];\n      }\n    }\n\n    cache = timerCache[id] = {\n      ts: 0,\n      timer: null\n    };\n  }\n\n  _clearTimeout(cache);\n\n  function exec() {\n    callback();\n    cache.ts = Date.now();\n\n    if (cache.onDone) {\n      cache.onDone();\n      cache.onDone = null;\n    }\n  }\n\n  if (now > cache.ts + minInterval) {\n    exec();\n    return;\n  }\n\n  cache.timer = setTimeout(function () {\n    exec();\n    cache.timer = null;\n  }, minInterval);\n};\n\nexports.done = function (id) {\n  var cache = timerCache[id];\n  if (!cache || !cache.timer) return Promise.resolve();\n  return new Promise(function (resolve) {\n    var previousOnDone = cache.onDone;\n\n    cache.onDone = function onDone() {\n      if (previousOnDone) previousOnDone();\n      resolve();\n      cache.onDone = null;\n    };\n  });\n};\n/**\n * Clear the throttle cache for one or all timers\n * @param {optional string} id:\n *   if provided, clear just this timer\n *   if omitted, clear all timers (mainly useful for testing)\n */\n\n\nexports.clear = function (id) {\n  if (id) {\n    _clearTimeout(timerCache[id]);\n\n    delete timerCache[id];\n  } else {\n    for (var idi in timerCache) {\n      exports.clear(idi);\n    }\n  }\n};\n\nfunction _clearTimeout(cache) {\n  if (cache && cache.timer !== null) {\n    clearTimeout(cache.timer);\n    cache.timer = null;\n  }\n}","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/plotly.js/src/lib/throttle.js"],"names":["timerCache","exports","throttle","id","minInterval","callback","cache","now","Date","idi","ts","timer","_clearTimeout","exec","onDone","setTimeout","done","Promise","resolve","previousOnDone","clear","clearTimeout"],"mappings":"AAAA;;AAEA,IAAIA,UAAU,GAAG,EAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAC,OAAO,CAACC,QAAR,GAAmB,SAASA,QAAT,CAAkBC,EAAlB,EAAsBC,WAAtB,EAAmCC,QAAnC,EAA6C;AAC5D,MAAIC,KAAK,GAAGN,UAAU,CAACG,EAAD,CAAtB;AACA,MAAII,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAV;;AAEA,MAAG,CAACD,KAAJ,EAAW;AACP;AACR;AACA;AACA;AACA;AACQ,SAAI,IAAIG,GAAR,IAAeT,UAAf,EAA2B;AACvB,UAAGA,UAAU,CAACS,GAAD,CAAV,CAAgBC,EAAhB,GAAqBH,GAAG,GAAG,KAA9B,EAAqC;AACjC,eAAOP,UAAU,CAACS,GAAD,CAAjB;AACH;AACJ;;AACDH,IAAAA,KAAK,GAAGN,UAAU,CAACG,EAAD,CAAV,GAAiB;AAACO,MAAAA,EAAE,EAAE,CAAL;AAAQC,MAAAA,KAAK,EAAE;AAAf,KAAzB;AACH;;AAEDC,EAAAA,aAAa,CAACN,KAAD,CAAb;;AAEA,WAASO,IAAT,GAAgB;AACZR,IAAAA,QAAQ;AACRC,IAAAA,KAAK,CAACI,EAAN,GAAWF,IAAI,CAACD,GAAL,EAAX;;AACA,QAAGD,KAAK,CAACQ,MAAT,EAAiB;AACbR,MAAAA,KAAK,CAACQ,MAAN;AACAR,MAAAA,KAAK,CAACQ,MAAN,GAAe,IAAf;AACH;AACJ;;AAED,MAAGP,GAAG,GAAGD,KAAK,CAACI,EAAN,GAAWN,WAApB,EAAiC;AAC7BS,IAAAA,IAAI;AACJ;AACH;;AAEDP,EAAAA,KAAK,CAACK,KAAN,GAAcI,UAAU,CAAC,YAAW;AAChCF,IAAAA,IAAI;AACJP,IAAAA,KAAK,CAACK,KAAN,GAAc,IAAd;AACH,GAHuB,EAGrBP,WAHqB,CAAxB;AAIH,CAtCD;;AAwCAH,OAAO,CAACe,IAAR,GAAe,UAASb,EAAT,EAAa;AACxB,MAAIG,KAAK,GAAGN,UAAU,CAACG,EAAD,CAAtB;AACA,MAAG,CAACG,KAAD,IAAU,CAACA,KAAK,CAACK,KAApB,EAA2B,OAAOM,OAAO,CAACC,OAAR,EAAP;AAE3B,SAAO,IAAID,OAAJ,CAAY,UAASC,OAAT,EAAkB;AACjC,QAAIC,cAAc,GAAGb,KAAK,CAACQ,MAA3B;;AACAR,IAAAA,KAAK,CAACQ,MAAN,GAAe,SAASA,MAAT,GAAkB;AAC7B,UAAGK,cAAH,EAAmBA,cAAc;AACjCD,MAAAA,OAAO;AACPZ,MAAAA,KAAK,CAACQ,MAAN,GAAe,IAAf;AACH,KAJD;AAKH,GAPM,CAAP;AAQH,CAZD;AAcA;AACA;AACA;AACA;AACA;AACA;;;AACAb,OAAO,CAACmB,KAAR,GAAgB,UAASjB,EAAT,EAAa;AACzB,MAAGA,EAAH,EAAO;AACHS,IAAAA,aAAa,CAACZ,UAAU,CAACG,EAAD,CAAX,CAAb;;AACA,WAAOH,UAAU,CAACG,EAAD,CAAjB;AACH,GAHD,MAGO;AACH,SAAI,IAAIM,GAAR,IAAeT,UAAf;AAA2BC,MAAAA,OAAO,CAACmB,KAAR,CAAcX,GAAd;AAA3B;AACH;AACJ,CAPD;;AASA,SAASG,aAAT,CAAuBN,KAAvB,EAA8B;AAC1B,MAAGA,KAAK,IAAIA,KAAK,CAACK,KAAN,KAAgB,IAA5B,EAAkC;AAC9BU,IAAAA,YAAY,CAACf,KAAK,CAACK,KAAP,CAAZ;AACAL,IAAAA,KAAK,CAACK,KAAN,GAAc,IAAd;AACH;AACJ","sourcesContent":["'use strict';\n\nvar timerCache = {};\n\n/**\n * Throttle a callback. `callback` executes synchronously only if\n * more than `minInterval` milliseconds have already elapsed since the latest\n * call (if any). Otherwise we wait until `minInterval` is over and execute the\n * last callback received while waiting.\n * So the first and last events in a train are always executed (eventually)\n * but some of the events in the middle can be dropped.\n *\n * @param {string} id: an identifier to mark events to throttle together\n * @param {number} minInterval: minimum time, in milliseconds, between\n *   invocations of `callback`\n * @param {function} callback: the function to throttle. `callback` itself\n *   should be a purely synchronous function.\n */\nexports.throttle = function throttle(id, minInterval, callback) {\n    var cache = timerCache[id];\n    var now = Date.now();\n\n    if(!cache) {\n        /*\n         * Throw out old items before making a new one, to prevent the cache\n         * getting overgrown, for example from old plots that have been replaced.\n         * 1 minute age is arbitrary.\n         */\n        for(var idi in timerCache) {\n            if(timerCache[idi].ts < now - 60000) {\n                delete timerCache[idi];\n            }\n        }\n        cache = timerCache[id] = {ts: 0, timer: null};\n    }\n\n    _clearTimeout(cache);\n\n    function exec() {\n        callback();\n        cache.ts = Date.now();\n        if(cache.onDone) {\n            cache.onDone();\n            cache.onDone = null;\n        }\n    }\n\n    if(now > cache.ts + minInterval) {\n        exec();\n        return;\n    }\n\n    cache.timer = setTimeout(function() {\n        exec();\n        cache.timer = null;\n    }, minInterval);\n};\n\nexports.done = function(id) {\n    var cache = timerCache[id];\n    if(!cache || !cache.timer) return Promise.resolve();\n\n    return new Promise(function(resolve) {\n        var previousOnDone = cache.onDone;\n        cache.onDone = function onDone() {\n            if(previousOnDone) previousOnDone();\n            resolve();\n            cache.onDone = null;\n        };\n    });\n};\n\n/**\n * Clear the throttle cache for one or all timers\n * @param {optional string} id:\n *   if provided, clear just this timer\n *   if omitted, clear all timers (mainly useful for testing)\n */\nexports.clear = function(id) {\n    if(id) {\n        _clearTimeout(timerCache[id]);\n        delete timerCache[id];\n    } else {\n        for(var idi in timerCache) exports.clear(idi);\n    }\n};\n\nfunction _clearTimeout(cache) {\n    if(cache && cache.timer !== null) {\n        clearTimeout(cache.timer);\n        cache.timer = null;\n    }\n}\n"]},"metadata":{},"sourceType":"script"}