{"ast":null,"code":"'use strict';\n\nvar Lib = require('../../lib'); // look for either subplot or xaxis and yaxis attributes\n// does not handle splom case\n\n\nexports.getSubplot = function (trace) {\n  return trace.subplot || trace.xaxis + trace.yaxis || trace.geo;\n}; // is trace in given list of subplots?\n// does handle splom case\n\n\nexports.isTraceInSubplots = function (trace, subplots) {\n  if (trace.type === 'splom') {\n    var xaxes = trace.xaxes || [];\n    var yaxes = trace.yaxes || [];\n\n    for (var i = 0; i < xaxes.length; i++) {\n      for (var j = 0; j < yaxes.length; j++) {\n        if (subplots.indexOf(xaxes[i] + yaxes[j]) !== -1) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  return subplots.indexOf(exports.getSubplot(trace)) !== -1;\n}; // convenience functions for mapping all relevant axes\n\n\nexports.flat = function (subplots, v) {\n  var out = new Array(subplots.length);\n\n  for (var i = 0; i < subplots.length; i++) {\n    out[i] = v;\n  }\n\n  return out;\n};\n\nexports.p2c = function (axArray, v) {\n  var out = new Array(axArray.length);\n\n  for (var i = 0; i < axArray.length; i++) {\n    out[i] = axArray[i].p2c(v);\n  }\n\n  return out;\n};\n\nexports.getDistanceFunction = function (mode, dx, dy, dxy) {\n  if (mode === 'closest') return dxy || exports.quadrature(dx, dy);\n  return mode.charAt(0) === 'x' ? dx : dy;\n};\n\nexports.getClosest = function (cd, distfn, pointData) {\n  // do we already have a point number? (array mode only)\n  if (pointData.index !== false) {\n    if (pointData.index >= 0 && pointData.index < cd.length) {\n      pointData.distance = 0;\n    } else pointData.index = false;\n  } else {\n    // apply the distance function to each data point\n    // this is the longest loop... if this bogs down, we may need\n    // to create pre-sorted data (by x or y), not sure how to\n    // do this for 'closest'\n    for (var i = 0; i < cd.length; i++) {\n      var newDistance = distfn(cd[i]);\n\n      if (newDistance <= pointData.distance) {\n        pointData.index = i;\n        pointData.distance = newDistance;\n      }\n    }\n  }\n\n  return pointData;\n};\n/*\n * pseudo-distance function for hover effects on areas: inside the region\n * distance is finite (`passVal`), outside it's Infinity.\n *\n * @param {number} v0: signed difference between the current position and the left edge\n * @param {number} v1: signed difference between the current position and the right edge\n * @param {number} passVal: the value to return on success\n */\n\n\nexports.inbox = function (v0, v1, passVal) {\n  return v0 * v1 < 0 || v0 === 0 ? passVal : Infinity;\n};\n\nexports.quadrature = function (dx, dy) {\n  return function (di) {\n    var x = dx(di);\n    var y = dy(di);\n    return Math.sqrt(x * x + y * y);\n  };\n};\n/** Fill event data point object for hover and selection.\n *  Invokes _module.eventData if present.\n *\n * N.B. note that point 'index' corresponds to input data array index\n *  whereas 'number' is its post-transform version.\n *\n * If the hovered/selected pt corresponds to an multiple input points\n * (e.g. for histogram and transformed traces), 'pointNumbers` and 'pointIndices'\n * are include in the event data.\n *\n * @param {object} pt\n * @param {object} trace\n * @param {object} cd\n * @return {object}\n */\n\n\nexports.makeEventData = function (pt, trace, cd) {\n  // hover uses 'index', select uses 'pointNumber'\n  var pointNumber = 'index' in pt ? pt.index : pt.pointNumber;\n  var out = {\n    data: trace._input,\n    fullData: trace,\n    curveNumber: trace.index,\n    pointNumber: pointNumber\n  };\n\n  if (trace._indexToPoints) {\n    var pointIndices = trace._indexToPoints[pointNumber];\n\n    if (pointIndices.length === 1) {\n      out.pointIndex = pointIndices[0];\n    } else {\n      out.pointIndices = pointIndices;\n    }\n  } else {\n    out.pointIndex = pointNumber;\n  }\n\n  if (trace._module.eventData) {\n    out = trace._module.eventData(out, pt, trace, cd, pointNumber);\n  } else {\n    if ('xVal' in pt) out.x = pt.xVal;else if ('x' in pt) out.x = pt.x;\n    if ('yVal' in pt) out.y = pt.yVal;else if ('y' in pt) out.y = pt.y;\n    if (pt.xa) out.xaxis = pt.xa;\n    if (pt.ya) out.yaxis = pt.ya;\n    if (pt.zLabelVal !== undefined) out.z = pt.zLabelVal;\n  }\n\n  exports.appendArrayPointValue(out, trace, pointNumber);\n  return out;\n};\n/** Appends values inside array attributes corresponding to given point number\n *\n * @param {object} pointData : point data object (gets mutated here)\n * @param {object} trace : full trace object\n * @param {number|Array(number)} pointNumber : point number. May be a length-2 array\n *     [row, col] to dig into 2D arrays\n */\n\n\nexports.appendArrayPointValue = function (pointData, trace, pointNumber) {\n  var arrayAttrs = trace._arrayAttrs;\n\n  if (!arrayAttrs) {\n    return;\n  }\n\n  for (var i = 0; i < arrayAttrs.length; i++) {\n    var astr = arrayAttrs[i];\n    var key = getPointKey(astr);\n\n    if (pointData[key] === undefined) {\n      var val = Lib.nestedProperty(trace, astr).get();\n      var pointVal = getPointData(val, pointNumber);\n      if (pointVal !== undefined) pointData[key] = pointVal;\n    }\n  }\n};\n/**\n * Appends values inside array attributes corresponding to given point number array\n * For use when pointData references a plot entity that arose (or potentially arose)\n * from multiple points in the input data\n *\n * @param {object} pointData : point data object (gets mutated here)\n * @param {object} trace : full trace object\n * @param {Array(number)|Array(Array(number))} pointNumbers : Array of point numbers.\n *     Each entry in the array may itself be a length-2 array [row, col] to dig into 2D arrays\n */\n\n\nexports.appendArrayMultiPointValues = function (pointData, trace, pointNumbers) {\n  var arrayAttrs = trace._arrayAttrs;\n\n  if (!arrayAttrs) {\n    return;\n  }\n\n  for (var i = 0; i < arrayAttrs.length; i++) {\n    var astr = arrayAttrs[i];\n    var key = getPointKey(astr);\n\n    if (pointData[key] === undefined) {\n      var val = Lib.nestedProperty(trace, astr).get();\n      var keyVal = new Array(pointNumbers.length);\n\n      for (var j = 0; j < pointNumbers.length; j++) {\n        keyVal[j] = getPointData(val, pointNumbers[j]);\n      }\n\n      pointData[key] = keyVal;\n    }\n  }\n};\n\nvar pointKeyMap = {\n  ids: 'id',\n  locations: 'location',\n  labels: 'label',\n  values: 'value',\n  'marker.colors': 'color',\n  parents: 'parent'\n};\n\nfunction getPointKey(astr) {\n  return pointKeyMap[astr] || astr;\n}\n\nfunction getPointData(val, pointNumber) {\n  if (Array.isArray(pointNumber)) {\n    if (Array.isArray(val) && Array.isArray(val[pointNumber[0]])) {\n      return val[pointNumber[0]][pointNumber[1]];\n    }\n  } else {\n    return val[pointNumber];\n  }\n}\n\nvar xyHoverMode = {\n  x: true,\n  y: true\n};\nvar unifiedHoverMode = {\n  'x unified': true,\n  'y unified': true\n};\n\nexports.isUnifiedHover = function (hovermode) {\n  if (typeof hovermode !== 'string') return false;\n  return !!unifiedHoverMode[hovermode];\n};\n\nexports.isXYhover = function (hovermode) {\n  if (typeof hovermode !== 'string') return false;\n  return !!xyHoverMode[hovermode];\n};","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/plotly.js/src/components/fx/helpers.js"],"names":["Lib","require","exports","getSubplot","trace","subplot","xaxis","yaxis","geo","isTraceInSubplots","subplots","type","xaxes","yaxes","i","length","j","indexOf","flat","v","out","Array","p2c","axArray","getDistanceFunction","mode","dx","dy","dxy","quadrature","charAt","getClosest","cd","distfn","pointData","index","distance","newDistance","inbox","v0","v1","passVal","Infinity","di","x","y","Math","sqrt","makeEventData","pt","pointNumber","data","_input","fullData","curveNumber","_indexToPoints","pointIndices","pointIndex","_module","eventData","xVal","yVal","xa","ya","zLabelVal","undefined","z","appendArrayPointValue","arrayAttrs","_arrayAttrs","astr","key","getPointKey","val","nestedProperty","get","pointVal","getPointData","appendArrayMultiPointValues","pointNumbers","keyVal","pointKeyMap","ids","locations","labels","values","parents","isArray","xyHoverMode","unifiedHoverMode","isUnifiedHover","hovermode","isXYhover"],"mappings":"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","sourcesContent":["'use strict';\n\nvar Lib = require('../../lib');\n\n// look for either subplot or xaxis and yaxis attributes\n// does not handle splom case\nexports.getSubplot = function(trace) {\n    return trace.subplot || (trace.xaxis + trace.yaxis) || trace.geo;\n};\n\n// is trace in given list of subplots?\n// does handle splom case\nexports.isTraceInSubplots = function(trace, subplots) {\n    if(trace.type === 'splom') {\n        var xaxes = trace.xaxes || [];\n        var yaxes = trace.yaxes || [];\n        for(var i = 0; i < xaxes.length; i++) {\n            for(var j = 0; j < yaxes.length; j++) {\n                if(subplots.indexOf(xaxes[i] + yaxes[j]) !== -1) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    return subplots.indexOf(exports.getSubplot(trace)) !== -1;\n};\n\n// convenience functions for mapping all relevant axes\nexports.flat = function(subplots, v) {\n    var out = new Array(subplots.length);\n    for(var i = 0; i < subplots.length; i++) {\n        out[i] = v;\n    }\n    return out;\n};\n\nexports.p2c = function(axArray, v) {\n    var out = new Array(axArray.length);\n    for(var i = 0; i < axArray.length; i++) {\n        out[i] = axArray[i].p2c(v);\n    }\n    return out;\n};\n\nexports.getDistanceFunction = function(mode, dx, dy, dxy) {\n    if(mode === 'closest') return dxy || exports.quadrature(dx, dy);\n    return mode.charAt(0) === 'x' ? dx : dy;\n};\n\nexports.getClosest = function(cd, distfn, pointData) {\n    // do we already have a point number? (array mode only)\n    if(pointData.index !== false) {\n        if(pointData.index >= 0 && pointData.index < cd.length) {\n            pointData.distance = 0;\n        } else pointData.index = false;\n    } else {\n        // apply the distance function to each data point\n        // this is the longest loop... if this bogs down, we may need\n        // to create pre-sorted data (by x or y), not sure how to\n        // do this for 'closest'\n        for(var i = 0; i < cd.length; i++) {\n            var newDistance = distfn(cd[i]);\n            if(newDistance <= pointData.distance) {\n                pointData.index = i;\n                pointData.distance = newDistance;\n            }\n        }\n    }\n    return pointData;\n};\n\n/*\n * pseudo-distance function for hover effects on areas: inside the region\n * distance is finite (`passVal`), outside it's Infinity.\n *\n * @param {number} v0: signed difference between the current position and the left edge\n * @param {number} v1: signed difference between the current position and the right edge\n * @param {number} passVal: the value to return on success\n */\nexports.inbox = function(v0, v1, passVal) {\n    return (v0 * v1 < 0 || v0 === 0) ? passVal : Infinity;\n};\n\nexports.quadrature = function(dx, dy) {\n    return function(di) {\n        var x = dx(di);\n        var y = dy(di);\n        return Math.sqrt(x * x + y * y);\n    };\n};\n\n/** Fill event data point object for hover and selection.\n *  Invokes _module.eventData if present.\n *\n * N.B. note that point 'index' corresponds to input data array index\n *  whereas 'number' is its post-transform version.\n *\n * If the hovered/selected pt corresponds to an multiple input points\n * (e.g. for histogram and transformed traces), 'pointNumbers` and 'pointIndices'\n * are include in the event data.\n *\n * @param {object} pt\n * @param {object} trace\n * @param {object} cd\n * @return {object}\n */\nexports.makeEventData = function(pt, trace, cd) {\n    // hover uses 'index', select uses 'pointNumber'\n    var pointNumber = 'index' in pt ? pt.index : pt.pointNumber;\n\n    var out = {\n        data: trace._input,\n        fullData: trace,\n        curveNumber: trace.index,\n        pointNumber: pointNumber\n    };\n\n    if(trace._indexToPoints) {\n        var pointIndices = trace._indexToPoints[pointNumber];\n\n        if(pointIndices.length === 1) {\n            out.pointIndex = pointIndices[0];\n        } else {\n            out.pointIndices = pointIndices;\n        }\n    } else {\n        out.pointIndex = pointNumber;\n    }\n\n    if(trace._module.eventData) {\n        out = trace._module.eventData(out, pt, trace, cd, pointNumber);\n    } else {\n        if('xVal' in pt) out.x = pt.xVal;\n        else if('x' in pt) out.x = pt.x;\n\n        if('yVal' in pt) out.y = pt.yVal;\n        else if('y' in pt) out.y = pt.y;\n\n        if(pt.xa) out.xaxis = pt.xa;\n        if(pt.ya) out.yaxis = pt.ya;\n        if(pt.zLabelVal !== undefined) out.z = pt.zLabelVal;\n    }\n\n    exports.appendArrayPointValue(out, trace, pointNumber);\n\n    return out;\n};\n\n/** Appends values inside array attributes corresponding to given point number\n *\n * @param {object} pointData : point data object (gets mutated here)\n * @param {object} trace : full trace object\n * @param {number|Array(number)} pointNumber : point number. May be a length-2 array\n *     [row, col] to dig into 2D arrays\n */\nexports.appendArrayPointValue = function(pointData, trace, pointNumber) {\n    var arrayAttrs = trace._arrayAttrs;\n\n    if(!arrayAttrs) {\n        return;\n    }\n\n    for(var i = 0; i < arrayAttrs.length; i++) {\n        var astr = arrayAttrs[i];\n        var key = getPointKey(astr);\n\n        if(pointData[key] === undefined) {\n            var val = Lib.nestedProperty(trace, astr).get();\n            var pointVal = getPointData(val, pointNumber);\n\n            if(pointVal !== undefined) pointData[key] = pointVal;\n        }\n    }\n};\n\n/**\n * Appends values inside array attributes corresponding to given point number array\n * For use when pointData references a plot entity that arose (or potentially arose)\n * from multiple points in the input data\n *\n * @param {object} pointData : point data object (gets mutated here)\n * @param {object} trace : full trace object\n * @param {Array(number)|Array(Array(number))} pointNumbers : Array of point numbers.\n *     Each entry in the array may itself be a length-2 array [row, col] to dig into 2D arrays\n */\nexports.appendArrayMultiPointValues = function(pointData, trace, pointNumbers) {\n    var arrayAttrs = trace._arrayAttrs;\n\n    if(!arrayAttrs) {\n        return;\n    }\n\n    for(var i = 0; i < arrayAttrs.length; i++) {\n        var astr = arrayAttrs[i];\n        var key = getPointKey(astr);\n\n        if(pointData[key] === undefined) {\n            var val = Lib.nestedProperty(trace, astr).get();\n            var keyVal = new Array(pointNumbers.length);\n\n            for(var j = 0; j < pointNumbers.length; j++) {\n                keyVal[j] = getPointData(val, pointNumbers[j]);\n            }\n            pointData[key] = keyVal;\n        }\n    }\n};\n\nvar pointKeyMap = {\n    ids: 'id',\n    locations: 'location',\n    labels: 'label',\n    values: 'value',\n    'marker.colors': 'color',\n    parents: 'parent'\n};\n\nfunction getPointKey(astr) {\n    return pointKeyMap[astr] || astr;\n}\n\nfunction getPointData(val, pointNumber) {\n    if(Array.isArray(pointNumber)) {\n        if(Array.isArray(val) && Array.isArray(val[pointNumber[0]])) {\n            return val[pointNumber[0]][pointNumber[1]];\n        }\n    } else {\n        return val[pointNumber];\n    }\n}\n\nvar xyHoverMode = {\n    x: true,\n    y: true\n};\n\nvar unifiedHoverMode = {\n    'x unified': true,\n    'y unified': true\n};\n\nexports.isUnifiedHover = function(hovermode) {\n    if(typeof hovermode !== 'string') return false;\n    return !!unifiedHoverMode[hovermode];\n};\n\nexports.isXYhover = function(hovermode) {\n    if(typeof hovermode !== 'string') return false;\n    return !!xyHoverMode[hovermode];\n};\n"]},"metadata":{},"sourceType":"script"}