{"ast":null,"code":"'use strict';\n\nvar Lib = require('../../lib');\n\nvar layoutAttributes = require('./layout_attributes');\n\nmodule.exports = function (layoutIn, layoutOut, fullData) {\n  var hasTraceType = false;\n\n  function coerce(attr, dflt) {\n    return Lib.coerce(layoutIn, layoutOut, layoutAttributes, attr, dflt);\n  }\n\n  for (var i = 0; i < fullData.length; i++) {\n    var trace = fullData[i];\n\n    if (trace.visible && trace.type === 'waterfall') {\n      hasTraceType = true;\n      break;\n    }\n  }\n\n  if (hasTraceType) {\n    coerce('waterfallmode');\n    coerce('waterfallgap', 0.2);\n    coerce('waterfallgroupgap');\n  }\n};","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/plotly.js/src/traces/waterfall/layout_defaults.js"],"names":["Lib","require","layoutAttributes","module","exports","layoutIn","layoutOut","fullData","hasTraceType","coerce","attr","dflt","i","length","trace","visible","type"],"mappings":"AAAA;;AAEA,IAAIA,GAAG,GAAGC,OAAO,CAAC,WAAD,CAAjB;;AACA,IAAIC,gBAAgB,GAAGD,OAAO,CAAC,qBAAD,CAA9B;;AAEAE,MAAM,CAACC,OAAP,GAAiB,UAASC,QAAT,EAAmBC,SAAnB,EAA8BC,QAA9B,EAAwC;AACrD,MAAIC,YAAY,GAAG,KAAnB;;AAEA,WAASC,MAAT,CAAgBC,IAAhB,EAAsBC,IAAtB,EAA4B;AACxB,WAAOX,GAAG,CAACS,MAAJ,CAAWJ,QAAX,EAAqBC,SAArB,EAAgCJ,gBAAhC,EAAkDQ,IAAlD,EAAwDC,IAAxD,CAAP;AACH;;AAED,OAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGL,QAAQ,CAACM,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACrC,QAAIE,KAAK,GAAGP,QAAQ,CAACK,CAAD,CAApB;;AAEA,QAAGE,KAAK,CAACC,OAAN,IAAiBD,KAAK,CAACE,IAAN,KAAe,WAAnC,EAAgD;AAC5CR,MAAAA,YAAY,GAAG,IAAf;AACA;AACH;AACJ;;AAED,MAAGA,YAAH,EAAiB;AACbC,IAAAA,MAAM,CAAC,eAAD,CAAN;AACAA,IAAAA,MAAM,CAAC,cAAD,EAAiB,GAAjB,CAAN;AACAA,IAAAA,MAAM,CAAC,mBAAD,CAAN;AACH;AACJ,CArBD","sourcesContent":["'use strict';\n\nvar Lib = require('../../lib');\nvar layoutAttributes = require('./layout_attributes');\n\nmodule.exports = function(layoutIn, layoutOut, fullData) {\n    var hasTraceType = false;\n\n    function coerce(attr, dflt) {\n        return Lib.coerce(layoutIn, layoutOut, layoutAttributes, attr, dflt);\n    }\n\n    for(var i = 0; i < fullData.length; i++) {\n        var trace = fullData[i];\n\n        if(trace.visible && trace.type === 'waterfall') {\n            hasTraceType = true;\n            break;\n        }\n    }\n\n    if(hasTraceType) {\n        coerce('waterfallmode');\n        coerce('waterfallgap', 0.2);\n        coerce('waterfallgroupgap');\n    }\n};\n"]},"metadata":{},"sourceType":"script"}