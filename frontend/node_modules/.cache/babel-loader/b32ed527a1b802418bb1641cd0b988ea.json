{"ast":null,"code":"'use strict';\n\nvar d3 = require('@plotly/d3');\n\nvar Colorscale = require('../../components/colorscale');\n\nvar endPlus = require('./end_plus');\n\nmodule.exports = function makeColorMap(trace) {\n  var contours = trace.contours;\n  var start = contours.start;\n  var end = endPlus(contours);\n  var cs = contours.size || 1;\n  var nc = Math.floor((end - start) / cs) + 1;\n  var extra = contours.coloring === 'lines' ? 0 : 1;\n  var cOpts = Colorscale.extractOpts(trace);\n\n  if (!isFinite(cs)) {\n    cs = 1;\n    nc = 1;\n  }\n\n  var scl = cOpts.reversescale ? Colorscale.flipScale(cOpts.colorscale) : cOpts.colorscale;\n  var len = scl.length;\n  var domain = new Array(len);\n  var range = new Array(len);\n  var si, i;\n\n  if (contours.coloring === 'heatmap') {\n    var zmin0 = cOpts.min;\n    var zmax0 = cOpts.max;\n\n    for (i = 0; i < len; i++) {\n      si = scl[i];\n      domain[i] = si[0] * (zmax0 - zmin0) + zmin0;\n      range[i] = si[1];\n    } // do the contours extend beyond the colorscale?\n    // if so, extend the colorscale with constants\n\n\n    var zRange = d3.extent([zmin0, zmax0, contours.start, contours.start + cs * (nc - 1)]);\n    var zmin = zRange[zmin0 < zmax0 ? 0 : 1];\n    var zmax = zRange[zmin0 < zmax0 ? 1 : 0];\n\n    if (zmin !== zmin0) {\n      domain.splice(0, 0, zmin);\n      range.splice(0, 0, range[0]);\n    }\n\n    if (zmax !== zmax0) {\n      domain.push(zmax);\n      range.push(range[range.length - 1]);\n    }\n  } else {\n    for (i = 0; i < len; i++) {\n      si = scl[i];\n      domain[i] = (si[0] * (nc + extra - 1) - extra / 2) * cs + start;\n      range[i] = si[1];\n    }\n  }\n\n  return Colorscale.makeColorScaleFunc({\n    domain: domain,\n    range: range\n  }, {\n    noNumericCheck: true\n  });\n};","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/plotly.js/src/traces/contour/make_color_map.js"],"names":["d3","require","Colorscale","endPlus","module","exports","makeColorMap","trace","contours","start","end","cs","size","nc","Math","floor","extra","coloring","cOpts","extractOpts","isFinite","scl","reversescale","flipScale","colorscale","len","length","domain","Array","range","si","i","zmin0","min","zmax0","max","zRange","extent","zmin","zmax","splice","push","makeColorScaleFunc","noNumericCheck"],"mappings":"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","sourcesContent":["'use strict';\n\nvar d3 = require('@plotly/d3');\n\nvar Colorscale = require('../../components/colorscale');\nvar endPlus = require('./end_plus');\n\nmodule.exports = function makeColorMap(trace) {\n    var contours = trace.contours;\n    var start = contours.start;\n    var end = endPlus(contours);\n    var cs = contours.size || 1;\n    var nc = Math.floor((end - start) / cs) + 1;\n    var extra = contours.coloring === 'lines' ? 0 : 1;\n    var cOpts = Colorscale.extractOpts(trace);\n\n    if(!isFinite(cs)) {\n        cs = 1;\n        nc = 1;\n    }\n\n    var scl = cOpts.reversescale ?\n        Colorscale.flipScale(cOpts.colorscale) :\n        cOpts.colorscale;\n\n    var len = scl.length;\n    var domain = new Array(len);\n    var range = new Array(len);\n\n    var si, i;\n\n    if(contours.coloring === 'heatmap') {\n        var zmin0 = cOpts.min;\n        var zmax0 = cOpts.max;\n\n        for(i = 0; i < len; i++) {\n            si = scl[i];\n            domain[i] = si[0] * (zmax0 - zmin0) + zmin0;\n            range[i] = si[1];\n        }\n\n        // do the contours extend beyond the colorscale?\n        // if so, extend the colorscale with constants\n        var zRange = d3.extent([\n            zmin0,\n            zmax0,\n            contours.start,\n            contours.start + cs * (nc - 1)\n        ]);\n        var zmin = zRange[zmin0 < zmax0 ? 0 : 1];\n        var zmax = zRange[zmin0 < zmax0 ? 1 : 0];\n\n        if(zmin !== zmin0) {\n            domain.splice(0, 0, zmin);\n            range.splice(0, 0, range[0]);\n        }\n\n        if(zmax !== zmax0) {\n            domain.push(zmax);\n            range.push(range[range.length - 1]);\n        }\n    } else {\n        for(i = 0; i < len; i++) {\n            si = scl[i];\n            domain[i] = (si[0] * (nc + extra - 1) - (extra / 2)) * cs + start;\n            range[i] = si[1];\n        }\n    }\n\n    return Colorscale.makeColorScaleFunc(\n        {domain: domain, range: range},\n        {noNumericCheck: true}\n    );\n};\n"]},"metadata":{},"sourceType":"script"}