{"ast":null,"code":"'use strict';\n\nvar d3 = require('@plotly/d3');\n\nvar Lib = require('../../lib');\n\nfunction resizeText(gd, gTrace, traceType) {\n  var fullLayout = gd._fullLayout;\n  var minSize = fullLayout['_' + traceType + 'Text_minsize'];\n\n  if (minSize) {\n    var shouldHide = fullLayout.uniformtext.mode === 'hide';\n    var selector;\n\n    switch (traceType) {\n      case 'funnelarea':\n      case 'pie':\n      case 'sunburst':\n        selector = 'g.slice';\n        break;\n\n      case 'treemap':\n      case 'icicle':\n        selector = 'g.slice, g.pathbar';\n        break;\n\n      default:\n        selector = 'g.points > g.point';\n    }\n\n    gTrace.selectAll(selector).each(function (d) {\n      var transform = d.transform;\n\n      if (transform) {\n        transform.scale = shouldHide && transform.hide ? 0 : minSize / transform.fontSize;\n        var el = d3.select(this).select('text');\n        el.attr('transform', Lib.getTextTransform(transform));\n      }\n    });\n  }\n}\n\nfunction recordMinTextSize(traceType, // in\ntransform, // inout\nfullLayout // inout\n) {\n  if (fullLayout.uniformtext.mode) {\n    var minKey = getMinKey(traceType);\n    var minSize = fullLayout.uniformtext.minsize;\n    var size = transform.scale * transform.fontSize;\n    transform.hide = size < minSize;\n    fullLayout[minKey] = fullLayout[minKey] || Infinity;\n\n    if (!transform.hide) {\n      fullLayout[minKey] = Math.min(fullLayout[minKey], Math.max(size, minSize));\n    }\n  }\n}\n\nfunction clearMinTextSize(traceType, // in\nfullLayout // inout\n) {\n  var minKey = getMinKey(traceType);\n  fullLayout[minKey] = undefined;\n}\n\nfunction getMinKey(traceType) {\n  return '_' + traceType + 'Text_minsize';\n}\n\nmodule.exports = {\n  recordMinTextSize: recordMinTextSize,\n  clearMinTextSize: clearMinTextSize,\n  resizeText: resizeText\n};","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/plotly.js/src/traces/bar/uniform_text.js"],"names":["d3","require","Lib","resizeText","gd","gTrace","traceType","fullLayout","_fullLayout","minSize","shouldHide","uniformtext","mode","selector","selectAll","each","d","transform","scale","hide","fontSize","el","select","attr","getTextTransform","recordMinTextSize","minKey","getMinKey","minsize","size","Infinity","Math","min","max","clearMinTextSize","undefined","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,EAAE,GAAGC,OAAO,CAAC,YAAD,CAAhB;;AACA,IAAIC,GAAG,GAAGD,OAAO,CAAC,WAAD,CAAjB;;AAEA,SAASE,UAAT,CAAoBC,EAApB,EAAwBC,MAAxB,EAAgCC,SAAhC,EAA2C;AACvC,MAAIC,UAAU,GAAGH,EAAE,CAACI,WAApB;AACA,MAAIC,OAAO,GAAGF,UAAU,CAAC,MAAMD,SAAN,GAAkB,cAAnB,CAAxB;;AACA,MAAGG,OAAH,EAAY;AACR,QAAIC,UAAU,GAAGH,UAAU,CAACI,WAAX,CAAuBC,IAAvB,KAAgC,MAAjD;AAEA,QAAIC,QAAJ;;AACA,YAAOP,SAAP;AACI,WAAK,YAAL;AACA,WAAK,KAAL;AACA,WAAK,UAAL;AACIO,QAAAA,QAAQ,GAAG,SAAX;AACA;;AACJ,WAAK,SAAL;AACA,WAAK,QAAL;AACIA,QAAAA,QAAQ,GAAG,oBAAX;AACA;;AACJ;AACIA,QAAAA,QAAQ,GAAG,oBAAX;AAXR;;AAcAR,IAAAA,MAAM,CAACS,SAAP,CAAiBD,QAAjB,EAA2BE,IAA3B,CAAgC,UAASC,CAAT,EAAY;AACxC,UAAIC,SAAS,GAAGD,CAAC,CAACC,SAAlB;;AACA,UAAGA,SAAH,EAAc;AACVA,QAAAA,SAAS,CAACC,KAAV,GAAmBR,UAAU,IAAIO,SAAS,CAACE,IAAzB,GAAiC,CAAjC,GAAqCV,OAAO,GAAGQ,SAAS,CAACG,QAA3E;AAEA,YAAIC,EAAE,GAAGrB,EAAE,CAACsB,MAAH,CAAU,IAAV,EAAgBA,MAAhB,CAAuB,MAAvB,CAAT;AACAD,QAAAA,EAAE,CAACE,IAAH,CAAQ,WAAR,EAAqBrB,GAAG,CAACsB,gBAAJ,CAAqBP,SAArB,CAArB;AACH;AACJ,KARD;AASH;AACJ;;AAED,SAASQ,iBAAT,CACInB,SADJ,EACe;AACXW,SAFJ,EAEe;AACXV,UAHJ,CAGe;AAHf,EAIE;AACE,MAAGA,UAAU,CAACI,WAAX,CAAuBC,IAA1B,EAAgC;AAC5B,QAAIc,MAAM,GAAGC,SAAS,CAACrB,SAAD,CAAtB;AACA,QAAIG,OAAO,GAAGF,UAAU,CAACI,WAAX,CAAuBiB,OAArC;AACA,QAAIC,IAAI,GAAGZ,SAAS,CAACC,KAAV,GAAkBD,SAAS,CAACG,QAAvC;AAEAH,IAAAA,SAAS,CAACE,IAAV,GAAiBU,IAAI,GAAGpB,OAAxB;AAEAF,IAAAA,UAAU,CAACmB,MAAD,CAAV,GAAqBnB,UAAU,CAACmB,MAAD,CAAV,IAAsBI,QAA3C;;AACA,QAAG,CAACb,SAAS,CAACE,IAAd,EAAoB;AAChBZ,MAAAA,UAAU,CAACmB,MAAD,CAAV,GAAqBK,IAAI,CAACC,GAAL,CACjBzB,UAAU,CAACmB,MAAD,CADO,EAEjBK,IAAI,CAACE,GAAL,CAASJ,IAAT,EAAepB,OAAf,CAFiB,CAArB;AAIH;AACJ;AACJ;;AAED,SAASyB,gBAAT,CACI5B,SADJ,EACe;AACXC,UAFJ,CAEe;AAFf,EAGE;AACE,MAAImB,MAAM,GAAGC,SAAS,CAACrB,SAAD,CAAtB;AACAC,EAAAA,UAAU,CAACmB,MAAD,CAAV,GAAqBS,SAArB;AACH;;AAED,SAASR,SAAT,CAAmBrB,SAAnB,EAA8B;AAC1B,SAAO,MAAMA,SAAN,GAAkB,cAAzB;AACH;;AAED8B,MAAM,CAACC,OAAP,GAAiB;AACbZ,EAAAA,iBAAiB,EAAEA,iBADN;AAEbS,EAAAA,gBAAgB,EAAEA,gBAFL;AAGb/B,EAAAA,UAAU,EAAEA;AAHC,CAAjB","sourcesContent":["'use strict';\n\nvar d3 = require('@plotly/d3');\nvar Lib = require('../../lib');\n\nfunction resizeText(gd, gTrace, traceType) {\n    var fullLayout = gd._fullLayout;\n    var minSize = fullLayout['_' + traceType + 'Text_minsize'];\n    if(minSize) {\n        var shouldHide = fullLayout.uniformtext.mode === 'hide';\n\n        var selector;\n        switch(traceType) {\n            case 'funnelarea' :\n            case 'pie' :\n            case 'sunburst' :\n                selector = 'g.slice';\n                break;\n            case 'treemap' :\n            case 'icicle' :\n                selector = 'g.slice, g.pathbar';\n                break;\n            default :\n                selector = 'g.points > g.point';\n        }\n\n        gTrace.selectAll(selector).each(function(d) {\n            var transform = d.transform;\n            if(transform) {\n                transform.scale = (shouldHide && transform.hide) ? 0 : minSize / transform.fontSize;\n\n                var el = d3.select(this).select('text');\n                el.attr('transform', Lib.getTextTransform(transform));\n            }\n        });\n    }\n}\n\nfunction recordMinTextSize(\n    traceType, // in\n    transform, // inout\n    fullLayout // inout\n) {\n    if(fullLayout.uniformtext.mode) {\n        var minKey = getMinKey(traceType);\n        var minSize = fullLayout.uniformtext.minsize;\n        var size = transform.scale * transform.fontSize;\n\n        transform.hide = size < minSize;\n\n        fullLayout[minKey] = fullLayout[minKey] || Infinity;\n        if(!transform.hide) {\n            fullLayout[minKey] = Math.min(\n                fullLayout[minKey],\n                Math.max(size, minSize)\n            );\n        }\n    }\n}\n\nfunction clearMinTextSize(\n    traceType, // in\n    fullLayout // inout\n) {\n    var minKey = getMinKey(traceType);\n    fullLayout[minKey] = undefined;\n}\n\nfunction getMinKey(traceType) {\n    return '_' + traceType + 'Text_minsize';\n}\n\nmodule.exports = {\n    recordMinTextSize: recordMinTextSize,\n    clearMinTextSize: clearMinTextSize,\n    resizeText: resizeText\n};\n"]},"metadata":{},"sourceType":"script"}