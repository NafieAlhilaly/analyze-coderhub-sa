{"ast":null,"code":"'use strict';\n\nvar d3 = require('@plotly/d3');\n\nvar Fx = require('../../components/fx');\n\nvar dragElement = require('../../components/dragelement');\n\nvar setCursor = require('../../lib/setcursor');\n\nvar makeDragBox = require('./dragbox').makeDragBox;\n\nvar DRAGGERSIZE = require('./constants').DRAGGERSIZE;\n\nexports.initInteractions = function initInteractions(gd) {\n  var fullLayout = gd._fullLayout;\n\n  if (gd._context.staticPlot) {\n    // this sweeps up more than just cartesian drag elements...\n    d3.select(gd).selectAll('.drag').remove();\n    return;\n  }\n\n  if (!fullLayout._has('cartesian') && !fullLayout._has('splom')) return;\n  var subplots = Object.keys(fullLayout._plots || {}).sort(function (a, b) {\n    // sort overlays last, then by x axis number, then y axis number\n    if ((fullLayout._plots[a].mainplot && true) === (fullLayout._plots[b].mainplot && true)) {\n      var aParts = a.split('y');\n      var bParts = b.split('y');\n      return aParts[0] === bParts[0] ? Number(aParts[1] || 1) - Number(bParts[1] || 1) : Number(aParts[0] || 1) - Number(bParts[0] || 1);\n    }\n\n    return fullLayout._plots[a].mainplot ? 1 : -1;\n  });\n  subplots.forEach(function (subplot) {\n    var plotinfo = fullLayout._plots[subplot];\n    var xa = plotinfo.xaxis;\n    var ya = plotinfo.yaxis; // main and corner draggers need not be repeated for\n    // overlaid subplots - these draggers drag them all\n\n    if (!plotinfo.mainplot) {\n      // main dragger goes over the grids and data, so we use its\n      // mousemove events for all data hover effects\n      var maindrag = makeDragBox(gd, plotinfo, xa._offset, ya._offset, xa._length, ya._length, 'ns', 'ew');\n\n      maindrag.onmousemove = function (evt) {\n        // This is on `gd._fullLayout`, *not* fullLayout because the reference\n        // changes by the time this is called again.\n        gd._fullLayout._rehover = function () {\n          if (gd._fullLayout._hoversubplot === subplot && gd._fullLayout._plots[subplot]) {\n            Fx.hover(gd, evt, subplot);\n          }\n        };\n\n        Fx.hover(gd, evt, subplot); // Note that we have *not* used the cached fullLayout variable here\n        // since that may be outdated when this is called as a callback later on\n\n        gd._fullLayout._lasthover = maindrag;\n        gd._fullLayout._hoversubplot = subplot;\n      };\n      /*\n       * IMPORTANT:\n       * We must check for the presence of the drag cover here.\n       * If we don't, a 'mouseout' event is triggered on the\n       * maindrag before each 'click' event, which has the effect\n       * of clearing the hoverdata; thus, cancelling the click event.\n       */\n\n\n      maindrag.onmouseout = function (evt) {\n        if (gd._dragging) return; // When the mouse leaves this maindrag, unset the hovered subplot.\n        // This may cause problems if it leaves the subplot directly *onto*\n        // another subplot, but that's a tiny corner case at the moment.\n\n        gd._fullLayout._hoversubplot = null;\n        dragElement.unhover(gd, evt);\n      }; // corner draggers\n\n\n      if (gd._context.showAxisDragHandles) {\n        makeDragBox(gd, plotinfo, xa._offset - DRAGGERSIZE, ya._offset - DRAGGERSIZE, DRAGGERSIZE, DRAGGERSIZE, 'n', 'w');\n        makeDragBox(gd, plotinfo, xa._offset + xa._length, ya._offset - DRAGGERSIZE, DRAGGERSIZE, DRAGGERSIZE, 'n', 'e');\n        makeDragBox(gd, plotinfo, xa._offset - DRAGGERSIZE, ya._offset + ya._length, DRAGGERSIZE, DRAGGERSIZE, 's', 'w');\n        makeDragBox(gd, plotinfo, xa._offset + xa._length, ya._offset + ya._length, DRAGGERSIZE, DRAGGERSIZE, 's', 'e');\n      }\n    }\n\n    if (gd._context.showAxisDragHandles) {\n      // x axis draggers - if you have overlaid plots,\n      // these drag each axis separately\n      if (subplot === xa._mainSubplot) {\n        // the y position of the main x axis line\n        var y0 = xa._mainLinePosition;\n        if (xa.side === 'top') y0 -= DRAGGERSIZE;\n        makeDragBox(gd, plotinfo, xa._offset + xa._length * 0.1, y0, xa._length * 0.8, DRAGGERSIZE, '', 'ew');\n        makeDragBox(gd, plotinfo, xa._offset, y0, xa._length * 0.1, DRAGGERSIZE, '', 'w');\n        makeDragBox(gd, plotinfo, xa._offset + xa._length * 0.9, y0, xa._length * 0.1, DRAGGERSIZE, '', 'e');\n      } // y axis draggers\n\n\n      if (subplot === ya._mainSubplot) {\n        // the x position of the main y axis line\n        var x0 = ya._mainLinePosition;\n        if (ya.side !== 'right') x0 -= DRAGGERSIZE;\n        makeDragBox(gd, plotinfo, x0, ya._offset + ya._length * 0.1, DRAGGERSIZE, ya._length * 0.8, 'ns', '');\n        makeDragBox(gd, plotinfo, x0, ya._offset + ya._length * 0.9, DRAGGERSIZE, ya._length * 0.1, 's', '');\n        makeDragBox(gd, plotinfo, x0, ya._offset, DRAGGERSIZE, ya._length * 0.1, 'n', '');\n      }\n    }\n  }); // In case you mousemove over some hovertext, send it to Fx.hover too\n  // we do this so that we can put the hover text in front of everything,\n  // but still be able to interact with everything as if it isn't there\n\n  var hoverLayer = fullLayout._hoverlayer.node();\n\n  hoverLayer.onmousemove = function (evt) {\n    evt.target = gd._fullLayout._lasthover;\n    Fx.hover(gd, evt, fullLayout._hoversubplot);\n  };\n\n  hoverLayer.onclick = function (evt) {\n    evt.target = gd._fullLayout._lasthover;\n    Fx.click(gd, evt);\n  }; // also delegate mousedowns... TODO: does this actually work?\n\n\n  hoverLayer.onmousedown = function (evt) {\n    gd._fullLayout._lasthover.onmousedown(evt);\n  };\n\n  exports.updateFx(gd);\n}; // Minimal set of update needed on 'modebar' edits.\n// We only need to update the <g .draglayer> cursor style.\n//\n// Note that changing the axis configuration and/or the fixedrange attribute\n// should trigger a full initInteractions.\n\n\nexports.updateFx = function (gd) {\n  var fullLayout = gd._fullLayout;\n  var cursor = fullLayout.dragmode === 'pan' ? 'move' : 'crosshair';\n  setCursor(fullLayout._draggers, cursor);\n};","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/plotly.js/src/plots/cartesian/graph_interact.js"],"names":["d3","require","Fx","dragElement","setCursor","makeDragBox","DRAGGERSIZE","exports","initInteractions","gd","fullLayout","_fullLayout","_context","staticPlot","select","selectAll","remove","_has","subplots","Object","keys","_plots","sort","a","b","mainplot","aParts","split","bParts","Number","forEach","subplot","plotinfo","xa","xaxis","ya","yaxis","maindrag","_offset","_length","onmousemove","evt","_rehover","_hoversubplot","hover","_lasthover","onmouseout","_dragging","unhover","showAxisDragHandles","_mainSubplot","y0","_mainLinePosition","side","x0","hoverLayer","_hoverlayer","node","target","onclick","click","onmousedown","updateFx","cursor","dragmode","_draggers"],"mappings":"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","sourcesContent":["'use strict';\n\nvar d3 = require('@plotly/d3');\n\nvar Fx = require('../../components/fx');\nvar dragElement = require('../../components/dragelement');\nvar setCursor = require('../../lib/setcursor');\n\nvar makeDragBox = require('./dragbox').makeDragBox;\nvar DRAGGERSIZE = require('./constants').DRAGGERSIZE;\n\nexports.initInteractions = function initInteractions(gd) {\n    var fullLayout = gd._fullLayout;\n\n    if(gd._context.staticPlot) {\n        // this sweeps up more than just cartesian drag elements...\n        d3.select(gd).selectAll('.drag').remove();\n        return;\n    }\n\n    if(!fullLayout._has('cartesian') && !fullLayout._has('splom')) return;\n\n    var subplots = Object.keys(fullLayout._plots || {}).sort(function(a, b) {\n        // sort overlays last, then by x axis number, then y axis number\n        if((fullLayout._plots[a].mainplot && true) ===\n            (fullLayout._plots[b].mainplot && true)) {\n            var aParts = a.split('y');\n            var bParts = b.split('y');\n            return (aParts[0] === bParts[0]) ?\n                (Number(aParts[1] || 1) - Number(bParts[1] || 1)) :\n                (Number(aParts[0] || 1) - Number(bParts[0] || 1));\n        }\n        return fullLayout._plots[a].mainplot ? 1 : -1;\n    });\n\n    subplots.forEach(function(subplot) {\n        var plotinfo = fullLayout._plots[subplot];\n        var xa = plotinfo.xaxis;\n        var ya = plotinfo.yaxis;\n\n        // main and corner draggers need not be repeated for\n        // overlaid subplots - these draggers drag them all\n        if(!plotinfo.mainplot) {\n            // main dragger goes over the grids and data, so we use its\n            // mousemove events for all data hover effects\n            var maindrag = makeDragBox(gd, plotinfo, xa._offset, ya._offset,\n                xa._length, ya._length, 'ns', 'ew');\n\n            maindrag.onmousemove = function(evt) {\n                // This is on `gd._fullLayout`, *not* fullLayout because the reference\n                // changes by the time this is called again.\n                gd._fullLayout._rehover = function() {\n                    if((gd._fullLayout._hoversubplot === subplot) && gd._fullLayout._plots[subplot]) {\n                        Fx.hover(gd, evt, subplot);\n                    }\n                };\n\n                Fx.hover(gd, evt, subplot);\n\n                // Note that we have *not* used the cached fullLayout variable here\n                // since that may be outdated when this is called as a callback later on\n                gd._fullLayout._lasthover = maindrag;\n                gd._fullLayout._hoversubplot = subplot;\n            };\n\n            /*\n             * IMPORTANT:\n             * We must check for the presence of the drag cover here.\n             * If we don't, a 'mouseout' event is triggered on the\n             * maindrag before each 'click' event, which has the effect\n             * of clearing the hoverdata; thus, cancelling the click event.\n             */\n            maindrag.onmouseout = function(evt) {\n                if(gd._dragging) return;\n\n                // When the mouse leaves this maindrag, unset the hovered subplot.\n                // This may cause problems if it leaves the subplot directly *onto*\n                // another subplot, but that's a tiny corner case at the moment.\n                gd._fullLayout._hoversubplot = null;\n\n                dragElement.unhover(gd, evt);\n            };\n\n            // corner draggers\n            if(gd._context.showAxisDragHandles) {\n                makeDragBox(gd, plotinfo, xa._offset - DRAGGERSIZE, ya._offset - DRAGGERSIZE,\n                    DRAGGERSIZE, DRAGGERSIZE, 'n', 'w');\n                makeDragBox(gd, plotinfo, xa._offset + xa._length, ya._offset - DRAGGERSIZE,\n                    DRAGGERSIZE, DRAGGERSIZE, 'n', 'e');\n                makeDragBox(gd, plotinfo, xa._offset - DRAGGERSIZE, ya._offset + ya._length,\n                    DRAGGERSIZE, DRAGGERSIZE, 's', 'w');\n                makeDragBox(gd, plotinfo, xa._offset + xa._length, ya._offset + ya._length,\n                    DRAGGERSIZE, DRAGGERSIZE, 's', 'e');\n            }\n        }\n        if(gd._context.showAxisDragHandles) {\n            // x axis draggers - if you have overlaid plots,\n            // these drag each axis separately\n            if(subplot === xa._mainSubplot) {\n                // the y position of the main x axis line\n                var y0 = xa._mainLinePosition;\n                if(xa.side === 'top') y0 -= DRAGGERSIZE;\n                makeDragBox(gd, plotinfo, xa._offset + xa._length * 0.1, y0,\n                    xa._length * 0.8, DRAGGERSIZE, '', 'ew');\n                makeDragBox(gd, plotinfo, xa._offset, y0,\n                    xa._length * 0.1, DRAGGERSIZE, '', 'w');\n                makeDragBox(gd, plotinfo, xa._offset + xa._length * 0.9, y0,\n                    xa._length * 0.1, DRAGGERSIZE, '', 'e');\n            }\n            // y axis draggers\n            if(subplot === ya._mainSubplot) {\n                // the x position of the main y axis line\n                var x0 = ya._mainLinePosition;\n                if(ya.side !== 'right') x0 -= DRAGGERSIZE;\n                makeDragBox(gd, plotinfo, x0, ya._offset + ya._length * 0.1,\n                    DRAGGERSIZE, ya._length * 0.8, 'ns', '');\n                makeDragBox(gd, plotinfo, x0, ya._offset + ya._length * 0.9,\n                    DRAGGERSIZE, ya._length * 0.1, 's', '');\n                makeDragBox(gd, plotinfo, x0, ya._offset,\n                    DRAGGERSIZE, ya._length * 0.1, 'n', '');\n            }\n        }\n    });\n\n    // In case you mousemove over some hovertext, send it to Fx.hover too\n    // we do this so that we can put the hover text in front of everything,\n    // but still be able to interact with everything as if it isn't there\n    var hoverLayer = fullLayout._hoverlayer.node();\n\n    hoverLayer.onmousemove = function(evt) {\n        evt.target = gd._fullLayout._lasthover;\n        Fx.hover(gd, evt, fullLayout._hoversubplot);\n    };\n\n    hoverLayer.onclick = function(evt) {\n        evt.target = gd._fullLayout._lasthover;\n        Fx.click(gd, evt);\n    };\n\n    // also delegate mousedowns... TODO: does this actually work?\n    hoverLayer.onmousedown = function(evt) {\n        gd._fullLayout._lasthover.onmousedown(evt);\n    };\n\n    exports.updateFx(gd);\n};\n\n// Minimal set of update needed on 'modebar' edits.\n// We only need to update the <g .draglayer> cursor style.\n//\n// Note that changing the axis configuration and/or the fixedrange attribute\n// should trigger a full initInteractions.\nexports.updateFx = function(gd) {\n    var fullLayout = gd._fullLayout;\n    var cursor = fullLayout.dragmode === 'pan' ? 'move' : 'crosshair';\n    setCursor(fullLayout._draggers, cursor);\n};\n"]},"metadata":{},"sourceType":"script"}