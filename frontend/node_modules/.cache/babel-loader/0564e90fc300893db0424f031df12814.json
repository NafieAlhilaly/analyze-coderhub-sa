{"ast":null,"code":"'use strict';\n\nvar extendFlat = require('../../lib/extend').extendFlat; // pure functions, don't alter but passes on `gd` and parts of `trace` without deep copying\n\n\nexports.splitToPanels = function (d) {\n  var prevPages = [0, 0];\n  var headerPanel = extendFlat({}, d, {\n    key: 'header',\n    type: 'header',\n    page: 0,\n    prevPages: prevPages,\n    currentRepaint: [null, null],\n    dragHandle: true,\n    values: d.calcdata.headerCells.values[d.specIndex],\n    rowBlocks: d.calcdata.headerRowBlocks,\n    calcdata: extendFlat({}, d.calcdata, {\n      cells: d.calcdata.headerCells\n    })\n  });\n  var revolverPanel1 = extendFlat({}, d, {\n    key: 'cells1',\n    type: 'cells',\n    page: 0,\n    prevPages: prevPages,\n    currentRepaint: [null, null],\n    dragHandle: false,\n    values: d.calcdata.cells.values[d.specIndex],\n    rowBlocks: d.calcdata.rowBlocks\n  });\n  var revolverPanel2 = extendFlat({}, d, {\n    key: 'cells2',\n    type: 'cells',\n    page: 1,\n    prevPages: prevPages,\n    currentRepaint: [null, null],\n    dragHandle: false,\n    values: d.calcdata.cells.values[d.specIndex],\n    rowBlocks: d.calcdata.rowBlocks\n  }); // order due to SVG using painter's algo:\n\n  return [revolverPanel1, revolverPanel2, headerPanel];\n};\n\nexports.splitToCells = function (d) {\n  var fromTo = rowFromTo(d);\n  return (d.values || []).slice(fromTo[0], fromTo[1]).map(function (v, i) {\n    // By keeping identical key, a DOM node removal, creation and addition is spared, important when visible\n    // grid has a lot of elements (quadratic with xcol/ycol count).\n    // But it has to be busted when `svgUtil.convertToTspans` is used as it reshapes cell subtrees asynchronously,\n    // and by that time the user may have scrolled away, resulting in stale overwrites. The real solution will be\n    // to turn `svgUtil.convertToTspans` into a cancelable request, in which case no key busting is needed.\n    var buster = typeof v === 'string' && v.match(/[<$&> ]/) ? '_keybuster_' + Math.random() : '';\n    return {\n      // keyWithinBlock: /*fromTo[0] + */i, // optimized future version - no busting\n      // keyWithinBlock: fromTo[0] + i, // initial always-unoptimized version - janky scrolling with 5+ columns\n      keyWithinBlock: i + buster,\n      // current compromise: regular content is very fast; async content is possible\n      key: fromTo[0] + i,\n      column: d,\n      calcdata: d.calcdata,\n      page: d.page,\n      rowBlocks: d.rowBlocks,\n      value: v\n    };\n  });\n};\n\nfunction rowFromTo(d) {\n  var rowBlock = d.rowBlocks[d.page]; // fixme rowBlock truthiness check is due to ugly hack of placing 2nd panel as d.page = -1\n\n  var rowFrom = rowBlock ? rowBlock.rows[0].rowIndex : 0;\n  var rowTo = rowBlock ? rowFrom + rowBlock.rows.length : 0;\n  return [rowFrom, rowTo];\n}","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/plotly.js/src/traces/table/data_split_helpers.js"],"names":["extendFlat","require","exports","splitToPanels","d","prevPages","headerPanel","key","type","page","currentRepaint","dragHandle","values","calcdata","headerCells","specIndex","rowBlocks","headerRowBlocks","cells","revolverPanel1","revolverPanel2","splitToCells","fromTo","rowFromTo","slice","map","v","i","buster","match","Math","random","keyWithinBlock","column","value","rowBlock","rowFrom","rows","rowIndex","rowTo","length"],"mappings":"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","sourcesContent":["'use strict';\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\n// pure functions, don't alter but passes on `gd` and parts of `trace` without deep copying\n\nexports.splitToPanels = function(d) {\n    var prevPages = [0, 0];\n    var headerPanel = extendFlat({}, d, {\n        key: 'header',\n        type: 'header',\n        page: 0,\n        prevPages: prevPages,\n        currentRepaint: [null, null],\n        dragHandle: true,\n        values: d.calcdata.headerCells.values[d.specIndex],\n        rowBlocks: d.calcdata.headerRowBlocks,\n        calcdata: extendFlat({}, d.calcdata, {cells: d.calcdata.headerCells})\n    });\n    var revolverPanel1 = extendFlat({}, d, {\n        key: 'cells1',\n        type: 'cells',\n        page: 0,\n        prevPages: prevPages,\n        currentRepaint: [null, null],\n        dragHandle: false,\n        values: d.calcdata.cells.values[d.specIndex],\n        rowBlocks: d.calcdata.rowBlocks\n    });\n    var revolverPanel2 = extendFlat({}, d, {\n        key: 'cells2',\n        type: 'cells',\n        page: 1,\n        prevPages: prevPages,\n        currentRepaint: [null, null],\n        dragHandle: false,\n        values: d.calcdata.cells.values[d.specIndex],\n        rowBlocks: d.calcdata.rowBlocks\n    });\n    // order due to SVG using painter's algo:\n    return [revolverPanel1, revolverPanel2, headerPanel];\n};\n\nexports.splitToCells = function(d) {\n    var fromTo = rowFromTo(d);\n    return (d.values || []).slice(fromTo[0], fromTo[1]).map(function(v, i) {\n        // By keeping identical key, a DOM node removal, creation and addition is spared, important when visible\n        // grid has a lot of elements (quadratic with xcol/ycol count).\n        // But it has to be busted when `svgUtil.convertToTspans` is used as it reshapes cell subtrees asynchronously,\n        // and by that time the user may have scrolled away, resulting in stale overwrites. The real solution will be\n        // to turn `svgUtil.convertToTspans` into a cancelable request, in which case no key busting is needed.\n        var buster = (typeof v === 'string') && v.match(/[<$&> ]/) ? '_keybuster_' + Math.random() : '';\n        return {\n            // keyWithinBlock: /*fromTo[0] + */i, // optimized future version - no busting\n            // keyWithinBlock: fromTo[0] + i, // initial always-unoptimized version - janky scrolling with 5+ columns\n            keyWithinBlock: i + buster, // current compromise: regular content is very fast; async content is possible\n            key: fromTo[0] + i,\n            column: d,\n            calcdata: d.calcdata,\n            page: d.page,\n            rowBlocks: d.rowBlocks,\n            value: v\n        };\n    });\n};\n\nfunction rowFromTo(d) {\n    var rowBlock = d.rowBlocks[d.page];\n    // fixme rowBlock truthiness check is due to ugly hack of placing 2nd panel as d.page = -1\n    var rowFrom = rowBlock ? rowBlock.rows[0].rowIndex : 0;\n    var rowTo = rowBlock ? rowFrom + rowBlock.rows.length : 0;\n    return [rowFrom, rowTo];\n}\n"]},"metadata":{},"sourceType":"script"}