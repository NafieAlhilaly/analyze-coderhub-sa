{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"C:/Projects/reactApp/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar rgba = require('color-normalize');\n\nvar getBounds = require('array-bounds');\n\nvar extend = require('object-assign');\n\nvar glslify = require('glslify');\n\nvar pick = require('pick-by-alias');\n\nvar flatten = require('flatten-vertex-data');\n\nvar triangulate = require('earcut');\n\nvar normalize = require('array-normalize');\n\nvar _require = require('to-float32'),\n    float32 = _require.float32,\n    fract32 = _require.fract32;\n\nvar WeakMap = require('es6-weak-map');\n\nvar parseRect = require('parse-rect');\n\nvar findIndex = require('array-find-index');\n\nmodule.exports = Line2D;\n/** @constructor */\n\nfunction Line2D(regl, options) {\n  if (!(this instanceof Line2D)) return new Line2D(regl, options);\n\n  if (typeof regl === 'function') {\n    if (!options) options = {};\n    options.regl = regl;\n  } else {\n    options = regl;\n  }\n\n  if (options.length) options.positions = options;\n  regl = options.regl;\n\n  if (!regl.hasExtension('ANGLE_instanced_arrays')) {\n    throw Error('regl-error2d: `ANGLE_instanced_arrays` extension should be enabled');\n  } // persistent variables\n\n\n  this.gl = regl._gl;\n  this.regl = regl; // list of options for lines\n\n  this.passes = []; // cached shaders instance\n\n  this.shaders = Line2D.shaders.has(regl) ? Line2D.shaders.get(regl) : Line2D.shaders.set(regl, Line2D.createShaders(regl)).get(regl); // init defaults\n\n  this.update(options);\n}\n\nLine2D.dashMult = 2;\nLine2D.maxPatternLength = 256;\nLine2D.precisionThreshold = 3e6;\nLine2D.maxPoints = 1e4;\nLine2D.maxLines = 2048; // cache of created draw calls per-regl instance\n\nLine2D.shaders = new WeakMap(); // create static shaders once\n\nLine2D.createShaders = function (regl) {\n  var offsetBuffer = regl.buffer({\n    usage: 'static',\n    type: 'float',\n    data: [0, 1, 0, 0, 1, 1, 1, 0]\n  });\n  var shaderOptions = {\n    primitive: 'triangle strip',\n    instances: regl.prop('count'),\n    count: 4,\n    offset: 0,\n    uniforms: {\n      miterMode: function miterMode(ctx, prop) {\n        return prop.join === 'round' ? 2 : 1;\n      },\n      miterLimit: regl.prop('miterLimit'),\n      scale: regl.prop('scale'),\n      scaleFract: regl.prop('scaleFract'),\n      translateFract: regl.prop('translateFract'),\n      translate: regl.prop('translate'),\n      thickness: regl.prop('thickness'),\n      dashTexture: regl.prop('dashTexture'),\n      opacity: regl.prop('opacity'),\n      pixelRatio: regl.context('pixelRatio'),\n      id: regl.prop('id'),\n      dashLength: regl.prop('dashLength'),\n      viewport: function viewport(c, p) {\n        return [p.viewport.x, p.viewport.y, c.viewportWidth, c.viewportHeight];\n      },\n      depth: regl.prop('depth')\n    },\n    blend: {\n      enable: true,\n      color: [0, 0, 0, 0],\n      equation: {\n        rgb: 'add',\n        alpha: 'add'\n      },\n      func: {\n        srcRGB: 'src alpha',\n        dstRGB: 'one minus src alpha',\n        srcAlpha: 'one minus dst alpha',\n        dstAlpha: 'one'\n      }\n    },\n    depth: {\n      enable: function enable(c, p) {\n        return !p.overlay;\n      }\n    },\n    stencil: {\n      enable: false\n    },\n    scissor: {\n      enable: true,\n      box: regl.prop('viewport')\n    },\n    viewport: regl.prop('viewport')\n  }; // simplified rectangular line shader\n\n  var drawRectLine = regl(extend({\n    vert: glslify('./rect-vert.glsl'),\n    frag: glslify('./rect-frag.glsl'),\n    attributes: {\n      // if point is at the end of segment\n      lineEnd: {\n        buffer: offsetBuffer,\n        divisor: 0,\n        stride: 8,\n        offset: 0\n      },\n      // if point is at the top of segment\n      lineTop: {\n        buffer: offsetBuffer,\n        divisor: 0,\n        stride: 8,\n        offset: 4\n      },\n      // beginning of line coordinate\n      aCoord: {\n        buffer: regl.prop('positionBuffer'),\n        stride: 8,\n        offset: 8,\n        divisor: 1\n      },\n      // end of line coordinate\n      bCoord: {\n        buffer: regl.prop('positionBuffer'),\n        stride: 8,\n        offset: 16,\n        divisor: 1\n      },\n      aCoordFract: {\n        buffer: regl.prop('positionFractBuffer'),\n        stride: 8,\n        offset: 8,\n        divisor: 1\n      },\n      bCoordFract: {\n        buffer: regl.prop('positionFractBuffer'),\n        stride: 8,\n        offset: 16,\n        divisor: 1\n      },\n      color: {\n        buffer: regl.prop('colorBuffer'),\n        stride: 4,\n        offset: 0,\n        divisor: 1\n      }\n    }\n  }, shaderOptions)); // create regl draw\n\n  var drawMiterLine;\n\n  try {\n    drawMiterLine = regl(extend({\n      // culling removes polygon creasing\n      cull: {\n        enable: true,\n        face: 'back'\n      },\n      vert: glslify('./miter-vert.glsl'),\n      frag: glslify('./miter-frag.glsl'),\n      attributes: {\n        // is line end\n        lineEnd: {\n          buffer: offsetBuffer,\n          divisor: 0,\n          stride: 8,\n          offset: 0\n        },\n        // is line top\n        lineTop: {\n          buffer: offsetBuffer,\n          divisor: 0,\n          stride: 8,\n          offset: 4\n        },\n        // left color\n        aColor: {\n          buffer: regl.prop('colorBuffer'),\n          stride: 4,\n          offset: 0,\n          divisor: 1\n        },\n        // right color\n        bColor: {\n          buffer: regl.prop('colorBuffer'),\n          stride: 4,\n          offset: 4,\n          divisor: 1\n        },\n        prevCoord: {\n          buffer: regl.prop('positionBuffer'),\n          stride: 8,\n          offset: 0,\n          divisor: 1\n        },\n        aCoord: {\n          buffer: regl.prop('positionBuffer'),\n          stride: 8,\n          offset: 8,\n          divisor: 1\n        },\n        bCoord: {\n          buffer: regl.prop('positionBuffer'),\n          stride: 8,\n          offset: 16,\n          divisor: 1\n        },\n        nextCoord: {\n          buffer: regl.prop('positionBuffer'),\n          stride: 8,\n          offset: 24,\n          divisor: 1\n        }\n      }\n    }, shaderOptions));\n  } catch (e) {\n    // IE/bad Webkit fallback\n    drawMiterLine = drawRectLine;\n  } // fill shader\n\n\n  var drawFill = regl({\n    primitive: 'triangle',\n    elements: function elements(ctx, prop) {\n      return prop.triangles;\n    },\n    offset: 0,\n    vert: glslify('./fill-vert.glsl'),\n    frag: glslify('./fill-frag.glsl'),\n    uniforms: {\n      scale: regl.prop('scale'),\n      color: regl.prop('fill'),\n      scaleFract: regl.prop('scaleFract'),\n      translateFract: regl.prop('translateFract'),\n      translate: regl.prop('translate'),\n      opacity: regl.prop('opacity'),\n      pixelRatio: regl.context('pixelRatio'),\n      id: regl.prop('id'),\n      viewport: function viewport(ctx, prop) {\n        return [prop.viewport.x, prop.viewport.y, ctx.viewportWidth, ctx.viewportHeight];\n      }\n    },\n    attributes: {\n      position: {\n        buffer: regl.prop('positionBuffer'),\n        stride: 8,\n        offset: 8\n      },\n      positionFract: {\n        buffer: regl.prop('positionFractBuffer'),\n        stride: 8,\n        offset: 8\n      }\n    },\n    blend: shaderOptions.blend,\n    depth: {\n      enable: false\n    },\n    scissor: shaderOptions.scissor,\n    stencil: shaderOptions.stencil,\n    viewport: shaderOptions.viewport\n  });\n  return {\n    fill: drawFill,\n    rect: drawRectLine,\n    miter: drawMiterLine\n  };\n}; // used to for new lines instances\n\n\nLine2D.defaults = {\n  dashes: null,\n  join: 'miter',\n  miterLimit: 1,\n  thickness: 10,\n  cap: 'square',\n  color: 'black',\n  opacity: 1,\n  overlay: false,\n  viewport: null,\n  range: null,\n  close: false,\n  fill: null\n};\n\nLine2D.prototype.render = function () {\n  if (arguments.length) {\n    this.update.apply(this, arguments);\n  }\n\n  this.draw();\n};\n\nLine2D.prototype.draw = function () {\n  var _this = this;\n\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  // render multiple polylines via regl batch\n  (args.length ? args : this.passes).forEach(function (s, i) {\n    // render array pass as a list of passes\n    if (s && Array.isArray(s)) return _this.draw.apply(_this, _toConsumableArray(s));\n    if (typeof s === 'number') s = _this.passes[s];\n    if (!(s && s.count > 1 && s.opacity)) return;\n\n    _this.regl._refresh();\n\n    if (s.fill && s.triangles && s.triangles.length > 2) {\n      _this.shaders.fill(s);\n    }\n\n    if (!s.thickness) return; // high scale is only available for rect mode with precision\n\n    if (s.scale[0] * s.viewport.width > Line2D.precisionThreshold || s.scale[1] * s.viewport.height > Line2D.precisionThreshold) {\n      _this.shaders.rect(s);\n    } // thin this.passes or too many points are rendered as simplified rect shader\n    else if (s.join === 'rect' || !s.join && (s.thickness <= 2 || s.count >= Line2D.maxPoints)) {\n      _this.shaders.rect(s);\n    } else {\n      _this.shaders.miter(s);\n    }\n  });\n  return this;\n};\n\nLine2D.prototype.update = function (options) {\n  var _this2 = this;\n\n  if (!options) return;\n\n  if (options.length != null) {\n    if (typeof options[0] === 'number') options = [{\n      positions: options\n    }];\n  } // make options a batch\n  else if (!Array.isArray(options)) options = [options];\n\n  var regl = this.regl,\n      gl = this.gl; // process per-line settings\n\n  options.forEach(function (o, i) {\n    var state = _this2.passes[i];\n    if (o === undefined) return; // null-argument removes pass\n\n    if (o === null) {\n      _this2.passes[i] = null;\n      return;\n    }\n\n    if (typeof o[0] === 'number') o = {\n      positions: o\n    }; // handle aliases\n\n    o = pick(o, {\n      positions: 'positions points data coords',\n      thickness: 'thickness lineWidth lineWidths line-width linewidth width stroke-width strokewidth strokeWidth',\n      join: 'lineJoin linejoin join type mode',\n      miterLimit: 'miterlimit miterLimit',\n      dashes: 'dash dashes dasharray dash-array dashArray',\n      color: 'color colour stroke colors colours stroke-color strokeColor',\n      fill: 'fill fill-color fillColor',\n      opacity: 'alpha opacity',\n      overlay: 'overlay crease overlap intersect',\n      close: 'closed close closed-path closePath',\n      range: 'range dataBox',\n      viewport: 'viewport viewBox',\n      hole: 'holes hole hollow',\n      splitNull: 'splitNull'\n    }); // init state\n\n    if (!state) {\n      _this2.passes[i] = state = {\n        id: i,\n        scale: null,\n        scaleFract: null,\n        translate: null,\n        translateFract: null,\n        count: 0,\n        hole: [],\n        depth: 0,\n        dashLength: 1,\n        dashTexture: regl.texture({\n          channels: 1,\n          data: new Uint8Array([255]),\n          width: 1,\n          height: 1,\n          mag: 'linear',\n          min: 'linear'\n        }),\n        colorBuffer: regl.buffer({\n          usage: 'dynamic',\n          type: 'uint8',\n          data: new Uint8Array()\n        }),\n        positionBuffer: regl.buffer({\n          usage: 'dynamic',\n          type: 'float',\n          data: new Uint8Array()\n        }),\n        positionFractBuffer: regl.buffer({\n          usage: 'dynamic',\n          type: 'float',\n          data: new Uint8Array()\n        })\n      };\n      o = extend({}, Line2D.defaults, o);\n    }\n\n    if (o.thickness != null) state.thickness = parseFloat(o.thickness);\n    if (o.opacity != null) state.opacity = parseFloat(o.opacity);\n    if (o.miterLimit != null) state.miterLimit = parseFloat(o.miterLimit);\n\n    if (o.overlay != null) {\n      state.overlay = !!o.overlay;\n\n      if (i < Line2D.maxLines) {\n        state.depth = 2 * (Line2D.maxLines - 1 - i % Line2D.maxLines) / Line2D.maxLines - 1.;\n      }\n    }\n\n    if (o.join != null) state.join = o.join;\n    if (o.hole != null) state.hole = o.hole;\n    if (o.fill != null) state.fill = !o.fill ? null : rgba(o.fill, 'uint8');\n    if (o.viewport != null) state.viewport = parseRect(o.viewport);\n\n    if (!state.viewport) {\n      state.viewport = parseRect([gl.drawingBufferWidth, gl.drawingBufferHeight]);\n    }\n\n    if (o.close != null) state.close = o.close; // reset positions\n\n    if (o.positions === null) o.positions = [];\n\n    if (o.positions) {\n      var positions, count; // if positions are an object with x/y\n\n      if (o.positions.x && o.positions.y) {\n        var xPos = o.positions.x;\n        var yPos = o.positions.y;\n        count = state.count = Math.max(xPos.length, yPos.length);\n        positions = new Float64Array(count * 2);\n\n        for (var _i = 0; _i < count; _i++) {\n          positions[_i * 2] = xPos[_i];\n          positions[_i * 2 + 1] = yPos[_i];\n        }\n      } else {\n        positions = flatten(o.positions, 'float64');\n        count = state.count = Math.floor(positions.length / 2);\n      }\n\n      var bounds = state.bounds = getBounds(positions, 2); // create fill positions\n      // FIXME: fill positions can be set only along with positions\n\n      if (state.fill) {\n        var pos = []; // filter bad vertices and remap triangles to ensure shape\n\n        var ids = {};\n        var lastId = 0;\n\n        for (var _i2 = 0, ptr = 0, l = state.count; _i2 < l; _i2++) {\n          var x = positions[_i2 * 2];\n          var y = positions[_i2 * 2 + 1];\n\n          if (isNaN(x) || isNaN(y) || x == null || y == null) {\n            x = positions[lastId * 2];\n            y = positions[lastId * 2 + 1];\n            ids[_i2] = lastId;\n          } else {\n            lastId = _i2;\n          }\n\n          pos[ptr++] = x;\n          pos[ptr++] = y;\n        } // split the input into multiple polygon at Null/NaN\n\n\n        if (o.splitNull) {\n          (function () {\n            // use \"ids\" to track the boundary of segment\n            // the keys in \"ids\" is the end boundary of a segment, or split point\n            // make sure there is at least one segment\n            if (!(state.count - 1 in ids)) ids[state.count] = state.count - 1;\n            var splits = Object.keys(ids).map(Number).sort(function (a, b) {\n              return a - b;\n            });\n            var split_triangles = [];\n            var base = 0; // do not split holes\n\n            var hole_base = state.hole != null ? state.hole[0] : null;\n\n            if (hole_base != null) {\n              var last_id = findIndex(splits, function (e) {\n                return e >= hole_base;\n              });\n              splits = splits.slice(0, last_id);\n              splits.push(hole_base);\n            }\n\n            var _loop = function _loop(_i3) {\n              // create temporary pos array with only one segment and all the holes\n              var seg_pos = pos.slice(base * 2, splits[_i3] * 2).concat(hole_base ? pos.slice(hole_base * 2) : []);\n              var hole = (state.hole || []).map(function (e) {\n                return e - hole_base + (splits[_i3] - base);\n              });\n              var triangles = triangulate(seg_pos, hole); // map triangle index back to the original pos buffer\n\n              triangles = triangles.map(function (e) {\n                return e + base + (e + base < splits[_i3] ? 0 : hole_base - splits[_i3]);\n              });\n              split_triangles.push.apply(split_triangles, _toConsumableArray(triangles)); // skip split point\n\n              base = splits[_i3] + 1;\n            };\n\n            for (var _i3 = 0; _i3 < splits.length; _i3++) {\n              _loop(_i3);\n            }\n\n            for (var _i4 = 0, _l = split_triangles.length; _i4 < _l; _i4++) {\n              if (ids[split_triangles[_i4]] != null) split_triangles[_i4] = ids[split_triangles[_i4]];\n            }\n\n            state.triangles = split_triangles;\n          })();\n        } else {\n          // treat the wholw input as a single polygon\n          var triangles = triangulate(pos, state.hole || []);\n\n          for (var _i5 = 0, _l2 = triangles.length; _i5 < _l2; _i5++) {\n            if (ids[triangles[_i5]] != null) triangles[_i5] = ids[triangles[_i5]];\n          }\n\n          state.triangles = triangles;\n        }\n      } // update position buffers\n\n\n      var npos = new Float64Array(positions);\n      normalize(npos, 2, bounds);\n      var positionData = new Float64Array(count * 2 + 6); // rotate first segment join\n\n      if (state.close) {\n        if (positions[0] === positions[count * 2 - 2] && positions[1] === positions[count * 2 - 1]) {\n          positionData[0] = npos[count * 2 - 4];\n          positionData[1] = npos[count * 2 - 3];\n        } else {\n          positionData[0] = npos[count * 2 - 2];\n          positionData[1] = npos[count * 2 - 1];\n        }\n      } else {\n        positionData[0] = npos[0];\n        positionData[1] = npos[1];\n      }\n\n      positionData.set(npos, 2); // add last segment\n\n      if (state.close) {\n        // ignore coinciding start/end\n        if (positions[0] === positions[count * 2 - 2] && positions[1] === positions[count * 2 - 1]) {\n          positionData[count * 2 + 2] = npos[2];\n          positionData[count * 2 + 3] = npos[3];\n          state.count -= 1;\n        } else {\n          positionData[count * 2 + 2] = npos[0];\n          positionData[count * 2 + 3] = npos[1];\n          positionData[count * 2 + 4] = npos[2];\n          positionData[count * 2 + 5] = npos[3];\n        }\n      } // add stub\n      else {\n        positionData[count * 2 + 2] = npos[count * 2 - 2];\n        positionData[count * 2 + 3] = npos[count * 2 - 1];\n        positionData[count * 2 + 4] = npos[count * 2 - 2];\n        positionData[count * 2 + 5] = npos[count * 2 - 1];\n      }\n\n      var float_data = float32(positionData);\n      state.positionBuffer(float_data);\n      var frac_data = fract32(positionData, float_data);\n      state.positionFractBuffer(frac_data);\n    }\n\n    if (o.range) {\n      state.range = o.range;\n    } else if (!state.range) {\n      state.range = state.bounds;\n    }\n\n    if ((o.range || o.positions) && state.count) {\n      var _bounds = state.bounds;\n      var boundsW = _bounds[2] - _bounds[0],\n          boundsH = _bounds[3] - _bounds[1];\n      var rangeW = state.range[2] - state.range[0],\n          rangeH = state.range[3] - state.range[1];\n      state.scale = [boundsW / rangeW, boundsH / rangeH];\n      state.translate = [-state.range[0] / rangeW + _bounds[0] / rangeW || 0, -state.range[1] / rangeH + _bounds[1] / rangeH || 0];\n      state.scaleFract = fract32(state.scale);\n      state.translateFract = fract32(state.translate);\n    }\n\n    if (o.dashes) {\n      var dashLength = 0.,\n          dashData;\n\n      if (!o.dashes || o.dashes.length < 2) {\n        dashLength = 1.;\n        dashData = new Uint8Array([255, 255, 255, 255, 255, 255, 255, 255]);\n      } else {\n        dashLength = 0.;\n\n        for (var _i6 = 0; _i6 < o.dashes.length; ++_i6) {\n          dashLength += o.dashes[_i6];\n        }\n\n        dashData = new Uint8Array(dashLength * Line2D.dashMult);\n        var _ptr = 0;\n        var fillColor = 255; // repeat texture two times to provide smooth 0-step\n\n        for (var k = 0; k < 2; k++) {\n          for (var _i7 = 0; _i7 < o.dashes.length; ++_i7) {\n            for (var j = 0, _l3 = o.dashes[_i7] * Line2D.dashMult * .5; j < _l3; ++j) {\n              dashData[_ptr++] = fillColor;\n            }\n\n            fillColor ^= 255;\n          }\n        }\n      }\n\n      state.dashLength = dashLength;\n      state.dashTexture({\n        channels: 1,\n        data: dashData,\n        width: dashData.length,\n        height: 1,\n        mag: 'linear',\n        min: 'linear'\n      }, 0, 0);\n    }\n\n    if (o.color) {\n      var _count = state.count;\n      var colors = o.color;\n      if (!colors) colors = 'transparent';\n      var colorData = new Uint8Array(_count * 4 + 4); // convert colors to typed arrays\n\n      if (!Array.isArray(colors) || typeof colors[0] === 'number') {\n        var c = rgba(colors, 'uint8');\n\n        for (var _i8 = 0; _i8 < _count + 1; _i8++) {\n          colorData.set(c, _i8 * 4);\n        }\n      } else {\n        for (var _i9 = 0; _i9 < _count; _i9++) {\n          var _c = rgba(colors[_i9], 'uint8');\n\n          colorData.set(_c, _i9 * 4);\n        }\n\n        colorData.set(rgba(colors[0], 'uint8'), _count * 4);\n      }\n\n      state.colorBuffer({\n        usage: 'dynamic',\n        type: 'uint8',\n        data: colorData\n      });\n    }\n  }); // remove unmentioned passes\n\n  if (options.length < this.passes.length) {\n    for (var i = options.length; i < this.passes.length; i++) {\n      var pass = this.passes[i];\n      if (!pass) continue;\n      pass.colorBuffer.destroy();\n      pass.positionBuffer.destroy();\n      pass.dashTexture.destroy();\n    }\n\n    this.passes.length = options.length;\n  } // remove null items\n\n\n  var passes = [];\n\n  for (var _i10 = 0; _i10 < this.passes.length; _i10++) {\n    if (this.passes[_i10] !== null) passes.push(this.passes[_i10]);\n  }\n\n  this.passes = passes;\n  return this;\n};\n\nLine2D.prototype.destroy = function () {\n  this.passes.forEach(function (pass) {\n    pass.colorBuffer.destroy();\n    pass.positionBuffer.destroy();\n    pass.dashTexture.destroy();\n  });\n  this.passes.length = 0;\n  return this;\n};","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/regl-line2d/index.js"],"names":["rgba","require","getBounds","extend","glslify","pick","flatten","triangulate","normalize","float32","fract32","WeakMap","parseRect","findIndex","module","exports","Line2D","regl","options","length","positions","hasExtension","Error","gl","_gl","passes","shaders","has","get","set","createShaders","update","dashMult","maxPatternLength","precisionThreshold","maxPoints","maxLines","offsetBuffer","buffer","usage","type","data","shaderOptions","primitive","instances","prop","count","offset","uniforms","miterMode","ctx","join","miterLimit","scale","scaleFract","translateFract","translate","thickness","dashTexture","opacity","pixelRatio","context","id","dashLength","viewport","c","p","x","y","viewportWidth","viewportHeight","depth","blend","enable","color","equation","rgb","alpha","func","srcRGB","dstRGB","srcAlpha","dstAlpha","overlay","stencil","scissor","box","drawRectLine","vert","frag","attributes","lineEnd","divisor","stride","lineTop","aCoord","bCoord","aCoordFract","bCoordFract","drawMiterLine","cull","face","aColor","bColor","prevCoord","nextCoord","e","drawFill","elements","triangles","position","positionFract","fill","rect","miter","defaults","dashes","cap","range","close","prototype","render","draw","args","forEach","s","i","Array","isArray","_refresh","width","height","o","state","undefined","hole","splitNull","texture","channels","Uint8Array","mag","min","colorBuffer","positionBuffer","positionFractBuffer","parseFloat","drawingBufferWidth","drawingBufferHeight","xPos","yPos","Math","max","Float64Array","floor","bounds","pos","ids","lastId","ptr","l","isNaN","splits","Object","keys","map","Number","sort","a","b","split_triangles","base","hole_base","last_id","slice","push","seg_pos","concat","npos","positionData","float_data","frac_data","boundsW","boundsH","rangeW","rangeH","dashData","fillColor","k","j","colors","colorData","pass","destroy"],"mappings":"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","sourcesContent":["'use strict'\n\n\nconst rgba = require('color-normalize')\nconst getBounds = require('array-bounds')\nconst extend = require('object-assign')\nconst glslify = require('glslify')\nconst pick = require('pick-by-alias')\nconst flatten = require('flatten-vertex-data')\nconst triangulate = require('earcut')\nconst normalize = require('array-normalize')\nconst { float32, fract32 } = require('to-float32')\nconst WeakMap = require('es6-weak-map')\nconst parseRect = require('parse-rect')\nconst findIndex = require('array-find-index');\n\n\nmodule.exports = Line2D\n\n\n/** @constructor */\nfunction Line2D (regl, options) {\n\tif (!(this instanceof Line2D)) return new Line2D(regl, options)\n\n\tif (typeof regl === 'function') {\n\t\tif (!options) options = {}\n\t\toptions.regl = regl\n\t}\n\telse {\n\t\toptions = regl\n\t}\n\tif (options.length) options.positions = options\n\tregl = options.regl\n\n\tif (!regl.hasExtension('ANGLE_instanced_arrays')) {\n\t\tthrow Error('regl-error2d: `ANGLE_instanced_arrays` extension should be enabled');\n\t}\n\n\t// persistent variables\n\tthis.gl = regl._gl\n\tthis.regl = regl\n\n\t// list of options for lines\n\tthis.passes = []\n\n\t// cached shaders instance\n\tthis.shaders = Line2D.shaders.has(regl) ? Line2D.shaders.get(regl) : Line2D.shaders.set(regl, Line2D.createShaders(regl)).get(regl)\n\n\n\t// init defaults\n\tthis.update(options)\n}\n\n\nLine2D.dashMult = 2\nLine2D.maxPatternLength = 256\nLine2D.precisionThreshold = 3e6\nLine2D.maxPoints = 1e4\nLine2D.maxLines = 2048\n\n\n// cache of created draw calls per-regl instance\nLine2D.shaders = new WeakMap()\n\n\n// create static shaders once\nLine2D.createShaders = function (regl) {\n\tlet offsetBuffer = regl.buffer({\n\t\tusage: 'static',\n\t\ttype: 'float',\n\t\tdata: [0,1, 0,0, 1,1, 1,0]\n\t})\n\n\tlet shaderOptions = {\n\t\tprimitive: 'triangle strip',\n\t\tinstances: regl.prop('count'),\n\t\tcount: 4,\n\t\toffset: 0,\n\n\t\tuniforms: {\n\t\t\tmiterMode: (ctx, prop) => prop.join === 'round' ? 2 : 1,\n\t\t\tmiterLimit: regl.prop('miterLimit'),\n\t\t\tscale: regl.prop('scale'),\n\t\t\tscaleFract: regl.prop('scaleFract'),\n\t\t\ttranslateFract: regl.prop('translateFract'),\n\t\t\ttranslate: regl.prop('translate'),\n\t\t\tthickness: regl.prop('thickness'),\n\t\t\tdashTexture: regl.prop('dashTexture'),\n\t\t\topacity: regl.prop('opacity'),\n\t\t\tpixelRatio: regl.context('pixelRatio'),\n\t\t\tid: regl.prop('id'),\n\t\t\tdashLength: regl.prop('dashLength'),\n\t\t\tviewport: (c, p) => [p.viewport.x, p.viewport.y, c.viewportWidth, c.viewportHeight],\n\t\t\tdepth: regl.prop('depth')\n\t\t},\n\n\t\tblend: {\n\t\t\tenable: true,\n\t\t\tcolor: [0,0,0,0],\n\t\t\tequation: {\n\t\t\t\trgb: 'add',\n\t\t\t\talpha: 'add'\n\t\t\t},\n\t\t\tfunc: {\n\t\t\t\tsrcRGB: 'src alpha',\n\t\t\t\tdstRGB: 'one minus src alpha',\n\t\t\t\tsrcAlpha: 'one minus dst alpha',\n\t\t\t\tdstAlpha: 'one'\n\t\t\t}\n\t\t},\n\t\tdepth: {\n\t\t\tenable: (c, p) => {\n\t\t\t\treturn !p.overlay\n\t\t\t}\n\t\t},\n\t\tstencil: {enable: false},\n\t\tscissor: {\n\t\t\tenable: true,\n\t\t\tbox: regl.prop('viewport')\n\t\t},\n\t\tviewport: regl.prop('viewport')\n\t}\n\n\n\t// simplified rectangular line shader\n\tlet drawRectLine = regl(extend({\n\t\tvert: glslify('./rect-vert.glsl'),\n\t\tfrag: glslify('./rect-frag.glsl'),\n\n\t\tattributes: {\n\t\t\t// if point is at the end of segment\n\t\t\tlineEnd: {\n\t\t\t\tbuffer: offsetBuffer,\n\t\t\t\tdivisor: 0,\n\t\t\t\tstride: 8,\n\t\t\t\toffset: 0\n\t\t\t},\n\t\t\t// if point is at the top of segment\n\t\t\tlineTop: {\n\t\t\t\tbuffer: offsetBuffer,\n\t\t\t\tdivisor: 0,\n\t\t\t\tstride: 8,\n\t\t\t\toffset: 4\n\t\t\t},\n\t\t\t// beginning of line coordinate\n\t\t\taCoord: {\n\t\t\t\tbuffer: regl.prop('positionBuffer'),\n\t\t\t\tstride: 8,\n\t\t\t\toffset: 8,\n\t\t\t\tdivisor: 1\n\t\t\t},\n\t\t\t// end of line coordinate\n\t\t\tbCoord: {\n\t\t\t\tbuffer: regl.prop('positionBuffer'),\n\t\t\t\tstride: 8,\n\t\t\t\toffset: 16,\n\t\t\t\tdivisor: 1\n\t\t\t},\n\t\t\taCoordFract: {\n\t\t\t\tbuffer: regl.prop('positionFractBuffer'),\n\t\t\t\tstride: 8,\n\t\t\t\toffset: 8,\n\t\t\t\tdivisor: 1\n\t\t\t},\n\t\t\tbCoordFract: {\n\t\t\t\tbuffer: regl.prop('positionFractBuffer'),\n\t\t\t\tstride: 8,\n\t\t\t\toffset: 16,\n\t\t\t\tdivisor: 1\n\t\t\t},\n\t\t\tcolor: {\n\t\t\t\tbuffer: regl.prop('colorBuffer'),\n\t\t\t\tstride: 4,\n\t\t\t\toffset: 0,\n\t\t\t\tdivisor: 1\n\t\t\t}\n\t\t}\n\t}, shaderOptions))\n\n\t// create regl draw\n\tlet drawMiterLine\n\n\ttry {\n\t\tdrawMiterLine = regl(extend({\n\t\t\t// culling removes polygon creasing\n\t\t\tcull: {\n\t\t\t\tenable: true,\n\t\t\t\tface: 'back'\n\t\t\t},\n\n\t\t\tvert: glslify('./miter-vert.glsl'),\n\t\t\tfrag: glslify('./miter-frag.glsl'),\n\n\t\t\tattributes: {\n\t\t\t\t// is line end\n\t\t\t\tlineEnd: {\n\t\t\t\t\tbuffer: offsetBuffer,\n\t\t\t\t\tdivisor: 0,\n\t\t\t\t\tstride: 8,\n\t\t\t\t\toffset: 0\n\t\t\t\t},\n\t\t\t\t// is line top\n\t\t\t\tlineTop: {\n\t\t\t\t\tbuffer: offsetBuffer,\n\t\t\t\t\tdivisor: 0,\n\t\t\t\t\tstride: 8,\n\t\t\t\t\toffset: 4\n\t\t\t\t},\n\t\t\t\t// left color\n\t\t\t\taColor: {\n\t\t\t\t\tbuffer: regl.prop('colorBuffer'),\n\t\t\t\t\tstride: 4,\n\t\t\t\t\toffset: 0,\n\t\t\t\t\tdivisor: 1\n\t\t\t\t},\n\t\t\t\t// right color\n\t\t\t\tbColor: {\n\t\t\t\t\tbuffer: regl.prop('colorBuffer'),\n\t\t\t\t\tstride: 4,\n\t\t\t\t\toffset: 4,\n\t\t\t\t\tdivisor: 1\n\t\t\t\t},\n\t\t\t\tprevCoord: {\n\t\t\t\t\tbuffer: regl.prop('positionBuffer'),\n\t\t\t\t\tstride: 8,\n\t\t\t\t\toffset: 0,\n\t\t\t\t\tdivisor: 1\n\t\t\t\t},\n\t\t\t\taCoord: {\n\t\t\t\t\tbuffer: regl.prop('positionBuffer'),\n\t\t\t\t\tstride: 8,\n\t\t\t\t\toffset: 8,\n\t\t\t\t\tdivisor: 1\n\t\t\t\t},\n\t\t\t\tbCoord: {\n\t\t\t\t\tbuffer: regl.prop('positionBuffer'),\n\t\t\t\t\tstride: 8,\n\t\t\t\t\toffset: 16,\n\t\t\t\t\tdivisor: 1\n\t\t\t\t},\n\t\t\t\tnextCoord: {\n\t\t\t\t\tbuffer: regl.prop('positionBuffer'),\n\t\t\t\t\tstride: 8,\n\t\t\t\t\toffset: 24,\n\t\t\t\t\tdivisor: 1\n\t\t\t\t}\n\t\t\t}\n\t\t}, shaderOptions))\n\t} catch (e) {\n\t\t// IE/bad Webkit fallback\n\t\tdrawMiterLine = drawRectLine\n\t}\n\n\t// fill shader\n\tlet drawFill = regl({\n\t\tprimitive: 'triangle',\n\t\telements: (ctx, prop) => prop.triangles,\n\t\toffset: 0,\n\n\t\tvert: glslify('./fill-vert.glsl'),\n\t\tfrag: glslify('./fill-frag.glsl'),\n\n\t\tuniforms: {\n\t\t\tscale: regl.prop('scale'),\n\t\t\tcolor: regl.prop('fill'),\n\t\t\tscaleFract: regl.prop('scaleFract'),\n\t\t\ttranslateFract: regl.prop('translateFract'),\n\t\t\ttranslate: regl.prop('translate'),\n\t\t\topacity: regl.prop('opacity'),\n\t\t\tpixelRatio: regl.context('pixelRatio'),\n\t\t\tid: regl.prop('id'),\n\t\t\tviewport: (ctx, prop) => [prop.viewport.x, prop.viewport.y, ctx.viewportWidth, ctx.viewportHeight]\n\t\t},\n\n\t\tattributes: {\n\t\t\tposition: {\n\t\t\t\tbuffer: regl.prop('positionBuffer'),\n\t\t\t\tstride: 8,\n\t\t\t\toffset: 8\n\t\t\t},\n\t\t\tpositionFract: {\n\t\t\t\tbuffer: regl.prop('positionFractBuffer'),\n\t\t\t\tstride: 8,\n\t\t\t\toffset: 8\n\t\t\t}\n\t\t},\n\n\t\tblend: shaderOptions.blend,\n\n\t\tdepth: { enable: false },\n\t\tscissor: shaderOptions.scissor,\n\t\tstencil: shaderOptions.stencil,\n\t\tviewport: shaderOptions.viewport\n\t})\n\n\treturn {\n\t\tfill: drawFill, rect: drawRectLine, miter: drawMiterLine\n\t}\n}\n\n\n// used to for new lines instances\nLine2D.defaults = {\n\tdashes: null,\n\tjoin: 'miter',\n\tmiterLimit: 1,\n\tthickness: 10,\n\tcap: 'square',\n\tcolor: 'black',\n\topacity: 1,\n\toverlay: false,\n\tviewport: null,\n\trange: null,\n\tclose: false,\n\tfill: null\n}\n\n\nLine2D.prototype.render = function (...args) {\n\tif (args.length) {\n\t\tthis.update(...args)\n\t}\n\n\tthis.draw()\n}\n\n\nLine2D.prototype.draw = function (...args) {\n\t// render multiple polylines via regl batch\n\t(args.length ? args : this.passes).forEach((s, i) => {\n\t\t// render array pass as a list of passes\n\t\tif (s && Array.isArray(s)) return this.draw(...s)\n\n\t\tif (typeof s === 'number') s = this.passes[s]\n\n\t\tif (!(s && s.count > 1 && s.opacity)) return\n\n\t\tthis.regl._refresh()\n\n\t\tif (s.fill && s.triangles && s.triangles.length > 2) {\n\t\t\tthis.shaders.fill(s)\n\t\t}\n\n\t\tif (!s.thickness) return\n\n\t\t// high scale is only available for rect mode with precision\n\t\tif (s.scale[0] * s.viewport.width > Line2D.precisionThreshold || s.scale[1] * s.viewport.height > Line2D.precisionThreshold) {\n\t\t\tthis.shaders.rect(s)\n\t\t}\n\n\t\t// thin this.passes or too many points are rendered as simplified rect shader\n\t\telse if (s.join === 'rect' || (!s.join && (s.thickness <= 2 || s.count >= Line2D.maxPoints))) {\n\t\t\tthis.shaders.rect(s)\n\t\t}\n\t\telse {\n\t\t\tthis.shaders.miter(s)\n\t\t}\n\t})\n\n\treturn this\n}\n\nLine2D.prototype.update = function (options) {\n\tif (!options) return\n\n\tif (options.length != null) {\n\t\tif (typeof options[0] === 'number') options = [{positions: options}]\n\t}\n\n\t// make options a batch\n\telse if (!Array.isArray(options)) options = [options]\n\n\tlet { regl, gl } = this\n\n\t// process per-line settings\n\toptions.forEach((o, i) => {\n\t\tlet state = this.passes[i]\n\n\t\tif (o === undefined) return\n\n\t\t// null-argument removes pass\n\t\tif (o === null) {\n\t\t\tthis.passes[i] = null\n\t\t\treturn\n\t\t}\n\n\t\tif (typeof o[0] === 'number') o = {positions: o}\n\n\t\t// handle aliases\n\t\to = pick(o, {\n\t\t\tpositions: 'positions points data coords',\n\t\t\tthickness: 'thickness lineWidth lineWidths line-width linewidth width stroke-width strokewidth strokeWidth',\n\t\t\tjoin: 'lineJoin linejoin join type mode',\n\t\t\tmiterLimit: 'miterlimit miterLimit',\n\t\t\tdashes: 'dash dashes dasharray dash-array dashArray',\n\t\t\tcolor: 'color colour stroke colors colours stroke-color strokeColor',\n\t\t\tfill: 'fill fill-color fillColor',\n\t\t\topacity: 'alpha opacity',\n\t\t\toverlay: 'overlay crease overlap intersect',\n\t\t\tclose: 'closed close closed-path closePath',\n\t\t\trange: 'range dataBox',\n\t\t\tviewport: 'viewport viewBox',\n\t\t\thole: 'holes hole hollow',\n\t\t\tsplitNull: 'splitNull'\n\t\t})\n\n\t\t// init state\n\t\tif (!state) {\n\t\t\tthis.passes[i] = state = {\n\t\t\t\tid: i,\n\t\t\t\tscale: null,\n\t\t\t\tscaleFract: null,\n\t\t\t\ttranslate: null,\n\t\t\t\ttranslateFract: null,\n\t\t\t\tcount: 0,\n\t\t\t\thole: [],\n\t\t\t\tdepth: 0,\n\n\t\t\t\tdashLength: 1,\n\t\t\t\tdashTexture: regl.texture({\n\t\t\t\t\tchannels: 1,\n\t\t\t\t\tdata: new Uint8Array([255]),\n\t\t\t\t\twidth: 1,\n\t\t\t\t\theight: 1,\n\t\t\t\t\tmag: 'linear',\n\t\t\t\t\tmin: 'linear'\n\t\t\t\t}),\n\n\t\t\t\tcolorBuffer: regl.buffer({\n\t\t\t\t\tusage: 'dynamic',\n\t\t\t\t\ttype: 'uint8',\n\t\t\t\t\tdata: new Uint8Array()\n\t\t\t\t}),\n\t\t\t\tpositionBuffer: regl.buffer({\n\t\t\t\t\tusage: 'dynamic',\n\t\t\t\t\ttype: 'float',\n\t\t\t\t\tdata: new Uint8Array()\n\t\t\t\t}),\n\t\t\t\tpositionFractBuffer: regl.buffer({\n\t\t\t\t\tusage: 'dynamic',\n\t\t\t\t\ttype: 'float',\n\t\t\t\t\tdata: new Uint8Array()\n\t\t\t\t})\n\t\t\t}\n\n\t\t\to = extend({}, Line2D.defaults, o)\n\t\t}\n\t\tif (o.thickness != null) state.thickness = parseFloat(o.thickness)\n\t\tif (o.opacity != null) state.opacity = parseFloat(o.opacity)\n\t\tif (o.miterLimit != null) state.miterLimit = parseFloat(o.miterLimit)\n\t\tif (o.overlay != null) {\n\t\t\tstate.overlay = !!o.overlay\n\t\t\tif (i < Line2D.maxLines) {\n\t\t\t\tstate.depth = 2 * (Line2D.maxLines - 1 - i % Line2D.maxLines) / Line2D.maxLines - 1.;\n\t\t\t}\n\t\t}\n\t\tif (o.join != null) state.join = o.join\n\t\tif (o.hole != null) state.hole = o.hole\n\t\tif (o.fill != null) state.fill = !o.fill ? null : rgba(o.fill, 'uint8')\n\t\tif (o.viewport != null) state.viewport = parseRect(o.viewport)\n\n\t\tif (!state.viewport) {\n\t\t\tstate.viewport = parseRect([\n\t\t\t\tgl.drawingBufferWidth,\n\t\t\t\tgl.drawingBufferHeight\n\t\t\t])\n\t\t}\n\n\t\tif (o.close != null) state.close = o.close\n\n\t\t// reset positions\n\t\tif (o.positions === null) o.positions = []\n\t\tif (o.positions) {\n\t\t\tlet positions, count\n\n\t\t\t// if positions are an object with x/y\n\t\t\tif (o.positions.x && o.positions.y) {\n\t\t\t\tlet xPos = o.positions.x\n\t\t\t\tlet yPos = o.positions.y\n\t\t\t\tcount = state.count = Math.max(\n\t\t\t\t\txPos.length,\n\t\t\t\t\tyPos.length\n\t\t\t\t)\n\t\t\t\tpositions = new Float64Array(count * 2)\n\t\t\t\tfor (let i = 0; i < count; i++) {\n\t\t\t\t\tpositions[i * 2] = xPos[i]\n\t\t\t\t\tpositions[i * 2 + 1] = yPos[i]\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tpositions = flatten(o.positions, 'float64')\n\t\t\t\tcount = state.count = Math.floor(positions.length / 2)\n\t\t\t}\n\n\t\t\tlet bounds = state.bounds = getBounds(positions, 2)\n\n\t\t\t// create fill positions\n\t\t\t// FIXME: fill positions can be set only along with positions\n\t\t\tif (state.fill) {\n\t\t\t\tlet pos = []\n\n\t\t\t\t// filter bad vertices and remap triangles to ensure shape\n\t\t\t\tlet ids = {}\n\t\t\t\tlet lastId = 0\n\n\t\t\t\tfor (let i = 0, ptr = 0, l = state.count; i < l; i++) {\n\t\t\t\t\tlet x = positions[i*2]\n\t\t\t\t\tlet y = positions[i*2 + 1]\n\t\t\t\t\tif (isNaN(x) || isNaN(y) || x == null || y == null) {\n\t\t\t\t\t\tx = positions[lastId*2]\n\t\t\t\t\t\ty = positions[lastId*2 + 1]\n\t\t\t\t\t\tids[i] = lastId\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tlastId = i\n\t\t\t\t\t}\n\t\t\t\t\tpos[ptr++] = x\n\t\t\t\t\tpos[ptr++] = y\n\t\t\t\t}\n\n\t\t\t\t// split the input into multiple polygon at Null/NaN\n\t\t\t\tif(o.splitNull){\n\t\t\t\t\t// use \"ids\" to track the boundary of segment\n\t\t\t\t\t// the keys in \"ids\" is the end boundary of a segment, or split point\n\n\t\t\t\t\t// make sure there is at least one segment\n\t\t\t\t\tif(!(state.count-1 in ids)) ids[state.count] = state.count-1\n\n\t\t\t\t\tlet splits = Object.keys(ids).map(Number).sort((a, b) => a - b)\n\n\t\t\t\t\tlet split_triangles = []\n\t\t\t\t\tlet base = 0\n\n\t\t\t\t\t// do not split holes\n\t\t\t\t\tlet hole_base = state.hole != null ? state.hole[0] : null\n\t\t\t\t\tif(hole_base != null){\n\t\t\t\t\t\tlet last_id = findIndex(splits, (e)=>e>=hole_base)\n\t\t\t\t\t\tsplits = splits.slice(0,last_id)\n\t\t\t\t\t\tsplits.push(hole_base)\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (let i = 0; i < splits.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\t// create temporary pos array with only one segment and all the holes\n\t\t\t\t\t\tlet seg_pos = pos.slice(base*2, splits[i]*2).concat(\n\t\t\t\t\t\t\thole_base ? pos.slice(hole_base*2) : []\n\t\t\t\t\t\t)\n\t\t\t\t\t\tlet hole = (state.hole || []).map((e) => e-hole_base+(splits[i]-base) )\n\t\t\t\t\t\tlet triangles = triangulate(seg_pos, hole)\n\t\t\t\t\t\t// map triangle index back to the original pos buffer\n\t\t\t\t\t\ttriangles = triangles.map(\n\t\t\t\t\t\t\t(e)=> e + base + ((e + base < splits[i]) ? 0 : hole_base - splits[i])\n\t\t\t\t\t\t)\n\t\t\t\t\t\tsplit_triangles.push(...triangles)\n\n\t\t\t\t\t\t// skip split point\n\t\t\t\t\t\tbase = splits[i] + 1\n\t\t\t\t\t}\n\t\t\t\t\tfor (let i = 0, l = split_triangles.length; i < l; i++) {\n\t\t\t\t\t\tif (ids[split_triangles[i]] != null) split_triangles[i] = ids[split_triangles[i]]\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.triangles = split_triangles\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// treat the wholw input as a single polygon\n\t\t\t\t\tlet triangles = triangulate(pos, state.hole || [])\n\n\t\t\t\t\tfor (let i = 0, l = triangles.length; i < l; i++) {\n\t\t\t\t\t\tif (ids[triangles[i]] != null) triangles[i] = ids[triangles[i]]\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.triangles = triangles\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// update position buffers\n\t\t\tlet npos = new Float64Array(positions)\n\t\t\tnormalize(npos, 2, bounds)\n\n\t\t\tlet positionData = new Float64Array(count * 2 + 6)\n\n\t\t\t// rotate first segment join\n\t\t\tif (state.close) {\n\t\t\t\tif (positions[0] === positions[count*2 - 2] &&\n\t\t\t\t\tpositions[1] === positions[count*2 - 1]) {\n\t\t\t\t\tpositionData[0] = npos[count*2 - 4]\n\t\t\t\t\tpositionData[1] = npos[count*2 - 3]\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tpositionData[0] = npos[count*2 - 2]\n\t\t\t\t\tpositionData[1] = npos[count*2 - 1]\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tpositionData[0] = npos[0]\n\t\t\t\tpositionData[1] = npos[1]\n\t\t\t}\n\n\t\t\tpositionData.set(npos, 2)\n\n\t\t\t// add last segment\n\t\t\tif (state.close) {\n\t\t\t\t// ignore coinciding start/end\n\t\t\t\tif (positions[0] === positions[count*2 - 2] &&\n\t\t\t\t\tpositions[1] === positions[count*2 - 1]) {\n\t\t\t\t\tpositionData[count*2 + 2] = npos[2]\n\t\t\t\t\tpositionData[count*2 + 3] = npos[3]\n\t\t\t\t\tstate.count -= 1\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tpositionData[count*2 + 2] = npos[0]\n\t\t\t\t\tpositionData[count*2 + 3] = npos[1]\n\t\t\t\t\tpositionData[count*2 + 4] = npos[2]\n\t\t\t\t\tpositionData[count*2 + 5] = npos[3]\n\t\t\t\t}\n\t\t\t}\n\t\t\t// add stub\n\t\t\telse {\n\t\t\t\tpositionData[count*2 + 2] = npos[count*2 - 2]\n\t\t\t\tpositionData[count*2 + 3] = npos[count*2 - 1]\n\t\t\t\tpositionData[count*2 + 4] = npos[count*2 - 2]\n\t\t\t\tpositionData[count*2 + 5] = npos[count*2 - 1]\n\t\t\t}\n\n\t\t\tvar float_data = float32(positionData)\n\t\t\tstate.positionBuffer(float_data)\n\t\t\tvar frac_data = fract32(positionData, float_data)\n\t\t\tstate.positionFractBuffer(frac_data)\n\t\t}\n\n\t\tif (o.range) {\n\t\t\tstate.range = o.range\n\t\t} else if (!state.range) {\n\t\t\tstate.range = state.bounds\n\t\t}\n\n\t\tif ((o.range || o.positions) && state.count) {\n\t\t\tlet bounds = state.bounds\n\n\t\t\tlet boundsW = bounds[2] - bounds[0],\n\t\t\t\tboundsH = bounds[3] - bounds[1]\n\n\t\t\tlet rangeW = state.range[2] - state.range[0],\n\t\t\t\trangeH = state.range[3] - state.range[1]\n\n\t\t\tstate.scale = [\n\t\t\t\tboundsW / rangeW,\n\t\t\t\tboundsH / rangeH\n\t\t\t]\n\t\t\tstate.translate = [\n\t\t\t\t-state.range[0] / rangeW + bounds[0] / rangeW || 0,\n\t\t\t\t-state.range[1] / rangeH + bounds[1] / rangeH || 0\n\t\t\t]\n\n\t\t\tstate.scaleFract = fract32(state.scale)\n\t\t\tstate.translateFract = fract32(state.translate)\n\t\t}\n\n\t\tif (o.dashes) {\n\t\t\tlet dashLength = 0., dashData\n\n\t\t\tif (!o.dashes || o.dashes.length < 2) {\n\t\t\t\tdashLength = 1.\n\t\t\t\tdashData = new Uint8Array([255, 255, 255, 255, 255, 255, 255, 255])\n\t\t\t}\n\n\t\t\telse {\n\t\t\t\tdashLength = 0.;\n\t\t\t\tfor(let i = 0; i < o.dashes.length; ++i) {\n\t\t\t\t\tdashLength += o.dashes[i]\n\t\t\t\t}\n\t\t\t\tdashData = new Uint8Array(dashLength * Line2D.dashMult)\n\t\t\t\tlet ptr = 0\n\t\t\t\tlet fillColor = 255\n\n\t\t\t\t// repeat texture two times to provide smooth 0-step\n\t\t\t\tfor (let k = 0; k < 2; k++) {\n\t\t\t\t\tfor(let i = 0; i < o.dashes.length; ++i) {\n\t\t\t\t\t\tfor(let j = 0, l = o.dashes[i] * Line2D.dashMult * .5; j < l; ++j) {\n\t\t\t\t\t\t\tdashData[ptr++] = fillColor\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfillColor ^= 255\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstate.dashLength = dashLength\n\t\t\tstate.dashTexture({\n\t\t\t\tchannels: 1,\n\t\t\t\tdata: dashData,\n\t\t\t\twidth: dashData.length,\n\t\t\t\theight: 1,\n\t\t\t\tmag: 'linear',\n\t\t\t\tmin: 'linear'\n\t\t\t}, 0, 0)\n\t\t}\n\n\t\tif (o.color) {\n\t\t\tlet count = state.count\n\t\t\tlet colors = o.color\n\n\t\t\tif (!colors) colors = 'transparent'\n\n\t\t\tlet colorData = new Uint8Array(count * 4 + 4)\n\n\t\t\t// convert colors to typed arrays\n\t\t\tif (!Array.isArray(colors) || typeof colors[0] === 'number') {\n\t\t\t\tlet c = rgba(colors, 'uint8')\n\n\t\t\t\tfor (let i = 0; i < count + 1; i++) {\n\t\t\t\t\tcolorData.set(c, i * 4)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor (let i = 0; i < count; i++) {\n\t\t\t\t\tlet c = rgba(colors[i], 'uint8')\n\t\t\t\t\tcolorData.set(c, i * 4)\n\t\t\t\t}\n\t\t\t\tcolorData.set(rgba(colors[0], 'uint8'), count * 4)\n\t\t\t}\n\n\t\t\tstate.colorBuffer({\n\t\t\t\tusage: 'dynamic',\n\t\t\t\ttype: 'uint8',\n\t\t\t\tdata: colorData\n\t\t\t})\n\t\t}\n\t})\n\n\t// remove unmentioned passes\n\tif (options.length < this.passes.length) {\n\t\tfor (let i = options.length; i < this.passes.length; i++) {\n\t\t\tlet pass = this.passes[i]\n\t\t\tif (!pass) continue\n\t\t\tpass.colorBuffer.destroy()\n\t\t\tpass.positionBuffer.destroy()\n\t\t\tpass.dashTexture.destroy()\n\t\t}\n\t\tthis.passes.length = options.length\n\t}\n\n\t// remove null items\n\tlet passes = []\n\tfor (let i = 0; i < this.passes.length; i++) {\n\t\tif (this.passes[i] !== null) passes.push(this.passes[i])\n\t}\n\tthis.passes = passes\n\n\treturn this\n}\n\nLine2D.prototype.destroy = function () {\n\tthis.passes.forEach(pass => {\n\t\tpass.colorBuffer.destroy()\n\t\tpass.positionBuffer.destroy()\n\t\tpass.dashTexture.destroy()\n\t})\n\n\tthis.passes.length = 0\n\n\treturn this\n}\n"]},"metadata":{},"sourceType":"script"}