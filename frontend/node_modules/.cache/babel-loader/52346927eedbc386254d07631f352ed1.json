{"ast":null,"code":"'use strict';\n\nvar barAttrs = require('../bar/attributes');\n\nvar lineAttrs = require('../scatter/attributes').line;\n\nvar baseAttrs = require('../../plots/attributes');\n\nvar axisHoverFormat = require('../../plots/cartesian/axis_format_attributes').axisHoverFormat;\n\nvar hovertemplateAttrs = require('../../plots/template_attributes').hovertemplateAttrs;\n\nvar texttemplateAttrs = require('../../plots/template_attributes').texttemplateAttrs;\n\nvar constants = require('./constants');\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nvar Color = require('../../components/color');\n\nmodule.exports = {\n  x: barAttrs.x,\n  x0: barAttrs.x0,\n  dx: barAttrs.dx,\n  y: barAttrs.y,\n  y0: barAttrs.y0,\n  dy: barAttrs.dy,\n  xperiod: barAttrs.xperiod,\n  yperiod: barAttrs.yperiod,\n  xperiod0: barAttrs.xperiod0,\n  yperiod0: barAttrs.yperiod0,\n  xperiodalignment: barAttrs.xperiodalignment,\n  yperiodalignment: barAttrs.yperiodalignment,\n  xhoverformat: axisHoverFormat('x'),\n  yhoverformat: axisHoverFormat('y'),\n  hovertext: barAttrs.hovertext,\n  hovertemplate: hovertemplateAttrs({}, {\n    keys: constants.eventDataKeys\n  }),\n  hoverinfo: extendFlat({}, baseAttrs.hoverinfo, {\n    flags: ['name', 'x', 'y', 'text', 'percent initial', 'percent previous', 'percent total']\n  }),\n  textinfo: {\n    valType: 'flaglist',\n    flags: ['label', 'text', 'percent initial', 'percent previous', 'percent total', 'value'],\n    extras: ['none'],\n    editType: 'plot',\n    arrayOk: false,\n    description: ['Determines which trace information appear on the graph.', 'In the case of having multiple funnels, percentages & totals', 'are computed separately (per trace).'].join(' ')\n  },\n  // TODO: incorporate `label` and `value` in the eventData\n  texttemplate: texttemplateAttrs({\n    editType: 'plot'\n  }, {\n    keys: constants.eventDataKeys.concat(['label', 'value'])\n  }),\n  text: barAttrs.text,\n  textposition: barAttrs.textposition,\n  insidetextanchor: extendFlat({}, barAttrs.insidetextanchor, {\n    dflt: 'middle'\n  }),\n  textangle: extendFlat({}, barAttrs.textangle, {\n    dflt: 0\n  }),\n  textfont: barAttrs.textfont,\n  insidetextfont: barAttrs.insidetextfont,\n  outsidetextfont: barAttrs.outsidetextfont,\n  constraintext: barAttrs.constraintext,\n  cliponaxis: barAttrs.cliponaxis,\n  orientation: extendFlat({}, barAttrs.orientation, {\n    description: ['Sets the orientation of the funnels.', 'With *v* (*h*), the value of the each bar spans', 'along the vertical (horizontal).', 'By default funnels are tend to be oriented horizontally;', 'unless only *y* array is presented or orientation is set to *v*.', 'Also regarding graphs including only \\'horizontal\\' funnels,', '*autorange* on the *y-axis* are set to *reversed*.'].join(' ')\n  }),\n  offset: extendFlat({}, barAttrs.offset, {\n    arrayOk: false\n  }),\n  width: extendFlat({}, barAttrs.width, {\n    arrayOk: false\n  }),\n  marker: funnelMarker(),\n  connector: {\n    fillcolor: {\n      valType: 'color',\n      editType: 'style',\n      description: ['Sets the fill color.'].join(' ')\n    },\n    line: {\n      color: extendFlat({}, lineAttrs.color, {\n        dflt: Color.defaultLine\n      }),\n      width: extendFlat({}, lineAttrs.width, {\n        dflt: 0,\n        editType: 'plot'\n      }),\n      dash: lineAttrs.dash,\n      editType: 'style'\n    },\n    visible: {\n      valType: 'boolean',\n      dflt: true,\n      editType: 'plot',\n      description: ['Determines if connector regions and lines are drawn.'].join(' ')\n    },\n    editType: 'plot'\n  },\n  offsetgroup: barAttrs.offsetgroup,\n  alignmentgroup: barAttrs.alignmentgroup\n};\n\nfunction funnelMarker() {\n  var marker = extendFlat({}, barAttrs.marker);\n  delete marker.pattern;\n  return marker;\n}","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/plotly.js/src/traces/funnel/attributes.js"],"names":["barAttrs","require","lineAttrs","line","baseAttrs","axisHoverFormat","hovertemplateAttrs","texttemplateAttrs","constants","extendFlat","Color","module","exports","x","x0","dx","y","y0","dy","xperiod","yperiod","xperiod0","yperiod0","xperiodalignment","yperiodalignment","xhoverformat","yhoverformat","hovertext","hovertemplate","keys","eventDataKeys","hoverinfo","flags","textinfo","valType","extras","editType","arrayOk","description","join","texttemplate","concat","text","textposition","insidetextanchor","dflt","textangle","textfont","insidetextfont","outsidetextfont","constraintext","cliponaxis","orientation","offset","width","marker","funnelMarker","connector","fillcolor","color","defaultLine","dash","visible","offsetgroup","alignmentgroup","pattern"],"mappings":"AAAA;;AAEA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAtB;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,uBAAD,CAAP,CAAiCE,IAAjD;;AACA,IAAIC,SAAS,GAAGH,OAAO,CAAC,wBAAD,CAAvB;;AACA,IAAII,eAAe,GAAGJ,OAAO,CAAC,8CAAD,CAAP,CAAwDI,eAA9E;;AACA,IAAIC,kBAAkB,GAAGL,OAAO,CAAC,iCAAD,CAAP,CAA2CK,kBAApE;;AACA,IAAIC,iBAAiB,GAAGN,OAAO,CAAC,iCAAD,CAAP,CAA2CM,iBAAnE;;AACA,IAAIC,SAAS,GAAGP,OAAO,CAAC,aAAD,CAAvB;;AACA,IAAIQ,UAAU,GAAGR,OAAO,CAAC,kBAAD,CAAP,CAA4BQ,UAA7C;;AACA,IAAIC,KAAK,GAAGT,OAAO,CAAC,wBAAD,CAAnB;;AAEAU,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,CAAC,EAAEb,QAAQ,CAACa,CADC;AAEbC,EAAAA,EAAE,EAAEd,QAAQ,CAACc,EAFA;AAGbC,EAAAA,EAAE,EAAEf,QAAQ,CAACe,EAHA;AAIbC,EAAAA,CAAC,EAAEhB,QAAQ,CAACgB,CAJC;AAKbC,EAAAA,EAAE,EAAEjB,QAAQ,CAACiB,EALA;AAMbC,EAAAA,EAAE,EAAElB,QAAQ,CAACkB,EANA;AAQbC,EAAAA,OAAO,EAAEnB,QAAQ,CAACmB,OARL;AASbC,EAAAA,OAAO,EAAEpB,QAAQ,CAACoB,OATL;AAUbC,EAAAA,QAAQ,EAAErB,QAAQ,CAACqB,QAVN;AAWbC,EAAAA,QAAQ,EAAEtB,QAAQ,CAACsB,QAXN;AAYbC,EAAAA,gBAAgB,EAAEvB,QAAQ,CAACuB,gBAZd;AAabC,EAAAA,gBAAgB,EAAExB,QAAQ,CAACwB,gBAbd;AAcbC,EAAAA,YAAY,EAAEpB,eAAe,CAAC,GAAD,CAdhB;AAebqB,EAAAA,YAAY,EAAErB,eAAe,CAAC,GAAD,CAfhB;AAiBbsB,EAAAA,SAAS,EAAE3B,QAAQ,CAAC2B,SAjBP;AAkBbC,EAAAA,aAAa,EAAEtB,kBAAkB,CAAC,EAAD,EAAK;AAClCuB,IAAAA,IAAI,EAAErB,SAAS,CAACsB;AADkB,GAAL,CAlBpB;AAsBbC,EAAAA,SAAS,EAAEtB,UAAU,CAAC,EAAD,EAAKL,SAAS,CAAC2B,SAAf,EAA0B;AAC3CC,IAAAA,KAAK,EAAE,CAAC,MAAD,EAAS,GAAT,EAAc,GAAd,EAAmB,MAAnB,EAA2B,iBAA3B,EAA8C,kBAA9C,EAAkE,eAAlE;AADoC,GAA1B,CAtBR;AA0BbC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,OAAO,EAAE,UADH;AAENF,IAAAA,KAAK,EAAE,CAAC,OAAD,EAAU,MAAV,EAAkB,iBAAlB,EAAqC,kBAArC,EAAyD,eAAzD,EAA0E,OAA1E,CAFD;AAGNG,IAAAA,MAAM,EAAE,CAAC,MAAD,CAHF;AAINC,IAAAA,QAAQ,EAAE,MAJJ;AAKNC,IAAAA,OAAO,EAAE,KALH;AAMNC,IAAAA,WAAW,EAAE,CACT,yDADS,EAET,8DAFS,EAGT,sCAHS,EAIXC,IAJW,CAIN,GAJM;AANP,GA1BG;AAsCb;AACAC,EAAAA,YAAY,EAAEjC,iBAAiB,CAAC;AAAC6B,IAAAA,QAAQ,EAAE;AAAX,GAAD,EAAqB;AAChDP,IAAAA,IAAI,EAAErB,SAAS,CAACsB,aAAV,CAAwBW,MAAxB,CAA+B,CAAC,OAAD,EAAU,OAAV,CAA/B;AAD0C,GAArB,CAvClB;AA2CbC,EAAAA,IAAI,EAAE1C,QAAQ,CAAC0C,IA3CF;AA4CbC,EAAAA,YAAY,EAAE3C,QAAQ,CAAC2C,YA5CV;AA6CbC,EAAAA,gBAAgB,EAAEnC,UAAU,CAAC,EAAD,EAAKT,QAAQ,CAAC4C,gBAAd,EAAgC;AAACC,IAAAA,IAAI,EAAE;AAAP,GAAhC,CA7Cf;AA8CbC,EAAAA,SAAS,EAAErC,UAAU,CAAC,EAAD,EAAKT,QAAQ,CAAC8C,SAAd,EAAyB;AAACD,IAAAA,IAAI,EAAE;AAAP,GAAzB,CA9CR;AA+CbE,EAAAA,QAAQ,EAAE/C,QAAQ,CAAC+C,QA/CN;AAgDbC,EAAAA,cAAc,EAAEhD,QAAQ,CAACgD,cAhDZ;AAiDbC,EAAAA,eAAe,EAAEjD,QAAQ,CAACiD,eAjDb;AAkDbC,EAAAA,aAAa,EAAElD,QAAQ,CAACkD,aAlDX;AAmDbC,EAAAA,UAAU,EAAEnD,QAAQ,CAACmD,UAnDR;AAqDbC,EAAAA,WAAW,EAAE3C,UAAU,CAAC,EAAD,EAAKT,QAAQ,CAACoD,WAAd,EAA2B;AAC9Cd,IAAAA,WAAW,EAAE,CACT,sCADS,EAET,iDAFS,EAGT,kCAHS,EAIT,0DAJS,EAKT,kEALS,EAMT,8DANS,EAOT,oDAPS,EAQXC,IARW,CAQN,GARM;AADiC,GAA3B,CArDV;AAiEbc,EAAAA,MAAM,EAAE5C,UAAU,CAAC,EAAD,EAAKT,QAAQ,CAACqD,MAAd,EAAsB;AAAChB,IAAAA,OAAO,EAAE;AAAV,GAAtB,CAjEL;AAkEbiB,EAAAA,KAAK,EAAE7C,UAAU,CAAC,EAAD,EAAKT,QAAQ,CAACsD,KAAd,EAAqB;AAACjB,IAAAA,OAAO,EAAE;AAAV,GAArB,CAlEJ;AAoEbkB,EAAAA,MAAM,EAAEC,YAAY,EApEP;AAsEbC,EAAAA,SAAS,EAAE;AACPC,IAAAA,SAAS,EAAE;AACPxB,MAAAA,OAAO,EAAE,OADF;AAEPE,MAAAA,QAAQ,EAAE,OAFH;AAGPE,MAAAA,WAAW,EAAE,CACT,sBADS,EAEXC,IAFW,CAEN,GAFM;AAHN,KADJ;AAQPpC,IAAAA,IAAI,EAAE;AACFwD,MAAAA,KAAK,EAAElD,UAAU,CAAC,EAAD,EAAKP,SAAS,CAACyD,KAAf,EAAsB;AAACd,QAAAA,IAAI,EAAEnC,KAAK,CAACkD;AAAb,OAAtB,CADf;AAEFN,MAAAA,KAAK,EAAE7C,UAAU,CAAC,EAAD,EAAKP,SAAS,CAACoD,KAAf,EAAsB;AACnCT,QAAAA,IAAI,EAAE,CAD6B;AAEnCT,QAAAA,QAAQ,EAAE;AAFyB,OAAtB,CAFf;AAMFyB,MAAAA,IAAI,EAAE3D,SAAS,CAAC2D,IANd;AAOFzB,MAAAA,QAAQ,EAAE;AAPR,KARC;AAiBP0B,IAAAA,OAAO,EAAE;AACL5B,MAAAA,OAAO,EAAE,SADJ;AAELW,MAAAA,IAAI,EAAE,IAFD;AAGLT,MAAAA,QAAQ,EAAE,MAHL;AAILE,MAAAA,WAAW,EAAE,CACT,sDADS,EAEXC,IAFW,CAEN,GAFM;AAJR,KAjBF;AAyBPH,IAAAA,QAAQ,EAAE;AAzBH,GAtEE;AAkGb2B,EAAAA,WAAW,EAAE/D,QAAQ,CAAC+D,WAlGT;AAmGbC,EAAAA,cAAc,EAAEhE,QAAQ,CAACgE;AAnGZ,CAAjB;;AAsGA,SAASR,YAAT,GAAwB;AACpB,MAAID,MAAM,GAAG9C,UAAU,CAAC,EAAD,EAAKT,QAAQ,CAACuD,MAAd,CAAvB;AACA,SAAOA,MAAM,CAACU,OAAd;AACA,SAAOV,MAAP;AACH","sourcesContent":["'use strict';\n\nvar barAttrs = require('../bar/attributes');\nvar lineAttrs = require('../scatter/attributes').line;\nvar baseAttrs = require('../../plots/attributes');\nvar axisHoverFormat = require('../../plots/cartesian/axis_format_attributes').axisHoverFormat;\nvar hovertemplateAttrs = require('../../plots/template_attributes').hovertemplateAttrs;\nvar texttemplateAttrs = require('../../plots/template_attributes').texttemplateAttrs;\nvar constants = require('./constants');\nvar extendFlat = require('../../lib/extend').extendFlat;\nvar Color = require('../../components/color');\n\nmodule.exports = {\n    x: barAttrs.x,\n    x0: barAttrs.x0,\n    dx: barAttrs.dx,\n    y: barAttrs.y,\n    y0: barAttrs.y0,\n    dy: barAttrs.dy,\n\n    xperiod: barAttrs.xperiod,\n    yperiod: barAttrs.yperiod,\n    xperiod0: barAttrs.xperiod0,\n    yperiod0: barAttrs.yperiod0,\n    xperiodalignment: barAttrs.xperiodalignment,\n    yperiodalignment: barAttrs.yperiodalignment,\n    xhoverformat: axisHoverFormat('x'),\n    yhoverformat: axisHoverFormat('y'),\n\n    hovertext: barAttrs.hovertext,\n    hovertemplate: hovertemplateAttrs({}, {\n        keys: constants.eventDataKeys\n    }),\n\n    hoverinfo: extendFlat({}, baseAttrs.hoverinfo, {\n        flags: ['name', 'x', 'y', 'text', 'percent initial', 'percent previous', 'percent total']\n    }),\n\n    textinfo: {\n        valType: 'flaglist',\n        flags: ['label', 'text', 'percent initial', 'percent previous', 'percent total', 'value'],\n        extras: ['none'],\n        editType: 'plot',\n        arrayOk: false,\n        description: [\n            'Determines which trace information appear on the graph.',\n            'In the case of having multiple funnels, percentages & totals',\n            'are computed separately (per trace).'\n        ].join(' ')\n    },\n    // TODO: incorporate `label` and `value` in the eventData\n    texttemplate: texttemplateAttrs({editType: 'plot'}, {\n        keys: constants.eventDataKeys.concat(['label', 'value'])\n    }),\n\n    text: barAttrs.text,\n    textposition: barAttrs.textposition,\n    insidetextanchor: extendFlat({}, barAttrs.insidetextanchor, {dflt: 'middle'}),\n    textangle: extendFlat({}, barAttrs.textangle, {dflt: 0}),\n    textfont: barAttrs.textfont,\n    insidetextfont: barAttrs.insidetextfont,\n    outsidetextfont: barAttrs.outsidetextfont,\n    constraintext: barAttrs.constraintext,\n    cliponaxis: barAttrs.cliponaxis,\n\n    orientation: extendFlat({}, barAttrs.orientation, {\n        description: [\n            'Sets the orientation of the funnels.',\n            'With *v* (*h*), the value of the each bar spans',\n            'along the vertical (horizontal).',\n            'By default funnels are tend to be oriented horizontally;',\n            'unless only *y* array is presented or orientation is set to *v*.',\n            'Also regarding graphs including only \\'horizontal\\' funnels,',\n            '*autorange* on the *y-axis* are set to *reversed*.'\n        ].join(' ')\n    }),\n\n    offset: extendFlat({}, barAttrs.offset, {arrayOk: false}),\n    width: extendFlat({}, barAttrs.width, {arrayOk: false}),\n\n    marker: funnelMarker(),\n\n    connector: {\n        fillcolor: {\n            valType: 'color',\n            editType: 'style',\n            description: [\n                'Sets the fill color.'\n            ].join(' ')\n        },\n        line: {\n            color: extendFlat({}, lineAttrs.color, {dflt: Color.defaultLine}),\n            width: extendFlat({}, lineAttrs.width, {\n                dflt: 0,\n                editType: 'plot',\n            }),\n            dash: lineAttrs.dash,\n            editType: 'style'\n        },\n        visible: {\n            valType: 'boolean',\n            dflt: true,\n            editType: 'plot',\n            description: [\n                'Determines if connector regions and lines are drawn.'\n            ].join(' ')\n        },\n        editType: 'plot'\n    },\n\n    offsetgroup: barAttrs.offsetgroup,\n    alignmentgroup: barAttrs.alignmentgroup\n};\n\nfunction funnelMarker() {\n    var marker = extendFlat({}, barAttrs.marker);\n    delete marker.pattern;\n    return marker;\n}\n"]},"metadata":{},"sourceType":"script"}