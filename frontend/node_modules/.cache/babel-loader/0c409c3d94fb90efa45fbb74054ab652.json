{"ast":null,"code":"'use strict';\n\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\n\nvar Scene2D = require('./scene2d');\n\nvar layoutGlobalAttrs = require('../layout_attributes');\n\nvar xmlnsNamespaces = require('../../constants/xmlns_namespaces');\n\nvar constants = require('../cartesian/constants');\n\nvar Cartesian = require('../cartesian');\n\nvar fxAttrs = require('../../components/fx/layout_attributes');\n\nvar getSubplotData = require('../get_data').getSubplotData;\n\nexports.name = 'gl2d';\nexports.attr = ['xaxis', 'yaxis'];\nexports.idRoot = ['x', 'y'];\nexports.idRegex = constants.idRegex;\nexports.attrRegex = constants.attrRegex;\nexports.attributes = require('../cartesian/attributes');\n\nexports.supplyLayoutDefaults = function (layoutIn, layoutOut, fullData) {\n  if (!layoutOut._has('cartesian')) {\n    Cartesian.supplyLayoutDefaults(layoutIn, layoutOut, fullData);\n  }\n}; // gl2d uses svg axis attributes verbatim, but overrides editType\n// this could potentially be just `layoutAttributes` but it would\n// still need special handling somewhere to give it precedence over\n// the svg version when both are in use on one plot\n\n\nexports.layoutAttrOverrides = overrideAll(Cartesian.layoutAttributes, 'plot', 'from-root'); // similar overrides for base plot attributes (and those added by components)\n\nexports.baseLayoutAttrOverrides = overrideAll({\n  plot_bgcolor: layoutGlobalAttrs.plot_bgcolor,\n  hoverlabel: fxAttrs.hoverlabel // dragmode needs calc but only when transitioning TO lasso or select\n  // so for now it's left inside _relayout\n  // dragmode: fxAttrs.dragmode\n\n}, 'plot', 'nested');\n\nexports.plot = function plot(gd) {\n  var fullLayout = gd._fullLayout;\n  var fullData = gd._fullData;\n  var subplotIds = fullLayout._subplots.gl2d;\n\n  for (var i = 0; i < subplotIds.length; i++) {\n    var subplotId = subplotIds[i];\n    var subplotObj = fullLayout._plots[subplotId];\n    var fullSubplotData = getSubplotData(fullData, 'gl2d', subplotId); // ref. to corresp. Scene instance\n\n    var scene = subplotObj._scene2d; // If Scene is not instantiated, create one!\n\n    if (scene === undefined) {\n      scene = new Scene2D({\n        id: subplotId,\n        graphDiv: gd,\n        container: gd.querySelector('.gl-container'),\n        staticPlot: gd._context.staticPlot,\n        plotGlPixelRatio: gd._context.plotGlPixelRatio\n      }, fullLayout); // set ref to Scene instance\n\n      subplotObj._scene2d = scene;\n    }\n\n    scene.plot(fullSubplotData, gd.calcdata, fullLayout, gd.layout);\n  }\n};\n\nexports.clean = function (newFullData, newFullLayout, oldFullData, oldFullLayout) {\n  var oldSceneKeys = oldFullLayout._subplots.gl2d || [];\n\n  for (var i = 0; i < oldSceneKeys.length; i++) {\n    var id = oldSceneKeys[i];\n    var oldSubplot = oldFullLayout._plots[id]; // old subplot wasn't gl2d; nothing to do\n\n    if (!oldSubplot._scene2d) continue; // if no traces are present, delete gl2d subplot\n\n    var subplotData = getSubplotData(newFullData, 'gl2d', id);\n\n    if (subplotData.length === 0) {\n      oldSubplot._scene2d.destroy();\n\n      delete oldFullLayout._plots[id];\n    }\n  } // since we use cartesian interactions, do cartesian clean\n\n\n  Cartesian.clean.apply(this, arguments);\n};\n\nexports.drawFramework = function (gd) {\n  if (!gd._context.staticPlot) {\n    Cartesian.drawFramework(gd);\n  }\n};\n\nexports.toSVG = function (gd) {\n  var fullLayout = gd._fullLayout;\n  var subplotIds = fullLayout._subplots.gl2d;\n\n  for (var i = 0; i < subplotIds.length; i++) {\n    var subplot = fullLayout._plots[subplotIds[i]];\n    var scene = subplot._scene2d;\n    var imageData = scene.toImage('png');\n\n    var image = fullLayout._glimages.append('svg:image');\n\n    image.attr({\n      xmlns: xmlnsNamespaces.svg,\n      'xlink:href': imageData,\n      x: 0,\n      y: 0,\n      width: '100%',\n      height: '100%',\n      preserveAspectRatio: 'none'\n    });\n    scene.destroy();\n  }\n};\n\nexports.updateFx = function (gd) {\n  var fullLayout = gd._fullLayout;\n  var subplotIds = fullLayout._subplots.gl2d;\n\n  for (var i = 0; i < subplotIds.length; i++) {\n    var subplotObj = fullLayout._plots[subplotIds[i]]._scene2d;\n    subplotObj.updateFx(fullLayout.dragmode);\n  }\n};","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/plotly.js/src/plots/gl2d/index.js"],"names":["overrideAll","require","Scene2D","layoutGlobalAttrs","xmlnsNamespaces","constants","Cartesian","fxAttrs","getSubplotData","exports","name","attr","idRoot","idRegex","attrRegex","attributes","supplyLayoutDefaults","layoutIn","layoutOut","fullData","_has","layoutAttrOverrides","layoutAttributes","baseLayoutAttrOverrides","plot_bgcolor","hoverlabel","plot","gd","fullLayout","_fullLayout","_fullData","subplotIds","_subplots","gl2d","i","length","subplotId","subplotObj","_plots","fullSubplotData","scene","_scene2d","undefined","id","graphDiv","container","querySelector","staticPlot","_context","plotGlPixelRatio","calcdata","layout","clean","newFullData","newFullLayout","oldFullData","oldFullLayout","oldSceneKeys","oldSubplot","subplotData","destroy","apply","arguments","drawFramework","toSVG","subplot","imageData","toImage","image","_glimages","append","xmlns","svg","x","y","width","height","preserveAspectRatio","updateFx","dragmode"],"mappings":"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","sourcesContent":["'use strict';\n\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\n\nvar Scene2D = require('./scene2d');\nvar layoutGlobalAttrs = require('../layout_attributes');\nvar xmlnsNamespaces = require('../../constants/xmlns_namespaces');\nvar constants = require('../cartesian/constants');\nvar Cartesian = require('../cartesian');\nvar fxAttrs = require('../../components/fx/layout_attributes');\nvar getSubplotData = require('../get_data').getSubplotData;\n\nexports.name = 'gl2d';\n\nexports.attr = ['xaxis', 'yaxis'];\n\nexports.idRoot = ['x', 'y'];\n\nexports.idRegex = constants.idRegex;\n\nexports.attrRegex = constants.attrRegex;\n\nexports.attributes = require('../cartesian/attributes');\n\nexports.supplyLayoutDefaults = function(layoutIn, layoutOut, fullData) {\n    if(!layoutOut._has('cartesian')) {\n        Cartesian.supplyLayoutDefaults(layoutIn, layoutOut, fullData);\n    }\n};\n\n// gl2d uses svg axis attributes verbatim, but overrides editType\n// this could potentially be just `layoutAttributes` but it would\n// still need special handling somewhere to give it precedence over\n// the svg version when both are in use on one plot\nexports.layoutAttrOverrides = overrideAll(Cartesian.layoutAttributes, 'plot', 'from-root');\n\n// similar overrides for base plot attributes (and those added by components)\nexports.baseLayoutAttrOverrides = overrideAll({\n    plot_bgcolor: layoutGlobalAttrs.plot_bgcolor,\n    hoverlabel: fxAttrs.hoverlabel\n    // dragmode needs calc but only when transitioning TO lasso or select\n    // so for now it's left inside _relayout\n    // dragmode: fxAttrs.dragmode\n}, 'plot', 'nested');\n\nexports.plot = function plot(gd) {\n    var fullLayout = gd._fullLayout;\n    var fullData = gd._fullData;\n    var subplotIds = fullLayout._subplots.gl2d;\n\n    for(var i = 0; i < subplotIds.length; i++) {\n        var subplotId = subplotIds[i];\n        var subplotObj = fullLayout._plots[subplotId];\n        var fullSubplotData = getSubplotData(fullData, 'gl2d', subplotId);\n\n        // ref. to corresp. Scene instance\n        var scene = subplotObj._scene2d;\n\n        // If Scene is not instantiated, create one!\n        if(scene === undefined) {\n            scene = new Scene2D({\n                id: subplotId,\n                graphDiv: gd,\n                container: gd.querySelector('.gl-container'),\n                staticPlot: gd._context.staticPlot,\n                plotGlPixelRatio: gd._context.plotGlPixelRatio\n            },\n                fullLayout\n            );\n\n            // set ref to Scene instance\n            subplotObj._scene2d = scene;\n        }\n\n        scene.plot(fullSubplotData, gd.calcdata, fullLayout, gd.layout);\n    }\n};\n\nexports.clean = function(newFullData, newFullLayout, oldFullData, oldFullLayout) {\n    var oldSceneKeys = oldFullLayout._subplots.gl2d || [];\n\n    for(var i = 0; i < oldSceneKeys.length; i++) {\n        var id = oldSceneKeys[i];\n        var oldSubplot = oldFullLayout._plots[id];\n\n        // old subplot wasn't gl2d; nothing to do\n        if(!oldSubplot._scene2d) continue;\n\n        // if no traces are present, delete gl2d subplot\n        var subplotData = getSubplotData(newFullData, 'gl2d', id);\n        if(subplotData.length === 0) {\n            oldSubplot._scene2d.destroy();\n            delete oldFullLayout._plots[id];\n        }\n    }\n\n    // since we use cartesian interactions, do cartesian clean\n    Cartesian.clean.apply(this, arguments);\n};\n\nexports.drawFramework = function(gd) {\n    if(!gd._context.staticPlot) {\n        Cartesian.drawFramework(gd);\n    }\n};\n\nexports.toSVG = function(gd) {\n    var fullLayout = gd._fullLayout;\n    var subplotIds = fullLayout._subplots.gl2d;\n\n    for(var i = 0; i < subplotIds.length; i++) {\n        var subplot = fullLayout._plots[subplotIds[i]];\n        var scene = subplot._scene2d;\n\n        var imageData = scene.toImage('png');\n        var image = fullLayout._glimages.append('svg:image');\n\n        image.attr({\n            xmlns: xmlnsNamespaces.svg,\n            'xlink:href': imageData,\n            x: 0,\n            y: 0,\n            width: '100%',\n            height: '100%',\n            preserveAspectRatio: 'none'\n        });\n\n        scene.destroy();\n    }\n};\n\nexports.updateFx = function(gd) {\n    var fullLayout = gd._fullLayout;\n    var subplotIds = fullLayout._subplots.gl2d;\n\n    for(var i = 0; i < subplotIds.length; i++) {\n        var subplotObj = fullLayout._plots[subplotIds[i]]._scene2d;\n        subplotObj.updateFx(fullLayout.dragmode);\n    }\n};\n"]},"metadata":{},"sourceType":"script"}