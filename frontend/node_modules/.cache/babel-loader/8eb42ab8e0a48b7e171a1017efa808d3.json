{"ast":null,"code":"'use strict';\n\nvar isNumeric = require('fast-isnumeric');\n\nvar tinycolor = require('tinycolor2');\n\nvar isArrayOrTypedArray = require('../../lib').isArrayOrTypedArray;\n\nexports.coerceString = function (attributeDefinition, value, defaultValue) {\n  if (typeof value === 'string') {\n    if (value || !attributeDefinition.noBlank) return value;\n  } else if (typeof value === 'number' || value === true) {\n    if (!attributeDefinition.strict) return String(value);\n  }\n\n  return defaultValue !== undefined ? defaultValue : attributeDefinition.dflt;\n};\n\nexports.coerceNumber = function (attributeDefinition, value, defaultValue) {\n  if (isNumeric(value)) {\n    value = +value;\n    var min = attributeDefinition.min;\n    var max = attributeDefinition.max;\n    var isOutOfBounds = min !== undefined && value < min || max !== undefined && value > max;\n    if (!isOutOfBounds) return value;\n  }\n\n  return defaultValue !== undefined ? defaultValue : attributeDefinition.dflt;\n};\n\nexports.coerceColor = function (attributeDefinition, value, defaultValue) {\n  if (tinycolor(value).isValid()) return value;\n  return defaultValue !== undefined ? defaultValue : attributeDefinition.dflt;\n};\n\nexports.coerceEnumerated = function (attributeDefinition, value, defaultValue) {\n  if (attributeDefinition.coerceNumber) value = +value;\n  if (attributeDefinition.values.indexOf(value) !== -1) return value;\n  return defaultValue !== undefined ? defaultValue : attributeDefinition.dflt;\n};\n\nexports.getValue = function (arrayOrScalar, index) {\n  var value;\n  if (!Array.isArray(arrayOrScalar)) value = arrayOrScalar;else if (index < arrayOrScalar.length) value = arrayOrScalar[index];\n  return value;\n};\n\nexports.getLineWidth = function (trace, di) {\n  var w = 0 < di.mlw ? di.mlw : !isArrayOrTypedArray(trace.marker.line.width) ? trace.marker.line.width : 0;\n  return w;\n};","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/plotly.js/src/traces/bar/helpers.js"],"names":["isNumeric","require","tinycolor","isArrayOrTypedArray","exports","coerceString","attributeDefinition","value","defaultValue","noBlank","strict","String","undefined","dflt","coerceNumber","min","max","isOutOfBounds","coerceColor","isValid","coerceEnumerated","values","indexOf","getValue","arrayOrScalar","index","Array","isArray","length","getLineWidth","trace","di","w","mlw","marker","line","width"],"mappings":"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","sourcesContent":["'use strict';\n\nvar isNumeric = require('fast-isnumeric');\nvar tinycolor = require('tinycolor2');\nvar isArrayOrTypedArray = require('../../lib').isArrayOrTypedArray;\n\nexports.coerceString = function(attributeDefinition, value, defaultValue) {\n    if(typeof value === 'string') {\n        if(value || !attributeDefinition.noBlank) return value;\n    } else if(typeof value === 'number' || value === true) {\n        if(!attributeDefinition.strict) return String(value);\n    }\n\n    return (defaultValue !== undefined) ?\n      defaultValue :\n      attributeDefinition.dflt;\n};\n\nexports.coerceNumber = function(attributeDefinition, value, defaultValue) {\n    if(isNumeric(value)) {\n        value = +value;\n\n        var min = attributeDefinition.min;\n        var max = attributeDefinition.max;\n        var isOutOfBounds = (min !== undefined && value < min) ||\n              (max !== undefined && value > max);\n\n        if(!isOutOfBounds) return value;\n    }\n\n    return (defaultValue !== undefined) ?\n      defaultValue :\n      attributeDefinition.dflt;\n};\n\nexports.coerceColor = function(attributeDefinition, value, defaultValue) {\n    if(tinycolor(value).isValid()) return value;\n\n    return (defaultValue !== undefined) ?\n      defaultValue :\n      attributeDefinition.dflt;\n};\n\nexports.coerceEnumerated = function(attributeDefinition, value, defaultValue) {\n    if(attributeDefinition.coerceNumber) value = +value;\n\n    if(attributeDefinition.values.indexOf(value) !== -1) return value;\n\n    return (defaultValue !== undefined) ?\n      defaultValue :\n      attributeDefinition.dflt;\n};\n\nexports.getValue = function(arrayOrScalar, index) {\n    var value;\n    if(!Array.isArray(arrayOrScalar)) value = arrayOrScalar;\n    else if(index < arrayOrScalar.length) value = arrayOrScalar[index];\n    return value;\n};\n\nexports.getLineWidth = function(trace, di) {\n    var w =\n        (0 < di.mlw) ? di.mlw :\n        !isArrayOrTypedArray(trace.marker.line.width) ? trace.marker.line.width :\n        0;\n\n    return w;\n};\n"]},"metadata":{},"sourceType":"script"}