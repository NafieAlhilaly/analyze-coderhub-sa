{"ast":null,"code":"'use strict';\n/**\r\n * Is this string all whitespace?\r\n * This solution kind of makes my brain hurt, but it's significantly faster\r\n * than !str.trim() or any other solution I could find.\r\n *\r\n * whitespace codes from: http://en.wikipedia.org/wiki/Whitespace_character\r\n * and verified with:\r\n *\r\n *  for(var i = 0; i < 65536; i++) {\r\n *      var s = String.fromCharCode(i);\r\n *      if(+s===0 && !s.trim()) console.log(i, s);\r\n *  }\r\n *\r\n * which counts a couple of these as *not* whitespace, but finds nothing else\r\n * that *is* whitespace. Note that charCodeAt stops at 16 bits, but it appears\r\n * that there are no whitespace characters above this, and code points above\r\n * this do not map onto white space characters.\r\n */\n\nmodule.exports = function (str) {\n  var l = str.length,\n      a;\n\n  for (var i = 0; i < l; i++) {\n    a = str.charCodeAt(i);\n\n    if ((a < 9 || a > 13) && a !== 32 && a !== 133 && a !== 160 && a !== 5760 && a !== 6158 && (a < 8192 || a > 8205) && a !== 8232 && a !== 8233 && a !== 8239 && a !== 8287 && a !== 8288 && a !== 12288 && a !== 65279) {\n      return false;\n    }\n  }\n\n  return true;\n};","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/is-string-blank/index.js"],"names":["module","exports","str","l","length","a","i","charCodeAt"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,MAAM,CAACC,OAAP,GAAiB,UAASC,GAAT,EAAa;AAC1B,MAAIC,CAAC,GAAGD,GAAG,CAACE,MAAZ;AAAA,MACIC,CADJ;;AAEA,OAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGH,CAAnB,EAAsBG,CAAC,EAAvB,EAA2B;AACvBD,IAAAA,CAAC,GAAGH,GAAG,CAACK,UAAJ,CAAeD,CAAf,CAAJ;;AACA,QAAG,CAACD,CAAC,GAAG,CAAJ,IAASA,CAAC,GAAG,EAAd,KAAsBA,CAAC,KAAK,EAA5B,IAAoCA,CAAC,KAAK,GAA1C,IAAmDA,CAAC,KAAK,GAAzD,IACEA,CAAC,KAAK,IADR,IACkBA,CAAC,KAAK,IADxB,KACkCA,CAAC,GAAG,IAAJ,IAAYA,CAAC,GAAG,IADlD,KAEEA,CAAC,KAAK,IAFR,IAEkBA,CAAC,KAAK,IAFxB,IAEkCA,CAAC,KAAK,IAFxC,IAEkDA,CAAC,KAAK,IAFxD,IAGEA,CAAC,KAAK,IAHR,IAGkBA,CAAC,KAAK,KAHxB,IAGmCA,CAAC,KAAK,KAH5C,EAGoD;AAC5C,aAAO,KAAP;AACP;AACJ;;AACD,SAAO,IAAP;AACH,CAbD","sourcesContent":["'use strict';\r\n\r\n/**\r\n * Is this string all whitespace?\r\n * This solution kind of makes my brain hurt, but it's significantly faster\r\n * than !str.trim() or any other solution I could find.\r\n *\r\n * whitespace codes from: http://en.wikipedia.org/wiki/Whitespace_character\r\n * and verified with:\r\n *\r\n *  for(var i = 0; i < 65536; i++) {\r\n *      var s = String.fromCharCode(i);\r\n *      if(+s===0 && !s.trim()) console.log(i, s);\r\n *  }\r\n *\r\n * which counts a couple of these as *not* whitespace, but finds nothing else\r\n * that *is* whitespace. Note that charCodeAt stops at 16 bits, but it appears\r\n * that there are no whitespace characters above this, and code points above\r\n * this do not map onto white space characters.\r\n */\r\n\r\nmodule.exports = function(str){\r\n    var l = str.length,\r\n        a;\r\n    for(var i = 0; i < l; i++) {\r\n        a = str.charCodeAt(i);\r\n        if((a < 9 || a > 13) && (a !== 32) && (a !== 133) && (a !== 160) &&\r\n            (a !== 5760) && (a !== 6158) && (a < 8192 || a > 8205) &&\r\n            (a !== 8232) && (a !== 8233) && (a !== 8239) && (a !== 8287) &&\r\n            (a !== 8288) && (a !== 12288) && (a !== 65279)) {\r\n                return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n"]},"metadata":{},"sourceType":"script"}