{"ast":null,"code":"'use strict';\n\nvar isNumeric = require('fast-isnumeric');\n\nvar BADNUM = require('../../constants/numerical').BADNUM;\n\nvar colorscaleCalc = require('../../components/colorscale/calc');\n\nvar arraysToCalcdata = require('../scatter/arrays_to_calcdata');\n\nvar calcSelection = require('../scatter/calc_selection');\n\nfunction isNonBlankString(v) {\n  return v && typeof v === 'string';\n}\n\nmodule.exports = function calc(gd, trace) {\n  var len = trace._length;\n  var calcTrace = new Array(len);\n  var isValidLoc;\n\n  if (trace.geojson) {\n    isValidLoc = function (v) {\n      return isNonBlankString(v) || isNumeric(v);\n    };\n  } else {\n    isValidLoc = isNonBlankString;\n  }\n\n  for (var i = 0; i < len; i++) {\n    var calcPt = calcTrace[i] = {};\n    var loc = trace.locations[i];\n    var z = trace.z[i];\n\n    if (isValidLoc(loc) && isNumeric(z)) {\n      calcPt.loc = loc;\n      calcPt.z = z;\n    } else {\n      calcPt.loc = null;\n      calcPt.z = BADNUM;\n    }\n\n    calcPt.index = i;\n  }\n\n  arraysToCalcdata(calcTrace, trace);\n  colorscaleCalc(gd, trace, {\n    vals: trace.z,\n    containerStr: '',\n    cLetter: 'z'\n  });\n  calcSelection(calcTrace, trace);\n  return calcTrace;\n};","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/plotly.js/src/traces/choropleth/calc.js"],"names":["isNumeric","require","BADNUM","colorscaleCalc","arraysToCalcdata","calcSelection","isNonBlankString","v","module","exports","calc","gd","trace","len","_length","calcTrace","Array","isValidLoc","geojson","i","calcPt","loc","locations","z","index","vals","containerStr","cLetter"],"mappings":"AAAA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,gBAAD,CAAvB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,2BAAD,CAAP,CAAqCC,MAAlD;;AAEA,IAAIC,cAAc,GAAGF,OAAO,CAAC,kCAAD,CAA5B;;AACA,IAAIG,gBAAgB,GAAGH,OAAO,CAAC,+BAAD,CAA9B;;AACA,IAAII,aAAa,GAAGJ,OAAO,CAAC,2BAAD,CAA3B;;AAEA,SAASK,gBAAT,CAA0BC,CAA1B,EAA6B;AACzB,SAAOA,CAAC,IAAI,OAAOA,CAAP,KAAa,QAAzB;AACH;;AAEDC,MAAM,CAACC,OAAP,GAAiB,SAASC,IAAT,CAAcC,EAAd,EAAkBC,KAAlB,EAAyB;AACtC,MAAIC,GAAG,GAAGD,KAAK,CAACE,OAAhB;AACA,MAAIC,SAAS,GAAG,IAAIC,KAAJ,CAAUH,GAAV,CAAhB;AAEA,MAAII,UAAJ;;AAEA,MAAGL,KAAK,CAACM,OAAT,EAAkB;AACdD,IAAAA,UAAU,GAAG,UAASV,CAAT,EAAY;AAAE,aAAOD,gBAAgB,CAACC,CAAD,CAAhB,IAAuBP,SAAS,CAACO,CAAD,CAAvC;AAA6C,KAAxE;AACH,GAFD,MAEO;AACHU,IAAAA,UAAU,GAAGX,gBAAb;AACH;;AAED,OAAI,IAAIa,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGN,GAAnB,EAAwBM,CAAC,EAAzB,EAA6B;AACzB,QAAIC,MAAM,GAAGL,SAAS,CAACI,CAAD,CAAT,GAAe,EAA5B;AACA,QAAIE,GAAG,GAAGT,KAAK,CAACU,SAAN,CAAgBH,CAAhB,CAAV;AACA,QAAII,CAAC,GAAGX,KAAK,CAACW,CAAN,CAAQJ,CAAR,CAAR;;AAEA,QAAGF,UAAU,CAACI,GAAD,CAAV,IAAmBrB,SAAS,CAACuB,CAAD,CAA/B,EAAoC;AAChCH,MAAAA,MAAM,CAACC,GAAP,GAAaA,GAAb;AACAD,MAAAA,MAAM,CAACG,CAAP,GAAWA,CAAX;AACH,KAHD,MAGO;AACHH,MAAAA,MAAM,CAACC,GAAP,GAAa,IAAb;AACAD,MAAAA,MAAM,CAACG,CAAP,GAAWrB,MAAX;AACH;;AAEDkB,IAAAA,MAAM,CAACI,KAAP,GAAeL,CAAf;AACH;;AAEDf,EAAAA,gBAAgB,CAACW,SAAD,EAAYH,KAAZ,CAAhB;AACAT,EAAAA,cAAc,CAACQ,EAAD,EAAKC,KAAL,EAAY;AACtBa,IAAAA,IAAI,EAAEb,KAAK,CAACW,CADU;AAEtBG,IAAAA,YAAY,EAAE,EAFQ;AAGtBC,IAAAA,OAAO,EAAE;AAHa,GAAZ,CAAd;AAKAtB,EAAAA,aAAa,CAACU,SAAD,EAAYH,KAAZ,CAAb;AAEA,SAAOG,SAAP;AACH,CArCD","sourcesContent":["'use strict';\n\nvar isNumeric = require('fast-isnumeric');\nvar BADNUM = require('../../constants/numerical').BADNUM;\n\nvar colorscaleCalc = require('../../components/colorscale/calc');\nvar arraysToCalcdata = require('../scatter/arrays_to_calcdata');\nvar calcSelection = require('../scatter/calc_selection');\n\nfunction isNonBlankString(v) {\n    return v && typeof v === 'string';\n}\n\nmodule.exports = function calc(gd, trace) {\n    var len = trace._length;\n    var calcTrace = new Array(len);\n\n    var isValidLoc;\n\n    if(trace.geojson) {\n        isValidLoc = function(v) { return isNonBlankString(v) || isNumeric(v); };\n    } else {\n        isValidLoc = isNonBlankString;\n    }\n\n    for(var i = 0; i < len; i++) {\n        var calcPt = calcTrace[i] = {};\n        var loc = trace.locations[i];\n        var z = trace.z[i];\n\n        if(isValidLoc(loc) && isNumeric(z)) {\n            calcPt.loc = loc;\n            calcPt.z = z;\n        } else {\n            calcPt.loc = null;\n            calcPt.z = BADNUM;\n        }\n\n        calcPt.index = i;\n    }\n\n    arraysToCalcdata(calcTrace, trace);\n    colorscaleCalc(gd, trace, {\n        vals: trace.z,\n        containerStr: '',\n        cLetter: 'z'\n    });\n    calcSelection(calcTrace, trace);\n\n    return calcTrace;\n};\n"]},"metadata":{},"sourceType":"script"}