{"ast":null,"code":"/*\n * World Calendars\n * https://github.com/alexcjohnson/world-calendars\n *\n * Batch-converted from kbwood/calendars\n * Many thanks to Keith Wood and all of the contributors to the original project!\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/* http://keith-wood.name/calendars.html\n  Ethiopian calendar for jQuery v2.0.2.\n  Written by Keith Wood (wood.keith{at}optusnet.com.au) February 2010.\n  Available under the MIT (http://keith-wood.name/licence.html) license. \n  Please attribute the author if you use it. */\nvar main = require('../main');\n\nvar assign = require('object-assign');\n/** Implementation of the Ethiopian calendar.\n    See <a href=\"http://en.wikipedia.org/wiki/Ethiopian_calendar\">http://en.wikipedia.org/wiki/Ethiopian_calendar</a>.\n    See also Calendrical Calculations: The Millennium Edition\n    (<a href=\"http://emr.cs.iit.edu/home/reingold/calendar-book/index.shtml\">http://emr.cs.iit.edu/home/reingold/calendar-book/index.shtml</a>).\n    @class EthiopianCalendar\n    @param [language=''] {string} The language code (default English) for localisation. */\n\n\nfunction EthiopianCalendar(language) {\n  this.local = this.regionalOptions[language || ''] || this.regionalOptions[''];\n}\n\nEthiopianCalendar.prototype = new main.baseCalendar();\nassign(EthiopianCalendar.prototype, {\n  /** The calendar name.\n      @memberof EthiopianCalendar */\n  name: 'Ethiopian',\n\n  /** Julian date of start of Ethiopian epoch: 27 August 8 CE (Gregorian).\n      @memberof EthiopianCalendar */\n  jdEpoch: 1724220.5,\n\n  /** Days per month in a common year.\n      @memberof EthiopianCalendar */\n  daysPerMonth: [30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 5],\n\n  /** <code>true</code> if has a year zero, <code>false</code> if not.\n      @memberof EthiopianCalendar */\n  hasYearZero: false,\n\n  /** The minimum month number.\n      @memberof EthiopianCalendar */\n  minMonth: 1,\n\n  /** The first month in the year.\n      @memberof EthiopianCalendar */\n  firstMonth: 1,\n\n  /** The minimum day number.\n      @memberof EthiopianCalendar */\n  minDay: 1,\n\n  /** Localisations for the plugin.\n      Entries are objects indexed by the language code ('' being the default US/English).\n      Each object has the following attributes.\n      @memberof EthiopianCalendar\n      @property name {string} The calendar name.\n      @property epochs {string[]} The epoch names.\n      @property monthNames {string[]} The long names of the months of the year.\n      @property monthNamesShort {string[]} The short names of the months of the year.\n      @property dayNames {string[]} The long names of the days of the week.\n      @property dayNamesShort {string[]} The short names of the days of the week.\n      @property dayNamesMin {string[]} The minimal names of the days of the week.\n      @property dateFormat {string} The date format for this calendar.\n              See the options on <a href=\"BaseCalendar.html#formatDate\"><code>formatDate</code></a> for details.\n      @property firstDay {number} The number of the first day of the week, starting at 0.\n      @property isRTL {number} <code>true</code> if this localisation reads right-to-left. */\n  regionalOptions: {\n    // Localisations\n    '': {\n      name: 'Ethiopian',\n      epochs: ['BEE', 'EE'],\n      monthNames: ['Meskerem', 'Tikemet', 'Hidar', 'Tahesas', 'Tir', 'Yekatit', 'Megabit', 'Miazia', 'Genbot', 'Sene', 'Hamle', 'Nehase', 'Pagume'],\n      monthNamesShort: ['Mes', 'Tik', 'Hid', 'Tah', 'Tir', 'Yek', 'Meg', 'Mia', 'Gen', 'Sen', 'Ham', 'Neh', 'Pag'],\n      dayNames: ['Ehud', 'Segno', 'Maksegno', 'Irob', 'Hamus', 'Arb', 'Kidame'],\n      dayNamesShort: ['Ehu', 'Seg', 'Mak', 'Iro', 'Ham', 'Arb', 'Kid'],\n      dayNamesMin: ['Eh', 'Se', 'Ma', 'Ir', 'Ha', 'Ar', 'Ki'],\n      digits: null,\n      dateFormat: 'dd/mm/yyyy',\n      firstDay: 0,\n      isRTL: false\n    }\n  },\n\n  /** Determine whether this date is in a leap year.\n      @memberof EthiopianCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @return {boolean} <code>true</code> if this is a leap year, <code>false</code> if not.\n      @throws Error if an invalid year or a different calendar used. */\n  leapYear: function leapYear(year) {\n    var date = this._validate(year, this.minMonth, this.minDay, main.local.invalidYear);\n\n    var year = date.year() + (date.year() < 0 ? 1 : 0); // No year zero\n\n    return year % 4 === 3 || year % 4 === -1;\n  },\n\n  /** Retrieve the number of months in a year.\n      @memberof EthiopianCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @return {number} The number of months.\n      @throws Error if an invalid year or a different calendar used. */\n  monthsInYear: function monthsInYear(year) {\n    this._validate(year, this.minMonth, this.minDay, main.local.invalidYear || main.regionalOptions[''].invalidYear);\n\n    return 13;\n  },\n\n  /** Determine the week of the year for a date.\n      @memberof EthiopianCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @param [month] {number} The month to examine.\n      @param [day] {number} The day to examine.\n      @return {number} The week of the year.\n      @throws Error if an invalid date or a different calendar used. */\n  weekOfYear: function weekOfYear(year, month, day) {\n    // Find Sunday of this week starting on Sunday\n    var checkDate = this.newDate(year, month, day);\n    checkDate.add(-checkDate.dayOfWeek(), 'd');\n    return Math.floor((checkDate.dayOfYear() - 1) / 7) + 1;\n  },\n\n  /** Retrieve the number of days in a month.\n      @memberof EthiopianCalendar\n      @param year {CDate|number} The date to examine or the year of the month.\n      @param [month] {number} The month.\n      @return {number} The number of days in this month.\n      @throws Error if an invalid month/year or a different calendar used. */\n  daysInMonth: function daysInMonth(year, month) {\n    var date = this._validate(year, month, this.minDay, main.local.invalidMonth);\n\n    return this.daysPerMonth[date.month() - 1] + (date.month() === 13 && this.leapYear(date.year()) ? 1 : 0);\n  },\n\n  /** Determine whether this date is a week day.\n      @memberof EthiopianCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @param [month] {number} The month to examine.\n      @param [day] {number} The day to examine.\n      @return {boolean} <code>true</code> if a week day, <code>false</code> if not.\n      @throws Error if an invalid date or a different calendar used. */\n  weekDay: function weekDay(year, month, day) {\n    return (this.dayOfWeek(year, month, day) || 7) < 6;\n  },\n\n  /** Retrieve the Julian date equivalent for this date,\n      i.e. days since January 1, 4713 BCE Greenwich noon.\n      @memberof EthiopianCalendar\n      @param year {CDate|number} The date to convert or the year to convert.\n      @param [month] {number} The month to convert.\n      @param [day] {number} The day to convert.\n      @return {number} The equivalent Julian date.\n      @throws Error if an invalid date or a different calendar used. */\n  toJD: function toJD(year, month, day) {\n    var date = this._validate(year, month, day, main.local.invalidDate);\n\n    year = date.year();\n\n    if (year < 0) {\n      year++;\n    } // No year zero\n\n\n    return date.day() + (date.month() - 1) * 30 + (year - 1) * 365 + Math.floor(year / 4) + this.jdEpoch - 1;\n  },\n\n  /** Create a new date from a Julian date.\n      @memberof EthiopianCalendar\n      @param jd {number} the Julian date to convert.\n      @return {CDate} the equivalent date. */\n  fromJD: function fromJD(jd) {\n    var c = Math.floor(jd) + 0.5 - this.jdEpoch;\n    var year = Math.floor((c - Math.floor((c + 366) / 1461)) / 365) + 1;\n\n    if (year <= 0) {\n      year--;\n    } // No year zero\n\n\n    c = Math.floor(jd) + 0.5 - this.newDate(year, 1, 1).toJD();\n    var month = Math.floor(c / 30) + 1;\n    var day = c - (month - 1) * 30 + 1;\n    return this.newDate(year, month, day);\n  }\n}); // Ethiopian calendar implementation\n\nmain.calendars.ethiopian = EthiopianCalendar;","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/world-calendars/dist/calendars/ethiopian.js"],"names":["main","require","assign","EthiopianCalendar","language","local","regionalOptions","prototype","baseCalendar","name","jdEpoch","daysPerMonth","hasYearZero","minMonth","firstMonth","minDay","epochs","monthNames","monthNamesShort","dayNames","dayNamesShort","dayNamesMin","digits","dateFormat","firstDay","isRTL","leapYear","year","date","_validate","invalidYear","monthsInYear","weekOfYear","month","day","checkDate","newDate","add","dayOfWeek","Math","floor","dayOfYear","daysInMonth","invalidMonth","weekDay","toJD","invalidDate","fromJD","jd","c","calendars","ethiopian"],"mappings":"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","sourcesContent":["/*\n * World Calendars\n * https://github.com/alexcjohnson/world-calendars\n *\n * Batch-converted from kbwood/calendars\n * Many thanks to Keith Wood and all of the contributors to the original project!\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n﻿/* http://keith-wood.name/calendars.html\n   Ethiopian calendar for jQuery v2.0.2.\n   Written by Keith Wood (wood.keith{at}optusnet.com.au) February 2010.\n   Available under the MIT (http://keith-wood.name/licence.html) license. \n   Please attribute the author if you use it. */\n\nvar main = require('../main');\nvar assign = require('object-assign');\n\n\n/** Implementation of the Ethiopian calendar.\n    See <a href=\"http://en.wikipedia.org/wiki/Ethiopian_calendar\">http://en.wikipedia.org/wiki/Ethiopian_calendar</a>.\n    See also Calendrical Calculations: The Millennium Edition\n    (<a href=\"http://emr.cs.iit.edu/home/reingold/calendar-book/index.shtml\">http://emr.cs.iit.edu/home/reingold/calendar-book/index.shtml</a>).\n    @class EthiopianCalendar\n    @param [language=''] {string} The language code (default English) for localisation. */\nfunction EthiopianCalendar(language) {\n    this.local = this.regionalOptions[language || ''] || this.regionalOptions[''];\n}\n\nEthiopianCalendar.prototype = new main.baseCalendar;\n\nassign(EthiopianCalendar.prototype, {\n    /** The calendar name.\n        @memberof EthiopianCalendar */\n    name: 'Ethiopian',\n    /** Julian date of start of Ethiopian epoch: 27 August 8 CE (Gregorian).\n        @memberof EthiopianCalendar */\n    jdEpoch: 1724220.5,\n    /** Days per month in a common year.\n        @memberof EthiopianCalendar */\n    daysPerMonth: [30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 5],\n    /** <code>true</code> if has a year zero, <code>false</code> if not.\n        @memberof EthiopianCalendar */\n    hasYearZero: false,\n    /** The minimum month number.\n        @memberof EthiopianCalendar */\n    minMonth: 1,\n    /** The first month in the year.\n        @memberof EthiopianCalendar */\n    firstMonth: 1,\n    /** The minimum day number.\n        @memberof EthiopianCalendar */\n    minDay: 1,\n\n    /** Localisations for the plugin.\n        Entries are objects indexed by the language code ('' being the default US/English).\n        Each object has the following attributes.\n        @memberof EthiopianCalendar\n        @property name {string} The calendar name.\n        @property epochs {string[]} The epoch names.\n        @property monthNames {string[]} The long names of the months of the year.\n        @property monthNamesShort {string[]} The short names of the months of the year.\n        @property dayNames {string[]} The long names of the days of the week.\n        @property dayNamesShort {string[]} The short names of the days of the week.\n        @property dayNamesMin {string[]} The minimal names of the days of the week.\n        @property dateFormat {string} The date format for this calendar.\n                See the options on <a href=\"BaseCalendar.html#formatDate\"><code>formatDate</code></a> for details.\n        @property firstDay {number} The number of the first day of the week, starting at 0.\n        @property isRTL {number} <code>true</code> if this localisation reads right-to-left. */\n    regionalOptions: { // Localisations\n        '': {\n            name: 'Ethiopian',\n            epochs: ['BEE', 'EE'],\n            monthNames: ['Meskerem', 'Tikemet', 'Hidar', 'Tahesas', 'Tir', 'Yekatit',\n            'Megabit', 'Miazia', 'Genbot', 'Sene', 'Hamle', 'Nehase', 'Pagume'],\n            monthNamesShort: ['Mes', 'Tik', 'Hid', 'Tah', 'Tir', 'Yek',\n            'Meg', 'Mia', 'Gen', 'Sen', 'Ham', 'Neh', 'Pag'],\n            dayNames: ['Ehud', 'Segno', 'Maksegno', 'Irob', 'Hamus', 'Arb', 'Kidame'],\n            dayNamesShort: ['Ehu', 'Seg', 'Mak', 'Iro', 'Ham', 'Arb', 'Kid'],\n            dayNamesMin: ['Eh', 'Se', 'Ma', 'Ir', 'Ha', 'Ar', 'Ki'],\n            digits: null,\n            dateFormat: 'dd/mm/yyyy',\n            firstDay: 0,\n            isRTL: false\n        }\n    },\n\n    /** Determine whether this date is in a leap year.\n        @memberof EthiopianCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @return {boolean} <code>true</code> if this is a leap year, <code>false</code> if not.\n        @throws Error if an invalid year or a different calendar used. */\n    leapYear: function(year) {\n        var date = this._validate(year, this.minMonth, this.minDay, main.local.invalidYear);\n        var year = date.year() + (date.year() < 0 ? 1 : 0); // No year zero\n        return year % 4 === 3 || year % 4 === -1;\n    },\n\n    /** Retrieve the number of months in a year.\n        @memberof EthiopianCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @return {number} The number of months.\n        @throws Error if an invalid year or a different calendar used. */\n    monthsInYear: function(year) {\n        this._validate(year, this.minMonth, this.minDay,\n            main.local.invalidYear || main.regionalOptions[''].invalidYear);\n        return 13;\n    },\n\n    /** Determine the week of the year for a date.\n        @memberof EthiopianCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @param [month] {number} The month to examine.\n        @param [day] {number} The day to examine.\n        @return {number} The week of the year.\n        @throws Error if an invalid date or a different calendar used. */\n    weekOfYear: function(year, month, day) {\n        // Find Sunday of this week starting on Sunday\n        var checkDate = this.newDate(year, month, day);\n        checkDate.add(-checkDate.dayOfWeek(), 'd');\n        return Math.floor((checkDate.dayOfYear() - 1) / 7) + 1;\n    },\n\n    /** Retrieve the number of days in a month.\n        @memberof EthiopianCalendar\n        @param year {CDate|number} The date to examine or the year of the month.\n        @param [month] {number} The month.\n        @return {number} The number of days in this month.\n        @throws Error if an invalid month/year or a different calendar used. */\n    daysInMonth: function(year, month) {\n        var date = this._validate(year, month, this.minDay, main.local.invalidMonth);\n        return this.daysPerMonth[date.month() - 1] +\n            (date.month() === 13 && this.leapYear(date.year()) ? 1 : 0);\n    },\n\n    /** Determine whether this date is a week day.\n        @memberof EthiopianCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @param [month] {number} The month to examine.\n        @param [day] {number} The day to examine.\n        @return {boolean} <code>true</code> if a week day, <code>false</code> if not.\n        @throws Error if an invalid date or a different calendar used. */\n    weekDay: function(year, month, day) {\n        return (this.dayOfWeek(year, month, day) || 7) < 6;\n    },\n\n    /** Retrieve the Julian date equivalent for this date,\n        i.e. days since January 1, 4713 BCE Greenwich noon.\n        @memberof EthiopianCalendar\n        @param year {CDate|number} The date to convert or the year to convert.\n        @param [month] {number} The month to convert.\n        @param [day] {number} The day to convert.\n        @return {number} The equivalent Julian date.\n        @throws Error if an invalid date or a different calendar used. */\n    toJD: function(year, month, day) {\n        var date = this._validate(year, month, day, main.local.invalidDate);\n        year = date.year();\n        if (year < 0) { year++; } // No year zero\n        return date.day() + (date.month() - 1) * 30 +\n            (year - 1) * 365 + Math.floor(year / 4) + this.jdEpoch - 1;\n    },\n\n    /** Create a new date from a Julian date.\n        @memberof EthiopianCalendar\n        @param jd {number} the Julian date to convert.\n        @return {CDate} the equivalent date. */\n    fromJD: function(jd) {\n        var c = Math.floor(jd) + 0.5 - this.jdEpoch;\n        var year = Math.floor((c - Math.floor((c + 366) / 1461)) / 365) + 1;\n        if (year <= 0) { year--; } // No year zero\n        c = Math.floor(jd) + 0.5 - this.newDate(year, 1, 1).toJD();\n        var month = Math.floor(c / 30) + 1;\n        var day = c - (month - 1) * 30 + 1;\n        return this.newDate(year, month, day);\n    }\n});\n\n// Ethiopian calendar implementation\nmain.calendars.ethiopian = EthiopianCalendar;\n\n"]},"metadata":{},"sourceType":"script"}