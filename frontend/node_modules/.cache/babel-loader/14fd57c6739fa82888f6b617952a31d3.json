{"ast":null,"code":"'use strict';\n\nmodule.exports = {\n  attributes: require('./attributes'),\n  supplyDefaults: require('./defaults'),\n  colorbar: require('../heatmap/colorbar'),\n  formatLabels: require('../scattermapbox/format_labels'),\n  calc: require('./calc'),\n  plot: require('./plot'),\n  hoverPoints: require('./hover'),\n  eventData: require('./event_data'),\n  getBelow: function getBelow(trace, subplot) {\n    var mapLayers = subplot.getMapLayers(); // find first layer with `type: 'symbol'`,\n    // that is not a plotly layer\n\n    for (var i = 0; i < mapLayers.length; i++) {\n      var layer = mapLayers[i];\n      var layerId = layer.id;\n\n      if (layer.type === 'symbol' && typeof layerId === 'string' && layerId.indexOf('plotly-') === -1) {\n        return layerId;\n      }\n    }\n  },\n  moduleType: 'trace',\n  name: 'densitymapbox',\n  basePlotModule: require('../../plots/mapbox'),\n  categories: ['mapbox', 'gl', 'showLegend'],\n  meta: {\n    hr_name: 'density_mapbox',\n    description: ['Draws a bivariate kernel density estimation with a Gaussian kernel', 'from `lon` and `lat` coordinates and optional `z` values using a colorscale.'].join(' ')\n  }\n};","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/plotly.js/src/traces/densitymapbox/index.js"],"names":["module","exports","attributes","require","supplyDefaults","colorbar","formatLabels","calc","plot","hoverPoints","eventData","getBelow","trace","subplot","mapLayers","getMapLayers","i","length","layer","layerId","id","type","indexOf","moduleType","name","basePlotModule","categories","meta","hr_name","description","join"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,UAAU,EAAEC,OAAO,CAAC,cAAD,CADN;AAEbC,EAAAA,cAAc,EAAED,OAAO,CAAC,YAAD,CAFV;AAGbE,EAAAA,QAAQ,EAAEF,OAAO,CAAC,qBAAD,CAHJ;AAIbG,EAAAA,YAAY,EAAEH,OAAO,CAAC,gCAAD,CAJR;AAKbI,EAAAA,IAAI,EAAEJ,OAAO,CAAC,QAAD,CALA;AAMbK,EAAAA,IAAI,EAAEL,OAAO,CAAC,QAAD,CANA;AAObM,EAAAA,WAAW,EAAEN,OAAO,CAAC,SAAD,CAPP;AAQbO,EAAAA,SAAS,EAAEP,OAAO,CAAC,cAAD,CARL;AAUbQ,EAAAA,QAAQ,EAAE,kBAASC,KAAT,EAAgBC,OAAhB,EAAyB;AAC/B,QAAIC,SAAS,GAAGD,OAAO,CAACE,YAAR,EAAhB,CAD+B,CAG/B;AACA;;AACA,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGF,SAAS,CAACG,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACtC,UAAIE,KAAK,GAAGJ,SAAS,CAACE,CAAD,CAArB;AACA,UAAIG,OAAO,GAAGD,KAAK,CAACE,EAApB;;AACA,UAAGF,KAAK,CAACG,IAAN,KAAe,QAAf,IACC,OAAOF,OAAP,KAAmB,QADpB,IACgCA,OAAO,CAACG,OAAR,CAAgB,SAAhB,MAA+B,CAAC,CADnE,EAEE;AACE,eAAOH,OAAP;AACH;AACJ;AACJ,GAxBY;AA0BbI,EAAAA,UAAU,EAAE,OA1BC;AA2BbC,EAAAA,IAAI,EAAE,eA3BO;AA4BbC,EAAAA,cAAc,EAAEtB,OAAO,CAAC,oBAAD,CA5BV;AA6BbuB,EAAAA,UAAU,EAAE,CAAC,QAAD,EAAW,IAAX,EAAiB,YAAjB,CA7BC;AA8BbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,OAAO,EAAE,gBADP;AAEFC,IAAAA,WAAW,EAAE,CACT,oEADS,EAET,8EAFS,EAGXC,IAHW,CAGN,GAHM;AAFX;AA9BO,CAAjB","sourcesContent":["'use strict';\n\nmodule.exports = {\n    attributes: require('./attributes'),\n    supplyDefaults: require('./defaults'),\n    colorbar: require('../heatmap/colorbar'),\n    formatLabels: require('../scattermapbox/format_labels'),\n    calc: require('./calc'),\n    plot: require('./plot'),\n    hoverPoints: require('./hover'),\n    eventData: require('./event_data'),\n\n    getBelow: function(trace, subplot) {\n        var mapLayers = subplot.getMapLayers();\n\n        // find first layer with `type: 'symbol'`,\n        // that is not a plotly layer\n        for(var i = 0; i < mapLayers.length; i++) {\n            var layer = mapLayers[i];\n            var layerId = layer.id;\n            if(layer.type === 'symbol' &&\n                typeof layerId === 'string' && layerId.indexOf('plotly-') === -1\n            ) {\n                return layerId;\n            }\n        }\n    },\n\n    moduleType: 'trace',\n    name: 'densitymapbox',\n    basePlotModule: require('../../plots/mapbox'),\n    categories: ['mapbox', 'gl', 'showLegend'],\n    meta: {\n        hr_name: 'density_mapbox',\n        description: [\n            'Draws a bivariate kernel density estimation with a Gaussian kernel',\n            'from `lon` and `lat` coordinates and optional `z` values using a colorscale.'\n        ].join(' ')\n    }\n};\n"]},"metadata":{},"sourceType":"script"}