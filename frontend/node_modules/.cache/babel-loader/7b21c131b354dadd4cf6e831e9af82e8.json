{"ast":null,"code":"'use strict';\n\nvar axisIds = require('../../plots/cartesian/axis_ids');\n\nvar scatterSubTypes = require('../../traces/scatter/subtypes');\n\nvar Registry = require('../../registry');\n\nvar isUnifiedHover = require('../fx/helpers').isUnifiedHover;\n\nvar createModeBar = require('./modebar');\n\nvar modeBarButtons = require('./buttons');\n\nvar DRAW_MODES = require('./constants').DRAW_MODES;\n/**\n * ModeBar wrapper around 'create' and 'update',\n * chooses buttons to pass to ModeBar constructor based on\n * plot type and plot config.\n *\n * @param {object} gd main plot object\n *\n */\n\n\nmodule.exports = function manageModeBar(gd) {\n  var fullLayout = gd._fullLayout;\n  var context = gd._context;\n  var modeBar = fullLayout._modeBar;\n\n  if (!context.displayModeBar && !context.watermark) {\n    if (modeBar) {\n      modeBar.destroy();\n      delete fullLayout._modeBar;\n    }\n\n    return;\n  }\n\n  if (!Array.isArray(context.modeBarButtonsToRemove)) {\n    throw new Error(['*modeBarButtonsToRemove* configuration options', 'must be an array.'].join(' '));\n  }\n\n  if (!Array.isArray(context.modeBarButtonsToAdd)) {\n    throw new Error(['*modeBarButtonsToAdd* configuration options', 'must be an array.'].join(' '));\n  }\n\n  var customButtons = context.modeBarButtons;\n  var buttonGroups;\n\n  if (Array.isArray(customButtons) && customButtons.length) {\n    buttonGroups = fillCustomButton(customButtons);\n  } else if (!context.displayModeBar && context.watermark) {\n    buttonGroups = [];\n  } else {\n    buttonGroups = getButtonGroups(gd);\n  }\n\n  if (modeBar) modeBar.update(gd, buttonGroups);else fullLayout._modeBar = createModeBar(gd, buttonGroups);\n}; // logic behind which buttons are displayed by default\n\n\nfunction getButtonGroups(gd) {\n  var fullLayout = gd._fullLayout;\n  var fullData = gd._fullData;\n  var context = gd._context;\n\n  function match(name, B) {\n    if (typeof B === 'string') {\n      if (B.toLowerCase() === name.toLowerCase()) return true;\n    } else {\n      var v0 = B.name;\n      var v1 = B._cat || B.name;\n      if (v0 === name || v1 === name.toLowerCase()) return true;\n    }\n\n    return false;\n  }\n\n  var layoutAdd = fullLayout.modebar.add;\n  if (typeof layoutAdd === 'string') layoutAdd = [layoutAdd];\n  var layoutRemove = fullLayout.modebar.remove;\n  if (typeof layoutRemove === 'string') layoutRemove = [layoutRemove];\n  var buttonsToAdd = context.modeBarButtonsToAdd.concat(layoutAdd.filter(function (e) {\n    for (var i = 0; i < context.modeBarButtonsToRemove.length; i++) {\n      if (match(e, context.modeBarButtonsToRemove[i])) return false;\n    }\n\n    return true;\n  }));\n  var buttonsToRemove = context.modeBarButtonsToRemove.concat(layoutRemove.filter(function (e) {\n    for (var i = 0; i < context.modeBarButtonsToAdd.length; i++) {\n      if (match(e, context.modeBarButtonsToAdd[i])) return false;\n    }\n\n    return true;\n  }));\n\n  var hasCartesian = fullLayout._has('cartesian');\n\n  var hasGL3D = fullLayout._has('gl3d');\n\n  var hasGeo = fullLayout._has('geo');\n\n  var hasPie = fullLayout._has('pie');\n\n  var hasFunnelarea = fullLayout._has('funnelarea');\n\n  var hasGL2D = fullLayout._has('gl2d');\n\n  var hasTernary = fullLayout._has('ternary');\n\n  var hasMapbox = fullLayout._has('mapbox');\n\n  var hasPolar = fullLayout._has('polar');\n\n  var hasSankey = fullLayout._has('sankey');\n\n  var allAxesFixed = areAllAxesFixed(fullLayout);\n  var hasUnifiedHoverLabel = isUnifiedHover(fullLayout.hovermode);\n  var groups = [];\n\n  function addGroup(newGroup) {\n    if (!newGroup.length) return;\n    var out = [];\n\n    for (var i = 0; i < newGroup.length; i++) {\n      var name = newGroup[i];\n      var B = modeBarButtons[name];\n      var v0 = B.name.toLowerCase();\n      var v1 = (B._cat || B.name).toLowerCase();\n      var found = false;\n\n      for (var q = 0; q < buttonsToRemove.length; q++) {\n        var t = buttonsToRemove[q].toLowerCase();\n\n        if (t === v0 || t === v1) {\n          found = true;\n          break;\n        }\n      }\n\n      if (found) continue;\n      out.push(modeBarButtons[name]);\n    }\n\n    groups.push(out);\n  } // buttons common to all plot types\n\n\n  var commonGroup = ['toImage'];\n  if (context.showEditInChartStudio) commonGroup.push('editInChartStudio');else if (context.showSendToCloud) commonGroup.push('sendDataToCloud');\n  addGroup(commonGroup);\n  var zoomGroup = [];\n  var hoverGroup = [];\n  var resetGroup = [];\n  var dragModeGroup = [];\n\n  if ((hasCartesian || hasGL2D || hasPie || hasFunnelarea || hasTernary) + hasGeo + hasGL3D + hasMapbox + hasPolar > 1) {\n    // graphs with more than one plot types get 'union buttons'\n    // which reset the view or toggle hover labels across all subplots.\n    hoverGroup = ['toggleHover'];\n    resetGroup = ['resetViews'];\n  } else if (hasGeo) {\n    zoomGroup = ['zoomInGeo', 'zoomOutGeo'];\n    hoverGroup = ['hoverClosestGeo'];\n    resetGroup = ['resetGeo'];\n  } else if (hasGL3D) {\n    hoverGroup = ['hoverClosest3d'];\n    resetGroup = ['resetCameraDefault3d', 'resetCameraLastSave3d'];\n  } else if (hasMapbox) {\n    zoomGroup = ['zoomInMapbox', 'zoomOutMapbox'];\n    hoverGroup = ['toggleHover'];\n    resetGroup = ['resetViewMapbox'];\n  } else if (hasGL2D) {\n    hoverGroup = ['hoverClosestGl2d'];\n  } else if (hasPie) {\n    hoverGroup = ['hoverClosestPie'];\n  } else if (hasSankey) {\n    hoverGroup = ['hoverClosestCartesian', 'hoverCompareCartesian'];\n    resetGroup = ['resetViewSankey'];\n  } else {\n    // hasPolar, hasTernary\n    // always show at least one hover icon.\n    hoverGroup = ['toggleHover'];\n  } // if we have cartesian, allow switching between closest and compare\n  // regardless of what other types are on the plot, since they'll all\n  // just treat any truthy hovermode as 'closest'\n\n\n  if (hasCartesian) {\n    hoverGroup = ['toggleSpikelines', 'hoverClosestCartesian', 'hoverCompareCartesian'];\n  }\n\n  if (hasNoHover(fullData) || hasUnifiedHoverLabel) {\n    hoverGroup = [];\n  }\n\n  if ((hasCartesian || hasGL2D) && !allAxesFixed) {\n    zoomGroup = ['zoomIn2d', 'zoomOut2d', 'autoScale2d'];\n    if (resetGroup[0] !== 'resetViews') resetGroup = ['resetScale2d'];\n  }\n\n  if (hasGL3D) {\n    dragModeGroup = ['zoom3d', 'pan3d', 'orbitRotation', 'tableRotation'];\n  } else if ((hasCartesian || hasGL2D) && !allAxesFixed || hasTernary) {\n    dragModeGroup = ['zoom2d', 'pan2d'];\n  } else if (hasMapbox || hasGeo) {\n    dragModeGroup = ['pan2d'];\n  } else if (hasPolar) {\n    dragModeGroup = ['zoom2d'];\n  }\n\n  if (isSelectable(fullData)) {\n    dragModeGroup.push('select2d', 'lasso2d');\n  }\n\n  var enabledHoverGroup = [];\n\n  var enableHover = function enableHover(a) {\n    // return if already added\n    if (enabledHoverGroup.indexOf(a) !== -1) return; // should be in hoverGroup\n\n    if (hoverGroup.indexOf(a) !== -1) {\n      enabledHoverGroup.push(a);\n    }\n  };\n\n  if (Array.isArray(buttonsToAdd)) {\n    var newList = [];\n\n    for (var i = 0; i < buttonsToAdd.length; i++) {\n      var b = buttonsToAdd[i];\n\n      if (typeof b === 'string') {\n        b = b.toLowerCase();\n\n        if (DRAW_MODES.indexOf(b) !== -1) {\n          // accept pre-defined drag modes i.e. shape drawing features as string\n          if (fullLayout._has('mapbox') || // draw shapes in paper coordinate (could be improved in future to support data coordinate, when there is no pitch)\n          fullLayout._has('cartesian') // draw shapes in data coordinate\n          ) {\n            dragModeGroup.push(b);\n          }\n        } else if (b === 'togglespikelines') {\n          enableHover('toggleSpikelines');\n        } else if (b === 'togglehover') {\n          enableHover('toggleHover');\n        } else if (b === 'hovercompare') {\n          enableHover('hoverCompareCartesian');\n        } else if (b === 'hoverclosest') {\n          enableHover('hoverClosestCartesian');\n          enableHover('hoverClosestGeo');\n          enableHover('hoverClosest3d');\n          enableHover('hoverClosestGl2d');\n          enableHover('hoverClosestPie');\n        } else if (b === 'v1hovermode') {\n          enableHover('toggleHover');\n          enableHover('hoverClosestCartesian');\n          enableHover('hoverCompareCartesian');\n          enableHover('hoverClosestGeo');\n          enableHover('hoverClosest3d');\n          enableHover('hoverClosestGl2d');\n          enableHover('hoverClosestPie');\n        }\n      } else newList.push(b);\n    }\n\n    buttonsToAdd = newList;\n  }\n\n  addGroup(dragModeGroup);\n  addGroup(zoomGroup.concat(resetGroup));\n  addGroup(enabledHoverGroup);\n  return appendButtonsToGroups(groups, buttonsToAdd);\n}\n\nfunction areAllAxesFixed(fullLayout) {\n  var axList = axisIds.list({\n    _fullLayout: fullLayout\n  }, null, true);\n\n  for (var i = 0; i < axList.length; i++) {\n    if (!axList[i].fixedrange) {\n      return false;\n    }\n  }\n\n  return true;\n} // look for traces that support selection\n// to be updated as we add more selectPoints handlers\n\n\nfunction isSelectable(fullData) {\n  var selectable = false;\n\n  for (var i = 0; i < fullData.length; i++) {\n    if (selectable) break;\n    var trace = fullData[i];\n    if (!trace._module || !trace._module.selectPoints) continue;\n\n    if (Registry.traceIs(trace, 'scatter-like')) {\n      if (scatterSubTypes.hasMarkers(trace) || scatterSubTypes.hasText(trace)) {\n        selectable = true;\n      }\n    } else if (Registry.traceIs(trace, 'box-violin')) {\n      if (trace.boxpoints === 'all' || trace.points === 'all') {\n        selectable = true;\n      }\n    } else {\n      // assume that in general if the trace module has selectPoints,\n      // then it's selectable. Scatter is an exception to this because it must\n      // have markers or text, not just be a scatter type.\n      selectable = true;\n    }\n  }\n\n  return selectable;\n} // check whether all trace are 'noHover'\n\n\nfunction hasNoHover(fullData) {\n  for (var i = 0; i < fullData.length; i++) {\n    if (!Registry.traceIs(fullData[i], 'noHover')) return false;\n  }\n\n  return true;\n}\n\nfunction appendButtonsToGroups(groups, buttons) {\n  if (buttons.length) {\n    if (Array.isArray(buttons[0])) {\n      for (var i = 0; i < buttons.length; i++) {\n        groups.push(buttons[i]);\n      }\n    } else groups.push(buttons);\n  }\n\n  return groups;\n} // fill in custom buttons referring to default mode bar buttons\n\n\nfunction fillCustomButton(customButtons) {\n  for (var i = 0; i < customButtons.length; i++) {\n    var buttonGroup = customButtons[i];\n\n    for (var j = 0; j < buttonGroup.length; j++) {\n      var button = buttonGroup[j];\n\n      if (typeof button === 'string') {\n        if (modeBarButtons[button] !== undefined) {\n          customButtons[i][j] = modeBarButtons[button];\n        } else {\n          throw new Error(['*modeBarButtons* configuration options', 'invalid button name'].join(' '));\n        }\n      }\n    }\n  }\n\n  return customButtons;\n}","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/plotly.js/src/components/modebar/manage.js"],"names":["axisIds","require","scatterSubTypes","Registry","isUnifiedHover","createModeBar","modeBarButtons","DRAW_MODES","module","exports","manageModeBar","gd","fullLayout","_fullLayout","context","_context","modeBar","_modeBar","displayModeBar","watermark","destroy","Array","isArray","modeBarButtonsToRemove","Error","join","modeBarButtonsToAdd","customButtons","buttonGroups","length","fillCustomButton","getButtonGroups","update","fullData","_fullData","match","name","B","toLowerCase","v0","v1","_cat","layoutAdd","modebar","add","layoutRemove","remove","buttonsToAdd","concat","filter","e","i","buttonsToRemove","hasCartesian","_has","hasGL3D","hasGeo","hasPie","hasFunnelarea","hasGL2D","hasTernary","hasMapbox","hasPolar","hasSankey","allAxesFixed","areAllAxesFixed","hasUnifiedHoverLabel","hovermode","groups","addGroup","newGroup","out","found","q","t","push","commonGroup","showEditInChartStudio","showSendToCloud","zoomGroup","hoverGroup","resetGroup","dragModeGroup","hasNoHover","isSelectable","enabledHoverGroup","enableHover","a","indexOf","newList","b","appendButtonsToGroups","axList","list","fixedrange","selectable","trace","_module","selectPoints","traceIs","hasMarkers","hasText","boxpoints","points","buttons","buttonGroup","j","button","undefined"],"mappings":"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","sourcesContent":["'use strict';\n\nvar axisIds = require('../../plots/cartesian/axis_ids');\nvar scatterSubTypes = require('../../traces/scatter/subtypes');\nvar Registry = require('../../registry');\nvar isUnifiedHover = require('../fx/helpers').isUnifiedHover;\n\nvar createModeBar = require('./modebar');\nvar modeBarButtons = require('./buttons');\nvar DRAW_MODES = require('./constants').DRAW_MODES;\n\n/**\n * ModeBar wrapper around 'create' and 'update',\n * chooses buttons to pass to ModeBar constructor based on\n * plot type and plot config.\n *\n * @param {object} gd main plot object\n *\n */\nmodule.exports = function manageModeBar(gd) {\n    var fullLayout = gd._fullLayout;\n    var context = gd._context;\n    var modeBar = fullLayout._modeBar;\n\n    if(!context.displayModeBar && !context.watermark) {\n        if(modeBar) {\n            modeBar.destroy();\n            delete fullLayout._modeBar;\n        }\n        return;\n    }\n\n    if(!Array.isArray(context.modeBarButtonsToRemove)) {\n        throw new Error([\n            '*modeBarButtonsToRemove* configuration options',\n            'must be an array.'\n        ].join(' '));\n    }\n\n    if(!Array.isArray(context.modeBarButtonsToAdd)) {\n        throw new Error([\n            '*modeBarButtonsToAdd* configuration options',\n            'must be an array.'\n        ].join(' '));\n    }\n\n    var customButtons = context.modeBarButtons;\n    var buttonGroups;\n\n    if(Array.isArray(customButtons) && customButtons.length) {\n        buttonGroups = fillCustomButton(customButtons);\n    } else if(!context.displayModeBar && context.watermark) {\n        buttonGroups = [];\n    } else {\n        buttonGroups = getButtonGroups(gd);\n    }\n\n    if(modeBar) modeBar.update(gd, buttonGroups);\n    else fullLayout._modeBar = createModeBar(gd, buttonGroups);\n};\n\n// logic behind which buttons are displayed by default\nfunction getButtonGroups(gd) {\n    var fullLayout = gd._fullLayout;\n    var fullData = gd._fullData;\n    var context = gd._context;\n\n    function match(name, B) {\n        if(typeof B === 'string') {\n            if(B.toLowerCase() === name.toLowerCase()) return true;\n        } else {\n            var v0 = B.name;\n            var v1 = (B._cat || B.name);\n\n            if(v0 === name || v1 === name.toLowerCase()) return true;\n        }\n        return false;\n    }\n\n    var layoutAdd = fullLayout.modebar.add;\n    if(typeof layoutAdd === 'string') layoutAdd = [layoutAdd];\n\n    var layoutRemove = fullLayout.modebar.remove;\n    if(typeof layoutRemove === 'string') layoutRemove = [layoutRemove];\n\n    var buttonsToAdd = context.modeBarButtonsToAdd.concat(\n        layoutAdd.filter(function(e) {\n            for(var i = 0; i < context.modeBarButtonsToRemove.length; i++) {\n                if(match(e, context.modeBarButtonsToRemove[i])) return false;\n            }\n            return true;\n        })\n    );\n\n    var buttonsToRemove = context.modeBarButtonsToRemove.concat(\n        layoutRemove.filter(function(e) {\n            for(var i = 0; i < context.modeBarButtonsToAdd.length; i++) {\n                if(match(e, context.modeBarButtonsToAdd[i])) return false;\n            }\n            return true;\n        })\n    );\n\n    var hasCartesian = fullLayout._has('cartesian');\n    var hasGL3D = fullLayout._has('gl3d');\n    var hasGeo = fullLayout._has('geo');\n    var hasPie = fullLayout._has('pie');\n    var hasFunnelarea = fullLayout._has('funnelarea');\n    var hasGL2D = fullLayout._has('gl2d');\n    var hasTernary = fullLayout._has('ternary');\n    var hasMapbox = fullLayout._has('mapbox');\n    var hasPolar = fullLayout._has('polar');\n    var hasSankey = fullLayout._has('sankey');\n    var allAxesFixed = areAllAxesFixed(fullLayout);\n    var hasUnifiedHoverLabel = isUnifiedHover(fullLayout.hovermode);\n\n    var groups = [];\n\n    function addGroup(newGroup) {\n        if(!newGroup.length) return;\n\n        var out = [];\n\n        for(var i = 0; i < newGroup.length; i++) {\n            var name = newGroup[i];\n            var B = modeBarButtons[name];\n            var v0 = B.name.toLowerCase();\n            var v1 = (B._cat || B.name).toLowerCase();\n            var found = false;\n            for(var q = 0; q < buttonsToRemove.length; q++) {\n                var t = buttonsToRemove[q].toLowerCase();\n                if(t === v0 || t === v1) {\n                    found = true;\n                    break;\n                }\n            }\n            if(found) continue;\n            out.push(modeBarButtons[name]);\n        }\n\n        groups.push(out);\n    }\n\n    // buttons common to all plot types\n    var commonGroup = ['toImage'];\n    if(context.showEditInChartStudio) commonGroup.push('editInChartStudio');\n    else if(context.showSendToCloud) commonGroup.push('sendDataToCloud');\n    addGroup(commonGroup);\n\n    var zoomGroup = [];\n    var hoverGroup = [];\n    var resetGroup = [];\n    var dragModeGroup = [];\n\n    if((hasCartesian || hasGL2D || hasPie || hasFunnelarea || hasTernary) + hasGeo + hasGL3D + hasMapbox + hasPolar > 1) {\n        // graphs with more than one plot types get 'union buttons'\n        // which reset the view or toggle hover labels across all subplots.\n        hoverGroup = ['toggleHover'];\n        resetGroup = ['resetViews'];\n    } else if(hasGeo) {\n        zoomGroup = ['zoomInGeo', 'zoomOutGeo'];\n        hoverGroup = ['hoverClosestGeo'];\n        resetGroup = ['resetGeo'];\n    } else if(hasGL3D) {\n        hoverGroup = ['hoverClosest3d'];\n        resetGroup = ['resetCameraDefault3d', 'resetCameraLastSave3d'];\n    } else if(hasMapbox) {\n        zoomGroup = ['zoomInMapbox', 'zoomOutMapbox'];\n        hoverGroup = ['toggleHover'];\n        resetGroup = ['resetViewMapbox'];\n    } else if(hasGL2D) {\n        hoverGroup = ['hoverClosestGl2d'];\n    } else if(hasPie) {\n        hoverGroup = ['hoverClosestPie'];\n    } else if(hasSankey) {\n        hoverGroup = ['hoverClosestCartesian', 'hoverCompareCartesian'];\n        resetGroup = ['resetViewSankey'];\n    } else { // hasPolar, hasTernary\n        // always show at least one hover icon.\n        hoverGroup = ['toggleHover'];\n    }\n    // if we have cartesian, allow switching between closest and compare\n    // regardless of what other types are on the plot, since they'll all\n    // just treat any truthy hovermode as 'closest'\n    if(hasCartesian) {\n        hoverGroup = ['toggleSpikelines', 'hoverClosestCartesian', 'hoverCompareCartesian'];\n    }\n    if(hasNoHover(fullData) || hasUnifiedHoverLabel) {\n        hoverGroup = [];\n    }\n\n    if((hasCartesian || hasGL2D) && !allAxesFixed) {\n        zoomGroup = ['zoomIn2d', 'zoomOut2d', 'autoScale2d'];\n        if(resetGroup[0] !== 'resetViews') resetGroup = ['resetScale2d'];\n    }\n\n    if(hasGL3D) {\n        dragModeGroup = ['zoom3d', 'pan3d', 'orbitRotation', 'tableRotation'];\n    } else if(((hasCartesian || hasGL2D) && !allAxesFixed) || hasTernary) {\n        dragModeGroup = ['zoom2d', 'pan2d'];\n    } else if(hasMapbox || hasGeo) {\n        dragModeGroup = ['pan2d'];\n    } else if(hasPolar) {\n        dragModeGroup = ['zoom2d'];\n    }\n    if(isSelectable(fullData)) {\n        dragModeGroup.push('select2d', 'lasso2d');\n    }\n\n    var enabledHoverGroup = [];\n    var enableHover = function(a) {\n        // return if already added\n        if(enabledHoverGroup.indexOf(a) !== -1) return;\n        // should be in hoverGroup\n        if(hoverGroup.indexOf(a) !== -1) {\n            enabledHoverGroup.push(a);\n        }\n    };\n    if(Array.isArray(buttonsToAdd)) {\n        var newList = [];\n        for(var i = 0; i < buttonsToAdd.length; i++) {\n            var b = buttonsToAdd[i];\n            if(typeof b === 'string') {\n                b = b.toLowerCase();\n\n                if(DRAW_MODES.indexOf(b) !== -1) {\n                    // accept pre-defined drag modes i.e. shape drawing features as string\n                    if(\n                        fullLayout._has('mapbox') || // draw shapes in paper coordinate (could be improved in future to support data coordinate, when there is no pitch)\n                        fullLayout._has('cartesian') // draw shapes in data coordinate\n                    ) {\n                        dragModeGroup.push(b);\n                    }\n                } else if(b === 'togglespikelines') {\n                    enableHover('toggleSpikelines');\n                } else if(b === 'togglehover') {\n                    enableHover('toggleHover');\n                } else if(b === 'hovercompare') {\n                    enableHover('hoverCompareCartesian');\n                } else if(b === 'hoverclosest') {\n                    enableHover('hoverClosestCartesian');\n                    enableHover('hoverClosestGeo');\n                    enableHover('hoverClosest3d');\n                    enableHover('hoverClosestGl2d');\n                    enableHover('hoverClosestPie');\n                } else if(b === 'v1hovermode') {\n                    enableHover('toggleHover');\n                    enableHover('hoverClosestCartesian');\n                    enableHover('hoverCompareCartesian');\n                    enableHover('hoverClosestGeo');\n                    enableHover('hoverClosest3d');\n                    enableHover('hoverClosestGl2d');\n                    enableHover('hoverClosestPie');\n                }\n            } else newList.push(b);\n        }\n        buttonsToAdd = newList;\n    }\n\n    addGroup(dragModeGroup);\n    addGroup(zoomGroup.concat(resetGroup));\n    addGroup(enabledHoverGroup);\n\n    return appendButtonsToGroups(groups, buttonsToAdd);\n}\n\nfunction areAllAxesFixed(fullLayout) {\n    var axList = axisIds.list({_fullLayout: fullLayout}, null, true);\n\n    for(var i = 0; i < axList.length; i++) {\n        if(!axList[i].fixedrange) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n// look for traces that support selection\n// to be updated as we add more selectPoints handlers\nfunction isSelectable(fullData) {\n    var selectable = false;\n\n    for(var i = 0; i < fullData.length; i++) {\n        if(selectable) break;\n\n        var trace = fullData[i];\n\n        if(!trace._module || !trace._module.selectPoints) continue;\n\n        if(Registry.traceIs(trace, 'scatter-like')) {\n            if(scatterSubTypes.hasMarkers(trace) || scatterSubTypes.hasText(trace)) {\n                selectable = true;\n            }\n        } else if(Registry.traceIs(trace, 'box-violin')) {\n            if(trace.boxpoints === 'all' || trace.points === 'all') {\n                selectable = true;\n            }\n        } else {\n            // assume that in general if the trace module has selectPoints,\n            // then it's selectable. Scatter is an exception to this because it must\n            // have markers or text, not just be a scatter type.\n\n            selectable = true;\n        }\n    }\n\n    return selectable;\n}\n\n// check whether all trace are 'noHover'\nfunction hasNoHover(fullData) {\n    for(var i = 0; i < fullData.length; i++) {\n        if(!Registry.traceIs(fullData[i], 'noHover')) return false;\n    }\n    return true;\n}\n\nfunction appendButtonsToGroups(groups, buttons) {\n    if(buttons.length) {\n        if(Array.isArray(buttons[0])) {\n            for(var i = 0; i < buttons.length; i++) {\n                groups.push(buttons[i]);\n            }\n        } else groups.push(buttons);\n    }\n\n    return groups;\n}\n\n// fill in custom buttons referring to default mode bar buttons\nfunction fillCustomButton(customButtons) {\n    for(var i = 0; i < customButtons.length; i++) {\n        var buttonGroup = customButtons[i];\n\n        for(var j = 0; j < buttonGroup.length; j++) {\n            var button = buttonGroup[j];\n\n            if(typeof button === 'string') {\n                if(modeBarButtons[button] !== undefined) {\n                    customButtons[i][j] = modeBarButtons[button];\n                } else {\n                    throw new Error([\n                        '*modeBarButtons* configuration options',\n                        'invalid button name'\n                    ].join(' '));\n                }\n            }\n        }\n    }\n\n    return customButtons;\n}\n"]},"metadata":{},"sourceType":"script"}