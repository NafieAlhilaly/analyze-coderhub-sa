{"ast":null,"code":"'use strict'; //This code is extracted from ndarray-sort\n//It is inlined here as a temporary workaround\n\nmodule.exports = wrapper;\nvar INSERT_SORT_CUTOFF = 32;\n\nfunction wrapper(data, n0) {\n  if (n0 <= 4 * INSERT_SORT_CUTOFF) {\n    insertionSort(0, n0 - 1, data);\n  } else {\n    quickSort(0, n0 - 1, data);\n  }\n}\n\nfunction insertionSort(left, right, data) {\n  var ptr = 2 * (left + 1);\n\n  for (var i = left + 1; i <= right; ++i) {\n    var a = data[ptr++];\n    var b = data[ptr++];\n    var j = i;\n    var jptr = ptr - 2;\n\n    while (j-- > left) {\n      var x = data[jptr - 2];\n      var y = data[jptr - 1];\n\n      if (x < a) {\n        break;\n      } else if (x === a && y < b) {\n        break;\n      }\n\n      data[jptr] = x;\n      data[jptr + 1] = y;\n      jptr -= 2;\n    }\n\n    data[jptr] = a;\n    data[jptr + 1] = b;\n  }\n}\n\nfunction swap(i, j, data) {\n  i *= 2;\n  j *= 2;\n  var x = data[i];\n  var y = data[i + 1];\n  data[i] = data[j];\n  data[i + 1] = data[j + 1];\n  data[j] = x;\n  data[j + 1] = y;\n}\n\nfunction move(i, j, data) {\n  i *= 2;\n  j *= 2;\n  data[i] = data[j];\n  data[i + 1] = data[j + 1];\n}\n\nfunction rotate(i, j, k, data) {\n  i *= 2;\n  j *= 2;\n  k *= 2;\n  var x = data[i];\n  var y = data[i + 1];\n  data[i] = data[j];\n  data[i + 1] = data[j + 1];\n  data[j] = data[k];\n  data[j + 1] = data[k + 1];\n  data[k] = x;\n  data[k + 1] = y;\n}\n\nfunction shufflePivot(i, j, px, py, data) {\n  i *= 2;\n  j *= 2;\n  data[i] = data[j];\n  data[j] = px;\n  data[i + 1] = data[j + 1];\n  data[j + 1] = py;\n}\n\nfunction compare(i, j, data) {\n  i *= 2;\n  j *= 2;\n  var x = data[i],\n      y = data[j];\n\n  if (x < y) {\n    return false;\n  } else if (x === y) {\n    return data[i + 1] > data[j + 1];\n  }\n\n  return true;\n}\n\nfunction comparePivot(i, y, b, data) {\n  i *= 2;\n  var x = data[i];\n\n  if (x < y) {\n    return true;\n  } else if (x === y) {\n    return data[i + 1] < b;\n  }\n\n  return false;\n}\n\nfunction quickSort(left, right, data) {\n  var sixth = (right - left + 1) / 6 | 0,\n      index1 = left + sixth,\n      index5 = right - sixth,\n      index3 = left + right >> 1,\n      index2 = index3 - sixth,\n      index4 = index3 + sixth,\n      el1 = index1,\n      el2 = index2,\n      el3 = index3,\n      el4 = index4,\n      el5 = index5,\n      less = left + 1,\n      great = right - 1,\n      tmp = 0;\n\n  if (compare(el1, el2, data)) {\n    tmp = el1;\n    el1 = el2;\n    el2 = tmp;\n  }\n\n  if (compare(el4, el5, data)) {\n    tmp = el4;\n    el4 = el5;\n    el5 = tmp;\n  }\n\n  if (compare(el1, el3, data)) {\n    tmp = el1;\n    el1 = el3;\n    el3 = tmp;\n  }\n\n  if (compare(el2, el3, data)) {\n    tmp = el2;\n    el2 = el3;\n    el3 = tmp;\n  }\n\n  if (compare(el1, el4, data)) {\n    tmp = el1;\n    el1 = el4;\n    el4 = tmp;\n  }\n\n  if (compare(el3, el4, data)) {\n    tmp = el3;\n    el3 = el4;\n    el4 = tmp;\n  }\n\n  if (compare(el2, el5, data)) {\n    tmp = el2;\n    el2 = el5;\n    el5 = tmp;\n  }\n\n  if (compare(el2, el3, data)) {\n    tmp = el2;\n    el2 = el3;\n    el3 = tmp;\n  }\n\n  if (compare(el4, el5, data)) {\n    tmp = el4;\n    el4 = el5;\n    el5 = tmp;\n  }\n\n  var pivot1X = data[2 * el2];\n  var pivot1Y = data[2 * el2 + 1];\n  var pivot2X = data[2 * el4];\n  var pivot2Y = data[2 * el4 + 1];\n  var ptr0 = 2 * el1;\n  var ptr2 = 2 * el3;\n  var ptr4 = 2 * el5;\n  var ptr5 = 2 * index1;\n  var ptr6 = 2 * index3;\n  var ptr7 = 2 * index5;\n\n  for (var i1 = 0; i1 < 2; ++i1) {\n    var x = data[ptr0 + i1];\n    var y = data[ptr2 + i1];\n    var z = data[ptr4 + i1];\n    data[ptr5 + i1] = x;\n    data[ptr6 + i1] = y;\n    data[ptr7 + i1] = z;\n  }\n\n  move(index2, left, data);\n  move(index4, right, data);\n\n  for (var k = less; k <= great; ++k) {\n    if (comparePivot(k, pivot1X, pivot1Y, data)) {\n      if (k !== less) {\n        swap(k, less, data);\n      }\n\n      ++less;\n    } else {\n      if (!comparePivot(k, pivot2X, pivot2Y, data)) {\n        while (true) {\n          if (!comparePivot(great, pivot2X, pivot2Y, data)) {\n            if (--great < k) {\n              break;\n            }\n\n            continue;\n          } else {\n            if (comparePivot(great, pivot1X, pivot1Y, data)) {\n              rotate(k, less, great, data);\n              ++less;\n              --great;\n            } else {\n              swap(k, great, data);\n              --great;\n            }\n\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  shufflePivot(left, less - 1, pivot1X, pivot1Y, data);\n  shufflePivot(right, great + 1, pivot2X, pivot2Y, data);\n\n  if (less - 2 - left <= INSERT_SORT_CUTOFF) {\n    insertionSort(left, less - 2, data);\n  } else {\n    quickSort(left, less - 2, data);\n  }\n\n  if (right - (great + 2) <= INSERT_SORT_CUTOFF) {\n    insertionSort(great + 2, right, data);\n  } else {\n    quickSort(great + 2, right, data);\n  }\n\n  if (great - less <= INSERT_SORT_CUTOFF) {\n    insertionSort(less, great, data);\n  } else {\n    quickSort(less, great, data);\n  }\n}","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/box-intersect/lib/sort.js"],"names":["module","exports","wrapper","INSERT_SORT_CUTOFF","data","n0","insertionSort","quickSort","left","right","ptr","i","a","b","j","jptr","x","y","swap","move","rotate","k","shufflePivot","px","py","compare","comparePivot","sixth","index1","index5","index3","index2","index4","el1","el2","el3","el4","el5","less","great","tmp","pivot1X","pivot1Y","pivot2X","pivot2Y","ptr0","ptr2","ptr4","ptr5","ptr6","ptr7","i1","z"],"mappings":"AAAA,a,CAEA;AACA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,OAAjB;AAEA,IAAIC,kBAAkB,GAAG,EAAzB;;AAEA,SAASD,OAAT,CAAiBE,IAAjB,EAAuBC,EAAvB,EAA2B;AACzB,MAAIA,EAAE,IAAI,IAAEF,kBAAZ,EAAgC;AAC9BG,IAAAA,aAAa,CAAC,CAAD,EAAID,EAAE,GAAG,CAAT,EAAYD,IAAZ,CAAb;AACD,GAFD,MAEO;AACLG,IAAAA,SAAS,CAAC,CAAD,EAAIF,EAAE,GAAG,CAAT,EAAYD,IAAZ,CAAT;AACD;AACF;;AAED,SAASE,aAAT,CAAuBE,IAAvB,EAA6BC,KAA7B,EAAoCL,IAApC,EAA0C;AACxC,MAAIM,GAAG,GAAG,KAAGF,IAAI,GAAC,CAAR,CAAV;;AACA,OAAI,IAAIG,CAAC,GAACH,IAAI,GAAC,CAAf,EAAkBG,CAAC,IAAEF,KAArB,EAA4B,EAAEE,CAA9B,EAAiC;AAC/B,QAAIC,CAAC,GAAGR,IAAI,CAACM,GAAG,EAAJ,CAAZ;AACA,QAAIG,CAAC,GAAGT,IAAI,CAACM,GAAG,EAAJ,CAAZ;AACA,QAAII,CAAC,GAAGH,CAAR;AACA,QAAII,IAAI,GAAGL,GAAG,GAAC,CAAf;;AACA,WAAMI,CAAC,KAAKN,IAAZ,EAAkB;AAChB,UAAIQ,CAAC,GAAGZ,IAAI,CAACW,IAAI,GAAC,CAAN,CAAZ;AACA,UAAIE,CAAC,GAAGb,IAAI,CAACW,IAAI,GAAC,CAAN,CAAZ;;AACA,UAAGC,CAAC,GAAGJ,CAAP,EAAU;AACR;AACD,OAFD,MAEO,IAAGI,CAAC,KAAKJ,CAAN,IAAWK,CAAC,GAAGJ,CAAlB,EAAqB;AAC1B;AACD;;AACDT,MAAAA,IAAI,CAACW,IAAD,CAAJ,GAAeC,CAAf;AACAZ,MAAAA,IAAI,CAACW,IAAI,GAAC,CAAN,CAAJ,GAAeE,CAAf;AACAF,MAAAA,IAAI,IAAI,CAAR;AACD;;AACDX,IAAAA,IAAI,CAACW,IAAD,CAAJ,GAAeH,CAAf;AACAR,IAAAA,IAAI,CAACW,IAAI,GAAC,CAAN,CAAJ,GAAeF,CAAf;AACD;AACF;;AAED,SAASK,IAAT,CAAcP,CAAd,EAAiBG,CAAjB,EAAoBV,IAApB,EAA0B;AACxBO,EAAAA,CAAC,IAAI,CAAL;AACAG,EAAAA,CAAC,IAAI,CAAL;AACA,MAAIE,CAAC,GAAGZ,IAAI,CAACO,CAAD,CAAZ;AACA,MAAIM,CAAC,GAAGb,IAAI,CAACO,CAAC,GAAC,CAAH,CAAZ;AACAP,EAAAA,IAAI,CAACO,CAAD,CAAJ,GAAUP,IAAI,CAACU,CAAD,CAAd;AACAV,EAAAA,IAAI,CAACO,CAAC,GAAC,CAAH,CAAJ,GAAYP,IAAI,CAACU,CAAC,GAAC,CAAH,CAAhB;AACAV,EAAAA,IAAI,CAACU,CAAD,CAAJ,GAAUE,CAAV;AACAZ,EAAAA,IAAI,CAACU,CAAC,GAAC,CAAH,CAAJ,GAAYG,CAAZ;AACD;;AAED,SAASE,IAAT,CAAcR,CAAd,EAAiBG,CAAjB,EAAoBV,IAApB,EAA0B;AACxBO,EAAAA,CAAC,IAAI,CAAL;AACAG,EAAAA,CAAC,IAAI,CAAL;AACAV,EAAAA,IAAI,CAACO,CAAD,CAAJ,GAAUP,IAAI,CAACU,CAAD,CAAd;AACAV,EAAAA,IAAI,CAACO,CAAC,GAAC,CAAH,CAAJ,GAAYP,IAAI,CAACU,CAAC,GAAC,CAAH,CAAhB;AACD;;AAED,SAASM,MAAT,CAAgBT,CAAhB,EAAmBG,CAAnB,EAAsBO,CAAtB,EAAyBjB,IAAzB,EAA+B;AAC7BO,EAAAA,CAAC,IAAI,CAAL;AACAG,EAAAA,CAAC,IAAI,CAAL;AACAO,EAAAA,CAAC,IAAI,CAAL;AACA,MAAIL,CAAC,GAAGZ,IAAI,CAACO,CAAD,CAAZ;AACA,MAAIM,CAAC,GAAGb,IAAI,CAACO,CAAC,GAAC,CAAH,CAAZ;AACAP,EAAAA,IAAI,CAACO,CAAD,CAAJ,GAAUP,IAAI,CAACU,CAAD,CAAd;AACAV,EAAAA,IAAI,CAACO,CAAC,GAAC,CAAH,CAAJ,GAAYP,IAAI,CAACU,CAAC,GAAC,CAAH,CAAhB;AACAV,EAAAA,IAAI,CAACU,CAAD,CAAJ,GAAUV,IAAI,CAACiB,CAAD,CAAd;AACAjB,EAAAA,IAAI,CAACU,CAAC,GAAC,CAAH,CAAJ,GAAYV,IAAI,CAACiB,CAAC,GAAC,CAAH,CAAhB;AACAjB,EAAAA,IAAI,CAACiB,CAAD,CAAJ,GAAUL,CAAV;AACAZ,EAAAA,IAAI,CAACiB,CAAC,GAAC,CAAH,CAAJ,GAAYJ,CAAZ;AACD;;AAED,SAASK,YAAT,CAAsBX,CAAtB,EAAyBG,CAAzB,EAA4BS,EAA5B,EAAgCC,EAAhC,EAAoCpB,IAApC,EAA0C;AACxCO,EAAAA,CAAC,IAAI,CAAL;AACAG,EAAAA,CAAC,IAAI,CAAL;AACAV,EAAAA,IAAI,CAACO,CAAD,CAAJ,GAAUP,IAAI,CAACU,CAAD,CAAd;AACAV,EAAAA,IAAI,CAACU,CAAD,CAAJ,GAAUS,EAAV;AACAnB,EAAAA,IAAI,CAACO,CAAC,GAAC,CAAH,CAAJ,GAAYP,IAAI,CAACU,CAAC,GAAC,CAAH,CAAhB;AACAV,EAAAA,IAAI,CAACU,CAAC,GAAC,CAAH,CAAJ,GAAYU,EAAZ;AACD;;AAED,SAASC,OAAT,CAAiBd,CAAjB,EAAoBG,CAApB,EAAuBV,IAAvB,EAA6B;AAC3BO,EAAAA,CAAC,IAAI,CAAL;AACAG,EAAAA,CAAC,IAAI,CAAL;AACA,MAAIE,CAAC,GAAGZ,IAAI,CAACO,CAAD,CAAZ;AAAA,MACIM,CAAC,GAAGb,IAAI,CAACU,CAAD,CADZ;;AAEA,MAAGE,CAAC,GAAGC,CAAP,EAAU;AACR,WAAO,KAAP;AACD,GAFD,MAEO,IAAGD,CAAC,KAAKC,CAAT,EAAY;AACjB,WAAOb,IAAI,CAACO,CAAC,GAAC,CAAH,CAAJ,GAAYP,IAAI,CAACU,CAAC,GAAC,CAAH,CAAvB;AACD;;AACD,SAAO,IAAP;AACD;;AAED,SAASY,YAAT,CAAsBf,CAAtB,EAAyBM,CAAzB,EAA4BJ,CAA5B,EAA+BT,IAA/B,EAAqC;AACnCO,EAAAA,CAAC,IAAI,CAAL;AACA,MAAIK,CAAC,GAAGZ,IAAI,CAACO,CAAD,CAAZ;;AACA,MAAGK,CAAC,GAAGC,CAAP,EAAU;AACR,WAAO,IAAP;AACD,GAFD,MAEO,IAAGD,CAAC,KAAKC,CAAT,EAAY;AACjB,WAAOb,IAAI,CAACO,CAAC,GAAC,CAAH,CAAJ,GAAYE,CAAnB;AACD;;AACD,SAAO,KAAP;AACD;;AAED,SAASN,SAAT,CAAmBC,IAAnB,EAAyBC,KAAzB,EAAgCL,IAAhC,EAAsC;AACpC,MAAIuB,KAAK,GAAG,CAAClB,KAAK,GAAGD,IAAR,GAAe,CAAhB,IAAqB,CAArB,GAAyB,CAArC;AAAA,MACIoB,MAAM,GAAGpB,IAAI,GAAGmB,KADpB;AAAA,MAEIE,MAAM,GAAGpB,KAAK,GAAGkB,KAFrB;AAAA,MAGIG,MAAM,GAAGtB,IAAI,GAAGC,KAAP,IAAgB,CAH7B;AAAA,MAIIsB,MAAM,GAAGD,MAAM,GAAGH,KAJtB;AAAA,MAKIK,MAAM,GAAGF,MAAM,GAAGH,KALtB;AAAA,MAMIM,GAAG,GAAGL,MANV;AAAA,MAOIM,GAAG,GAAGH,MAPV;AAAA,MAQII,GAAG,GAAGL,MARV;AAAA,MASIM,GAAG,GAAGJ,MATV;AAAA,MAUIK,GAAG,GAAGR,MAVV;AAAA,MAWIS,IAAI,GAAG9B,IAAI,GAAG,CAXlB;AAAA,MAYI+B,KAAK,GAAG9B,KAAK,GAAG,CAZpB;AAAA,MAaI+B,GAAG,GAAG,CAbV;;AAcA,MAAGf,OAAO,CAACQ,GAAD,EAAMC,GAAN,EAAW9B,IAAX,CAAV,EAA4B;AAC1BoC,IAAAA,GAAG,GAAGP,GAAN;AACAA,IAAAA,GAAG,GAAGC,GAAN;AACAA,IAAAA,GAAG,GAAGM,GAAN;AACD;;AACD,MAAGf,OAAO,CAACW,GAAD,EAAMC,GAAN,EAAWjC,IAAX,CAAV,EAA4B;AAC1BoC,IAAAA,GAAG,GAAGJ,GAAN;AACAA,IAAAA,GAAG,GAAGC,GAAN;AACAA,IAAAA,GAAG,GAAGG,GAAN;AACD;;AACD,MAAGf,OAAO,CAACQ,GAAD,EAAME,GAAN,EAAW/B,IAAX,CAAV,EAA4B;AAC1BoC,IAAAA,GAAG,GAAGP,GAAN;AACAA,IAAAA,GAAG,GAAGE,GAAN;AACAA,IAAAA,GAAG,GAAGK,GAAN;AACD;;AACD,MAAGf,OAAO,CAACS,GAAD,EAAMC,GAAN,EAAW/B,IAAX,CAAV,EAA4B;AAC1BoC,IAAAA,GAAG,GAAGN,GAAN;AACAA,IAAAA,GAAG,GAAGC,GAAN;AACAA,IAAAA,GAAG,GAAGK,GAAN;AACD;;AACD,MAAGf,OAAO,CAACQ,GAAD,EAAMG,GAAN,EAAWhC,IAAX,CAAV,EAA4B;AAC1BoC,IAAAA,GAAG,GAAGP,GAAN;AACAA,IAAAA,GAAG,GAAGG,GAAN;AACAA,IAAAA,GAAG,GAAGI,GAAN;AACD;;AACD,MAAGf,OAAO,CAACU,GAAD,EAAMC,GAAN,EAAWhC,IAAX,CAAV,EAA4B;AAC1BoC,IAAAA,GAAG,GAAGL,GAAN;AACAA,IAAAA,GAAG,GAAGC,GAAN;AACAA,IAAAA,GAAG,GAAGI,GAAN;AACD;;AACD,MAAGf,OAAO,CAACS,GAAD,EAAMG,GAAN,EAAWjC,IAAX,CAAV,EAA4B;AAC1BoC,IAAAA,GAAG,GAAGN,GAAN;AACAA,IAAAA,GAAG,GAAGG,GAAN;AACAA,IAAAA,GAAG,GAAGG,GAAN;AACD;;AACD,MAAGf,OAAO,CAACS,GAAD,EAAMC,GAAN,EAAW/B,IAAX,CAAV,EAA4B;AAC1BoC,IAAAA,GAAG,GAAGN,GAAN;AACAA,IAAAA,GAAG,GAAGC,GAAN;AACAA,IAAAA,GAAG,GAAGK,GAAN;AACD;;AACD,MAAGf,OAAO,CAACW,GAAD,EAAMC,GAAN,EAAWjC,IAAX,CAAV,EAA4B;AAC1BoC,IAAAA,GAAG,GAAGJ,GAAN;AACAA,IAAAA,GAAG,GAAGC,GAAN;AACAA,IAAAA,GAAG,GAAGG,GAAN;AACD;;AAED,MAAIC,OAAO,GAAGrC,IAAI,CAAC,IAAE8B,GAAH,CAAlB;AACA,MAAIQ,OAAO,GAAGtC,IAAI,CAAC,IAAE8B,GAAF,GAAM,CAAP,CAAlB;AACA,MAAIS,OAAO,GAAGvC,IAAI,CAAC,IAAEgC,GAAH,CAAlB;AACA,MAAIQ,OAAO,GAAGxC,IAAI,CAAC,IAAEgC,GAAF,GAAM,CAAP,CAAlB;AAEA,MAAIS,IAAI,GAAG,IAAIZ,GAAf;AACA,MAAIa,IAAI,GAAG,IAAIX,GAAf;AACA,MAAIY,IAAI,GAAG,IAAIV,GAAf;AACA,MAAIW,IAAI,GAAG,IAAIpB,MAAf;AACA,MAAIqB,IAAI,GAAG,IAAInB,MAAf;AACA,MAAIoB,IAAI,GAAG,IAAIrB,MAAf;;AACA,OAAK,IAAIsB,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAG,CAAtB,EAAyB,EAAEA,EAA3B,EAA+B;AAC7B,QAAInC,CAAC,GAAGZ,IAAI,CAACyC,IAAI,GAACM,EAAN,CAAZ;AACA,QAAIlC,CAAC,GAAGb,IAAI,CAAC0C,IAAI,GAACK,EAAN,CAAZ;AACA,QAAIC,CAAC,GAAGhD,IAAI,CAAC2C,IAAI,GAACI,EAAN,CAAZ;AACA/C,IAAAA,IAAI,CAAC4C,IAAI,GAACG,EAAN,CAAJ,GAAgBnC,CAAhB;AACAZ,IAAAA,IAAI,CAAC6C,IAAI,GAACE,EAAN,CAAJ,GAAgBlC,CAAhB;AACAb,IAAAA,IAAI,CAAC8C,IAAI,GAACC,EAAN,CAAJ,GAAgBC,CAAhB;AACD;;AAEDjC,EAAAA,IAAI,CAACY,MAAD,EAASvB,IAAT,EAAeJ,IAAf,CAAJ;AACAe,EAAAA,IAAI,CAACa,MAAD,EAASvB,KAAT,EAAgBL,IAAhB,CAAJ;;AACA,OAAK,IAAIiB,CAAC,GAAGiB,IAAb,EAAmBjB,CAAC,IAAIkB,KAAxB,EAA+B,EAAElB,CAAjC,EAAoC;AAClC,QAAIK,YAAY,CAACL,CAAD,EAAIoB,OAAJ,EAAaC,OAAb,EAAsBtC,IAAtB,CAAhB,EAA6C;AAC3C,UAAIiB,CAAC,KAAKiB,IAAV,EAAgB;AACdpB,QAAAA,IAAI,CAACG,CAAD,EAAIiB,IAAJ,EAAUlC,IAAV,CAAJ;AACD;;AACD,QAAEkC,IAAF;AACD,KALD,MAKO;AACL,UAAI,CAACZ,YAAY,CAACL,CAAD,EAAIsB,OAAJ,EAAaC,OAAb,EAAsBxC,IAAtB,CAAjB,EAA8C;AAC5C,eAAO,IAAP,EAAa;AACX,cAAI,CAACsB,YAAY,CAACa,KAAD,EAAQI,OAAR,EAAiBC,OAAjB,EAA0BxC,IAA1B,CAAjB,EAAkD;AAChD,gBAAI,EAAEmC,KAAF,GAAUlB,CAAd,EAAiB;AACf;AACD;;AACD;AACD,WALD,MAKO;AACL,gBAAIK,YAAY,CAACa,KAAD,EAAQE,OAAR,EAAiBC,OAAjB,EAA0BtC,IAA1B,CAAhB,EAAiD;AAC/CgB,cAAAA,MAAM,CAACC,CAAD,EAAIiB,IAAJ,EAAUC,KAAV,EAAiBnC,IAAjB,CAAN;AACA,gBAAEkC,IAAF;AACA,gBAAEC,KAAF;AACD,aAJD,MAIO;AACLrB,cAAAA,IAAI,CAACG,CAAD,EAAIkB,KAAJ,EAAWnC,IAAX,CAAJ;AACA,gBAAEmC,KAAF;AACD;;AACD;AACD;AACF;AACF;AACF;AACF;;AACDjB,EAAAA,YAAY,CAACd,IAAD,EAAO8B,IAAI,GAAC,CAAZ,EAAeG,OAAf,EAAwBC,OAAxB,EAAiCtC,IAAjC,CAAZ;AACAkB,EAAAA,YAAY,CAACb,KAAD,EAAQ8B,KAAK,GAAC,CAAd,EAAiBI,OAAjB,EAA0BC,OAA1B,EAAmCxC,IAAnC,CAAZ;;AACA,MAAIkC,IAAI,GAAG,CAAP,GAAW9B,IAAX,IAAmBL,kBAAvB,EAA2C;AACzCG,IAAAA,aAAa,CAACE,IAAD,EAAO8B,IAAI,GAAG,CAAd,EAAiBlC,IAAjB,CAAb;AACD,GAFD,MAEO;AACLG,IAAAA,SAAS,CAACC,IAAD,EAAO8B,IAAI,GAAG,CAAd,EAAiBlC,IAAjB,CAAT;AACD;;AACD,MAAIK,KAAK,IAAI8B,KAAK,GAAG,CAAZ,CAAL,IAAuBpC,kBAA3B,EAA+C;AAC7CG,IAAAA,aAAa,CAACiC,KAAK,GAAG,CAAT,EAAY9B,KAAZ,EAAmBL,IAAnB,CAAb;AACD,GAFD,MAEO;AACLG,IAAAA,SAAS,CAACgC,KAAK,GAAG,CAAT,EAAY9B,KAAZ,EAAmBL,IAAnB,CAAT;AACD;;AACD,MAAImC,KAAK,GAAGD,IAAR,IAAgBnC,kBAApB,EAAwC;AACtCG,IAAAA,aAAa,CAACgC,IAAD,EAAOC,KAAP,EAAcnC,IAAd,CAAb;AACD,GAFD,MAEO;AACLG,IAAAA,SAAS,CAAC+B,IAAD,EAAOC,KAAP,EAAcnC,IAAd,CAAT;AACD;AACF","sourcesContent":["'use strict';\r\n\r\n//This code is extracted from ndarray-sort\r\n//It is inlined here as a temporary workaround\r\n\r\nmodule.exports = wrapper;\r\n\r\nvar INSERT_SORT_CUTOFF = 32\r\n\r\nfunction wrapper(data, n0) {\r\n  if (n0 <= 4*INSERT_SORT_CUTOFF) {\r\n    insertionSort(0, n0 - 1, data);\r\n  } else {\r\n    quickSort(0, n0 - 1, data);\r\n  }\r\n}\r\n\r\nfunction insertionSort(left, right, data) {\r\n  var ptr = 2*(left+1)\r\n  for(var i=left+1; i<=right; ++i) {\r\n    var a = data[ptr++]\r\n    var b = data[ptr++]\r\n    var j = i\r\n    var jptr = ptr-2\r\n    while(j-- > left) {\r\n      var x = data[jptr-2]\r\n      var y = data[jptr-1]\r\n      if(x < a) {\r\n        break\r\n      } else if(x === a && y < b) {\r\n        break\r\n      }\r\n      data[jptr]   = x\r\n      data[jptr+1] = y\r\n      jptr -= 2\r\n    }\r\n    data[jptr]   = a\r\n    data[jptr+1] = b\r\n  }\r\n}\r\n\r\nfunction swap(i, j, data) {\r\n  i *= 2\r\n  j *= 2\r\n  var x = data[i]\r\n  var y = data[i+1]\r\n  data[i] = data[j]\r\n  data[i+1] = data[j+1]\r\n  data[j] = x\r\n  data[j+1] = y\r\n}\r\n\r\nfunction move(i, j, data) {\r\n  i *= 2\r\n  j *= 2\r\n  data[i] = data[j]\r\n  data[i+1] = data[j+1]\r\n}\r\n\r\nfunction rotate(i, j, k, data) {\r\n  i *= 2\r\n  j *= 2\r\n  k *= 2\r\n  var x = data[i]\r\n  var y = data[i+1]\r\n  data[i] = data[j]\r\n  data[i+1] = data[j+1]\r\n  data[j] = data[k]\r\n  data[j+1] = data[k+1]\r\n  data[k] = x\r\n  data[k+1] = y\r\n}\r\n\r\nfunction shufflePivot(i, j, px, py, data) {\r\n  i *= 2\r\n  j *= 2\r\n  data[i] = data[j]\r\n  data[j] = px\r\n  data[i+1] = data[j+1]\r\n  data[j+1] = py\r\n}\r\n\r\nfunction compare(i, j, data) {\r\n  i *= 2\r\n  j *= 2\r\n  var x = data[i],\r\n      y = data[j]\r\n  if(x < y) {\r\n    return false\r\n  } else if(x === y) {\r\n    return data[i+1] > data[j+1]\r\n  }\r\n  return true\r\n}\r\n\r\nfunction comparePivot(i, y, b, data) {\r\n  i *= 2\r\n  var x = data[i]\r\n  if(x < y) {\r\n    return true\r\n  } else if(x === y) {\r\n    return data[i+1] < b\r\n  }\r\n  return false\r\n}\r\n\r\nfunction quickSort(left, right, data) {\r\n  var sixth = (right - left + 1) / 6 | 0, \r\n      index1 = left + sixth, \r\n      index5 = right - sixth, \r\n      index3 = left + right >> 1, \r\n      index2 = index3 - sixth, \r\n      index4 = index3 + sixth, \r\n      el1 = index1, \r\n      el2 = index2, \r\n      el3 = index3, \r\n      el4 = index4, \r\n      el5 = index5, \r\n      less = left + 1, \r\n      great = right - 1, \r\n      tmp = 0\r\n  if(compare(el1, el2, data)) {\r\n    tmp = el1\r\n    el1 = el2\r\n    el2 = tmp\r\n  }\r\n  if(compare(el4, el5, data)) {\r\n    tmp = el4\r\n    el4 = el5\r\n    el5 = tmp\r\n  }\r\n  if(compare(el1, el3, data)) {\r\n    tmp = el1\r\n    el1 = el3\r\n    el3 = tmp\r\n  }\r\n  if(compare(el2, el3, data)) {\r\n    tmp = el2\r\n    el2 = el3\r\n    el3 = tmp\r\n  }\r\n  if(compare(el1, el4, data)) {\r\n    tmp = el1\r\n    el1 = el4\r\n    el4 = tmp\r\n  }\r\n  if(compare(el3, el4, data)) {\r\n    tmp = el3\r\n    el3 = el4\r\n    el4 = tmp\r\n  }\r\n  if(compare(el2, el5, data)) {\r\n    tmp = el2\r\n    el2 = el5\r\n    el5 = tmp\r\n  }\r\n  if(compare(el2, el3, data)) {\r\n    tmp = el2\r\n    el2 = el3\r\n    el3 = tmp\r\n  }\r\n  if(compare(el4, el5, data)) {\r\n    tmp = el4\r\n    el4 = el5\r\n    el5 = tmp\r\n  }\r\n\r\n  var pivot1X = data[2*el2]\r\n  var pivot1Y = data[2*el2+1]\r\n  var pivot2X = data[2*el4]\r\n  var pivot2Y = data[2*el4+1]\r\n\r\n  var ptr0 = 2 * el1;\r\n  var ptr2 = 2 * el3;\r\n  var ptr4 = 2 * el5;\r\n  var ptr5 = 2 * index1;\r\n  var ptr6 = 2 * index3;\r\n  var ptr7 = 2 * index5;\r\n  for (var i1 = 0; i1 < 2; ++i1) {\r\n    var x = data[ptr0+i1];\r\n    var y = data[ptr2+i1];\r\n    var z = data[ptr4+i1];\r\n    data[ptr5+i1] = x;\r\n    data[ptr6+i1] = y;\r\n    data[ptr7+i1] = z;\r\n  }\r\n\r\n  move(index2, left, data)\r\n  move(index4, right, data)\r\n  for (var k = less; k <= great; ++k) {\r\n    if (comparePivot(k, pivot1X, pivot1Y, data)) {\r\n      if (k !== less) {\r\n        swap(k, less, data)\r\n      }\r\n      ++less;\r\n    } else {\r\n      if (!comparePivot(k, pivot2X, pivot2Y, data)) {\r\n        while (true) {\r\n          if (!comparePivot(great, pivot2X, pivot2Y, data)) {\r\n            if (--great < k) {\r\n              break;\r\n            }\r\n            continue;\r\n          } else {\r\n            if (comparePivot(great, pivot1X, pivot1Y, data)) {\r\n              rotate(k, less, great, data)\r\n              ++less;\r\n              --great;\r\n            } else {\r\n              swap(k, great, data)\r\n              --great;\r\n            }\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  shufflePivot(left, less-1, pivot1X, pivot1Y, data)\r\n  shufflePivot(right, great+1, pivot2X, pivot2Y, data)\r\n  if (less - 2 - left <= INSERT_SORT_CUTOFF) {\r\n    insertionSort(left, less - 2, data);\r\n  } else {\r\n    quickSort(left, less - 2, data);\r\n  }\r\n  if (right - (great + 2) <= INSERT_SORT_CUTOFF) {\r\n    insertionSort(great + 2, right, data);\r\n  } else {\r\n    quickSort(great + 2, right, data);\r\n  }\r\n  if (great - less <= INSERT_SORT_CUTOFF) {\r\n    insertionSort(less, great, data);\r\n  } else {\r\n    quickSort(less, great, data);\r\n  }\r\n}"]},"metadata":{},"sourceType":"script"}