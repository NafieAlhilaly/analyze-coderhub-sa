{"ast":null,"code":"'use strict';\n\nvar Registry = require('../../registry');\n\nvar Axes = require('../../plots/cartesian/axes');\n\nvar Lib = require('../../lib');\n\nvar layoutAttributes = require('./layout_attributes');\n\nmodule.exports = function (layoutIn, layoutOut, fullData) {\n  function coerce(attr, dflt) {\n    return Lib.coerce(layoutIn, layoutOut, layoutAttributes, attr, dflt);\n  }\n\n  var hasBars = false;\n  var shouldBeGapless = false;\n  var gappedAnyway = false;\n  var usedSubplots = {};\n  var mode = coerce('barmode');\n\n  for (var i = 0; i < fullData.length; i++) {\n    var trace = fullData[i];\n    if (Registry.traceIs(trace, 'bar') && trace.visible) hasBars = true;else continue; // if we have at least 2 grouped bar traces on the same subplot,\n    // we should default to a gap anyway, even if the data is histograms\n\n    if (mode === 'group') {\n      var subploti = trace.xaxis + trace.yaxis;\n      if (usedSubplots[subploti]) gappedAnyway = true;\n      usedSubplots[subploti] = true;\n    }\n\n    if (trace.visible && trace.type === 'histogram') {\n      var pa = Axes.getFromId({\n        _fullLayout: layoutOut\n      }, trace[trace.orientation === 'v' ? 'xaxis' : 'yaxis']);\n      if (pa.type !== 'category') shouldBeGapless = true;\n    }\n  }\n\n  if (!hasBars) {\n    delete layoutOut.barmode;\n    return;\n  }\n\n  if (mode !== 'overlay') coerce('barnorm');\n  coerce('bargap', shouldBeGapless && !gappedAnyway ? 0 : 0.2);\n  coerce('bargroupgap');\n};","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/plotly.js/src/traces/bar/layout_defaults.js"],"names":["Registry","require","Axes","Lib","layoutAttributes","module","exports","layoutIn","layoutOut","fullData","coerce","attr","dflt","hasBars","shouldBeGapless","gappedAnyway","usedSubplots","mode","i","length","trace","traceIs","visible","subploti","xaxis","yaxis","type","pa","getFromId","_fullLayout","orientation","barmode"],"mappings":"AAAA;;AAEA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,gBAAD,CAAtB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,4BAAD,CAAlB;;AACA,IAAIE,GAAG,GAAGF,OAAO,CAAC,WAAD,CAAjB;;AAEA,IAAIG,gBAAgB,GAAGH,OAAO,CAAC,qBAAD,CAA9B;;AAEAI,MAAM,CAACC,OAAP,GAAiB,UAASC,QAAT,EAAmBC,SAAnB,EAA8BC,QAA9B,EAAwC;AACrD,WAASC,MAAT,CAAgBC,IAAhB,EAAsBC,IAAtB,EAA4B;AACxB,WAAOT,GAAG,CAACO,MAAJ,CAAWH,QAAX,EAAqBC,SAArB,EAAgCJ,gBAAhC,EAAkDO,IAAlD,EAAwDC,IAAxD,CAAP;AACH;;AAED,MAAIC,OAAO,GAAG,KAAd;AACA,MAAIC,eAAe,GAAG,KAAtB;AACA,MAAIC,YAAY,GAAG,KAAnB;AACA,MAAIC,YAAY,GAAG,EAAnB;AAEA,MAAIC,IAAI,GAAGP,MAAM,CAAC,SAAD,CAAjB;;AAEA,OAAI,IAAIQ,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGT,QAAQ,CAACU,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACrC,QAAIE,KAAK,GAAGX,QAAQ,CAACS,CAAD,CAApB;AACA,QAAGlB,QAAQ,CAACqB,OAAT,CAAiBD,KAAjB,EAAwB,KAAxB,KAAkCA,KAAK,CAACE,OAA3C,EAAoDT,OAAO,GAAG,IAAV,CAApD,KACK,SAHgC,CAKrC;AACA;;AACA,QAAGI,IAAI,KAAK,OAAZ,EAAqB;AACjB,UAAIM,QAAQ,GAAGH,KAAK,CAACI,KAAN,GAAcJ,KAAK,CAACK,KAAnC;AACA,UAAGT,YAAY,CAACO,QAAD,CAAf,EAA2BR,YAAY,GAAG,IAAf;AAC3BC,MAAAA,YAAY,CAACO,QAAD,CAAZ,GAAyB,IAAzB;AACH;;AAED,QAAGH,KAAK,CAACE,OAAN,IAAiBF,KAAK,CAACM,IAAN,KAAe,WAAnC,EAAgD;AAC5C,UAAIC,EAAE,GAAGzB,IAAI,CAAC0B,SAAL,CAAe;AAACC,QAAAA,WAAW,EAAErB;AAAd,OAAf,EACGY,KAAK,CAACA,KAAK,CAACU,WAAN,KAAsB,GAAtB,GAA4B,OAA5B,GAAsC,OAAvC,CADR,CAAT;AAEA,UAAGH,EAAE,CAACD,IAAH,KAAY,UAAf,EAA2BZ,eAAe,GAAG,IAAlB;AAC9B;AACJ;;AAED,MAAG,CAACD,OAAJ,EAAa;AACT,WAAOL,SAAS,CAACuB,OAAjB;AACA;AACH;;AAED,MAAGd,IAAI,KAAK,SAAZ,EAAuBP,MAAM,CAAC,SAAD,CAAN;AAEvBA,EAAAA,MAAM,CAAC,QAAD,EAAYI,eAAe,IAAI,CAACC,YAArB,GAAqC,CAArC,GAAyC,GAApD,CAAN;AACAL,EAAAA,MAAM,CAAC,aAAD,CAAN;AACH,CAzCD","sourcesContent":["'use strict';\n\nvar Registry = require('../../registry');\nvar Axes = require('../../plots/cartesian/axes');\nvar Lib = require('../../lib');\n\nvar layoutAttributes = require('./layout_attributes');\n\nmodule.exports = function(layoutIn, layoutOut, fullData) {\n    function coerce(attr, dflt) {\n        return Lib.coerce(layoutIn, layoutOut, layoutAttributes, attr, dflt);\n    }\n\n    var hasBars = false;\n    var shouldBeGapless = false;\n    var gappedAnyway = false;\n    var usedSubplots = {};\n\n    var mode = coerce('barmode');\n\n    for(var i = 0; i < fullData.length; i++) {\n        var trace = fullData[i];\n        if(Registry.traceIs(trace, 'bar') && trace.visible) hasBars = true;\n        else continue;\n\n        // if we have at least 2 grouped bar traces on the same subplot,\n        // we should default to a gap anyway, even if the data is histograms\n        if(mode === 'group') {\n            var subploti = trace.xaxis + trace.yaxis;\n            if(usedSubplots[subploti]) gappedAnyway = true;\n            usedSubplots[subploti] = true;\n        }\n\n        if(trace.visible && trace.type === 'histogram') {\n            var pa = Axes.getFromId({_fullLayout: layoutOut},\n                        trace[trace.orientation === 'v' ? 'xaxis' : 'yaxis']);\n            if(pa.type !== 'category') shouldBeGapless = true;\n        }\n    }\n\n    if(!hasBars) {\n        delete layoutOut.barmode;\n        return;\n    }\n\n    if(mode !== 'overlay') coerce('barnorm');\n\n    coerce('bargap', (shouldBeGapless && !gappedAnyway) ? 0 : 0.2);\n    coerce('bargroupgap');\n};\n"]},"metadata":{},"sourceType":"script"}