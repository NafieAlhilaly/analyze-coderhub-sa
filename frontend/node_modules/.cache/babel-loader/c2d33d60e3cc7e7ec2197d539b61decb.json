{"ast":null,"code":"'use strict';\n\nvar isNumeric = require('fast-isnumeric');\n\nvar BADNUM = require('../../constants/numerical').BADNUM;\n\nvar calcMarkerColorscale = require('../scatter/colorscale_calc');\n\nvar arraysToCalcdata = require('../scatter/arrays_to_calcdata');\n\nvar calcSelection = require('../scatter/calc_selection');\n\nvar _ = require('../../lib')._;\n\nfunction isNonBlankString(v) {\n  return v && typeof v === 'string';\n}\n\nmodule.exports = function calc(gd, trace) {\n  var hasLocationData = Array.isArray(trace.locations);\n  var len = hasLocationData ? trace.locations.length : trace._length;\n  var calcTrace = new Array(len);\n  var isValidLoc;\n\n  if (trace.geojson) {\n    isValidLoc = function (v) {\n      return isNonBlankString(v) || isNumeric(v);\n    };\n  } else {\n    isValidLoc = isNonBlankString;\n  }\n\n  for (var i = 0; i < len; i++) {\n    var calcPt = calcTrace[i] = {};\n\n    if (hasLocationData) {\n      var loc = trace.locations[i];\n      calcPt.loc = isValidLoc(loc) ? loc : null;\n    } else {\n      var lon = trace.lon[i];\n      var lat = trace.lat[i];\n      if (isNumeric(lon) && isNumeric(lat)) calcPt.lonlat = [+lon, +lat];else calcPt.lonlat = [BADNUM, BADNUM];\n    }\n  }\n\n  arraysToCalcdata(calcTrace, trace);\n  calcMarkerColorscale(gd, trace);\n  calcSelection(calcTrace, trace);\n\n  if (len) {\n    calcTrace[0].t = {\n      labels: {\n        lat: _(gd, 'lat:') + ' ',\n        lon: _(gd, 'lon:') + ' '\n      }\n    };\n  }\n\n  return calcTrace;\n};","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/plotly.js/src/traces/scattergeo/calc.js"],"names":["isNumeric","require","BADNUM","calcMarkerColorscale","arraysToCalcdata","calcSelection","_","isNonBlankString","v","module","exports","calc","gd","trace","hasLocationData","Array","isArray","locations","len","length","_length","calcTrace","isValidLoc","geojson","i","calcPt","loc","lon","lat","lonlat","t","labels"],"mappings":"AAAA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,gBAAD,CAAvB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,2BAAD,CAAP,CAAqCC,MAAlD;;AAEA,IAAIC,oBAAoB,GAAGF,OAAO,CAAC,4BAAD,CAAlC;;AACA,IAAIG,gBAAgB,GAAGH,OAAO,CAAC,+BAAD,CAA9B;;AACA,IAAII,aAAa,GAAGJ,OAAO,CAAC,2BAAD,CAA3B;;AAEA,IAAIK,CAAC,GAAGL,OAAO,CAAC,WAAD,CAAP,CAAqBK,CAA7B;;AAEA,SAASC,gBAAT,CAA0BC,CAA1B,EAA6B;AACzB,SAAOA,CAAC,IAAI,OAAOA,CAAP,KAAa,QAAzB;AACH;;AAEDC,MAAM,CAACC,OAAP,GAAiB,SAASC,IAAT,CAAcC,EAAd,EAAkBC,KAAlB,EAAyB;AACtC,MAAIC,eAAe,GAAGC,KAAK,CAACC,OAAN,CAAcH,KAAK,CAACI,SAApB,CAAtB;AACA,MAAIC,GAAG,GAAGJ,eAAe,GAAGD,KAAK,CAACI,SAAN,CAAgBE,MAAnB,GAA4BN,KAAK,CAACO,OAA3D;AACA,MAAIC,SAAS,GAAG,IAAIN,KAAJ,CAAUG,GAAV,CAAhB;AAEA,MAAII,UAAJ;;AACA,MAAGT,KAAK,CAACU,OAAT,EAAkB;AACdD,IAAAA,UAAU,GAAG,UAASd,CAAT,EAAY;AAAE,aAAOD,gBAAgB,CAACC,CAAD,CAAhB,IAAuBR,SAAS,CAACQ,CAAD,CAAvC;AAA6C,KAAxE;AACH,GAFD,MAEO;AACHc,IAAAA,UAAU,GAAGf,gBAAb;AACH;;AAED,OAAI,IAAIiB,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGN,GAAnB,EAAwBM,CAAC,EAAzB,EAA6B;AACzB,QAAIC,MAAM,GAAGJ,SAAS,CAACG,CAAD,CAAT,GAAe,EAA5B;;AAEA,QAAGV,eAAH,EAAoB;AAChB,UAAIY,GAAG,GAAGb,KAAK,CAACI,SAAN,CAAgBO,CAAhB,CAAV;AACAC,MAAAA,MAAM,CAACC,GAAP,GAAaJ,UAAU,CAACI,GAAD,CAAV,GAAkBA,GAAlB,GAAwB,IAArC;AACH,KAHD,MAGO;AACH,UAAIC,GAAG,GAAGd,KAAK,CAACc,GAAN,CAAUH,CAAV,CAAV;AACA,UAAII,GAAG,GAAGf,KAAK,CAACe,GAAN,CAAUJ,CAAV,CAAV;AAEA,UAAGxB,SAAS,CAAC2B,GAAD,CAAT,IAAkB3B,SAAS,CAAC4B,GAAD,CAA9B,EAAqCH,MAAM,CAACI,MAAP,GAAgB,CAAC,CAACF,GAAF,EAAO,CAACC,GAAR,CAAhB,CAArC,KACKH,MAAM,CAACI,MAAP,GAAgB,CAAC3B,MAAD,EAASA,MAAT,CAAhB;AACR;AACJ;;AAEDE,EAAAA,gBAAgB,CAACiB,SAAD,EAAYR,KAAZ,CAAhB;AACAV,EAAAA,oBAAoB,CAACS,EAAD,EAAKC,KAAL,CAApB;AACAR,EAAAA,aAAa,CAACgB,SAAD,EAAYR,KAAZ,CAAb;;AAEA,MAAGK,GAAH,EAAQ;AACJG,IAAAA,SAAS,CAAC,CAAD,CAAT,CAAaS,CAAb,GAAiB;AACbC,MAAAA,MAAM,EAAE;AACJH,QAAAA,GAAG,EAAEtB,CAAC,CAACM,EAAD,EAAK,MAAL,CAAD,GAAgB,GADjB;AAEJe,QAAAA,GAAG,EAAErB,CAAC,CAACM,EAAD,EAAK,MAAL,CAAD,GAAgB;AAFjB;AADK,KAAjB;AAMH;;AAED,SAAOS,SAAP;AACH,CAzCD","sourcesContent":["'use strict';\n\nvar isNumeric = require('fast-isnumeric');\nvar BADNUM = require('../../constants/numerical').BADNUM;\n\nvar calcMarkerColorscale = require('../scatter/colorscale_calc');\nvar arraysToCalcdata = require('../scatter/arrays_to_calcdata');\nvar calcSelection = require('../scatter/calc_selection');\n\nvar _ = require('../../lib')._;\n\nfunction isNonBlankString(v) {\n    return v && typeof v === 'string';\n}\n\nmodule.exports = function calc(gd, trace) {\n    var hasLocationData = Array.isArray(trace.locations);\n    var len = hasLocationData ? trace.locations.length : trace._length;\n    var calcTrace = new Array(len);\n\n    var isValidLoc;\n    if(trace.geojson) {\n        isValidLoc = function(v) { return isNonBlankString(v) || isNumeric(v); };\n    } else {\n        isValidLoc = isNonBlankString;\n    }\n\n    for(var i = 0; i < len; i++) {\n        var calcPt = calcTrace[i] = {};\n\n        if(hasLocationData) {\n            var loc = trace.locations[i];\n            calcPt.loc = isValidLoc(loc) ? loc : null;\n        } else {\n            var lon = trace.lon[i];\n            var lat = trace.lat[i];\n\n            if(isNumeric(lon) && isNumeric(lat)) calcPt.lonlat = [+lon, +lat];\n            else calcPt.lonlat = [BADNUM, BADNUM];\n        }\n    }\n\n    arraysToCalcdata(calcTrace, trace);\n    calcMarkerColorscale(gd, trace);\n    calcSelection(calcTrace, trace);\n\n    if(len) {\n        calcTrace[0].t = {\n            labels: {\n                lat: _(gd, 'lat:') + ' ',\n                lon: _(gd, 'lon:') + ' '\n            }\n        };\n    }\n\n    return calcTrace;\n};\n"]},"metadata":{},"sourceType":"script"}