{"ast":null,"code":"'use strict';\n\nvar isNumeric = require('fast-isnumeric');\n\nvar Lib = require('../../lib');\n\nvar Colorscale = require('../../components/colorscale');\n\nvar Drawing = require('../../components/drawing');\n\nvar makeBlank = require('../../lib/geojson_utils').makeBlank;\n\nvar geoUtils = require('../../lib/geo_location_utils');\n/* N.B.\n *\n * We fetch the GeoJSON files \"ourselves\" (during\n * mapbox.prototype.fetchMapData) where they are stored in a global object\n * named `PlotlyGeoAssets` (same as for topojson files in `geo` subplots).\n *\n * Mapbox does allow using URLs as geojson sources, but does NOT allow filtering\n * features by feature `id` that are not numbers (more info in:\n * https://github.com/mapbox/mapbox-gl-js/issues/8088).\n */\n\n\nfunction convert(calcTrace) {\n  var trace = calcTrace[0].trace;\n  var isVisible = trace.visible === true && trace._length !== 0;\n  var fill = {\n    layout: {\n      visibility: 'none'\n    },\n    paint: {}\n  };\n  var line = {\n    layout: {\n      visibility: 'none'\n    },\n    paint: {}\n  };\n  var opts = trace._opts = {\n    fill: fill,\n    line: line,\n    geojson: makeBlank()\n  };\n  if (!isVisible) return opts;\n  var features = geoUtils.extractTraceFeature(calcTrace);\n  if (!features) return opts;\n  var sclFunc = Colorscale.makeColorScaleFuncFromTrace(trace);\n  var marker = trace.marker;\n  var markerLine = marker.line || {};\n  var opacityFn;\n\n  if (Lib.isArrayOrTypedArray(marker.opacity)) {\n    opacityFn = function opacityFn(d) {\n      var mo = d.mo;\n      return isNumeric(mo) ? +Lib.constrain(mo, 0, 1) : 0;\n    };\n  }\n\n  var lineColorFn;\n\n  if (Lib.isArrayOrTypedArray(markerLine.color)) {\n    lineColorFn = function lineColorFn(d) {\n      return d.mlc;\n    };\n  }\n\n  var lineWidthFn;\n\n  if (Lib.isArrayOrTypedArray(markerLine.width)) {\n    lineWidthFn = function lineWidthFn(d) {\n      return d.mlw;\n    };\n  }\n\n  for (var i = 0; i < calcTrace.length; i++) {\n    var cdi = calcTrace[i];\n    var fOut = cdi.fOut;\n\n    if (fOut) {\n      var props = fOut.properties;\n      props.fc = sclFunc(cdi.z);\n      if (opacityFn) props.mo = opacityFn(cdi);\n      if (lineColorFn) props.mlc = lineColorFn(cdi);\n      if (lineWidthFn) props.mlw = lineWidthFn(cdi);\n      cdi.ct = props.ct;\n      cdi._polygons = geoUtils.feature2polygons(fOut);\n    }\n  }\n\n  var opacitySetting = opacityFn ? {\n    type: 'identity',\n    property: 'mo'\n  } : marker.opacity;\n  Lib.extendFlat(fill.paint, {\n    'fill-color': {\n      type: 'identity',\n      property: 'fc'\n    },\n    'fill-opacity': opacitySetting\n  });\n  Lib.extendFlat(line.paint, {\n    'line-color': lineColorFn ? {\n      type: 'identity',\n      property: 'mlc'\n    } : markerLine.color,\n    'line-width': lineWidthFn ? {\n      type: 'identity',\n      property: 'mlw'\n    } : markerLine.width,\n    'line-opacity': opacitySetting\n  });\n  fill.layout.visibility = 'visible';\n  line.layout.visibility = 'visible';\n  opts.geojson = {\n    type: 'FeatureCollection',\n    features: features\n  };\n  convertOnSelect(calcTrace);\n  return opts;\n}\n\nfunction convertOnSelect(calcTrace) {\n  var trace = calcTrace[0].trace;\n  var opts = trace._opts;\n  var opacitySetting;\n\n  if (trace.selectedpoints) {\n    var fns = Drawing.makeSelectedPointStyleFns(trace);\n\n    for (var i = 0; i < calcTrace.length; i++) {\n      var cdi = calcTrace[i];\n\n      if (cdi.fOut) {\n        cdi.fOut.properties.mo2 = fns.selectedOpacityFn(cdi);\n      }\n    }\n\n    opacitySetting = {\n      type: 'identity',\n      property: 'mo2'\n    };\n  } else {\n    opacitySetting = Lib.isArrayOrTypedArray(trace.marker.opacity) ? {\n      type: 'identity',\n      property: 'mo'\n    } : trace.marker.opacity;\n  }\n\n  Lib.extendFlat(opts.fill.paint, {\n    'fill-opacity': opacitySetting\n  });\n  Lib.extendFlat(opts.line.paint, {\n    'line-opacity': opacitySetting\n  });\n  return opts;\n}\n\nmodule.exports = {\n  convert: convert,\n  convertOnSelect: convertOnSelect\n};","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/plotly.js/src/traces/choroplethmapbox/convert.js"],"names":["isNumeric","require","Lib","Colorscale","Drawing","makeBlank","geoUtils","convert","calcTrace","trace","isVisible","visible","_length","fill","layout","visibility","paint","line","opts","_opts","geojson","features","extractTraceFeature","sclFunc","makeColorScaleFuncFromTrace","marker","markerLine","opacityFn","isArrayOrTypedArray","opacity","d","mo","constrain","lineColorFn","color","mlc","lineWidthFn","width","mlw","i","length","cdi","fOut","props","properties","fc","z","ct","_polygons","feature2polygons","opacitySetting","type","property","extendFlat","convertOnSelect","selectedpoints","fns","makeSelectedPointStyleFns","mo2","selectedOpacityFn","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar isNumeric = require('fast-isnumeric');\n\nvar Lib = require('../../lib');\nvar Colorscale = require('../../components/colorscale');\nvar Drawing = require('../../components/drawing');\n\nvar makeBlank = require('../../lib/geojson_utils').makeBlank;\nvar geoUtils = require('../../lib/geo_location_utils');\n\n/* N.B.\n *\n * We fetch the GeoJSON files \"ourselves\" (during\n * mapbox.prototype.fetchMapData) where they are stored in a global object\n * named `PlotlyGeoAssets` (same as for topojson files in `geo` subplots).\n *\n * Mapbox does allow using URLs as geojson sources, but does NOT allow filtering\n * features by feature `id` that are not numbers (more info in:\n * https://github.com/mapbox/mapbox-gl-js/issues/8088).\n */\n\nfunction convert(calcTrace) {\n    var trace = calcTrace[0].trace;\n    var isVisible = trace.visible === true && trace._length !== 0;\n\n    var fill = {\n        layout: {visibility: 'none'},\n        paint: {}\n    };\n\n    var line = {\n        layout: {visibility: 'none'},\n        paint: {}\n    };\n\n    var opts = trace._opts = {\n        fill: fill,\n        line: line,\n        geojson: makeBlank()\n    };\n\n    if(!isVisible) return opts;\n\n    var features = geoUtils.extractTraceFeature(calcTrace);\n\n    if(!features) return opts;\n\n    var sclFunc = Colorscale.makeColorScaleFuncFromTrace(trace);\n    var marker = trace.marker;\n    var markerLine = marker.line || {};\n\n    var opacityFn;\n    if(Lib.isArrayOrTypedArray(marker.opacity)) {\n        opacityFn = function(d) {\n            var mo = d.mo;\n            return isNumeric(mo) ? +Lib.constrain(mo, 0, 1) : 0;\n        };\n    }\n\n    var lineColorFn;\n    if(Lib.isArrayOrTypedArray(markerLine.color)) {\n        lineColorFn = function(d) { return d.mlc; };\n    }\n\n    var lineWidthFn;\n    if(Lib.isArrayOrTypedArray(markerLine.width)) {\n        lineWidthFn = function(d) { return d.mlw; };\n    }\n\n    for(var i = 0; i < calcTrace.length; i++) {\n        var cdi = calcTrace[i];\n        var fOut = cdi.fOut;\n\n        if(fOut) {\n            var props = fOut.properties;\n            props.fc = sclFunc(cdi.z);\n            if(opacityFn) props.mo = opacityFn(cdi);\n            if(lineColorFn) props.mlc = lineColorFn(cdi);\n            if(lineWidthFn) props.mlw = lineWidthFn(cdi);\n            cdi.ct = props.ct;\n            cdi._polygons = geoUtils.feature2polygons(fOut);\n        }\n    }\n\n    var opacitySetting = opacityFn ?\n        {type: 'identity', property: 'mo'} :\n        marker.opacity;\n\n    Lib.extendFlat(fill.paint, {\n        'fill-color': {type: 'identity', property: 'fc'},\n        'fill-opacity': opacitySetting\n    });\n\n    Lib.extendFlat(line.paint, {\n        'line-color': lineColorFn ?\n            {type: 'identity', property: 'mlc'} :\n            markerLine.color,\n        'line-width': lineWidthFn ?\n            {type: 'identity', property: 'mlw'} :\n            markerLine.width,\n        'line-opacity': opacitySetting\n    });\n\n    fill.layout.visibility = 'visible';\n    line.layout.visibility = 'visible';\n\n    opts.geojson = {type: 'FeatureCollection', features: features};\n\n    convertOnSelect(calcTrace);\n\n    return opts;\n}\n\nfunction convertOnSelect(calcTrace) {\n    var trace = calcTrace[0].trace;\n    var opts = trace._opts;\n    var opacitySetting;\n\n    if(trace.selectedpoints) {\n        var fns = Drawing.makeSelectedPointStyleFns(trace);\n\n        for(var i = 0; i < calcTrace.length; i++) {\n            var cdi = calcTrace[i];\n            if(cdi.fOut) {\n                cdi.fOut.properties.mo2 = fns.selectedOpacityFn(cdi);\n            }\n        }\n\n        opacitySetting = {type: 'identity', property: 'mo2'};\n    } else {\n        opacitySetting = Lib.isArrayOrTypedArray(trace.marker.opacity) ?\n            {type: 'identity', property: 'mo'} :\n            trace.marker.opacity;\n    }\n\n    Lib.extendFlat(opts.fill.paint, {'fill-opacity': opacitySetting});\n    Lib.extendFlat(opts.line.paint, {'line-opacity': opacitySetting});\n\n    return opts;\n}\n\nmodule.exports = {\n    convert: convert,\n    convertOnSelect: convertOnSelect\n};\n"]},"metadata":{},"sourceType":"script"}