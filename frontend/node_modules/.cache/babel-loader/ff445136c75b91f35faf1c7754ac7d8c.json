{"ast":null,"code":"'use strict';\n\nvar isNumeric = require('fast-isnumeric');\n\nvar calcColorscale = require('../scatter/colorscale_calc');\n\nvar arraysToCalcdata = require('../scatter/arrays_to_calcdata');\n\nvar calcSelection = require('../scatter/calc_selection');\n\nvar calcMarkerSize = require('../scatter/calc').calcMarkerSize;\n\nvar dataArrays = ['a', 'b', 'c'];\nvar arraysToFill = {\n  a: ['b', 'c'],\n  b: ['a', 'c'],\n  c: ['a', 'b']\n};\n\nmodule.exports = function calc(gd, trace) {\n  var ternary = gd._fullLayout[trace.subplot];\n  var displaySum = ternary.sum;\n  var normSum = trace.sum || displaySum;\n  var arrays = {\n    a: trace.a,\n    b: trace.b,\n    c: trace.c\n  };\n  var i, j, dataArray, newArray, fillArray1, fillArray2; // fill in one missing component\n\n  for (i = 0; i < dataArrays.length; i++) {\n    dataArray = dataArrays[i];\n    if (arrays[dataArray]) continue;\n    fillArray1 = arrays[arraysToFill[dataArray][0]];\n    fillArray2 = arrays[arraysToFill[dataArray][1]];\n    newArray = new Array(fillArray1.length);\n\n    for (j = 0; j < fillArray1.length; j++) {\n      newArray[j] = normSum - fillArray1[j] - fillArray2[j];\n    }\n\n    arrays[dataArray] = newArray;\n  } // make the calcdata array\n\n\n  var serieslen = trace._length;\n  var cd = new Array(serieslen);\n  var a, b, c, norm, x, y;\n\n  for (i = 0; i < serieslen; i++) {\n    a = arrays.a[i];\n    b = arrays.b[i];\n    c = arrays.c[i];\n\n    if (isNumeric(a) && isNumeric(b) && isNumeric(c)) {\n      a = +a;\n      b = +b;\n      c = +c;\n      norm = displaySum / (a + b + c);\n\n      if (norm !== 1) {\n        a *= norm;\n        b *= norm;\n        c *= norm;\n      } // map a, b, c onto x and y where the full scale of y\n      // is [0, sum], and x is [-sum, sum]\n      // TODO: this makes `a` always the top, `b` the bottom left,\n      // and `c` the bottom right. Do we want options to rearrange\n      // these?\n\n\n      y = a;\n      x = c - b;\n      cd[i] = {\n        x: x,\n        y: y,\n        a: a,\n        b: b,\n        c: c\n      };\n    } else cd[i] = {\n      x: false,\n      y: false\n    };\n  }\n\n  calcMarkerSize(trace, serieslen);\n  calcColorscale(gd, trace);\n  arraysToCalcdata(cd, trace);\n  calcSelection(cd, trace);\n  return cd;\n};","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/plotly.js/src/traces/scatterternary/calc.js"],"names":["isNumeric","require","calcColorscale","arraysToCalcdata","calcSelection","calcMarkerSize","dataArrays","arraysToFill","a","b","c","module","exports","calc","gd","trace","ternary","_fullLayout","subplot","displaySum","sum","normSum","arrays","i","j","dataArray","newArray","fillArray1","fillArray2","length","Array","serieslen","_length","cd","norm","x","y"],"mappings":"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","sourcesContent":["'use strict';\n\nvar isNumeric = require('fast-isnumeric');\n\nvar calcColorscale = require('../scatter/colorscale_calc');\nvar arraysToCalcdata = require('../scatter/arrays_to_calcdata');\nvar calcSelection = require('../scatter/calc_selection');\nvar calcMarkerSize = require('../scatter/calc').calcMarkerSize;\n\nvar dataArrays = ['a', 'b', 'c'];\nvar arraysToFill = {a: ['b', 'c'], b: ['a', 'c'], c: ['a', 'b']};\n\nmodule.exports = function calc(gd, trace) {\n    var ternary = gd._fullLayout[trace.subplot];\n    var displaySum = ternary.sum;\n    var normSum = trace.sum || displaySum;\n    var arrays = {a: trace.a, b: trace.b, c: trace.c};\n\n    var i, j, dataArray, newArray, fillArray1, fillArray2;\n\n    // fill in one missing component\n    for(i = 0; i < dataArrays.length; i++) {\n        dataArray = dataArrays[i];\n        if(arrays[dataArray]) continue;\n\n        fillArray1 = arrays[arraysToFill[dataArray][0]];\n        fillArray2 = arrays[arraysToFill[dataArray][1]];\n        newArray = new Array(fillArray1.length);\n        for(j = 0; j < fillArray1.length; j++) {\n            newArray[j] = normSum - fillArray1[j] - fillArray2[j];\n        }\n        arrays[dataArray] = newArray;\n    }\n\n    // make the calcdata array\n    var serieslen = trace._length;\n    var cd = new Array(serieslen);\n    var a, b, c, norm, x, y;\n    for(i = 0; i < serieslen; i++) {\n        a = arrays.a[i];\n        b = arrays.b[i];\n        c = arrays.c[i];\n        if(isNumeric(a) && isNumeric(b) && isNumeric(c)) {\n            a = +a;\n            b = +b;\n            c = +c;\n            norm = displaySum / (a + b + c);\n            if(norm !== 1) {\n                a *= norm;\n                b *= norm;\n                c *= norm;\n            }\n            // map a, b, c onto x and y where the full scale of y\n            // is [0, sum], and x is [-sum, sum]\n            // TODO: this makes `a` always the top, `b` the bottom left,\n            // and `c` the bottom right. Do we want options to rearrange\n            // these?\n            y = a;\n            x = c - b;\n            cd[i] = {x: x, y: y, a: a, b: b, c: c};\n        } else cd[i] = {x: false, y: false};\n    }\n\n    calcMarkerSize(trace, serieslen);\n    calcColorscale(gd, trace);\n    arraysToCalcdata(cd, trace);\n    calcSelection(cd, trace);\n\n    return cd;\n};\n"]},"metadata":{},"sourceType":"script"}