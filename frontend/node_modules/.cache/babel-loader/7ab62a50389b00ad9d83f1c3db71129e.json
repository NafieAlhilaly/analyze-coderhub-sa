{"ast":null,"code":"'use strict';\n\nmodule.exports = trimLeaves;\n\nvar e2a = require('edges-to-adjacency-list');\n\nfunction trimLeaves(edges, positions) {\n  var adj = e2a(edges, positions.length);\n  var live = new Array(positions.length);\n  var nbhd = new Array(positions.length);\n  var dead = [];\n\n  for (var i = 0; i < positions.length; ++i) {\n    var count = adj[i].length;\n    nbhd[i] = count;\n    live[i] = true;\n\n    if (count <= 1) {\n      dead.push(i);\n    }\n  }\n\n  while (dead.length > 0) {\n    var v = dead.pop();\n    live[v] = false;\n    var n = adj[v];\n\n    for (var i = 0; i < n.length; ++i) {\n      var u = n[i];\n\n      if (--nbhd[u] === 0) {\n        dead.push(u);\n      }\n    }\n  }\n\n  var newIndex = new Array(positions.length);\n  var npositions = [];\n\n  for (var i = 0; i < positions.length; ++i) {\n    if (live[i]) {\n      var v = npositions.length;\n      newIndex[i] = v;\n      npositions.push(positions[i]);\n    } else {\n      newIndex[i] = -1;\n    }\n  }\n\n  var nedges = [];\n\n  for (var i = 0; i < edges.length; ++i) {\n    var e = edges[i];\n\n    if (live[e[0]] && live[e[1]]) {\n      nedges.push([newIndex[e[0]], newIndex[e[1]]]);\n    }\n  }\n\n  return [nedges, npositions];\n}","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/planar-graph-to-polyline/lib/trim-leaves.js"],"names":["module","exports","trimLeaves","e2a","require","edges","positions","adj","length","live","Array","nbhd","dead","i","count","push","v","pop","n","u","newIndex","npositions","nedges","e"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,UAAjB;;AAEA,IAAIC,GAAG,GAAGC,OAAO,CAAC,yBAAD,CAAjB;;AAEA,SAASF,UAAT,CAAoBG,KAApB,EAA2BC,SAA3B,EAAsC;AACpC,MAAIC,GAAG,GAAGJ,GAAG,CAACE,KAAD,EAAQC,SAAS,CAACE,MAAlB,CAAb;AACA,MAAIC,IAAI,GAAG,IAAIC,KAAJ,CAAUJ,SAAS,CAACE,MAApB,CAAX;AACA,MAAIG,IAAI,GAAG,IAAID,KAAJ,CAAUJ,SAAS,CAACE,MAApB,CAAX;AAEA,MAAII,IAAI,GAAG,EAAX;;AACA,OAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACP,SAAS,CAACE,MAAzB,EAAiC,EAAEK,CAAnC,EAAsC;AACpC,QAAIC,KAAK,GAAGP,GAAG,CAACM,CAAD,CAAH,CAAOL,MAAnB;AACAG,IAAAA,IAAI,CAACE,CAAD,CAAJ,GAAUC,KAAV;AACAL,IAAAA,IAAI,CAACI,CAAD,CAAJ,GAAU,IAAV;;AACA,QAAGC,KAAK,IAAI,CAAZ,EAAe;AACbF,MAAAA,IAAI,CAACG,IAAL,CAAUF,CAAV;AACD;AACF;;AAED,SAAMD,IAAI,CAACJ,MAAL,GAAc,CAApB,EAAuB;AACrB,QAAIQ,CAAC,GAAGJ,IAAI,CAACK,GAAL,EAAR;AACAR,IAAAA,IAAI,CAACO,CAAD,CAAJ,GAAU,KAAV;AACA,QAAIE,CAAC,GAAGX,GAAG,CAACS,CAAD,CAAX;;AACA,SAAI,IAAIH,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACK,CAAC,CAACV,MAAjB,EAAyB,EAAEK,CAA3B,EAA8B;AAC5B,UAAIM,CAAC,GAAGD,CAAC,CAACL,CAAD,CAAT;;AACA,UAAG,EAAEF,IAAI,CAACQ,CAAD,CAAN,KAAc,CAAjB,EAAoB;AAClBP,QAAAA,IAAI,CAACG,IAAL,CAAUI,CAAV;AACD;AACF;AACF;;AAED,MAAIC,QAAQ,GAAG,IAAIV,KAAJ,CAAUJ,SAAS,CAACE,MAApB,CAAf;AACA,MAAIa,UAAU,GAAG,EAAjB;;AACA,OAAI,IAAIR,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACP,SAAS,CAACE,MAAzB,EAAiC,EAAEK,CAAnC,EAAsC;AACpC,QAAGJ,IAAI,CAACI,CAAD,CAAP,EAAY;AACV,UAAIG,CAAC,GAAGK,UAAU,CAACb,MAAnB;AACAY,MAAAA,QAAQ,CAACP,CAAD,CAAR,GAAcG,CAAd;AACAK,MAAAA,UAAU,CAACN,IAAX,CAAgBT,SAAS,CAACO,CAAD,CAAzB;AACD,KAJD,MAIO;AACLO,MAAAA,QAAQ,CAACP,CAAD,CAAR,GAAc,CAAC,CAAf;AACD;AACF;;AAED,MAAIS,MAAM,GAAG,EAAb;;AACA,OAAI,IAAIT,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACR,KAAK,CAACG,MAArB,EAA6B,EAAEK,CAA/B,EAAkC;AAChC,QAAIU,CAAC,GAAGlB,KAAK,CAACQ,CAAD,CAAb;;AACA,QAAGJ,IAAI,CAACc,CAAC,CAAC,CAAD,CAAF,CAAJ,IAAcd,IAAI,CAACc,CAAC,CAAC,CAAD,CAAF,CAArB,EAA6B;AAC3BD,MAAAA,MAAM,CAACP,IAAP,CAAY,CAAEK,QAAQ,CAACG,CAAC,CAAC,CAAD,CAAF,CAAV,EAAkBH,QAAQ,CAACG,CAAC,CAAC,CAAD,CAAF,CAA1B,CAAZ;AACD;AACF;;AAED,SAAO,CAAED,MAAF,EAAUD,UAAV,CAAP;AACD","sourcesContent":["'use strict'\n\nmodule.exports = trimLeaves\n\nvar e2a = require('edges-to-adjacency-list')\n\nfunction trimLeaves(edges, positions) {\n  var adj = e2a(edges, positions.length)\n  var live = new Array(positions.length)\n  var nbhd = new Array(positions.length)\n\n  var dead = []\n  for(var i=0; i<positions.length; ++i) {\n    var count = adj[i].length\n    nbhd[i] = count\n    live[i] = true\n    if(count <= 1) {\n      dead.push(i)\n    }\n  }\n\n  while(dead.length > 0) {\n    var v = dead.pop()\n    live[v] = false\n    var n = adj[v]\n    for(var i=0; i<n.length; ++i) {\n      var u = n[i]\n      if(--nbhd[u] === 0) {\n        dead.push(u)\n      }\n    }\n  }\n\n  var newIndex = new Array(positions.length)\n  var npositions = []\n  for(var i=0; i<positions.length; ++i) {\n    if(live[i]) {\n      var v = npositions.length\n      newIndex[i] = v\n      npositions.push(positions[i])\n    } else {\n      newIndex[i] = -1\n    }\n  }\n\n  var nedges = []\n  for(var i=0; i<edges.length; ++i) {\n    var e = edges[i]\n    if(live[e[0]] && live[e[1]]) {\n      nedges.push([ newIndex[e[0]], newIndex[e[1]] ])\n    }\n  }\n  \n  return [ nedges, npositions ]\n}"]},"metadata":{},"sourceType":"script"}