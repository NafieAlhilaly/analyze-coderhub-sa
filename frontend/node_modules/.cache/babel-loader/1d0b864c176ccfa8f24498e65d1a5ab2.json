{"ast":null,"code":"'use strict';\n\nmodule.exports = {\n  // some constants to help with marching squares algorithm\n  // where does the path start for each index?\n  BOTTOMSTART: [1, 9, 13, 104, 713],\n  TOPSTART: [4, 6, 7, 104, 713],\n  LEFTSTART: [8, 12, 14, 208, 1114],\n  RIGHTSTART: [2, 3, 11, 208, 1114],\n  // which way [dx,dy] do we leave a given index?\n  // saddles are already disambiguated\n  NEWDELTA: [null, [-1, 0], [0, -1], [-1, 0], [1, 0], null, [0, -1], [-1, 0], [0, 1], [0, 1], null, [0, 1], [1, 0], [1, 0], [0, -1]],\n  // for each saddle, the first index here is used\n  // for dx||dy<0, the second for dx||dy>0\n  CHOOSESADDLE: {\n    104: [4, 1],\n    208: [2, 8],\n    713: [7, 13],\n    1114: [11, 14]\n  },\n  // after one index has been used for a saddle, which do we\n  // substitute to be used up later?\n  SADDLEREMAINDER: {\n    1: 4,\n    2: 8,\n    4: 1,\n    7: 13,\n    8: 2,\n    11: 14,\n    13: 7,\n    14: 11\n  },\n  // length of a contour, as a multiple of the plot area diagonal, per label\n  LABELDISTANCE: 2,\n  // number of contour levels after which we start increasing the number of\n  // labels we draw. Many contours means they will generally be close\n  // together, so it will be harder to follow a long way to find a label\n  LABELINCREASE: 10,\n  // minimum length of a contour line, as a multiple of the label length,\n  // at which we draw *any* labels\n  LABELMIN: 3,\n  // max number of labels to draw on a single contour path, no matter how long\n  LABELMAX: 10,\n  // constants for the label position cost function\n  LABELOPTIMIZER: {\n    // weight given to edge proximity\n    EDGECOST: 1,\n    // weight given to the angle off horizontal\n    ANGLECOST: 1,\n    // weight given to distance from already-placed labels\n    NEIGHBORCOST: 5,\n    // cost multiplier for labels on the same level\n    SAMELEVELFACTOR: 10,\n    // minimum distance (as a multiple of the label length)\n    // for labels on the same level\n    SAMELEVELDISTANCE: 5,\n    // maximum cost before we won't even place the label\n    MAXCOST: 100,\n    // number of evenly spaced points to look at in the first\n    // iteration of the search\n    INITIALSEARCHPOINTS: 10,\n    // number of binary search iterations after the initial wide search\n    ITERATIONS: 5\n  }\n};","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/plotly.js/src/traces/contour/constants.js"],"names":["module","exports","BOTTOMSTART","TOPSTART","LEFTSTART","RIGHTSTART","NEWDELTA","CHOOSESADDLE","SADDLEREMAINDER","LABELDISTANCE","LABELINCREASE","LABELMIN","LABELMAX","LABELOPTIMIZER","EDGECOST","ANGLECOST","NEIGHBORCOST","SAMELEVELFACTOR","SAMELEVELDISTANCE","MAXCOST","INITIALSEARCHPOINTS","ITERATIONS"],"mappings":"AAAA;;AACAA,MAAM,CAACC,OAAP,GAAiB;AACb;AACA;AACAC,EAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,EAAP,EAAW,GAAX,EAAgB,GAAhB,CAHA;AAIbC,EAAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,GAAV,EAAe,GAAf,CAJG;AAKbC,EAAAA,SAAS,EAAE,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,EAAY,GAAZ,EAAiB,IAAjB,CALE;AAMbC,EAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,EAAP,EAAW,GAAX,EAAgB,IAAhB,CANC;AAQb;AACA;AACAC,EAAAA,QAAQ,EAAE,CACN,IADM,EACA,CAAC,CAAC,CAAF,EAAK,CAAL,CADA,EACS,CAAC,CAAD,EAAI,CAAC,CAAL,CADT,EACkB,CAAC,CAAC,CAAF,EAAK,CAAL,CADlB,EAEN,CAAC,CAAD,EAAI,CAAJ,CAFM,EAEE,IAFF,EAEQ,CAAC,CAAD,EAAI,CAAC,CAAL,CAFR,EAEiB,CAAC,CAAC,CAAF,EAAK,CAAL,CAFjB,EAGN,CAAC,CAAD,EAAI,CAAJ,CAHM,EAGE,CAAC,CAAD,EAAI,CAAJ,CAHF,EAGU,IAHV,EAGgB,CAAC,CAAD,EAAI,CAAJ,CAHhB,EAIN,CAAC,CAAD,EAAI,CAAJ,CAJM,EAIE,CAAC,CAAD,EAAI,CAAJ,CAJF,EAIU,CAAC,CAAD,EAAI,CAAC,CAAL,CAJV,CAVG;AAiBb;AACA;AACAC,EAAAA,YAAY,EAAE;AACV,SAAK,CAAC,CAAD,EAAI,CAAJ,CADK;AAEV,SAAK,CAAC,CAAD,EAAI,CAAJ,CAFK;AAGV,SAAK,CAAC,CAAD,EAAI,EAAJ,CAHK;AAIV,UAAM,CAAC,EAAD,EAAK,EAAL;AAJI,GAnBD;AA0Bb;AACA;AACAC,EAAAA,eAAe,EAAE;AAAC,OAAG,CAAJ;AAAO,OAAG,CAAV;AAAa,OAAG,CAAhB;AAAmB,OAAG,EAAtB;AAA0B,OAAG,CAA7B;AAAgC,QAAI,EAApC;AAAwC,QAAI,CAA5C;AAA+C,QAAI;AAAnD,GA5BJ;AA8Bb;AACAC,EAAAA,aAAa,EAAE,CA/BF;AAiCb;AACA;AACA;AACAC,EAAAA,aAAa,EAAE,EApCF;AAsCb;AACA;AACAC,EAAAA,QAAQ,EAAE,CAxCG;AA0Cb;AACAC,EAAAA,QAAQ,EAAE,EA3CG;AA6Cb;AACAC,EAAAA,cAAc,EAAE;AACZ;AACAC,IAAAA,QAAQ,EAAE,CAFE;AAGZ;AACAC,IAAAA,SAAS,EAAE,CAJC;AAKZ;AACAC,IAAAA,YAAY,EAAE,CANF;AAOZ;AACAC,IAAAA,eAAe,EAAE,EARL;AASZ;AACA;AACAC,IAAAA,iBAAiB,EAAE,CAXP;AAYZ;AACAC,IAAAA,OAAO,EAAE,GAbG;AAcZ;AACA;AACAC,IAAAA,mBAAmB,EAAE,EAhBT;AAiBZ;AACAC,IAAAA,UAAU,EAAE;AAlBA;AA9CH,CAAjB","sourcesContent":["'use strict';\nmodule.exports = {\n    // some constants to help with marching squares algorithm\n    // where does the path start for each index?\n    BOTTOMSTART: [1, 9, 13, 104, 713],\n    TOPSTART: [4, 6, 7, 104, 713],\n    LEFTSTART: [8, 12, 14, 208, 1114],\n    RIGHTSTART: [2, 3, 11, 208, 1114],\n\n    // which way [dx,dy] do we leave a given index?\n    // saddles are already disambiguated\n    NEWDELTA: [\n        null, [-1, 0], [0, -1], [-1, 0],\n        [1, 0], null, [0, -1], [-1, 0],\n        [0, 1], [0, 1], null, [0, 1],\n        [1, 0], [1, 0], [0, -1]\n    ],\n\n    // for each saddle, the first index here is used\n    // for dx||dy<0, the second for dx||dy>0\n    CHOOSESADDLE: {\n        104: [4, 1],\n        208: [2, 8],\n        713: [7, 13],\n        1114: [11, 14]\n    },\n\n    // after one index has been used for a saddle, which do we\n    // substitute to be used up later?\n    SADDLEREMAINDER: {1: 4, 2: 8, 4: 1, 7: 13, 8: 2, 11: 14, 13: 7, 14: 11},\n\n    // length of a contour, as a multiple of the plot area diagonal, per label\n    LABELDISTANCE: 2,\n\n    // number of contour levels after which we start increasing the number of\n    // labels we draw. Many contours means they will generally be close\n    // together, so it will be harder to follow a long way to find a label\n    LABELINCREASE: 10,\n\n    // minimum length of a contour line, as a multiple of the label length,\n    // at which we draw *any* labels\n    LABELMIN: 3,\n\n    // max number of labels to draw on a single contour path, no matter how long\n    LABELMAX: 10,\n\n    // constants for the label position cost function\n    LABELOPTIMIZER: {\n        // weight given to edge proximity\n        EDGECOST: 1,\n        // weight given to the angle off horizontal\n        ANGLECOST: 1,\n        // weight given to distance from already-placed labels\n        NEIGHBORCOST: 5,\n        // cost multiplier for labels on the same level\n        SAMELEVELFACTOR: 10,\n        // minimum distance (as a multiple of the label length)\n        // for labels on the same level\n        SAMELEVELDISTANCE: 5,\n        // maximum cost before we won't even place the label\n        MAXCOST: 100,\n        // number of evenly spaced points to look at in the first\n        // iteration of the search\n        INITIALSEARCHPOINTS: 10,\n        // number of binary search iterations after the initial wide search\n        ITERATIONS: 5\n    }\n};\n"]},"metadata":{},"sourceType":"script"}