{"ast":null,"code":"'use strict';\n\nvar BADNUM = require('../constants/numerical').BADNUM;\n/**\n * Convert calcTrace to GeoJSON 'MultiLineString' coordinate arrays\n *\n * @param {object} calcTrace\n *  gd.calcdata item.\n *  Note that calcTrace[i].lonlat is assumed to be defined\n *\n * @return {array}\n *  return line coords array (or array of arrays)\n *\n */\n\n\nexports.calcTraceToLineCoords = function (calcTrace) {\n  var trace = calcTrace[0].trace;\n  var connectgaps = trace.connectgaps;\n  var coords = [];\n  var lineString = [];\n\n  for (var i = 0; i < calcTrace.length; i++) {\n    var calcPt = calcTrace[i];\n    var lonlat = calcPt.lonlat;\n\n    if (lonlat[0] !== BADNUM) {\n      lineString.push(lonlat);\n    } else if (!connectgaps && lineString.length > 0) {\n      coords.push(lineString);\n      lineString = [];\n    }\n  }\n\n  if (lineString.length > 0) {\n    coords.push(lineString);\n  }\n\n  return coords;\n};\n/**\n * Make line ('LineString' or 'MultiLineString') GeoJSON\n *\n * @param {array} coords\n *  results form calcTraceToLineCoords\n * @return {object} out\n *  GeoJSON object\n *\n */\n\n\nexports.makeLine = function (coords) {\n  if (coords.length === 1) {\n    return {\n      type: 'LineString',\n      coordinates: coords[0]\n    };\n  } else {\n    return {\n      type: 'MultiLineString',\n      coordinates: coords\n    };\n  }\n};\n/**\n * Make polygon ('Polygon' or 'MultiPolygon') GeoJSON\n *\n * @param {array} coords\n *  results form calcTraceToLineCoords\n * @return {object} out\n *  GeoJSON object\n */\n\n\nexports.makePolygon = function (coords) {\n  if (coords.length === 1) {\n    return {\n      type: 'Polygon',\n      coordinates: coords\n    };\n  } else {\n    var _coords = new Array(coords.length);\n\n    for (var i = 0; i < coords.length; i++) {\n      _coords[i] = [coords[i]];\n    }\n\n    return {\n      type: 'MultiPolygon',\n      coordinates: _coords\n    };\n  }\n};\n/**\n * Make blank GeoJSON\n *\n * @return {object}\n *  Blank GeoJSON object\n *\n */\n\n\nexports.makeBlank = function () {\n  return {\n    type: 'Point',\n    coordinates: []\n  };\n};","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/plotly.js/src/lib/geojson_utils.js"],"names":["BADNUM","require","exports","calcTraceToLineCoords","calcTrace","trace","connectgaps","coords","lineString","i","length","calcPt","lonlat","push","makeLine","type","coordinates","makePolygon","_coords","Array","makeBlank"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,wBAAD,CAAP,CAAkCD,MAA/C;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAE,OAAO,CAACC,qBAAR,GAAgC,UAASC,SAAT,EAAoB;AAChD,MAAIC,KAAK,GAAGD,SAAS,CAAC,CAAD,CAAT,CAAaC,KAAzB;AACA,MAAIC,WAAW,GAAGD,KAAK,CAACC,WAAxB;AAEA,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,UAAU,GAAG,EAAjB;;AAEA,OAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGL,SAAS,CAACM,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACtC,QAAIE,MAAM,GAAGP,SAAS,CAACK,CAAD,CAAtB;AACA,QAAIG,MAAM,GAAGD,MAAM,CAACC,MAApB;;AAEA,QAAGA,MAAM,CAAC,CAAD,CAAN,KAAcZ,MAAjB,EAAyB;AACrBQ,MAAAA,UAAU,CAACK,IAAX,CAAgBD,MAAhB;AACH,KAFD,MAEO,IAAG,CAACN,WAAD,IAAgBE,UAAU,CAACE,MAAX,GAAoB,CAAvC,EAA0C;AAC7CH,MAAAA,MAAM,CAACM,IAAP,CAAYL,UAAZ;AACAA,MAAAA,UAAU,GAAG,EAAb;AACH;AACJ;;AAED,MAAGA,UAAU,CAACE,MAAX,GAAoB,CAAvB,EAA0B;AACtBH,IAAAA,MAAM,CAACM,IAAP,CAAYL,UAAZ;AACH;;AAED,SAAOD,MAAP;AACH,CAxBD;AA2BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAL,OAAO,CAACY,QAAR,GAAmB,UAASP,MAAT,EAAiB;AAChC,MAAGA,MAAM,CAACG,MAAP,KAAkB,CAArB,EAAwB;AACpB,WAAO;AACHK,MAAAA,IAAI,EAAE,YADH;AAEHC,MAAAA,WAAW,EAAET,MAAM,CAAC,CAAD;AAFhB,KAAP;AAIH,GALD,MAKO;AACH,WAAO;AACHQ,MAAAA,IAAI,EAAE,iBADH;AAEHC,MAAAA,WAAW,EAAET;AAFV,KAAP;AAIH;AACJ,CAZD;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAL,OAAO,CAACe,WAAR,GAAsB,UAASV,MAAT,EAAiB;AACnC,MAAGA,MAAM,CAACG,MAAP,KAAkB,CAArB,EAAwB;AACpB,WAAO;AACHK,MAAAA,IAAI,EAAE,SADH;AAEHC,MAAAA,WAAW,EAAET;AAFV,KAAP;AAIH,GALD,MAKO;AACH,QAAIW,OAAO,GAAG,IAAIC,KAAJ,CAAUZ,MAAM,CAACG,MAAjB,CAAd;;AAEA,SAAI,IAAID,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGF,MAAM,CAACG,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnCS,MAAAA,OAAO,CAACT,CAAD,CAAP,GAAa,CAACF,MAAM,CAACE,CAAD,CAAP,CAAb;AACH;;AAED,WAAO;AACHM,MAAAA,IAAI,EAAE,cADH;AAEHC,MAAAA,WAAW,EAAEE;AAFV,KAAP;AAIH;AACJ,CAlBD;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAhB,OAAO,CAACkB,SAAR,GAAoB,YAAW;AAC3B,SAAO;AACHL,IAAAA,IAAI,EAAE,OADH;AAEHC,IAAAA,WAAW,EAAE;AAFV,GAAP;AAIH,CALD","sourcesContent":["'use strict';\n\nvar BADNUM = require('../constants/numerical').BADNUM;\n\n/**\n * Convert calcTrace to GeoJSON 'MultiLineString' coordinate arrays\n *\n * @param {object} calcTrace\n *  gd.calcdata item.\n *  Note that calcTrace[i].lonlat is assumed to be defined\n *\n * @return {array}\n *  return line coords array (or array of arrays)\n *\n */\nexports.calcTraceToLineCoords = function(calcTrace) {\n    var trace = calcTrace[0].trace;\n    var connectgaps = trace.connectgaps;\n\n    var coords = [];\n    var lineString = [];\n\n    for(var i = 0; i < calcTrace.length; i++) {\n        var calcPt = calcTrace[i];\n        var lonlat = calcPt.lonlat;\n\n        if(lonlat[0] !== BADNUM) {\n            lineString.push(lonlat);\n        } else if(!connectgaps && lineString.length > 0) {\n            coords.push(lineString);\n            lineString = [];\n        }\n    }\n\n    if(lineString.length > 0) {\n        coords.push(lineString);\n    }\n\n    return coords;\n};\n\n\n/**\n * Make line ('LineString' or 'MultiLineString') GeoJSON\n *\n * @param {array} coords\n *  results form calcTraceToLineCoords\n * @return {object} out\n *  GeoJSON object\n *\n */\nexports.makeLine = function(coords) {\n    if(coords.length === 1) {\n        return {\n            type: 'LineString',\n            coordinates: coords[0]\n        };\n    } else {\n        return {\n            type: 'MultiLineString',\n            coordinates: coords\n        };\n    }\n};\n\n/**\n * Make polygon ('Polygon' or 'MultiPolygon') GeoJSON\n *\n * @param {array} coords\n *  results form calcTraceToLineCoords\n * @return {object} out\n *  GeoJSON object\n */\nexports.makePolygon = function(coords) {\n    if(coords.length === 1) {\n        return {\n            type: 'Polygon',\n            coordinates: coords\n        };\n    } else {\n        var _coords = new Array(coords.length);\n\n        for(var i = 0; i < coords.length; i++) {\n            _coords[i] = [coords[i]];\n        }\n\n        return {\n            type: 'MultiPolygon',\n            coordinates: _coords\n        };\n    }\n};\n\n/**\n * Make blank GeoJSON\n *\n * @return {object}\n *  Blank GeoJSON object\n *\n */\nexports.makeBlank = function() {\n    return {\n        type: 'Point',\n        coordinates: []\n    };\n};\n"]},"metadata":{},"sourceType":"script"}