{"ast":null,"code":"'use strict';\n\nvar Axes = require('../../plots/cartesian/axes');\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nmodule.exports = function calcGridlines(trace, axisLetter, crossAxisLetter) {\n  var i, j, j0;\n  var eps, bounds, n1, n2, n, value, v;\n  var j1, v0, v1, d;\n  var data = trace['_' + axisLetter];\n  var axis = trace[axisLetter + 'axis'];\n  var gridlines = axis._gridlines = [];\n  var minorgridlines = axis._minorgridlines = [];\n  var boundarylines = axis._boundarylines = [];\n  var crossData = trace['_' + crossAxisLetter];\n  var crossAxis = trace[crossAxisLetter + 'axis'];\n\n  if (axis.tickmode === 'array') {\n    axis.tickvals = data.slice();\n  }\n\n  var xcp = trace._xctrl;\n  var ycp = trace._yctrl;\n  var nea = xcp[0].length;\n  var neb = xcp.length;\n  var na = trace._a.length;\n  var nb = trace._b.length;\n  Axes.prepTicks(axis); // don't leave tickvals in axis looking like an attribute\n\n  if (axis.tickmode === 'array') delete axis.tickvals; // The default is an empty array that will cause the join to remove the gridline if\n  // it's just disappeared:\n  // axis._startline = axis._endline = [];\n  // If the cross axis uses bicubic interpolation, then the grid\n  // lines fall once every three expanded grid row/cols:\n\n  var stride = axis.smoothing ? 3 : 1;\n\n  function constructValueGridline(value) {\n    var i, j, j0, tj, pxy, i0, ti, xy, dxydi0, dxydi1, dxydj0, dxydj1;\n    var xpoints = [];\n    var ypoints = [];\n    var ret = {}; // Search for the fractional grid index giving this line:\n\n    if (axisLetter === 'b') {\n      // For the position we use just the i-j coordinates:\n      j = trace.b2j(value); // The derivatives for catmull-rom splines are discontinuous across cell\n      // boundaries though, so we need to provide both the cell and the position\n      // within the cell separately:\n\n      j0 = Math.floor(Math.max(0, Math.min(nb - 2, j)));\n      tj = j - j0;\n      ret.length = nb;\n      ret.crossLength = na;\n\n      ret.xy = function (i) {\n        return trace.evalxy([], i, j);\n      };\n\n      ret.dxy = function (i0, ti) {\n        return trace.dxydi([], i0, j0, ti, tj);\n      };\n\n      for (i = 0; i < na; i++) {\n        i0 = Math.min(na - 2, i);\n        ti = i - i0;\n        xy = trace.evalxy([], i, j);\n\n        if (crossAxis.smoothing && i > 0) {\n          // First control point:\n          dxydi0 = trace.dxydi([], i - 1, j0, 0, tj);\n          xpoints.push(pxy[0] + dxydi0[0] / 3);\n          ypoints.push(pxy[1] + dxydi0[1] / 3); // Second control point:\n\n          dxydi1 = trace.dxydi([], i - 1, j0, 1, tj);\n          xpoints.push(xy[0] - dxydi1[0] / 3);\n          ypoints.push(xy[1] - dxydi1[1] / 3);\n        }\n\n        xpoints.push(xy[0]);\n        ypoints.push(xy[1]);\n        pxy = xy;\n      }\n    } else {\n      i = trace.a2i(value);\n      i0 = Math.floor(Math.max(0, Math.min(na - 2, i)));\n      ti = i - i0;\n      ret.length = na;\n      ret.crossLength = nb;\n\n      ret.xy = function (j) {\n        return trace.evalxy([], i, j);\n      };\n\n      ret.dxy = function (j0, tj) {\n        return trace.dxydj([], i0, j0, ti, tj);\n      };\n\n      for (j = 0; j < nb; j++) {\n        j0 = Math.min(nb - 2, j);\n        tj = j - j0;\n        xy = trace.evalxy([], i, j);\n\n        if (crossAxis.smoothing && j > 0) {\n          // First control point:\n          dxydj0 = trace.dxydj([], i0, j - 1, ti, 0);\n          xpoints.push(pxy[0] + dxydj0[0] / 3);\n          ypoints.push(pxy[1] + dxydj0[1] / 3); // Second control point:\n\n          dxydj1 = trace.dxydj([], i0, j - 1, ti, 1);\n          xpoints.push(xy[0] - dxydj1[0] / 3);\n          ypoints.push(xy[1] - dxydj1[1] / 3);\n        }\n\n        xpoints.push(xy[0]);\n        ypoints.push(xy[1]);\n        pxy = xy;\n      }\n    }\n\n    ret.axisLetter = axisLetter;\n    ret.axis = axis;\n    ret.crossAxis = crossAxis;\n    ret.value = value;\n    ret.constvar = crossAxisLetter;\n    ret.index = n;\n    ret.x = xpoints;\n    ret.y = ypoints;\n    ret.smoothing = crossAxis.smoothing;\n    return ret;\n  }\n\n  function constructArrayGridline(idx) {\n    var j, i0, j0, ti, tj;\n    var xpoints = [];\n    var ypoints = [];\n    var ret = {};\n    ret.length = data.length;\n    ret.crossLength = crossData.length;\n\n    if (axisLetter === 'b') {\n      j0 = Math.max(0, Math.min(nb - 2, idx));\n      tj = Math.min(1, Math.max(0, idx - j0));\n\n      ret.xy = function (i) {\n        return trace.evalxy([], i, idx);\n      };\n\n      ret.dxy = function (i0, ti) {\n        return trace.dxydi([], i0, j0, ti, tj);\n      }; // In the tickmode: array case, this operation is a simple\n      // transfer of data:\n\n\n      for (j = 0; j < nea; j++) {\n        xpoints[j] = xcp[idx * stride][j];\n        ypoints[j] = ycp[idx * stride][j];\n      }\n    } else {\n      i0 = Math.max(0, Math.min(na - 2, idx));\n      ti = Math.min(1, Math.max(0, idx - i0));\n\n      ret.xy = function (j) {\n        return trace.evalxy([], idx, j);\n      };\n\n      ret.dxy = function (j0, tj) {\n        return trace.dxydj([], i0, j0, ti, tj);\n      }; // In the tickmode: array case, this operation is a simple\n      // transfer of data:\n\n\n      for (j = 0; j < neb; j++) {\n        xpoints[j] = xcp[j][idx * stride];\n        ypoints[j] = ycp[j][idx * stride];\n      }\n    }\n\n    ret.axisLetter = axisLetter;\n    ret.axis = axis;\n    ret.crossAxis = crossAxis;\n    ret.value = data[idx];\n    ret.constvar = crossAxisLetter;\n    ret.index = idx;\n    ret.x = xpoints;\n    ret.y = ypoints;\n    ret.smoothing = crossAxis.smoothing;\n    return ret;\n  }\n\n  if (axis.tickmode === 'array') {\n    // var j0 = axis.startline ? 1 : 0;\n    // var j1 = data.length - (axis.endline ? 1 : 0);\n    eps = 5e-15;\n    bounds = [Math.floor((data.length - 1 - axis.arraytick0) / axis.arraydtick * (1 + eps)), Math.ceil(-axis.arraytick0 / axis.arraydtick / (1 + eps))].sort(function (a, b) {\n      return a - b;\n    }); // Unpack sorted values so we can be sure to avoid infinite loops if something\n    // is backwards:\n\n    n1 = bounds[0] - 1;\n    n2 = bounds[1] + 1; // If the axes fall along array lines, then this is a much simpler process since\n    // we already have all the control points we need\n\n    for (n = n1; n < n2; n++) {\n      j = axis.arraytick0 + axis.arraydtick * n;\n      if (j < 0 || j > data.length - 1) continue;\n      gridlines.push(extendFlat(constructArrayGridline(j), {\n        color: axis.gridcolor,\n        width: axis.gridwidth\n      }));\n    }\n\n    for (n = n1; n < n2; n++) {\n      j0 = axis.arraytick0 + axis.arraydtick * n;\n      j1 = Math.min(j0 + axis.arraydtick, data.length - 1); // TODO: fix the bounds computation so we don't have to do a large range and then throw\n      // out unneeded numbers\n\n      if (j0 < 0 || j0 > data.length - 1) continue;\n      if (j1 < 0 || j1 > data.length - 1) continue;\n      v0 = data[j0];\n      v1 = data[j1];\n\n      for (i = 0; i < axis.minorgridcount; i++) {\n        d = j1 - j0; // TODO: fix the bounds computation so we don't have to do a large range and then throw\n        // out unneeded numbers\n\n        if (d <= 0) continue; // XXX: This calculation isn't quite right. Off by one somewhere?\n\n        v = v0 + (v1 - v0) * (i + 1) / (axis.minorgridcount + 1) * (axis.arraydtick / d); // TODO: fix the bounds computation so we don't have to do a large range and then throw\n        // out unneeded numbers\n\n        if (v < data[0] || v > data[data.length - 1]) continue;\n        minorgridlines.push(extendFlat(constructValueGridline(v), {\n          color: axis.minorgridcolor,\n          width: axis.minorgridwidth\n        }));\n      }\n    }\n\n    if (axis.startline) {\n      boundarylines.push(extendFlat(constructArrayGridline(0), {\n        color: axis.startlinecolor,\n        width: axis.startlinewidth\n      }));\n    }\n\n    if (axis.endline) {\n      boundarylines.push(extendFlat(constructArrayGridline(data.length - 1), {\n        color: axis.endlinecolor,\n        width: axis.endlinewidth\n      }));\n    }\n  } else {\n    // If the lines do not fall along the axes, then we have to interpolate\n    // the contro points and so some math to figure out where the lines are\n    // in the first place.\n    // Compute the integer boudns of tick0 + n * dtick that fall within the range\n    // (roughly speaking):\n    // Give this a nice generous epsilon. We use at as * (1 + eps) in order to make\n    // inequalities a little tolerant in a more or less correct manner:\n    eps = 5e-15;\n    bounds = [Math.floor((data[data.length - 1] - axis.tick0) / axis.dtick * (1 + eps)), Math.ceil((data[0] - axis.tick0) / axis.dtick / (1 + eps))].sort(function (a, b) {\n      return a - b;\n    }); // Unpack sorted values so we can be sure to avoid infinite loops if something\n    // is backwards:\n\n    n1 = bounds[0];\n    n2 = bounds[1];\n\n    for (n = n1; n <= n2; n++) {\n      value = axis.tick0 + axis.dtick * n;\n      gridlines.push(extendFlat(constructValueGridline(value), {\n        color: axis.gridcolor,\n        width: axis.gridwidth\n      }));\n    }\n\n    for (n = n1 - 1; n < n2 + 1; n++) {\n      value = axis.tick0 + axis.dtick * n;\n\n      for (i = 0; i < axis.minorgridcount; i++) {\n        v = value + axis.dtick * (i + 1) / (axis.minorgridcount + 1);\n        if (v < data[0] || v > data[data.length - 1]) continue;\n        minorgridlines.push(extendFlat(constructValueGridline(v), {\n          color: axis.minorgridcolor,\n          width: axis.minorgridwidth\n        }));\n      }\n    }\n\n    if (axis.startline) {\n      boundarylines.push(extendFlat(constructValueGridline(data[0]), {\n        color: axis.startlinecolor,\n        width: axis.startlinewidth\n      }));\n    }\n\n    if (axis.endline) {\n      boundarylines.push(extendFlat(constructValueGridline(data[data.length - 1]), {\n        color: axis.endlinecolor,\n        width: axis.endlinewidth\n      }));\n    }\n  }\n};","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/plotly.js/src/traces/carpet/calc_gridlines.js"],"names":["Axes","require","extendFlat","module","exports","calcGridlines","trace","axisLetter","crossAxisLetter","i","j","j0","eps","bounds","n1","n2","n","value","v","j1","v0","v1","d","data","axis","gridlines","_gridlines","minorgridlines","_minorgridlines","boundarylines","_boundarylines","crossData","crossAxis","tickmode","tickvals","slice","xcp","_xctrl","ycp","_yctrl","nea","length","neb","na","_a","nb","_b","prepTicks","stride","smoothing","constructValueGridline","tj","pxy","i0","ti","xy","dxydi0","dxydi1","dxydj0","dxydj1","xpoints","ypoints","ret","b2j","Math","floor","max","min","crossLength","evalxy","dxy","dxydi","push","a2i","dxydj","constvar","index","x","y","constructArrayGridline","idx","arraytick0","arraydtick","ceil","sort","a","b","color","gridcolor","width","gridwidth","minorgridcount","minorgridcolor","minorgridwidth","startline","startlinecolor","startlinewidth","endline","endlinecolor","endlinewidth","tick0","dtick"],"mappings":"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","sourcesContent":["'use strict';\n\nvar Axes = require('../../plots/cartesian/axes');\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nmodule.exports = function calcGridlines(trace, axisLetter, crossAxisLetter) {\n    var i, j, j0;\n    var eps, bounds, n1, n2, n, value, v;\n    var j1, v0, v1, d;\n\n    var data = trace['_' + axisLetter];\n    var axis = trace[axisLetter + 'axis'];\n\n    var gridlines = axis._gridlines = [];\n    var minorgridlines = axis._minorgridlines = [];\n    var boundarylines = axis._boundarylines = [];\n\n    var crossData = trace['_' + crossAxisLetter];\n    var crossAxis = trace[crossAxisLetter + 'axis'];\n\n    if(axis.tickmode === 'array') {\n        axis.tickvals = data.slice();\n    }\n\n    var xcp = trace._xctrl;\n    var ycp = trace._yctrl;\n    var nea = xcp[0].length;\n    var neb = xcp.length;\n    var na = trace._a.length;\n    var nb = trace._b.length;\n\n    Axes.prepTicks(axis);\n\n    // don't leave tickvals in axis looking like an attribute\n    if(axis.tickmode === 'array') delete axis.tickvals;\n\n    // The default is an empty array that will cause the join to remove the gridline if\n    // it's just disappeared:\n    // axis._startline = axis._endline = [];\n\n    // If the cross axis uses bicubic interpolation, then the grid\n    // lines fall once every three expanded grid row/cols:\n    var stride = axis.smoothing ? 3 : 1;\n\n    function constructValueGridline(value) {\n        var i, j, j0, tj, pxy, i0, ti, xy, dxydi0, dxydi1, dxydj0, dxydj1;\n        var xpoints = [];\n        var ypoints = [];\n        var ret = {};\n        // Search for the fractional grid index giving this line:\n        if(axisLetter === 'b') {\n            // For the position we use just the i-j coordinates:\n            j = trace.b2j(value);\n\n            // The derivatives for catmull-rom splines are discontinuous across cell\n            // boundaries though, so we need to provide both the cell and the position\n            // within the cell separately:\n            j0 = Math.floor(Math.max(0, Math.min(nb - 2, j)));\n            tj = j - j0;\n\n            ret.length = nb;\n            ret.crossLength = na;\n\n            ret.xy = function(i) {\n                return trace.evalxy([], i, j);\n            };\n\n            ret.dxy = function(i0, ti) {\n                return trace.dxydi([], i0, j0, ti, tj);\n            };\n\n            for(i = 0; i < na; i++) {\n                i0 = Math.min(na - 2, i);\n                ti = i - i0;\n                xy = trace.evalxy([], i, j);\n\n                if(crossAxis.smoothing && i > 0) {\n                    // First control point:\n                    dxydi0 = trace.dxydi([], i - 1, j0, 0, tj);\n                    xpoints.push(pxy[0] + dxydi0[0] / 3);\n                    ypoints.push(pxy[1] + dxydi0[1] / 3);\n\n                    // Second control point:\n                    dxydi1 = trace.dxydi([], i - 1, j0, 1, tj);\n                    xpoints.push(xy[0] - dxydi1[0] / 3);\n                    ypoints.push(xy[1] - dxydi1[1] / 3);\n                }\n\n                xpoints.push(xy[0]);\n                ypoints.push(xy[1]);\n\n                pxy = xy;\n            }\n        } else {\n            i = trace.a2i(value);\n            i0 = Math.floor(Math.max(0, Math.min(na - 2, i)));\n            ti = i - i0;\n\n            ret.length = na;\n            ret.crossLength = nb;\n\n            ret.xy = function(j) {\n                return trace.evalxy([], i, j);\n            };\n\n            ret.dxy = function(j0, tj) {\n                return trace.dxydj([], i0, j0, ti, tj);\n            };\n\n            for(j = 0; j < nb; j++) {\n                j0 = Math.min(nb - 2, j);\n                tj = j - j0;\n                xy = trace.evalxy([], i, j);\n\n                if(crossAxis.smoothing && j > 0) {\n                    // First control point:\n                    dxydj0 = trace.dxydj([], i0, j - 1, ti, 0);\n                    xpoints.push(pxy[0] + dxydj0[0] / 3);\n                    ypoints.push(pxy[1] + dxydj0[1] / 3);\n\n                    // Second control point:\n                    dxydj1 = trace.dxydj([], i0, j - 1, ti, 1);\n                    xpoints.push(xy[0] - dxydj1[0] / 3);\n                    ypoints.push(xy[1] - dxydj1[1] / 3);\n                }\n\n                xpoints.push(xy[0]);\n                ypoints.push(xy[1]);\n\n                pxy = xy;\n            }\n        }\n\n        ret.axisLetter = axisLetter;\n        ret.axis = axis;\n        ret.crossAxis = crossAxis;\n        ret.value = value;\n        ret.constvar = crossAxisLetter;\n        ret.index = n;\n        ret.x = xpoints;\n        ret.y = ypoints;\n        ret.smoothing = crossAxis.smoothing;\n\n        return ret;\n    }\n\n    function constructArrayGridline(idx) {\n        var j, i0, j0, ti, tj;\n        var xpoints = [];\n        var ypoints = [];\n        var ret = {};\n        ret.length = data.length;\n        ret.crossLength = crossData.length;\n\n        if(axisLetter === 'b') {\n            j0 = Math.max(0, Math.min(nb - 2, idx));\n            tj = Math.min(1, Math.max(0, idx - j0));\n\n            ret.xy = function(i) {\n                return trace.evalxy([], i, idx);\n            };\n\n            ret.dxy = function(i0, ti) {\n                return trace.dxydi([], i0, j0, ti, tj);\n            };\n\n            // In the tickmode: array case, this operation is a simple\n            // transfer of data:\n            for(j = 0; j < nea; j++) {\n                xpoints[j] = xcp[idx * stride][j];\n                ypoints[j] = ycp[idx * stride][j];\n            }\n        } else {\n            i0 = Math.max(0, Math.min(na - 2, idx));\n            ti = Math.min(1, Math.max(0, idx - i0));\n\n            ret.xy = function(j) {\n                return trace.evalxy([], idx, j);\n            };\n\n            ret.dxy = function(j0, tj) {\n                return trace.dxydj([], i0, j0, ti, tj);\n            };\n\n            // In the tickmode: array case, this operation is a simple\n            // transfer of data:\n            for(j = 0; j < neb; j++) {\n                xpoints[j] = xcp[j][idx * stride];\n                ypoints[j] = ycp[j][idx * stride];\n            }\n        }\n\n        ret.axisLetter = axisLetter;\n        ret.axis = axis;\n        ret.crossAxis = crossAxis;\n        ret.value = data[idx];\n        ret.constvar = crossAxisLetter;\n        ret.index = idx;\n        ret.x = xpoints;\n        ret.y = ypoints;\n        ret.smoothing = crossAxis.smoothing;\n\n        return ret;\n    }\n\n    if(axis.tickmode === 'array') {\n        // var j0 = axis.startline ? 1 : 0;\n        // var j1 = data.length - (axis.endline ? 1 : 0);\n\n        eps = 5e-15;\n        bounds = [\n            Math.floor(((data.length - 1) - axis.arraytick0) / axis.arraydtick * (1 + eps)),\n            Math.ceil((- axis.arraytick0) / axis.arraydtick / (1 + eps))\n        ].sort(function(a, b) {return a - b;});\n\n        // Unpack sorted values so we can be sure to avoid infinite loops if something\n        // is backwards:\n        n1 = bounds[0] - 1;\n        n2 = bounds[1] + 1;\n\n        // If the axes fall along array lines, then this is a much simpler process since\n        // we already have all the control points we need\n        for(n = n1; n < n2; n++) {\n            j = axis.arraytick0 + axis.arraydtick * n;\n            if(j < 0 || j > data.length - 1) continue;\n            gridlines.push(extendFlat(constructArrayGridline(j), {\n                color: axis.gridcolor,\n                width: axis.gridwidth\n            }));\n        }\n\n        for(n = n1; n < n2; n++) {\n            j0 = axis.arraytick0 + axis.arraydtick * n;\n            j1 = Math.min(j0 + axis.arraydtick, data.length - 1);\n\n            // TODO: fix the bounds computation so we don't have to do a large range and then throw\n            // out unneeded numbers\n            if(j0 < 0 || j0 > data.length - 1) continue;\n            if(j1 < 0 || j1 > data.length - 1) continue;\n\n            v0 = data[j0];\n            v1 = data[j1];\n\n            for(i = 0; i < axis.minorgridcount; i++) {\n                d = j1 - j0;\n\n                // TODO: fix the bounds computation so we don't have to do a large range and then throw\n                // out unneeded numbers\n                if(d <= 0) continue;\n\n                // XXX: This calculation isn't quite right. Off by one somewhere?\n                v = v0 + (v1 - v0) * (i + 1) / (axis.minorgridcount + 1) * (axis.arraydtick / d);\n\n                // TODO: fix the bounds computation so we don't have to do a large range and then throw\n                // out unneeded numbers\n                if(v < data[0] || v > data[data.length - 1]) continue;\n                minorgridlines.push(extendFlat(constructValueGridline(v), {\n                    color: axis.minorgridcolor,\n                    width: axis.minorgridwidth\n                }));\n            }\n        }\n\n        if(axis.startline) {\n            boundarylines.push(extendFlat(constructArrayGridline(0), {\n                color: axis.startlinecolor,\n                width: axis.startlinewidth\n            }));\n        }\n\n        if(axis.endline) {\n            boundarylines.push(extendFlat(constructArrayGridline(data.length - 1), {\n                color: axis.endlinecolor,\n                width: axis.endlinewidth\n            }));\n        }\n    } else {\n        // If the lines do not fall along the axes, then we have to interpolate\n        // the contro points and so some math to figure out where the lines are\n        // in the first place.\n\n        // Compute the integer boudns of tick0 + n * dtick that fall within the range\n        // (roughly speaking):\n        // Give this a nice generous epsilon. We use at as * (1 + eps) in order to make\n        // inequalities a little tolerant in a more or less correct manner:\n        eps = 5e-15;\n        bounds = [\n            Math.floor((data[data.length - 1] - axis.tick0) / axis.dtick * (1 + eps)),\n            Math.ceil((data[0] - axis.tick0) / axis.dtick / (1 + eps))\n        ].sort(function(a, b) {return a - b;});\n\n        // Unpack sorted values so we can be sure to avoid infinite loops if something\n        // is backwards:\n        n1 = bounds[0];\n        n2 = bounds[1];\n\n        for(n = n1; n <= n2; n++) {\n            value = axis.tick0 + axis.dtick * n;\n\n            gridlines.push(extendFlat(constructValueGridline(value), {\n                color: axis.gridcolor,\n                width: axis.gridwidth\n            }));\n        }\n\n        for(n = n1 - 1; n < n2 + 1; n++) {\n            value = axis.tick0 + axis.dtick * n;\n\n            for(i = 0; i < axis.minorgridcount; i++) {\n                v = value + axis.dtick * (i + 1) / (axis.minorgridcount + 1);\n                if(v < data[0] || v > data[data.length - 1]) continue;\n                minorgridlines.push(extendFlat(constructValueGridline(v), {\n                    color: axis.minorgridcolor,\n                    width: axis.minorgridwidth\n                }));\n            }\n        }\n\n        if(axis.startline) {\n            boundarylines.push(extendFlat(constructValueGridline(data[0]), {\n                color: axis.startlinecolor,\n                width: axis.startlinewidth\n            }));\n        }\n\n        if(axis.endline) {\n            boundarylines.push(extendFlat(constructValueGridline(data[data.length - 1]), {\n                color: axis.endlinecolor,\n                width: axis.endlinewidth\n            }));\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}