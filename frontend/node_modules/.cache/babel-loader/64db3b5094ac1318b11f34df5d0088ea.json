{"ast":null,"code":"'use strict';\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nvar baseAttrs = require('../../plots/attributes');\n\nvar fontAttrs = require('../../plots/font_attributes');\n\nvar colorScaleAttrs = require('../../components/colorscale/attributes');\n\nvar hovertemplateAttrs = require('../../plots/template_attributes').hovertemplateAttrs;\n\nvar domainAttrs = require('../../plots/domain').attributes;\n\nvar line = extendFlat({\n  editType: 'calc'\n}, colorScaleAttrs('line', {\n  editTypeOverride: 'calc'\n}), {\n  shape: {\n    valType: 'enumerated',\n    values: ['linear', 'hspline'],\n    dflt: 'linear',\n    editType: 'plot',\n    description: ['Sets the shape of the paths.', 'If `linear`, paths are composed of straight lines.', 'If `hspline`, paths are composed of horizontal curved splines'].join(' ')\n  },\n  hovertemplate: hovertemplateAttrs({\n    editType: 'plot',\n    arrayOk: false\n  }, {\n    keys: ['count', 'probability'],\n    description: ['This value here applies when hovering over lines.'].join(' ')\n  })\n});\nmodule.exports = {\n  domain: domainAttrs({\n    name: 'parcats',\n    trace: true,\n    editType: 'calc'\n  }),\n  hoverinfo: extendFlat({}, baseAttrs.hoverinfo, {\n    flags: ['count', 'probability'],\n    editType: 'plot',\n    arrayOk: false\n  }),\n  hoveron: {\n    valType: 'enumerated',\n    values: ['category', 'color', 'dimension'],\n    dflt: 'category',\n    editType: 'plot',\n    description: ['Sets the hover interaction mode for the parcats diagram.', 'If `category`, hover interaction take place per category.', 'If `color`, hover interactions take place per color per category.', 'If `dimension`, hover interactions take place across all categories per dimension.'].join(' ')\n  },\n  hovertemplate: hovertemplateAttrs({\n    editType: 'plot',\n    arrayOk: false\n  }, {\n    keys: ['count', 'probability', 'category', 'categorycount', 'colorcount', 'bandcolorcount'],\n    description: ['This value here applies when hovering over dimensions.', 'Note that `*categorycount`, *colorcount* and *bandcolorcount*', 'are only available when `hoveron` contains the *color* flag'].join(' ')\n  }),\n  arrangement: {\n    valType: 'enumerated',\n    values: ['perpendicular', 'freeform', 'fixed'],\n    dflt: 'perpendicular',\n    editType: 'plot',\n    description: ['Sets the drag interaction mode for categories and dimensions.', 'If `perpendicular`, the categories can only move along a line perpendicular to the paths.', 'If `freeform`, the categories can freely move on the plane.', 'If `fixed`, the categories and dimensions are stationary.'].join(' ')\n  },\n  bundlecolors: {\n    valType: 'boolean',\n    dflt: true,\n    editType: 'plot',\n    description: 'Sort paths so that like colors are bundled together within each category.'\n  },\n  sortpaths: {\n    valType: 'enumerated',\n    values: ['forward', 'backward'],\n    dflt: 'forward',\n    editType: 'plot',\n    description: ['Sets the path sorting algorithm.', 'If `forward`, sort paths based on dimension categories from left to right.', 'If `backward`, sort paths based on dimensions categories from right to left.'].join(' ')\n  },\n  labelfont: fontAttrs({\n    editType: 'calc',\n    description: 'Sets the font for the `dimension` labels.'\n  }),\n  tickfont: fontAttrs({\n    editType: 'calc',\n    description: 'Sets the font for the `category` labels.'\n  }),\n  dimensions: {\n    _isLinkedToArray: 'dimension',\n    label: {\n      valType: 'string',\n      editType: 'calc',\n      description: 'The shown name of the dimension.'\n    },\n    categoryorder: {\n      valType: 'enumerated',\n      values: ['trace', 'category ascending', 'category descending', 'array'],\n      dflt: 'trace',\n      editType: 'calc',\n      description: ['Specifies the ordering logic for the categories in the dimension.', 'By default, plotly uses *trace*, which specifies the order that is present in the data supplied.', 'Set `categoryorder` to *category ascending* or *category descending* if order should be determined by', 'the alphanumerical order of the category names.', 'Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category', 'is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to', 'the *trace* mode. The unspecified categories will follow the categories in `categoryarray`.'].join(' ')\n    },\n    categoryarray: {\n      valType: 'data_array',\n      editType: 'calc',\n      description: ['Sets the order in which categories in this dimension appear.', 'Only has an effect if `categoryorder` is set to *array*.', 'Used with `categoryorder`.'].join(' ')\n    },\n    ticktext: {\n      valType: 'data_array',\n      editType: 'calc',\n      description: ['Sets alternative tick labels for the categories in this dimension.', 'Only has an effect if `categoryorder` is set to *array*.', 'Should be an array the same length as `categoryarray`', 'Used with `categoryorder`.'].join(' ')\n    },\n    values: {\n      valType: 'data_array',\n      dflt: [],\n      editType: 'calc',\n      description: ['Dimension values. `values[n]` represents the category value of the `n`th point in the dataset,', 'therefore the `values` vector for all dimensions must be the same (longer vectors', 'will be truncated).'].join(' ')\n    },\n    displayindex: {\n      valType: 'integer',\n      editType: 'calc',\n      description: ['The display index of dimension, from left to right, zero indexed, defaults to dimension', 'index.'].join(' ')\n    },\n    editType: 'calc',\n    description: 'The dimensions (variables) of the parallel categories diagram.',\n    visible: {\n      valType: 'boolean',\n      dflt: true,\n      editType: 'calc',\n      description: 'Shows the dimension when set to `true` (the default). Hides the dimension for `false`.'\n    }\n  },\n  line: line,\n  counts: {\n    valType: 'number',\n    min: 0,\n    dflt: 1,\n    arrayOk: true,\n    editType: 'calc',\n    description: ['The number of observations represented by each state. Defaults to 1 so that each state represents', 'one observation'].join(' ')\n  },\n  // Hide unsupported top-level properties from plot-schema\n  customdata: undefined,\n  hoverlabel: undefined,\n  ids: undefined,\n  legendgroup: undefined,\n  legendrank: undefined,\n  opacity: undefined,\n  selectedpoints: undefined,\n  showlegend: undefined\n};","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/plotly.js/src/traces/parcats/attributes.js"],"names":["extendFlat","require","baseAttrs","fontAttrs","colorScaleAttrs","hovertemplateAttrs","domainAttrs","attributes","line","editType","editTypeOverride","shape","valType","values","dflt","description","join","hovertemplate","arrayOk","keys","module","exports","domain","name","trace","hoverinfo","flags","hoveron","arrangement","bundlecolors","sortpaths","labelfont","tickfont","dimensions","_isLinkedToArray","label","categoryorder","categoryarray","ticktext","displayindex","visible","counts","min","customdata","undefined","hoverlabel","ids","legendgroup","legendrank","opacity","selectedpoints","showlegend"],"mappings":"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","sourcesContent":["'use strict';\n\nvar extendFlat = require('../../lib/extend').extendFlat;\nvar baseAttrs = require('../../plots/attributes');\nvar fontAttrs = require('../../plots/font_attributes');\nvar colorScaleAttrs = require('../../components/colorscale/attributes');\nvar hovertemplateAttrs = require('../../plots/template_attributes').hovertemplateAttrs;\nvar domainAttrs = require('../../plots/domain').attributes;\n\nvar line = extendFlat(\n    {editType: 'calc'},\n    colorScaleAttrs('line', {editTypeOverride: 'calc'}),\n    {\n        shape: {\n            valType: 'enumerated',\n            values: ['linear', 'hspline'],\n            dflt: 'linear',\n            editType: 'plot',\n            description: [\n                'Sets the shape of the paths.',\n                'If `linear`, paths are composed of straight lines.',\n                'If `hspline`, paths are composed of horizontal curved splines'\n            ].join(' ')\n        },\n\n        hovertemplate: hovertemplateAttrs({\n            editType: 'plot',\n            arrayOk: false\n        }, {\n            keys: ['count', 'probability'],\n            description: [\n                'This value here applies when hovering over lines.'\n            ].join(' ')\n        })\n    }\n);\n\nmodule.exports = {\n    domain: domainAttrs({name: 'parcats', trace: true, editType: 'calc'}),\n\n    hoverinfo: extendFlat({}, baseAttrs.hoverinfo, {\n        flags: ['count', 'probability'],\n        editType: 'plot',\n        arrayOk: false\n    }),\n    hoveron: {\n        valType: 'enumerated',\n        values: ['category', 'color', 'dimension'],\n        dflt: 'category',\n        editType: 'plot',\n        description: [\n            'Sets the hover interaction mode for the parcats diagram.',\n            'If `category`, hover interaction take place per category.',\n            'If `color`, hover interactions take place per color per category.',\n            'If `dimension`, hover interactions take place across all categories per dimension.'\n        ].join(' ')\n    },\n    hovertemplate: hovertemplateAttrs({\n        editType: 'plot',\n        arrayOk: false\n    }, {\n        keys: [\n            'count', 'probability', 'category',\n            'categorycount', 'colorcount', 'bandcolorcount'\n        ],\n        description: [\n            'This value here applies when hovering over dimensions.',\n            'Note that `*categorycount`, *colorcount* and *bandcolorcount*',\n            'are only available when `hoveron` contains the *color* flag'\n        ].join(' ')\n    }),\n\n    arrangement: {\n        valType: 'enumerated',\n        values: ['perpendicular', 'freeform', 'fixed'],\n        dflt: 'perpendicular',\n        editType: 'plot',\n        description: [\n            'Sets the drag interaction mode for categories and dimensions.',\n            'If `perpendicular`, the categories can only move along a line perpendicular to the paths.',\n            'If `freeform`, the categories can freely move on the plane.',\n            'If `fixed`, the categories and dimensions are stationary.'\n        ].join(' ')\n    },\n    bundlecolors: {\n        valType: 'boolean',\n        dflt: true,\n        editType: 'plot',\n        description: 'Sort paths so that like colors are bundled together within each category.'\n    },\n    sortpaths: {\n        valType: 'enumerated',\n        values: ['forward', 'backward'],\n        dflt: 'forward',\n        editType: 'plot',\n        description: [\n            'Sets the path sorting algorithm.',\n            'If `forward`, sort paths based on dimension categories from left to right.',\n            'If `backward`, sort paths based on dimensions categories from right to left.'\n        ].join(' ')\n    },\n    labelfont: fontAttrs({\n        editType: 'calc',\n        description: 'Sets the font for the `dimension` labels.'\n    }),\n\n    tickfont: fontAttrs({\n        editType: 'calc',\n        description: 'Sets the font for the `category` labels.'\n    }),\n\n    dimensions: {\n        _isLinkedToArray: 'dimension',\n        label: {\n            valType: 'string',\n            editType: 'calc',\n            description: 'The shown name of the dimension.'\n        },\n        categoryorder: {\n            valType: 'enumerated',\n            values: [\n                'trace', 'category ascending', 'category descending', 'array'\n            ],\n            dflt: 'trace',\n            editType: 'calc',\n            description: [\n                'Specifies the ordering logic for the categories in the dimension.',\n                'By default, plotly uses *trace*, which specifies the order that is present in the data supplied.',\n                'Set `categoryorder` to *category ascending* or *category descending* if order should be determined by',\n                'the alphanumerical order of the category names.',\n                'Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category',\n                'is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to',\n                'the *trace* mode. The unspecified categories will follow the categories in `categoryarray`.'\n            ].join(' ')\n        },\n        categoryarray: {\n            valType: 'data_array',\n            editType: 'calc',\n            description: [\n                'Sets the order in which categories in this dimension appear.',\n                'Only has an effect if `categoryorder` is set to *array*.',\n                'Used with `categoryorder`.'\n            ].join(' ')\n        },\n        ticktext: {\n            valType: 'data_array',\n            editType: 'calc',\n            description: [\n                'Sets alternative tick labels for the categories in this dimension.',\n                'Only has an effect if `categoryorder` is set to *array*.',\n                'Should be an array the same length as `categoryarray`',\n                'Used with `categoryorder`.'\n            ].join(' ')\n        },\n        values: {\n            valType: 'data_array',\n            dflt: [],\n            editType: 'calc',\n            description: [\n                'Dimension values. `values[n]` represents the category value of the `n`th point in the dataset,',\n                'therefore the `values` vector for all dimensions must be the same (longer vectors',\n                'will be truncated).'\n            ].join(' ')\n        },\n        displayindex: {\n            valType: 'integer',\n            editType: 'calc',\n            description: [\n                'The display index of dimension, from left to right, zero indexed, defaults to dimension',\n                'index.'\n            ].join(' ')\n        },\n        editType: 'calc',\n        description: 'The dimensions (variables) of the parallel categories diagram.',\n        visible: {\n            valType: 'boolean',\n            dflt: true,\n            editType: 'calc',\n            description: 'Shows the dimension when set to `true` (the default). Hides the dimension for `false`.'\n        }\n    },\n\n    line: line,\n    counts: {\n        valType: 'number',\n        min: 0,\n        dflt: 1,\n        arrayOk: true,\n        editType: 'calc',\n        description: [\n            'The number of observations represented by each state. Defaults to 1 so that each state represents',\n            'one observation'\n        ].join(' ')\n    },\n\n    // Hide unsupported top-level properties from plot-schema\n    customdata: undefined,\n    hoverlabel: undefined,\n    ids: undefined,\n    legendgroup: undefined,\n    legendrank: undefined,\n    opacity: undefined,\n    selectedpoints: undefined,\n    showlegend: undefined\n};\n"]},"metadata":{},"sourceType":"script"}