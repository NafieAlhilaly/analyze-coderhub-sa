{"ast":null,"code":"'use strict';\n\nvar parcoords = require('./parcoords');\n\nvar prepareRegl = require('../../lib/prepare_regl');\n\nvar isVisible = require('./helpers').isVisible;\n\nfunction newIndex(visibleIndices, orig, dim) {\n  var origIndex = orig.indexOf(dim);\n  var currentIndex = visibleIndices.indexOf(origIndex);\n\n  if (currentIndex === -1) {\n    // invisible dimensions initially go to the end\n    currentIndex += orig.length;\n  }\n\n  return currentIndex;\n}\n\nfunction sorter(visibleIndices, orig) {\n  return function sorter(d1, d2) {\n    return newIndex(visibleIndices, orig, d1) - newIndex(visibleIndices, orig, d2);\n  };\n}\n\nmodule.exports = function plot(gd, cdModule) {\n  var fullLayout = gd._fullLayout;\n  var success = prepareRegl(gd);\n  if (!success) return;\n  var currentDims = {};\n  var initialDims = {};\n  var fullIndices = {};\n  var inputIndices = {};\n  var size = fullLayout._size;\n  cdModule.forEach(function (d, i) {\n    var trace = d[0].trace;\n    fullIndices[i] = trace.index;\n    var iIn = inputIndices[i] = trace._fullInput.index;\n    currentDims[i] = gd.data[iIn].dimensions;\n    initialDims[i] = gd.data[iIn].dimensions.slice();\n  });\n\n  var filterChanged = function (i, initialDimIndex, newRanges) {\n    // Have updated `constraintrange` data on `gd.data` and raise `Plotly.restyle` event\n    // without having to incur heavy UI blocking due to an actual `Plotly.restyle` call\n    var dim = initialDims[i][initialDimIndex];\n    var newConstraints = newRanges.map(function (r) {\n      return r.slice();\n    }); // Store constraint range in preGUI\n    // This one doesn't work if it's stored in pieces in _storeDirectGUIEdit\n    // because it's an array of variable dimensionality. So store the whole\n    // thing at once manually.\n\n    var aStr = 'dimensions[' + initialDimIndex + '].constraintrange';\n    var preGUI = fullLayout._tracePreGUI[gd._fullData[fullIndices[i]]._fullInput.uid];\n\n    if (preGUI[aStr] === undefined) {\n      var initialVal = dim.constraintrange;\n      preGUI[aStr] = initialVal || null;\n    }\n\n    var fullDimension = gd._fullData[fullIndices[i]].dimensions[initialDimIndex];\n\n    if (!newConstraints.length) {\n      delete dim.constraintrange;\n      delete fullDimension.constraintrange;\n      newConstraints = null;\n    } else {\n      if (newConstraints.length === 1) newConstraints = newConstraints[0];\n      dim.constraintrange = newConstraints;\n      fullDimension.constraintrange = newConstraints.slice(); // wrap in another array for restyle event data\n\n      newConstraints = [newConstraints];\n    }\n\n    var restyleData = {};\n    restyleData[aStr] = newConstraints;\n    gd.emit('plotly_restyle', [restyleData, [inputIndices[i]]]);\n  };\n\n  var hover = function (eventData) {\n    gd.emit('plotly_hover', eventData);\n  };\n\n  var unhover = function (eventData) {\n    gd.emit('plotly_unhover', eventData);\n  };\n\n  var axesMoved = function (i, visibleIndices) {\n    // Have updated order data on `gd.data` and raise `Plotly.restyle` event\n    // without having to incur heavy UI blocking due to an actual `Plotly.restyle` call\n    // drag&drop sorting of the visible dimensions\n    var orig = sorter(visibleIndices, initialDims[i].filter(isVisible));\n    currentDims[i].sort(orig); // invisible dimensions are not interpreted in the context of drag&drop sorting as an invisible dimension\n    // cannot be dragged; they're interspersed into their original positions by this subsequent merging step\n\n    initialDims[i].filter(function (d) {\n      return !isVisible(d);\n    }).sort(function (d) {\n      // subsequent splicing to be done left to right, otherwise indices may be incorrect\n      return initialDims[i].indexOf(d);\n    }).forEach(function (d) {\n      currentDims[i].splice(currentDims[i].indexOf(d), 1); // remove from the end\n\n      currentDims[i].splice(initialDims[i].indexOf(d), 0, d); // insert at original index\n    }); // TODO: we can't really store this part of the interaction state\n    // directly as below, since it incudes data arrays. If we want to\n    // persist column order we may have to do something special for this\n    // case to just store the order itself.\n    // Registry.call('_storeDirectGUIEdit',\n    //     gd.data[inputIndices[i]],\n    //     fullLayout._tracePreGUI[gd._fullData[fullIndices[i]]._fullInput.uid],\n    //     {dimensions: currentDims[i]}\n    // );\n\n    gd.emit('plotly_restyle', [{\n      dimensions: [currentDims[i]]\n    }, [inputIndices[i]]]);\n  };\n\n  parcoords(gd, cdModule, {\n    // layout\n    width: size.w,\n    height: size.h,\n    margin: {\n      t: size.t,\n      r: size.r,\n      b: size.b,\n      l: size.l\n    }\n  }, {\n    // callbacks\n    filterChanged: filterChanged,\n    hover: hover,\n    unhover: unhover,\n    axesMoved: axesMoved\n  });\n};","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/plotly.js/src/traces/parcoords/plot.js"],"names":["parcoords","require","prepareRegl","isVisible","newIndex","visibleIndices","orig","dim","origIndex","indexOf","currentIndex","length","sorter","d1","d2","module","exports","plot","gd","cdModule","fullLayout","_fullLayout","success","currentDims","initialDims","fullIndices","inputIndices","size","_size","forEach","d","i","trace","index","iIn","_fullInput","data","dimensions","slice","filterChanged","initialDimIndex","newRanges","newConstraints","map","r","aStr","preGUI","_tracePreGUI","_fullData","uid","undefined","initialVal","constraintrange","fullDimension","restyleData","emit","hover","eventData","unhover","axesMoved","filter","sort","splice","width","w","height","h","margin","t","b","l"],"mappings":"AAAA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAvB;;AACA,IAAIC,WAAW,GAAGD,OAAO,CAAC,wBAAD,CAAzB;;AACA,IAAIE,SAAS,GAAGF,OAAO,CAAC,WAAD,CAAP,CAAqBE,SAArC;;AAEA,SAASC,QAAT,CAAkBC,cAAlB,EAAkCC,IAAlC,EAAwCC,GAAxC,EAA6C;AACzC,MAAIC,SAAS,GAAGF,IAAI,CAACG,OAAL,CAAaF,GAAb,CAAhB;AACA,MAAIG,YAAY,GAAGL,cAAc,CAACI,OAAf,CAAuBD,SAAvB,CAAnB;;AACA,MAAGE,YAAY,KAAK,CAAC,CAArB,EAAwB;AACpB;AACAA,IAAAA,YAAY,IAAIJ,IAAI,CAACK,MAArB;AACH;;AACD,SAAOD,YAAP;AACH;;AAED,SAASE,MAAT,CAAgBP,cAAhB,EAAgCC,IAAhC,EAAsC;AAClC,SAAO,SAASM,MAAT,CAAgBC,EAAhB,EAAoBC,EAApB,EAAwB;AAC3B,WACIV,QAAQ,CAACC,cAAD,EAAiBC,IAAjB,EAAuBO,EAAvB,CAAR,GACAT,QAAQ,CAACC,cAAD,EAAiBC,IAAjB,EAAuBQ,EAAvB,CAFZ;AAIH,GALD;AAMH;;AAEDC,MAAM,CAACC,OAAP,GAAiB,SAASC,IAAT,CAAcC,EAAd,EAAkBC,QAAlB,EAA4B;AACzC,MAAIC,UAAU,GAAGF,EAAE,CAACG,WAApB;AAEA,MAAIC,OAAO,GAAGpB,WAAW,CAACgB,EAAD,CAAzB;AACA,MAAG,CAACI,OAAJ,EAAa;AAEb,MAAIC,WAAW,GAAG,EAAlB;AACA,MAAIC,WAAW,GAAG,EAAlB;AACA,MAAIC,WAAW,GAAG,EAAlB;AACA,MAAIC,YAAY,GAAG,EAAnB;AAEA,MAAIC,IAAI,GAAGP,UAAU,CAACQ,KAAtB;AAEAT,EAAAA,QAAQ,CAACU,OAAT,CAAiB,UAASC,CAAT,EAAYC,CAAZ,EAAe;AAC5B,QAAIC,KAAK,GAAGF,CAAC,CAAC,CAAD,CAAD,CAAKE,KAAjB;AACAP,IAAAA,WAAW,CAACM,CAAD,CAAX,GAAiBC,KAAK,CAACC,KAAvB;AACA,QAAIC,GAAG,GAAGR,YAAY,CAACK,CAAD,CAAZ,GAAkBC,KAAK,CAACG,UAAN,CAAiBF,KAA7C;AACAV,IAAAA,WAAW,CAACQ,CAAD,CAAX,GAAiBb,EAAE,CAACkB,IAAH,CAAQF,GAAR,EAAaG,UAA9B;AACAb,IAAAA,WAAW,CAACO,CAAD,CAAX,GAAiBb,EAAE,CAACkB,IAAH,CAAQF,GAAR,EAAaG,UAAb,CAAwBC,KAAxB,EAAjB;AACH,GAND;;AAQA,MAAIC,aAAa,GAAG,UAASR,CAAT,EAAYS,eAAZ,EAA6BC,SAA7B,EAAwC;AACxD;AACA;AAEA,QAAIlC,GAAG,GAAGiB,WAAW,CAACO,CAAD,CAAX,CAAeS,eAAf,CAAV;AACA,QAAIE,cAAc,GAAGD,SAAS,CAACE,GAAV,CAAc,UAASC,CAAT,EAAY;AAAE,aAAOA,CAAC,CAACN,KAAF,EAAP;AAAmB,KAA/C,CAArB,CALwD,CAOxD;AACA;AACA;AACA;;AACA,QAAIO,IAAI,GAAG,gBAAgBL,eAAhB,GAAkC,mBAA7C;AACA,QAAIM,MAAM,GAAG1B,UAAU,CAAC2B,YAAX,CAAwB7B,EAAE,CAAC8B,SAAH,CAAavB,WAAW,CAACM,CAAD,CAAxB,EAA6BI,UAA7B,CAAwCc,GAAhE,CAAb;;AACA,QAAGH,MAAM,CAACD,IAAD,CAAN,KAAiBK,SAApB,EAA+B;AAC3B,UAAIC,UAAU,GAAG5C,GAAG,CAAC6C,eAArB;AACAN,MAAAA,MAAM,CAACD,IAAD,CAAN,GAAeM,UAAU,IAAI,IAA7B;AACH;;AAED,QAAIE,aAAa,GAAGnC,EAAE,CAAC8B,SAAH,CAAavB,WAAW,CAACM,CAAD,CAAxB,EAA6BM,UAA7B,CAAwCG,eAAxC,CAApB;;AAEA,QAAG,CAACE,cAAc,CAAC/B,MAAnB,EAA2B;AACvB,aAAOJ,GAAG,CAAC6C,eAAX;AACA,aAAOC,aAAa,CAACD,eAArB;AACAV,MAAAA,cAAc,GAAG,IAAjB;AACH,KAJD,MAIO;AACH,UAAGA,cAAc,CAAC/B,MAAf,KAA0B,CAA7B,EAAgC+B,cAAc,GAAGA,cAAc,CAAC,CAAD,CAA/B;AAChCnC,MAAAA,GAAG,CAAC6C,eAAJ,GAAsBV,cAAtB;AACAW,MAAAA,aAAa,CAACD,eAAd,GAAgCV,cAAc,CAACJ,KAAf,EAAhC,CAHG,CAIH;;AACAI,MAAAA,cAAc,GAAG,CAACA,cAAD,CAAjB;AACH;;AAED,QAAIY,WAAW,GAAG,EAAlB;AACAA,IAAAA,WAAW,CAACT,IAAD,CAAX,GAAoBH,cAApB;AACAxB,IAAAA,EAAE,CAACqC,IAAH,CAAQ,gBAAR,EAA0B,CAACD,WAAD,EAAc,CAAC5B,YAAY,CAACK,CAAD,CAAb,CAAd,CAA1B;AACH,GAnCD;;AAqCA,MAAIyB,KAAK,GAAG,UAASC,SAAT,EAAoB;AAC5BvC,IAAAA,EAAE,CAACqC,IAAH,CAAQ,cAAR,EAAwBE,SAAxB;AACH,GAFD;;AAIA,MAAIC,OAAO,GAAG,UAASD,SAAT,EAAoB;AAC9BvC,IAAAA,EAAE,CAACqC,IAAH,CAAQ,gBAAR,EAA0BE,SAA1B;AACH,GAFD;;AAIA,MAAIE,SAAS,GAAG,UAAS5B,CAAT,EAAY1B,cAAZ,EAA4B;AACxC;AACA;AAEA;AACA,QAAIC,IAAI,GAAGM,MAAM,CAACP,cAAD,EAAiBmB,WAAW,CAACO,CAAD,CAAX,CAAe6B,MAAf,CAAsBzD,SAAtB,CAAjB,CAAjB;AACAoB,IAAAA,WAAW,CAACQ,CAAD,CAAX,CAAe8B,IAAf,CAAoBvD,IAApB,EANwC,CAQxC;AACA;;AACAkB,IAAAA,WAAW,CAACO,CAAD,CAAX,CAAe6B,MAAf,CAAsB,UAAS9B,CAAT,EAAY;AAAC,aAAO,CAAC3B,SAAS,CAAC2B,CAAD,CAAjB;AAAsB,KAAzD,EACM+B,IADN,CACW,UAAS/B,CAAT,EAAY;AACd;AACA,aAAON,WAAW,CAACO,CAAD,CAAX,CAAetB,OAAf,CAAuBqB,CAAvB,CAAP;AACH,KAJN,EAKKD,OALL,CAKa,UAASC,CAAT,EAAY;AACjBP,MAAAA,WAAW,CAACQ,CAAD,CAAX,CAAe+B,MAAf,CAAsBvC,WAAW,CAACQ,CAAD,CAAX,CAAetB,OAAf,CAAuBqB,CAAvB,CAAtB,EAAiD,CAAjD,EADiB,CACoC;;AACrDP,MAAAA,WAAW,CAACQ,CAAD,CAAX,CAAe+B,MAAf,CAAsBtC,WAAW,CAACO,CAAD,CAAX,CAAetB,OAAf,CAAuBqB,CAAvB,CAAtB,EAAiD,CAAjD,EAAoDA,CAApD,EAFiB,CAEuC;AAC3D,KARL,EAVwC,CAoBxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAZ,IAAAA,EAAE,CAACqC,IAAH,CAAQ,gBAAR,EAA0B,CAAC;AAAClB,MAAAA,UAAU,EAAE,CAACd,WAAW,CAACQ,CAAD,CAAZ;AAAb,KAAD,EAAiC,CAACL,YAAY,CAACK,CAAD,CAAb,CAAjC,CAA1B;AACH,GA/BD;;AAiCA/B,EAAAA,SAAS,CACLkB,EADK,EAELC,QAFK,EAGL;AAAE;AACE4C,IAAAA,KAAK,EAAEpC,IAAI,CAACqC,CADhB;AAEIC,IAAAA,MAAM,EAAEtC,IAAI,CAACuC,CAFjB;AAGIC,IAAAA,MAAM,EAAE;AACJC,MAAAA,CAAC,EAAEzC,IAAI,CAACyC,CADJ;AAEJxB,MAAAA,CAAC,EAAEjB,IAAI,CAACiB,CAFJ;AAGJyB,MAAAA,CAAC,EAAE1C,IAAI,CAAC0C,CAHJ;AAIJC,MAAAA,CAAC,EAAE3C,IAAI,CAAC2C;AAJJ;AAHZ,GAHK,EAaL;AAAE;AACE/B,IAAAA,aAAa,EAAEA,aADnB;AAEIiB,IAAAA,KAAK,EAAEA,KAFX;AAGIE,IAAAA,OAAO,EAAEA,OAHb;AAIIC,IAAAA,SAAS,EAAEA;AAJf,GAbK,CAAT;AAoBH,CAvHD","sourcesContent":["'use strict';\n\nvar parcoords = require('./parcoords');\nvar prepareRegl = require('../../lib/prepare_regl');\nvar isVisible = require('./helpers').isVisible;\n\nfunction newIndex(visibleIndices, orig, dim) {\n    var origIndex = orig.indexOf(dim);\n    var currentIndex = visibleIndices.indexOf(origIndex);\n    if(currentIndex === -1) {\n        // invisible dimensions initially go to the end\n        currentIndex += orig.length;\n    }\n    return currentIndex;\n}\n\nfunction sorter(visibleIndices, orig) {\n    return function sorter(d1, d2) {\n        return (\n            newIndex(visibleIndices, orig, d1) -\n            newIndex(visibleIndices, orig, d2)\n        );\n    };\n}\n\nmodule.exports = function plot(gd, cdModule) {\n    var fullLayout = gd._fullLayout;\n\n    var success = prepareRegl(gd);\n    if(!success) return;\n\n    var currentDims = {};\n    var initialDims = {};\n    var fullIndices = {};\n    var inputIndices = {};\n\n    var size = fullLayout._size;\n\n    cdModule.forEach(function(d, i) {\n        var trace = d[0].trace;\n        fullIndices[i] = trace.index;\n        var iIn = inputIndices[i] = trace._fullInput.index;\n        currentDims[i] = gd.data[iIn].dimensions;\n        initialDims[i] = gd.data[iIn].dimensions.slice();\n    });\n\n    var filterChanged = function(i, initialDimIndex, newRanges) {\n        // Have updated `constraintrange` data on `gd.data` and raise `Plotly.restyle` event\n        // without having to incur heavy UI blocking due to an actual `Plotly.restyle` call\n\n        var dim = initialDims[i][initialDimIndex];\n        var newConstraints = newRanges.map(function(r) { return r.slice(); });\n\n        // Store constraint range in preGUI\n        // This one doesn't work if it's stored in pieces in _storeDirectGUIEdit\n        // because it's an array of variable dimensionality. So store the whole\n        // thing at once manually.\n        var aStr = 'dimensions[' + initialDimIndex + '].constraintrange';\n        var preGUI = fullLayout._tracePreGUI[gd._fullData[fullIndices[i]]._fullInput.uid];\n        if(preGUI[aStr] === undefined) {\n            var initialVal = dim.constraintrange;\n            preGUI[aStr] = initialVal || null;\n        }\n\n        var fullDimension = gd._fullData[fullIndices[i]].dimensions[initialDimIndex];\n\n        if(!newConstraints.length) {\n            delete dim.constraintrange;\n            delete fullDimension.constraintrange;\n            newConstraints = null;\n        } else {\n            if(newConstraints.length === 1) newConstraints = newConstraints[0];\n            dim.constraintrange = newConstraints;\n            fullDimension.constraintrange = newConstraints.slice();\n            // wrap in another array for restyle event data\n            newConstraints = [newConstraints];\n        }\n\n        var restyleData = {};\n        restyleData[aStr] = newConstraints;\n        gd.emit('plotly_restyle', [restyleData, [inputIndices[i]]]);\n    };\n\n    var hover = function(eventData) {\n        gd.emit('plotly_hover', eventData);\n    };\n\n    var unhover = function(eventData) {\n        gd.emit('plotly_unhover', eventData);\n    };\n\n    var axesMoved = function(i, visibleIndices) {\n        // Have updated order data on `gd.data` and raise `Plotly.restyle` event\n        // without having to incur heavy UI blocking due to an actual `Plotly.restyle` call\n\n        // drag&drop sorting of the visible dimensions\n        var orig = sorter(visibleIndices, initialDims[i].filter(isVisible));\n        currentDims[i].sort(orig);\n\n        // invisible dimensions are not interpreted in the context of drag&drop sorting as an invisible dimension\n        // cannot be dragged; they're interspersed into their original positions by this subsequent merging step\n        initialDims[i].filter(function(d) {return !isVisible(d);})\n             .sort(function(d) {\n                 // subsequent splicing to be done left to right, otherwise indices may be incorrect\n                 return initialDims[i].indexOf(d);\n             })\n            .forEach(function(d) {\n                currentDims[i].splice(currentDims[i].indexOf(d), 1); // remove from the end\n                currentDims[i].splice(initialDims[i].indexOf(d), 0, d); // insert at original index\n            });\n\n        // TODO: we can't really store this part of the interaction state\n        // directly as below, since it incudes data arrays. If we want to\n        // persist column order we may have to do something special for this\n        // case to just store the order itself.\n        // Registry.call('_storeDirectGUIEdit',\n        //     gd.data[inputIndices[i]],\n        //     fullLayout._tracePreGUI[gd._fullData[fullIndices[i]]._fullInput.uid],\n        //     {dimensions: currentDims[i]}\n        // );\n\n        gd.emit('plotly_restyle', [{dimensions: [currentDims[i]]}, [inputIndices[i]]]);\n    };\n\n    parcoords(\n        gd,\n        cdModule,\n        { // layout\n            width: size.w,\n            height: size.h,\n            margin: {\n                t: size.t,\n                r: size.r,\n                b: size.b,\n                l: size.l\n            }\n        },\n        { // callbacks\n            filterChanged: filterChanged,\n            hover: hover,\n            unhover: unhover,\n            axesMoved: axesMoved\n        }\n    );\n};\n"]},"metadata":{},"sourceType":"script"}