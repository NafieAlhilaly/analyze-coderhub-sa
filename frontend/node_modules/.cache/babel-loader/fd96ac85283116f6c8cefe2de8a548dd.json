{"ast":null,"code":"'use strict';\n\nvar isAllBlank = require('is-string-blank');\n\nvar createBuffer = require('gl-buffer');\n\nvar createVAO = require('gl-vao');\n\nvar pool = require('typedarray-pool');\n\nvar mat4mult = require('gl-mat4/multiply');\n\nvar shaders = require('./lib/shaders');\n\nvar getGlyph = require('./lib/glyphs');\n\nvar getSimpleString = require('./lib/get-simple-string');\n\nvar IDENTITY = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\nmodule.exports = createPointCloud;\n\nfunction transformMat4(x, m) {\n  var x0 = x[0];\n  var x1 = x[1];\n  var x2 = x[2];\n  var x3 = x[3];\n  x[0] = m[0] * x0 + m[4] * x1 + m[8] * x2 + m[12] * x3;\n  x[1] = m[1] * x0 + m[5] * x1 + m[9] * x2 + m[13] * x3;\n  x[2] = m[2] * x0 + m[6] * x1 + m[10] * x2 + m[14] * x3;\n  x[3] = m[3] * x0 + m[7] * x1 + m[11] * x2 + m[15] * x3;\n  return x;\n}\n\nfunction project(p, v, m, x) {\n  transformMat4(x, x, m);\n  transformMat4(x, x, v);\n  return transformMat4(x, x, p);\n}\n\nfunction ScatterPlotPickResult(index, position) {\n  this.index = index;\n  this.dataCoordinate = this.position = position;\n}\n\nfunction fixOpacity(a) {\n  if (a === true) return 1;\n  if (a > 1) return 1;\n  return a;\n}\n\nfunction PointCloud(gl, shader, orthoShader, projectShader, pointBuffer, colorBuffer, glyphBuffer, idBuffer, vao, pickPerspectiveShader, pickOrthoShader, pickProjectShader) {\n  this.gl = gl;\n  this.pixelRatio = 1;\n  this.shader = shader;\n  this.orthoShader = orthoShader;\n  this.projectShader = projectShader;\n  this.pointBuffer = pointBuffer;\n  this.colorBuffer = colorBuffer;\n  this.glyphBuffer = glyphBuffer;\n  this.idBuffer = idBuffer;\n  this.vao = vao;\n  this.vertexCount = 0;\n  this.lineVertexCount = 0;\n  this.opacity = 1;\n  this.hasAlpha = false;\n  this.lineWidth = 0;\n  this.projectScale = [2.0 / 3.0, 2.0 / 3.0, 2.0 / 3.0];\n  this.projectOpacity = [1, 1, 1];\n  this.projectHasAlpha = false;\n  this.pickId = 0;\n  this.pickPerspectiveShader = pickPerspectiveShader;\n  this.pickOrthoShader = pickOrthoShader;\n  this.pickProjectShader = pickProjectShader;\n  this.points = [];\n  this._selectResult = new ScatterPlotPickResult(0, [0, 0, 0]);\n  this.useOrtho = true;\n  this.bounds = [[Infinity, Infinity, Infinity], [-Infinity, -Infinity, -Infinity]]; //Axes projections\n\n  this.axesProject = [true, true, true];\n  this.axesBounds = [[-Infinity, -Infinity, -Infinity], [Infinity, Infinity, Infinity]];\n  this.highlightId = [1, 1, 1, 1];\n  this.highlightScale = 2;\n  this.clipBounds = [[-Infinity, -Infinity, -Infinity], [Infinity, Infinity, Infinity]];\n  this.dirty = true;\n}\n\nvar proto = PointCloud.prototype;\nproto.pickSlots = 1;\n\nproto.setPickBase = function (pickBase) {\n  this.pickId = pickBase;\n};\n\nproto.isTransparent = function () {\n  if (this.hasAlpha) {\n    return true;\n  }\n\n  for (var i = 0; i < 3; ++i) {\n    if (this.axesProject[i] && this.projectHasAlpha) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nproto.isOpaque = function () {\n  if (!this.hasAlpha) {\n    return true;\n  }\n\n  for (var i = 0; i < 3; ++i) {\n    if (this.axesProject[i] && !this.projectHasAlpha) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nvar VIEW_SHAPE = [0, 0];\nvar U_VEC = [0, 0, 0];\nvar V_VEC = [0, 0, 0];\nvar MU_VEC = [0, 0, 0, 1];\nvar MV_VEC = [0, 0, 0, 1];\nvar SCRATCH_MATRIX = IDENTITY.slice();\nvar SCRATCH_VEC = [0, 0, 0];\nvar CLIP_BOUNDS = [[0, 0, 0], [0, 0, 0]];\n\nfunction zeroVec(a) {\n  a[0] = a[1] = a[2] = 0;\n  return a;\n}\n\nfunction augment(hg, af) {\n  hg[0] = af[0];\n  hg[1] = af[1];\n  hg[2] = af[2];\n  hg[3] = 1;\n  return hg;\n}\n\nfunction setComponent(out, v, i, x) {\n  out[0] = v[0];\n  out[1] = v[1];\n  out[2] = v[2];\n  out[i] = x;\n  return out;\n}\n\nfunction getClipBounds(bounds) {\n  var result = CLIP_BOUNDS;\n\n  for (var i = 0; i < 2; ++i) {\n    for (var j = 0; j < 3; ++j) {\n      result[i][j] = Math.max(Math.min(bounds[i][j], 1e8), -1e8);\n    }\n  }\n\n  return result;\n}\n\nfunction drawProject(shader, points, camera, pixelRatio) {\n  var axesProject = points.axesProject;\n  var gl = points.gl;\n  var uniforms = shader.uniforms;\n  var model = camera.model || IDENTITY;\n  var view = camera.view || IDENTITY;\n  var projection = camera.projection || IDENTITY;\n  var bounds = points.axesBounds;\n  var clipBounds = getClipBounds(points.clipBounds);\n  var cubeAxis;\n\n  if (points.axes && points.axes.lastCubeProps) {\n    cubeAxis = points.axes.lastCubeProps.axis;\n  } else {\n    cubeAxis = [1, 1, 1];\n  }\n\n  VIEW_SHAPE[0] = 2.0 / gl.drawingBufferWidth;\n  VIEW_SHAPE[1] = 2.0 / gl.drawingBufferHeight;\n  shader.bind();\n  uniforms.view = view;\n  uniforms.projection = projection;\n  uniforms.screenSize = VIEW_SHAPE;\n  uniforms.highlightId = points.highlightId;\n  uniforms.highlightScale = points.highlightScale;\n  uniforms.clipBounds = clipBounds;\n  uniforms.pickGroup = points.pickId / 255.0;\n  uniforms.pixelRatio = pixelRatio;\n\n  for (var i = 0; i < 3; ++i) {\n    if (!axesProject[i]) {\n      continue;\n    }\n\n    uniforms.scale = points.projectScale[i];\n    uniforms.opacity = points.projectOpacity[i]; //Project model matrix\n\n    var pmodel = SCRATCH_MATRIX;\n\n    for (var j = 0; j < 16; ++j) {\n      pmodel[j] = 0;\n    }\n\n    for (var j = 0; j < 4; ++j) {\n      pmodel[5 * j] = 1;\n    }\n\n    pmodel[5 * i] = 0;\n\n    if (cubeAxis[i] < 0) {\n      pmodel[12 + i] = bounds[0][i];\n    } else {\n      pmodel[12 + i] = bounds[1][i];\n    }\n\n    mat4mult(pmodel, model, pmodel);\n    uniforms.model = pmodel; //Compute initial axes\n\n    var u = (i + 1) % 3;\n    var v = (i + 2) % 3;\n    var du = zeroVec(U_VEC);\n    var dv = zeroVec(V_VEC);\n    du[u] = 1;\n    dv[v] = 1; //Align orientation relative to viewer\n\n    var mdu = project(projection, view, model, augment(MU_VEC, du));\n    var mdv = project(projection, view, model, augment(MV_VEC, dv));\n\n    if (Math.abs(mdu[1]) > Math.abs(mdv[1])) {\n      var tmp = mdu;\n      mdu = mdv;\n      mdv = tmp;\n      tmp = du;\n      du = dv;\n      dv = tmp;\n      var t = u;\n      u = v;\n      v = t;\n    }\n\n    if (mdu[0] < 0) {\n      du[u] = -1;\n    }\n\n    if (mdv[1] > 0) {\n      dv[v] = -1;\n    }\n\n    var su = 0.0;\n    var sv = 0.0;\n\n    for (var j = 0; j < 4; ++j) {\n      su += Math.pow(model[4 * u + j], 2);\n      sv += Math.pow(model[4 * v + j], 2);\n    }\n\n    du[u] /= Math.sqrt(su);\n    dv[v] /= Math.sqrt(sv);\n    uniforms.axes[0] = du;\n    uniforms.axes[1] = dv; //Update fragment clip bounds\n\n    uniforms.fragClipBounds[0] = setComponent(SCRATCH_VEC, clipBounds[0], i, -1e8);\n    uniforms.fragClipBounds[1] = setComponent(SCRATCH_VEC, clipBounds[1], i, 1e8);\n    points.vao.bind(); //Draw interior\n\n    points.vao.draw(gl.TRIANGLES, points.vertexCount); //Draw edges\n\n    if (points.lineWidth > 0) {\n      gl.lineWidth(points.lineWidth * pixelRatio);\n      points.vao.draw(gl.LINES, points.lineVertexCount, points.vertexCount);\n    }\n\n    points.vao.unbind();\n  }\n}\n\nvar NEG_INFINITY3 = [-1e8, -1e8, -1e8];\nvar POS_INFINITY3 = [1e8, 1e8, 1e8];\nvar CLIP_GROUP = [NEG_INFINITY3, POS_INFINITY3];\n\nfunction drawFull(shader, pshader, points, camera, pixelRatio, transparent, forceDraw) {\n  var gl = points.gl;\n\n  if (transparent === points.projectHasAlpha || forceDraw) {\n    drawProject(pshader, points, camera, pixelRatio);\n  }\n\n  if (transparent === points.hasAlpha || forceDraw) {\n    shader.bind();\n    var uniforms = shader.uniforms;\n    uniforms.model = camera.model || IDENTITY;\n    uniforms.view = camera.view || IDENTITY;\n    uniforms.projection = camera.projection || IDENTITY;\n    VIEW_SHAPE[0] = 2.0 / gl.drawingBufferWidth;\n    VIEW_SHAPE[1] = 2.0 / gl.drawingBufferHeight;\n    uniforms.screenSize = VIEW_SHAPE;\n    uniforms.highlightId = points.highlightId;\n    uniforms.highlightScale = points.highlightScale;\n    uniforms.fragClipBounds = CLIP_GROUP;\n    uniforms.clipBounds = points.axes.bounds;\n    uniforms.opacity = points.opacity;\n    uniforms.pickGroup = points.pickId / 255.0;\n    uniforms.pixelRatio = pixelRatio;\n    points.vao.bind(); //Draw interior\n\n    points.vao.draw(gl.TRIANGLES, points.vertexCount); //Draw edges\n\n    if (points.lineWidth > 0) {\n      gl.lineWidth(points.lineWidth * pixelRatio);\n      points.vao.draw(gl.LINES, points.lineVertexCount, points.vertexCount);\n    }\n\n    points.vao.unbind();\n  }\n}\n\nproto.draw = function (camera) {\n  var shader = this.useOrtho ? this.orthoShader : this.shader;\n  drawFull(shader, this.projectShader, this, camera, this.pixelRatio, false, false);\n};\n\nproto.drawTransparent = function (camera) {\n  var shader = this.useOrtho ? this.orthoShader : this.shader;\n  drawFull(shader, this.projectShader, this, camera, this.pixelRatio, true, false);\n};\n\nproto.drawPick = function (camera) {\n  var shader = this.useOrtho ? this.pickOrthoShader : this.pickPerspectiveShader;\n  drawFull(shader, this.pickProjectShader, this, camera, 1, true, true);\n};\n\nproto.pick = function (selected) {\n  if (!selected) {\n    return null;\n  }\n\n  if (selected.id !== this.pickId) {\n    return null;\n  }\n\n  var x = selected.value[2] + (selected.value[1] << 8) + (selected.value[0] << 16);\n\n  if (x >= this.pointCount || x < 0) {\n    return null;\n  } //Unpack result\n\n\n  var coord = this.points[x];\n  var result = this._selectResult;\n  result.index = x;\n\n  for (var i = 0; i < 3; ++i) {\n    result.position[i] = result.dataCoordinate[i] = coord[i];\n  }\n\n  return result;\n};\n\nproto.highlight = function (selection) {\n  if (!selection) {\n    this.highlightId = [1, 1, 1, 1];\n  } else {\n    var pointId = selection.index;\n    var a0 = pointId & 0xff;\n    var a1 = pointId >> 8 & 0xff;\n    var a2 = pointId >> 16 & 0xff;\n    this.highlightId = [a0 / 255.0, a1 / 255.0, a2 / 255.0, 0];\n  }\n};\n\nfunction get_glyphData(glyphs, index, font, pixelRatio) {\n  var str; // use the data if presented in an array\n\n  if (Array.isArray(glyphs)) {\n    if (index < glyphs.length) {\n      str = glyphs[index];\n    } else {\n      str = undefined;\n    }\n  } else {\n    str = glyphs;\n  }\n\n  str = getSimpleString(str); // this would handle undefined cases\n\n  var visible = true;\n\n  if (isAllBlank(str)) {\n    str = '▼'; // Note: this special character may have minimum number of surfaces\n\n    visible = false;\n  }\n\n  var glyph = getGlyph(str, font, pixelRatio);\n  return {\n    mesh: glyph[0],\n    lines: glyph[1],\n    bounds: glyph[2],\n    visible: visible\n  };\n}\n\nproto.update = function (options) {\n  options = options || {};\n\n  if ('perspective' in options) {\n    this.useOrtho = !options.perspective;\n  }\n\n  if ('orthographic' in options) {\n    this.useOrtho = !!options.orthographic;\n  }\n\n  if ('lineWidth' in options) {\n    this.lineWidth = options.lineWidth;\n  }\n\n  if ('project' in options) {\n    if (Array.isArray(options.project)) {\n      this.axesProject = options.project;\n    } else {\n      var v = !!options.project;\n      this.axesProject = [v, v, v];\n    }\n  }\n\n  if ('projectScale' in options) {\n    if (Array.isArray(options.projectScale)) {\n      this.projectScale = options.projectScale.slice();\n    } else {\n      var s = +options.projectScale;\n      this.projectScale = [s, s, s];\n    }\n  }\n\n  this.projectHasAlpha = false; // default to no transparent draw\n\n  if ('projectOpacity' in options) {\n    if (Array.isArray(options.projectOpacity)) {\n      this.projectOpacity = options.projectOpacity.slice();\n    } else {\n      var s = +options.projectOpacity;\n      this.projectOpacity = [s, s, s];\n    }\n\n    for (var i = 0; i < 3; ++i) {\n      this.projectOpacity[i] = fixOpacity(this.projectOpacity[i]);\n\n      if (this.projectOpacity[i] < 1) {\n        this.projectHasAlpha = true;\n      }\n    }\n  }\n\n  this.hasAlpha = false; // default to no transparent draw\n\n  if ('opacity' in options) {\n    this.opacity = fixOpacity(options.opacity);\n\n    if (this.opacity < 1) {\n      this.hasAlpha = true;\n    }\n  } //Set dirty flag\n\n\n  this.dirty = true; //Create new buffers\n\n  var points = options.position; //Text font\n\n  var font = options.font || 'normal';\n  var alignment = options.alignment || [0, 0];\n  var alignmentX;\n  var alignmentY;\n\n  if (alignment.length === 2) {\n    alignmentX = alignment[0];\n    alignmentY = alignment[1];\n  } else {\n    alignmentX = [];\n    alignmentY = [];\n\n    for (var i = 0; i < alignment.length; ++i) {\n      alignmentX[i] = alignment[i][0];\n      alignmentY[i] = alignment[i][1];\n    }\n  } //Bounds\n\n\n  var lowerBound = [Infinity, Infinity, Infinity];\n  var upperBound = [-Infinity, -Infinity, -Infinity]; //Unpack options\n\n  var glyphs = options.glyph;\n  var colors = options.color;\n  var sizes = options.size;\n  var angles = options.angle;\n  var lineColors = options.lineColor; //Picking geometry\n\n  var pickCounter = -1; //First do pass to compute buffer sizes\n\n  var triVertexCount = 0;\n  var lineVertexCount = 0;\n  var numPoints = 0;\n\n  if (points.length) {\n    //Count number of points and buffer size\n    numPoints = points.length;\n\n    count_loop: for (var i = 0; i < numPoints; ++i) {\n      var x = points[i];\n\n      for (var j = 0; j < 3; ++j) {\n        if (isNaN(x[j]) || !isFinite(x[j])) {\n          continue count_loop;\n        }\n      }\n\n      var glyphData = get_glyphData(glyphs, i, font, this.pixelRatio);\n      var glyphMesh = glyphData.mesh;\n      var glyphLines = glyphData.lines;\n      var glyphBounds = glyphData.bounds;\n      triVertexCount += glyphMesh.cells.length * 3;\n      lineVertexCount += glyphLines.edges.length * 2;\n    }\n  }\n\n  var vertexCount = triVertexCount + lineVertexCount; //Preallocate data\n\n  var positionArray = pool.mallocFloat(3 * vertexCount);\n  var colorArray = pool.mallocFloat(4 * vertexCount);\n  var glyphArray = pool.mallocFloat(2 * vertexCount);\n  var idArray = pool.mallocUint32(vertexCount);\n\n  if (vertexCount > 0) {\n    var triOffset = 0;\n    var lineOffset = triVertexCount;\n    var color = [0, 0, 0, 1];\n    var lineColor = [0, 0, 0, 1];\n    var isColorArray = Array.isArray(colors) && Array.isArray(colors[0]);\n    var isLineColorArray = Array.isArray(lineColors) && Array.isArray(lineColors[0]);\n\n    fill_loop: for (var i = 0; i < numPoints; ++i) {\n      //Increment pickCounter\n      pickCounter += 1;\n      var x = points[i];\n\n      for (var j = 0; j < 3; ++j) {\n        if (isNaN(x[j]) || !isFinite(x[j])) {\n          continue fill_loop;\n        }\n\n        upperBound[j] = Math.max(upperBound[j], x[j]);\n        lowerBound[j] = Math.min(lowerBound[j], x[j]);\n      }\n\n      var glyphData = get_glyphData(glyphs, i, font, this.pixelRatio);\n      var glyphMesh = glyphData.mesh;\n      var glyphLines = glyphData.lines;\n      var glyphBounds = glyphData.bounds;\n      var glyphVisible = glyphData.visible; //Get color\n\n      if (!glyphVisible) color = [1, 1, 1, 0];else if (Array.isArray(colors)) {\n        var c;\n\n        if (isColorArray) {\n          if (i < colors.length) {\n            c = colors[i];\n          } else {\n            c = [0, 0, 0, 0];\n          }\n        } else {\n          c = colors;\n        }\n\n        if (c.length === 3) {\n          for (var j = 0; j < 3; ++j) {\n            color[j] = c[j];\n          }\n\n          color[3] = 1;\n        } else if (c.length === 4) {\n          for (var j = 0; j < 4; ++j) {\n            color[j] = c[j];\n          }\n\n          if (!this.hasAlpha && c[3] < 1) this.hasAlpha = true;\n        }\n      } else {\n        color[0] = color[1] = color[2] = 0;\n        color[3] = 1;\n      } //Get lineColor\n\n      if (!glyphVisible) lineColor = [1, 1, 1, 0];else if (Array.isArray(lineColors)) {\n        var c;\n\n        if (isLineColorArray) {\n          if (i < lineColors.length) {\n            c = lineColors[i];\n          } else {\n            c = [0, 0, 0, 0];\n          }\n        } else {\n          c = lineColors;\n        }\n\n        if (c.length === 3) {\n          for (var j = 0; j < 3; ++j) {\n            lineColor[j] = c[j];\n          }\n\n          lineColor[j] = 1;\n        } else if (c.length === 4) {\n          for (var j = 0; j < 4; ++j) {\n            lineColor[j] = c[j];\n          }\n\n          if (!this.hasAlpha && c[3] < 1) this.hasAlpha = true;\n        }\n      } else {\n        lineColor[0] = lineColor[1] = lineColor[2] = 0;\n        lineColor[3] = 1;\n      }\n      var size = 0.5;\n      if (!glyphVisible) size = 0.0;else if (Array.isArray(sizes)) {\n        if (i < sizes.length) {\n          size = +sizes[i];\n        } else {\n          size = 12;\n        }\n      } else if (sizes) {\n        size = +sizes;\n      } else if (this.useOrtho) {\n        size = 12;\n      }\n      var angle = 0;\n\n      if (Array.isArray(angles)) {\n        if (i < angles.length) {\n          angle = +angles[i];\n        } else {\n          angle = 0;\n        }\n      } else if (angles) {\n        angle = +angles;\n      } //Loop through markers and append to buffers\n\n\n      var cos = Math.cos(angle);\n      var sin = Math.sin(angle);\n      var x = points[i];\n\n      for (var j = 0; j < 3; ++j) {\n        upperBound[j] = Math.max(upperBound[j], x[j]);\n        lowerBound[j] = Math.min(lowerBound[j], x[j]);\n      } //Calculate text offset\n\n\n      var textOffsetX = alignmentX;\n      var textOffsetY = alignmentY;\n      var textOffsetX = 0;\n\n      if (Array.isArray(alignmentX)) {\n        if (i < alignmentX.length) {\n          textOffsetX = alignmentX[i];\n        } else {\n          textOffsetX = 0;\n        }\n      } else if (alignmentX) {\n        textOffsetX = alignmentX;\n      }\n\n      var textOffsetY = 0;\n\n      if (Array.isArray(alignmentY)) {\n        if (i < alignmentY.length) {\n          textOffsetY = alignmentY[i];\n        } else {\n          textOffsetY = 0;\n        }\n      } else if (alignmentY) {\n        textOffsetY = alignmentY;\n      }\n\n      textOffsetX *= textOffsetX > 0 ? 1 - glyphBounds[0][0] : textOffsetX < 0 ? 1 + glyphBounds[1][0] : 1;\n      textOffsetY *= textOffsetY > 0 ? 1 - glyphBounds[0][1] : textOffsetY < 0 ? 1 + glyphBounds[1][1] : 1;\n      var textOffset = [textOffsetX, textOffsetY]; //Write out inner marker\n\n      var cells = glyphMesh.cells || [];\n      var verts = glyphMesh.positions || [];\n\n      for (var j = 0; j < cells.length; ++j) {\n        var cell = cells[j];\n\n        for (var k = 0; k < 3; ++k) {\n          for (var l = 0; l < 3; ++l) {\n            positionArray[3 * triOffset + l] = x[l];\n          }\n\n          for (var l = 0; l < 4; ++l) {\n            colorArray[4 * triOffset + l] = color[l];\n          }\n\n          idArray[triOffset] = pickCounter;\n          var p = verts[cell[k]];\n          glyphArray[2 * triOffset] = size * (cos * p[0] - sin * p[1] + textOffset[0]);\n          glyphArray[2 * triOffset + 1] = size * (sin * p[0] + cos * p[1] + textOffset[1]);\n          triOffset += 1;\n        }\n      }\n\n      var cells = glyphLines.edges;\n      var verts = glyphLines.positions;\n\n      for (var j = 0; j < cells.length; ++j) {\n        var cell = cells[j];\n\n        for (var k = 0; k < 2; ++k) {\n          for (var l = 0; l < 3; ++l) {\n            positionArray[3 * lineOffset + l] = x[l];\n          }\n\n          for (var l = 0; l < 4; ++l) {\n            colorArray[4 * lineOffset + l] = lineColor[l];\n          }\n\n          idArray[lineOffset] = pickCounter;\n          var p = verts[cell[k]];\n          glyphArray[2 * lineOffset] = size * (cos * p[0] - sin * p[1] + textOffset[0]);\n          glyphArray[2 * lineOffset + 1] = size * (sin * p[0] + cos * p[1] + textOffset[1]);\n          lineOffset += 1;\n        }\n      }\n    }\n  } //Update bounds\n\n\n  this.bounds = [lowerBound, upperBound]; //Save points\n\n  this.points = points; //Save number of points\n\n  this.pointCount = points.length; //Update vertex counts\n\n  this.vertexCount = triVertexCount;\n  this.lineVertexCount = lineVertexCount;\n  this.pointBuffer.update(positionArray);\n  this.colorBuffer.update(colorArray);\n  this.glyphBuffer.update(glyphArray); //this.idBuffer.update(new Uint32Array(idArray))\n\n  this.idBuffer.update(idArray);\n  pool.free(positionArray);\n  pool.free(colorArray);\n  pool.free(glyphArray);\n  pool.free(idArray);\n};\n\nproto.dispose = function () {\n  //Shaders\n  this.shader.dispose();\n  this.orthoShader.dispose();\n  this.pickPerspectiveShader.dispose();\n  this.pickOrthoShader.dispose(); //Vertex array\n\n  this.vao.dispose(); //Buffers\n\n  this.pointBuffer.dispose();\n  this.colorBuffer.dispose();\n  this.glyphBuffer.dispose();\n  this.idBuffer.dispose();\n};\n\nfunction createPointCloud(options) {\n  var gl = options.gl;\n  var shader = shaders.createPerspective(gl);\n  var orthoShader = shaders.createOrtho(gl);\n  var projectShader = shaders.createProject(gl);\n  var pickPerspectiveShader = shaders.createPickPerspective(gl);\n  var pickOrthoShader = shaders.createPickOrtho(gl);\n  var pickProjectShader = shaders.createPickProject(gl);\n  var pointBuffer = createBuffer(gl);\n  var colorBuffer = createBuffer(gl);\n  var glyphBuffer = createBuffer(gl);\n  var idBuffer = createBuffer(gl);\n  var vao = createVAO(gl, [{\n    buffer: pointBuffer,\n    size: 3,\n    type: gl.FLOAT\n  }, {\n    buffer: colorBuffer,\n    size: 4,\n    type: gl.FLOAT\n  }, {\n    buffer: glyphBuffer,\n    size: 2,\n    type: gl.FLOAT\n  }, {\n    buffer: idBuffer,\n    size: 4,\n    type: gl.UNSIGNED_BYTE,\n    normalized: true\n  }]);\n  var pointCloud = new PointCloud(gl, shader, orthoShader, projectShader, pointBuffer, colorBuffer, glyphBuffer, idBuffer, vao, pickPerspectiveShader, pickOrthoShader, pickProjectShader);\n  pointCloud.update(options);\n  return pointCloud;\n}","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/gl-scatter3d/pointcloud.js"],"names":["isAllBlank","require","createBuffer","createVAO","pool","mat4mult","shaders","getGlyph","getSimpleString","IDENTITY","module","exports","createPointCloud","transformMat4","x","m","x0","x1","x2","x3","project","p","v","ScatterPlotPickResult","index","position","dataCoordinate","fixOpacity","a","PointCloud","gl","shader","orthoShader","projectShader","pointBuffer","colorBuffer","glyphBuffer","idBuffer","vao","pickPerspectiveShader","pickOrthoShader","pickProjectShader","pixelRatio","vertexCount","lineVertexCount","opacity","hasAlpha","lineWidth","projectScale","projectOpacity","projectHasAlpha","pickId","points","_selectResult","useOrtho","bounds","Infinity","axesProject","axesBounds","highlightId","highlightScale","clipBounds","dirty","proto","prototype","pickSlots","setPickBase","pickBase","isTransparent","i","isOpaque","VIEW_SHAPE","U_VEC","V_VEC","MU_VEC","MV_VEC","SCRATCH_MATRIX","slice","SCRATCH_VEC","CLIP_BOUNDS","zeroVec","augment","hg","af","setComponent","out","getClipBounds","result","j","Math","max","min","drawProject","camera","uniforms","model","view","projection","cubeAxis","axes","lastCubeProps","axis","drawingBufferWidth","drawingBufferHeight","bind","screenSize","pickGroup","scale","pmodel","u","du","dv","mdu","mdv","abs","tmp","t","su","sv","pow","sqrt","fragClipBounds","draw","TRIANGLES","LINES","unbind","NEG_INFINITY3","POS_INFINITY3","CLIP_GROUP","drawFull","pshader","transparent","forceDraw","drawTransparent","drawPick","pick","selected","id","value","pointCount","coord","highlight","selection","pointId","a0","a1","a2","get_glyphData","glyphs","font","str","Array","isArray","length","undefined","visible","glyph","mesh","lines","update","options","perspective","orthographic","s","alignment","alignmentX","alignmentY","lowerBound","upperBound","colors","color","sizes","size","angles","angle","lineColors","lineColor","pickCounter","triVertexCount","numPoints","count_loop","isNaN","isFinite","glyphData","glyphMesh","glyphLines","glyphBounds","cells","edges","positionArray","mallocFloat","colorArray","glyphArray","idArray","mallocUint32","triOffset","lineOffset","isColorArray","isLineColorArray","fill_loop","glyphVisible","c","cos","sin","textOffsetX","textOffsetY","textOffset","verts","positions","cell","k","l","free","dispose","createPerspective","createOrtho","createProject","createPickPerspective","createPickOrtho","createPickProject","buffer","type","FLOAT","UNSIGNED_BYTE","normalized","pointCloud"],"mappings":"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","sourcesContent":["'use strict'\n\nvar isAllBlank      = require('is-string-blank')\nvar createBuffer    = require('gl-buffer')\nvar createVAO       = require('gl-vao')\nvar pool            = require('typedarray-pool')\nvar mat4mult        = require('gl-mat4/multiply')\nvar shaders         = require('./lib/shaders')\nvar getGlyph        = require('./lib/glyphs')\nvar getSimpleString = require('./lib/get-simple-string')\n\nvar IDENTITY = [1,0,0,0,\n                0,1,0,0,\n                0,0,1,0,\n                0,0,0,1]\n\nmodule.exports = createPointCloud\n\nfunction transformMat4(x, m) {\n  var x0 = x[0]\n  var x1 = x[1]\n  var x2 = x[2]\n  var x3 = x[3]\n  x[0] = m[0] * x0 + m[4] * x1 + m[8]  * x2 + m[12] * x3\n  x[1] = m[1] * x0 + m[5] * x1 + m[9]  * x2 + m[13] * x3\n  x[2] = m[2] * x0 + m[6] * x1 + m[10] * x2 + m[14] * x3\n  x[3] = m[3] * x0 + m[7] * x1 + m[11] * x2 + m[15] * x3\n  return x\n}\n\nfunction project(p, v, m, x) {\n  transformMat4(x, x, m)\n  transformMat4(x, x, v)\n  return transformMat4(x, x, p)\n}\n\nfunction ScatterPlotPickResult(index, position) {\n  this.index = index\n  this.dataCoordinate = this.position = position\n}\n\nfunction fixOpacity(a) {\n  if(a === true) return 1\n  if(a > 1) return 1\n  return a\n}\n\nfunction PointCloud(\n  gl,\n  shader,\n  orthoShader,\n  projectShader,\n  pointBuffer,\n  colorBuffer,\n  glyphBuffer,\n  idBuffer,\n  vao,\n  pickPerspectiveShader,\n  pickOrthoShader,\n  pickProjectShader) {\n\n  this.gl              = gl\n\n  this.pixelRatio      = 1\n\n  this.shader          = shader\n  this.orthoShader     = orthoShader\n  this.projectShader   = projectShader\n\n  this.pointBuffer     = pointBuffer\n  this.colorBuffer     = colorBuffer\n  this.glyphBuffer     = glyphBuffer\n  this.idBuffer        = idBuffer\n  this.vao             = vao\n  this.vertexCount     = 0\n  this.lineVertexCount = 0\n\n  this.opacity         = 1\n  this.hasAlpha        = false\n\n  this.lineWidth       = 0\n  this.projectScale    = [2.0/3.0, 2.0/3.0, 2.0/3.0]\n  this.projectOpacity  = [1, 1, 1]\n  this.projectHasAlpha  = false\n\n  this.pickId                = 0\n  this.pickPerspectiveShader = pickPerspectiveShader\n  this.pickOrthoShader       = pickOrthoShader\n  this.pickProjectShader     = pickProjectShader\n  this.points                = []\n\n  this._selectResult = new ScatterPlotPickResult(0, [0,0,0])\n\n  this.useOrtho = true\n  this.bounds   = [[ Infinity,Infinity,Infinity],\n                   [-Infinity,-Infinity,-Infinity]]\n\n  //Axes projections\n  this.axesProject = [ true, true, true ]\n  this.axesBounds = [[-Infinity,-Infinity,-Infinity],\n                     [ Infinity, Infinity, Infinity]]\n\n  this.highlightId    = [1,1,1,1]\n  this.highlightScale = 2\n\n  this.clipBounds = [[-Infinity,-Infinity,-Infinity],\n                     [ Infinity, Infinity, Infinity]]\n\n  this.dirty = true\n}\n\nvar proto = PointCloud.prototype\n\nproto.pickSlots = 1\n\nproto.setPickBase = function(pickBase) {\n  this.pickId = pickBase\n}\n\nproto.isTransparent = function() {\n  if(this.hasAlpha)  {\n    return true\n  }\n  for(var i=0; i<3; ++i) {\n    if(this.axesProject[i] && this.projectHasAlpha) {\n      return true\n    }\n  }\n  return false\n}\n\nproto.isOpaque = function() {\n  if(!this.hasAlpha)  {\n    return true\n  }\n  for(var i=0; i<3; ++i) {\n    if(this.axesProject[i] && !this.projectHasAlpha) {\n      return true\n    }\n  }\n  return false\n}\n\nvar VIEW_SHAPE = [0,0]\nvar U_VEC = [0,0,0]\nvar V_VEC = [0,0,0]\nvar MU_VEC = [0,0,0,1]\nvar MV_VEC = [0,0,0,1]\nvar SCRATCH_MATRIX = IDENTITY.slice()\nvar SCRATCH_VEC = [0,0,0]\nvar CLIP_BOUNDS = [[0,0,0], [0,0,0]]\n\nfunction zeroVec(a) {\n  a[0] = a[1] = a[2] = 0\n  return a\n}\n\nfunction augment(hg, af) {\n  hg[0] = af[0]\n  hg[1] = af[1]\n  hg[2] = af[2]\n  hg[3] = 1\n  return hg\n}\n\nfunction setComponent(out, v, i, x) {\n  out[0] = v[0]\n  out[1] = v[1]\n  out[2] = v[2]\n  out[i] = x\n  return out\n}\n\nfunction getClipBounds(bounds) {\n  var result = CLIP_BOUNDS\n  for(var i=0; i<2; ++i) {\n    for(var j=0; j<3; ++j) {\n      result[i][j] = Math.max(Math.min(bounds[i][j], 1e8), -1e8)\n    }\n  }\n  return result\n}\n\nfunction drawProject(shader, points, camera, pixelRatio) {\n  var axesProject = points.axesProject\n\n  var gl         = points.gl\n  var uniforms   = shader.uniforms\n  var model      = camera.model      || IDENTITY\n  var view       = camera.view       || IDENTITY\n  var projection = camera.projection || IDENTITY\n  var bounds     = points.axesBounds\n  var clipBounds = getClipBounds(points.clipBounds)\n\n  var cubeAxis\n  if(points.axes && points.axes.lastCubeProps) {\n    cubeAxis = points.axes.lastCubeProps.axis\n  } else {\n    cubeAxis = [1,1,1]\n  }\n\n  VIEW_SHAPE[0] = 2.0/gl.drawingBufferWidth\n  VIEW_SHAPE[1] = 2.0/gl.drawingBufferHeight\n\n  shader.bind()\n  uniforms.view           = view\n  uniforms.projection     = projection\n  uniforms.screenSize     = VIEW_SHAPE\n  uniforms.highlightId    = points.highlightId\n  uniforms.highlightScale = points.highlightScale\n  uniforms.clipBounds     = clipBounds\n  uniforms.pickGroup      = points.pickId / 255.0\n  uniforms.pixelRatio     = pixelRatio\n\n  for(var i=0; i<3; ++i) {\n    if(!axesProject[i]) {\n      continue\n    }\n\n    uniforms.scale          = points.projectScale[i]\n    uniforms.opacity        = points.projectOpacity[i]\n\n    //Project model matrix\n    var pmodel = SCRATCH_MATRIX\n    for(var j=0; j<16; ++j) {\n      pmodel[j] = 0\n    }\n    for(var j=0; j<4; ++j) {\n      pmodel[5*j] = 1\n    }\n    pmodel[5*i] = 0\n    if(cubeAxis[i] < 0) {\n      pmodel[12+i] = bounds[0][i]\n    } else {\n      pmodel[12+i] = bounds[1][i]\n    }\n    mat4mult(pmodel, model, pmodel)\n    uniforms.model = pmodel\n\n    //Compute initial axes\n    var u = (i+1)%3\n    var v = (i+2)%3\n    var du = zeroVec(U_VEC)\n    var dv = zeroVec(V_VEC)\n    du[u] = 1\n    dv[v] = 1\n\n    //Align orientation relative to viewer\n    var mdu = project(projection, view, model, augment(MU_VEC, du))\n    var mdv = project(projection, view, model, augment(MV_VEC, dv))\n    if(Math.abs(mdu[1]) > Math.abs(mdv[1])) {\n      var tmp = mdu\n      mdu = mdv\n      mdv = tmp\n      tmp = du\n      du = dv\n      dv = tmp\n      var t = u\n      u = v\n      v = t\n    }\n    if(mdu[0] < 0) {\n      du[u] = -1\n    }\n    if(mdv[1] > 0) {\n      dv[v] = -1\n    }\n    var su = 0.0\n    var sv = 0.0\n    for(var j=0; j<4; ++j) {\n      su += Math.pow(model[4*u+j], 2)\n      sv += Math.pow(model[4*v+j], 2)\n    }\n    du[u] /= Math.sqrt(su)\n    dv[v] /= Math.sqrt(sv)\n    uniforms.axes[0] = du\n    uniforms.axes[1] = dv\n\n    //Update fragment clip bounds\n    uniforms.fragClipBounds[0] = setComponent(SCRATCH_VEC, clipBounds[0], i, -1e8)\n    uniforms.fragClipBounds[1] = setComponent(SCRATCH_VEC, clipBounds[1], i, 1e8)\n\n    points.vao.bind()\n\n    //Draw interior\n    points.vao.draw(gl.TRIANGLES, points.vertexCount)\n\n    //Draw edges\n    if(points.lineWidth > 0) {\n      gl.lineWidth(points.lineWidth * pixelRatio)\n      points.vao.draw(gl.LINES, points.lineVertexCount, points.vertexCount)\n    }\n\n    points.vao.unbind()\n  }\n}\n\n\nvar NEG_INFINITY3 = [-1e8, -1e8, -1e8]\nvar POS_INFINITY3 = [1e8, 1e8, 1e8]\nvar CLIP_GROUP    = [NEG_INFINITY3, POS_INFINITY3]\n\nfunction drawFull(shader, pshader, points, camera, pixelRatio, transparent, forceDraw) {\n  var gl = points.gl\n\n  if(transparent === points.projectHasAlpha || forceDraw) {\n    drawProject(pshader, points, camera, pixelRatio)\n  }\n\n  if(transparent === points.hasAlpha || forceDraw) {\n\n    shader.bind()\n    var uniforms = shader.uniforms\n\n    uniforms.model      = camera.model      || IDENTITY\n    uniforms.view       = camera.view       || IDENTITY\n    uniforms.projection = camera.projection || IDENTITY\n\n    VIEW_SHAPE[0]       = 2.0/gl.drawingBufferWidth\n    VIEW_SHAPE[1]       = 2.0/gl.drawingBufferHeight\n    uniforms.screenSize = VIEW_SHAPE\n\n    uniforms.highlightId    = points.highlightId\n    uniforms.highlightScale = points.highlightScale\n\n    uniforms.fragClipBounds = CLIP_GROUP\n    uniforms.clipBounds     = points.axes.bounds\n\n    uniforms.opacity    = points.opacity\n    uniforms.pickGroup  = points.pickId / 255.0\n\n    uniforms.pixelRatio = pixelRatio\n\n    points.vao.bind()\n\n    //Draw interior\n    points.vao.draw(gl.TRIANGLES, points.vertexCount)\n\n    //Draw edges\n    if(points.lineWidth > 0) {\n      gl.lineWidth(points.lineWidth * pixelRatio)\n      points.vao.draw(gl.LINES, points.lineVertexCount, points.vertexCount)\n    }\n\n    points.vao.unbind()\n  }\n\n\n}\n\nproto.draw = function(camera) {\n  var shader = this.useOrtho ? this.orthoShader : this.shader\n  drawFull(shader, this.projectShader, this, camera, this.pixelRatio, false, false)\n}\n\nproto.drawTransparent = function(camera) {\n  var shader = this.useOrtho ? this.orthoShader : this.shader\n  drawFull(shader, this.projectShader, this, camera, this.pixelRatio, true, false)\n}\n\nproto.drawPick = function(camera) {\n  var shader = this.useOrtho ? this.pickOrthoShader : this.pickPerspectiveShader\n  drawFull(shader, this.pickProjectShader, this, camera, 1, true, true)\n}\n\nproto.pick = function(selected) {\n  if(!selected) {\n    return null\n  }\n  if(selected.id !== this.pickId) {\n    return null\n  }\n  var x = selected.value[2] + (selected.value[1]<<8) + (selected.value[0]<<16)\n  if(x >= this.pointCount || x < 0) {\n    return null\n  }\n\n  //Unpack result\n  var coord = this.points[x]\n  var result = this._selectResult\n  result.index = x\n  for(var i=0; i<3; ++i) {\n    result.position[i] = result.dataCoordinate[i] = coord[i]\n  }\n  return result\n}\n\nproto.highlight = function(selection) {\n  if(!selection) {\n    this.highlightId = [1,1,1,1]\n  } else {\n    var pointId = selection.index\n    var a0 =  pointId     &0xff\n    var a1 = (pointId>>8) &0xff\n    var a2 = (pointId>>16)&0xff\n    this.highlightId = [a0/255.0, a1/255.0, a2/255.0, 0]\n  }\n}\n\nfunction get_glyphData(glyphs, index, font, pixelRatio) {\n  var str\n\n  // use the data if presented in an array\n  if(Array.isArray(glyphs)) {\n    if(index < glyphs.length) {\n      str = glyphs[index]\n    } else {\n      str = undefined\n    }\n  } else {\n    str = glyphs\n  }\n\n  str = getSimpleString(str) // this would handle undefined cases\n\n  var visible = true\n  if(isAllBlank(str)) {\n    str = '▼' // Note: this special character may have minimum number of surfaces\n    visible = false\n  }\n\n  var glyph = getGlyph(str, font, pixelRatio)\n\n  return { mesh:glyph[0],\n          lines:glyph[1],\n         bounds:glyph[2],\n        visible:visible };\n}\n\n\n\nproto.update = function(options) {\n\n  options = options || {}\n\n  if('perspective' in options) {\n    this.useOrtho = !options.perspective\n  }\n  if('orthographic' in options) {\n    this.useOrtho = !!options.orthographic\n  }\n  if('lineWidth' in options) {\n    this.lineWidth = options.lineWidth\n  }\n  if('project' in options) {\n    if(Array.isArray(options.project)) {\n      this.axesProject = options.project\n    } else {\n      var v = !!options.project\n      this.axesProject = [v,v,v]\n    }\n  }\n  if('projectScale' in options) {\n    if(Array.isArray(options.projectScale)) {\n      this.projectScale = options.projectScale.slice()\n    } else {\n      var s = +options.projectScale\n      this.projectScale = [s,s,s]\n    }\n  }\n\n  this.projectHasAlpha = false // default to no transparent draw\n  if('projectOpacity' in options) {\n    if(Array.isArray(options.projectOpacity)) {\n      this.projectOpacity = options.projectOpacity.slice()\n    } else {\n      var s = +options.projectOpacity\n      this.projectOpacity = [s,s,s]\n    }\n    for(var i=0; i<3; ++i) {\n      this.projectOpacity[i] = fixOpacity(this.projectOpacity[i]);\n      if(this.projectOpacity[i] < 1) {\n        this.projectHasAlpha = true;\n      }\n    }\n  }\n\n  this.hasAlpha = false // default to no transparent draw\n  if('opacity' in options) {\n    this.opacity = fixOpacity(options.opacity)\n    if(this.opacity < 1) {\n      this.hasAlpha = true;\n    }\n  }\n\n  //Set dirty flag\n  this.dirty = true\n\n  //Create new buffers\n  var points = options.position\n\n  //Text font\n  var font      = options.font      || 'normal'\n  var alignment = options.alignment || [0,0]\n\n  var alignmentX;\n  var alignmentY;\n  if (alignment.length === 2) {\n    alignmentX = alignment[0]\n    alignmentY = alignment[1]\n  } else {\n    alignmentX = []\n    alignmentY = []\n    for (var i = 0; i < alignment.length; ++i) {\n      alignmentX[i] = alignment[i][0]\n      alignmentY[i] = alignment[i][1]\n    }\n  }\n\n  //Bounds\n  var lowerBound = [ Infinity, Infinity, Infinity]\n  var upperBound = [-Infinity,-Infinity,-Infinity]\n\n  //Unpack options\n  var glyphs     = options.glyph\n  var colors     = options.color\n  var sizes      = options.size\n  var angles     = options.angle\n  var lineColors = options.lineColor\n\n  //Picking geometry\n  var pickCounter = -1\n\n  //First do pass to compute buffer sizes\n  var triVertexCount  = 0\n  var lineVertexCount = 0\n\n  var numPoints = 0;\n\n  if(points.length) {\n\n    //Count number of points and buffer size\n    numPoints = points.length\n\n  count_loop:\n    for(var i=0; i<numPoints; ++i) {\n      var x = points[i]\n      for(var j=0; j<3; ++j) {\n        if(isNaN(x[j]) || !isFinite(x[j])) {\n          continue count_loop\n        }\n      }\n\n      var glyphData = get_glyphData(glyphs, i, font, this.pixelRatio)\n\n      var glyphMesh   = glyphData.mesh\n      var glyphLines  = glyphData.lines\n      var glyphBounds = glyphData.bounds\n\n      triVertexCount  += glyphMesh.cells.length * 3\n      lineVertexCount += glyphLines.edges.length * 2\n    }\n  }\n\n  var vertexCount   = triVertexCount + lineVertexCount\n\n  //Preallocate data\n  var positionArray = pool.mallocFloat(3*vertexCount)\n  var colorArray    = pool.mallocFloat(4*vertexCount)\n  var glyphArray    = pool.mallocFloat(2*vertexCount)\n  var idArray       = pool.mallocUint32(vertexCount)\n\n  if(vertexCount > 0) {\n    var triOffset  = 0\n    var lineOffset = triVertexCount\n    var color      = [0,0,0,1]\n    var lineColor  = [0,0,0,1]\n\n    var isColorArray      = Array.isArray(colors)     && Array.isArray(colors[0])\n    var isLineColorArray  = Array.isArray(lineColors) && Array.isArray(lineColors[0])\n\n  fill_loop:\n    for(var i=0; i<numPoints; ++i) {\n      //Increment pickCounter\n      pickCounter += 1\n\n      var x = points[i]\n      for(var j=0; j<3; ++j) {\n        if(isNaN(x[j]) || !isFinite(x[j])) {\n          continue fill_loop\n        }\n\n        upperBound[j] = Math.max(upperBound[j], x[j])\n        lowerBound[j] = Math.min(lowerBound[j], x[j])\n      }\n\n      var glyphData = get_glyphData(glyphs, i, font, this.pixelRatio)\n\n      var glyphMesh   = glyphData.mesh\n      var glyphLines  = glyphData.lines\n      var glyphBounds = glyphData.bounds\n      var glyphVisible = glyphData.visible\n\n      //Get color\n      if(!glyphVisible) color = [1,1,1,0]\n      else if(Array.isArray(colors)) {\n        var c\n        if(isColorArray) {\n          if(i < colors.length) {\n            c = colors[i]\n          } else {\n            c = [0,0,0,0]\n          }\n        } else {\n          c = colors\n        }\n\n        if(c.length === 3) {\n          for(var j=0; j<3; ++j) {\n            color[j] = c[j]\n          }\n          color[3] = 1\n        } else if(c.length === 4) {\n          for(var j=0; j<4; ++j) {\n            color[j] = c[j]\n          }\n          if(!this.hasAlpha && c[3] < 1) this.hasAlpha = true\n        }\n      } else {\n        color[0] = color[1] = color[2] = 0\n        color[3] = 1\n      }\n\n\n      //Get lineColor\n      if(!glyphVisible) lineColor = [1,1,1,0]\n      else if(Array.isArray(lineColors)) {\n        var c\n        if(isLineColorArray) {\n          if(i < lineColors.length) {\n            c = lineColors[i]\n          } else {\n            c = [0,0,0,0]\n          }\n        } else {\n          c = lineColors\n        }\n\n        if(c.length === 3) {\n          for(var j=0; j<3; ++j) {\n            lineColor[j] = c[j]\n          }\n          lineColor[j] = 1\n        } else if(c.length === 4) {\n          for(var j=0; j<4; ++j) {\n            lineColor[j] = c[j]\n          }\n          if(!this.hasAlpha && c[3] < 1) this.hasAlpha = true\n        }\n      } else {\n        lineColor[0] = lineColor[1] = lineColor[2] = 0\n        lineColor[3] = 1\n      }\n\n\n      var size = 0.5\n      if(!glyphVisible) size = 0.0\n      else if(Array.isArray(sizes)) {\n        if(i < sizes.length) {\n          size = +sizes[i]\n        } else {\n          size = 12\n        }\n      } else if(sizes) {\n        size = +sizes\n      } else if(this.useOrtho) {\n        size = 12\n      }\n\n\n      var angle = 0\n      if(Array.isArray(angles)) {\n        if(i < angles.length) {\n          angle = +angles[i]\n        } else {\n          angle = 0\n        }\n      } else if(angles) {\n        angle = +angles\n      }\n\n      //Loop through markers and append to buffers\n      var cos = Math.cos(angle)\n      var sin = Math.sin(angle)\n\n      var x = points[i]\n      for(var j=0; j<3; ++j) {\n        upperBound[j] = Math.max(upperBound[j], x[j])\n        lowerBound[j] = Math.min(lowerBound[j], x[j])\n      }\n\n      //Calculate text offset\n      var textOffsetX = alignmentX\n      var textOffsetY = alignmentY\n\n      var textOffsetX = 0\n      if(Array.isArray(alignmentX)) {\n        if(i < alignmentX.length) {\n          textOffsetX = alignmentX[i]\n        } else {\n          textOffsetX = 0\n        }\n      } else if(alignmentX) {\n        textOffsetX = alignmentX\n      }\n\n      var textOffsetY = 0\n      if(Array.isArray(alignmentY)) {\n        if(i < alignmentY.length) {\n          textOffsetY = alignmentY[i]\n        } else {\n          textOffsetY = 0\n        }\n      } else if(alignmentY) {\n        textOffsetY = alignmentY\n      }\n\n      textOffsetX *= (textOffsetX > 0) ? (1 - glyphBounds[0][0]) :\n                     (textOffsetX < 0) ? (1 + glyphBounds[1][0]) : 1;\n\n      textOffsetY *= (textOffsetY > 0) ? (1 - glyphBounds[0][1]) :\n                     (textOffsetY < 0) ? (1 + glyphBounds[1][1]) : 1;\n\n      var textOffset = [textOffsetX, textOffsetY]\n\n      //Write out inner marker\n      var cells = glyphMesh.cells || []\n      var verts = glyphMesh.positions || []\n\n      for(var j=0; j<cells.length; ++j) {\n        var cell = cells[j]\n        for(var k=0; k<3; ++k) {\n          for(var l=0; l<3; ++l) {\n            positionArray[3*triOffset+l] = x[l]\n          }\n          for(var l=0; l<4; ++l) {\n            colorArray[4*triOffset+l] = color[l]\n          }\n          idArray[triOffset] = pickCounter\n          var p = verts[cell[k]]\n          glyphArray[2*triOffset]   = size * (cos*p[0] - sin*p[1] + textOffset[0])\n          glyphArray[2*triOffset+1] = size * (sin*p[0] + cos*p[1] + textOffset[1])\n          triOffset += 1\n        }\n      }\n\n      var cells = glyphLines.edges\n      var verts = glyphLines.positions\n\n      for(var j=0; j<cells.length; ++j) {\n        var cell = cells[j]\n        for(var k=0; k<2; ++k) {\n          for(var l=0; l<3; ++l) {\n            positionArray[3*lineOffset+l] = x[l]\n          }\n          for(var l=0; l<4; ++l) {\n            colorArray[4*lineOffset+l] = lineColor[l]\n          }\n          idArray[lineOffset] = pickCounter\n          var p = verts[cell[k]]\n          glyphArray[2*lineOffset]   = size * (cos*p[0] - sin*p[1] + textOffset[0])\n          glyphArray[2*lineOffset+1] = size * (sin*p[0] + cos*p[1] + textOffset[1])\n          lineOffset += 1\n        }\n      }\n\n    }\n\n\n\n  }\n\n  //Update bounds\n  this.bounds = [lowerBound, upperBound]\n\n  //Save points\n  this.points = points\n\n  //Save number of points\n  this.pointCount = points.length\n\n  //Update vertex counts\n  this.vertexCount      = triVertexCount\n  this.lineVertexCount  = lineVertexCount\n\n  this.pointBuffer.update(positionArray)\n  this.colorBuffer.update(colorArray)\n  this.glyphBuffer.update(glyphArray)\n  //this.idBuffer.update(new Uint32Array(idArray))\n  this.idBuffer.update(idArray)\n\n  pool.free(positionArray)\n  pool.free(colorArray)\n  pool.free(glyphArray)\n  pool.free(idArray)\n}\n\nproto.dispose = function() {\n  //Shaders\n  this.shader.dispose()\n  this.orthoShader.dispose()\n  this.pickPerspectiveShader.dispose()\n  this.pickOrthoShader.dispose()\n\n  //Vertex array\n  this.vao.dispose()\n\n  //Buffers\n  this.pointBuffer.dispose()\n  this.colorBuffer.dispose()\n  this.glyphBuffer.dispose()\n  this.idBuffer.dispose()\n}\n\nfunction createPointCloud(options) {\n  var gl = options.gl\n\n  var shader                = shaders.createPerspective(gl)\n  var orthoShader           = shaders.createOrtho(gl)\n  var projectShader         = shaders.createProject(gl)\n  var pickPerspectiveShader = shaders.createPickPerspective(gl)\n  var pickOrthoShader       = shaders.createPickOrtho(gl)\n  var pickProjectShader     = shaders.createPickProject(gl)\n\n  var pointBuffer = createBuffer(gl)\n  var colorBuffer = createBuffer(gl)\n  var glyphBuffer = createBuffer(gl)\n  var idBuffer    = createBuffer(gl)\n  var vao = createVAO(gl, [\n    {\n      buffer: pointBuffer,\n      size: 3,\n      type: gl.FLOAT\n    },\n    {\n      buffer: colorBuffer,\n      size: 4,\n      type: gl.FLOAT\n    },\n    {\n      buffer: glyphBuffer,\n      size: 2,\n      type: gl.FLOAT\n    },\n    {\n      buffer: idBuffer,\n      size: 4,\n      type: gl.UNSIGNED_BYTE,\n      normalized: true\n    }\n  ])\n\n  var pointCloud = new PointCloud(\n    gl,\n    shader,\n    orthoShader,\n    projectShader,\n    pointBuffer,\n    colorBuffer,\n    glyphBuffer,\n    idBuffer,\n    vao,\n    pickPerspectiveShader,\n    pickOrthoShader,\n    pickProjectShader)\n\n  pointCloud.update(options)\n\n  return pointCloud\n}\n"]},"metadata":{},"sourceType":"script"}