{"ast":null,"code":"'use strict';\n\nvar Lib = require('../../lib');\n\nvar hasColorscale = require('../../components/colorscale/helpers').hasColorscale;\n\nvar colorscaleDefaults = require('../../components/colorscale/defaults');\n\nvar handleDomainDefaults = require('../../plots/domain').defaults;\n\nvar handleArrayContainerDefaults = require('../../plots/array_container_defaults');\n\nvar Axes = require('../../plots/cartesian/axes');\n\nvar attributes = require('./attributes');\n\nvar axisBrush = require('./axisbrush');\n\nvar maxDimensionCount = require('./constants').maxDimensionCount;\n\nvar mergeLength = require('./merge_length');\n\nfunction handleLineDefaults(traceIn, traceOut, defaultColor, layout, coerce) {\n  var lineColor = coerce('line.color', defaultColor);\n\n  if (hasColorscale(traceIn, 'line') && Lib.isArrayOrTypedArray(lineColor)) {\n    if (lineColor.length) {\n      coerce('line.colorscale');\n      colorscaleDefaults(traceIn, traceOut, layout, coerce, {\n        prefix: 'line.',\n        cLetter: 'c'\n      }); // TODO: I think it would be better to keep showing lines beyond the last line color\n      // but I'm not sure what color to give these lines - probably black or white\n      // depending on the background color?\n\n      return lineColor.length;\n    } else {\n      traceOut.line.color = defaultColor;\n    }\n  }\n\n  return Infinity;\n}\n\nfunction dimensionDefaults(dimensionIn, dimensionOut, parentOut, opts) {\n  function coerce(attr, dflt) {\n    return Lib.coerce(dimensionIn, dimensionOut, attributes.dimensions, attr, dflt);\n  }\n\n  var values = coerce('values');\n  var visible = coerce('visible');\n\n  if (!(values && values.length)) {\n    visible = dimensionOut.visible = false;\n  }\n\n  if (visible) {\n    coerce('label');\n    coerce('tickvals');\n    coerce('ticktext');\n    coerce('tickformat');\n    var range = coerce('range');\n    dimensionOut._ax = {\n      _id: 'y',\n      type: 'linear',\n      showexponent: 'all',\n      exponentformat: 'B',\n      range: range\n    };\n    Axes.setConvert(dimensionOut._ax, opts.layout);\n    coerce('multiselect');\n    var constraintRange = coerce('constraintrange');\n\n    if (constraintRange) {\n      dimensionOut.constraintrange = axisBrush.cleanRanges(constraintRange, dimensionOut);\n    }\n  }\n}\n\nmodule.exports = function supplyDefaults(traceIn, traceOut, defaultColor, layout) {\n  function coerce(attr, dflt) {\n    return Lib.coerce(traceIn, traceOut, attributes, attr, dflt);\n  }\n\n  var dimensionsIn = traceIn.dimensions;\n\n  if (Array.isArray(dimensionsIn) && dimensionsIn.length > maxDimensionCount) {\n    Lib.log('parcoords traces support up to ' + maxDimensionCount + ' dimensions at the moment');\n    dimensionsIn.splice(maxDimensionCount);\n  }\n\n  var dimensions = handleArrayContainerDefaults(traceIn, traceOut, {\n    name: 'dimensions',\n    layout: layout,\n    handleItemDefaults: dimensionDefaults\n  });\n  var len = handleLineDefaults(traceIn, traceOut, defaultColor, layout, coerce);\n  handleDomainDefaults(traceOut, layout, coerce);\n\n  if (!Array.isArray(dimensions) || !dimensions.length) {\n    traceOut.visible = false;\n  }\n\n  mergeLength(traceOut, dimensions, 'values', len); // make default font size 10px (default is 12),\n  // scale linearly with global font size\n\n  var fontDflt = {\n    family: layout.font.family,\n    size: Math.round(layout.font.size / 1.2),\n    color: layout.font.color\n  };\n  Lib.coerceFont(coerce, 'labelfont', fontDflt);\n  Lib.coerceFont(coerce, 'tickfont', fontDflt);\n  Lib.coerceFont(coerce, 'rangefont', fontDflt);\n  coerce('labelangle');\n  coerce('labelside');\n};","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/plotly.js/src/traces/parcoords/defaults.js"],"names":["Lib","require","hasColorscale","colorscaleDefaults","handleDomainDefaults","defaults","handleArrayContainerDefaults","Axes","attributes","axisBrush","maxDimensionCount","mergeLength","handleLineDefaults","traceIn","traceOut","defaultColor","layout","coerce","lineColor","isArrayOrTypedArray","length","prefix","cLetter","line","color","Infinity","dimensionDefaults","dimensionIn","dimensionOut","parentOut","opts","attr","dflt","dimensions","values","visible","range","_ax","_id","type","showexponent","exponentformat","setConvert","constraintRange","constraintrange","cleanRanges","module","exports","supplyDefaults","dimensionsIn","Array","isArray","log","splice","name","handleItemDefaults","len","fontDflt","family","font","size","Math","round","coerceFont"],"mappings":"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","sourcesContent":["'use strict';\n\nvar Lib = require('../../lib');\nvar hasColorscale = require('../../components/colorscale/helpers').hasColorscale;\nvar colorscaleDefaults = require('../../components/colorscale/defaults');\nvar handleDomainDefaults = require('../../plots/domain').defaults;\nvar handleArrayContainerDefaults = require('../../plots/array_container_defaults');\nvar Axes = require('../../plots/cartesian/axes');\n\nvar attributes = require('./attributes');\nvar axisBrush = require('./axisbrush');\nvar maxDimensionCount = require('./constants').maxDimensionCount;\nvar mergeLength = require('./merge_length');\n\nfunction handleLineDefaults(traceIn, traceOut, defaultColor, layout, coerce) {\n    var lineColor = coerce('line.color', defaultColor);\n\n    if(hasColorscale(traceIn, 'line') && Lib.isArrayOrTypedArray(lineColor)) {\n        if(lineColor.length) {\n            coerce('line.colorscale');\n            colorscaleDefaults(traceIn, traceOut, layout, coerce, {prefix: 'line.', cLetter: 'c'});\n            // TODO: I think it would be better to keep showing lines beyond the last line color\n            // but I'm not sure what color to give these lines - probably black or white\n            // depending on the background color?\n            return lineColor.length;\n        } else {\n            traceOut.line.color = defaultColor;\n        }\n    }\n    return Infinity;\n}\n\nfunction dimensionDefaults(dimensionIn, dimensionOut, parentOut, opts) {\n    function coerce(attr, dflt) {\n        return Lib.coerce(dimensionIn, dimensionOut, attributes.dimensions, attr, dflt);\n    }\n\n    var values = coerce('values');\n    var visible = coerce('visible');\n    if(!(values && values.length)) {\n        visible = dimensionOut.visible = false;\n    }\n\n    if(visible) {\n        coerce('label');\n        coerce('tickvals');\n        coerce('ticktext');\n        coerce('tickformat');\n        var range = coerce('range');\n\n        dimensionOut._ax = {\n            _id: 'y',\n            type: 'linear',\n            showexponent: 'all',\n            exponentformat: 'B',\n            range: range\n        };\n\n        Axes.setConvert(dimensionOut._ax, opts.layout);\n\n        coerce('multiselect');\n        var constraintRange = coerce('constraintrange');\n        if(constraintRange) {\n            dimensionOut.constraintrange = axisBrush.cleanRanges(constraintRange, dimensionOut);\n        }\n    }\n}\n\nmodule.exports = function supplyDefaults(traceIn, traceOut, defaultColor, layout) {\n    function coerce(attr, dflt) {\n        return Lib.coerce(traceIn, traceOut, attributes, attr, dflt);\n    }\n\n    var dimensionsIn = traceIn.dimensions;\n    if(Array.isArray(dimensionsIn) && dimensionsIn.length > maxDimensionCount) {\n        Lib.log('parcoords traces support up to ' + maxDimensionCount + ' dimensions at the moment');\n        dimensionsIn.splice(maxDimensionCount);\n    }\n\n    var dimensions = handleArrayContainerDefaults(traceIn, traceOut, {\n        name: 'dimensions',\n        layout: layout,\n        handleItemDefaults: dimensionDefaults\n    });\n\n    var len = handleLineDefaults(traceIn, traceOut, defaultColor, layout, coerce);\n\n    handleDomainDefaults(traceOut, layout, coerce);\n\n    if(!Array.isArray(dimensions) || !dimensions.length) {\n        traceOut.visible = false;\n    }\n\n    mergeLength(traceOut, dimensions, 'values', len);\n\n    // make default font size 10px (default is 12),\n    // scale linearly with global font size\n    var fontDflt = {\n        family: layout.font.family,\n        size: Math.round(layout.font.size / 1.2),\n        color: layout.font.color\n    };\n\n    Lib.coerceFont(coerce, 'labelfont', fontDflt);\n    Lib.coerceFont(coerce, 'tickfont', fontDflt);\n    Lib.coerceFont(coerce, 'rangefont', fontDflt);\n\n    coerce('labelangle');\n    coerce('labelside');\n};\n"]},"metadata":{},"sourceType":"script"}