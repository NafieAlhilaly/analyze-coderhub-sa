{"ast":null,"code":"'use strict';\n\nvar Font = require('css-font');\n\nvar pick = require('pick-by-alias');\n\nvar createRegl = require('regl');\n\nvar createGl = require('gl-util/context');\n\nvar WeakMap = require('es6-weak-map');\n\nvar rgba = require('color-normalize');\n\nvar fontAtlas = require('font-atlas');\n\nvar pool = require('typedarray-pool');\n\nvar parseRect = require('parse-rect');\n\nvar isObj = require('is-plain-obj');\n\nvar parseUnit = require('parse-unit');\n\nvar px = require('to-px');\n\nvar kerning = require('detect-kerning');\n\nvar extend = require('object-assign');\n\nvar metrics = require('font-measure');\n\nvar flatten = require('flatten-vertex-data');\n\nvar ref = require('bit-twiddle');\n\nvar nextPow2 = ref.nextPow2;\nvar shaderCache = new WeakMap(); // Safari does not support font-stretch\n\nvar isStretchSupported = false;\n\nif (document.body) {\n  var el = document.body.appendChild(document.createElement('div'));\n  el.style.font = 'italic small-caps bold condensed 16px/2 cursive';\n\n  if (getComputedStyle(el).fontStretch) {\n    isStretchSupported = true;\n  }\n\n  document.body.removeChild(el);\n}\n\nvar GlText = function GlText(o) {\n  if (isRegl(o)) {\n    o = {\n      regl: o\n    };\n    this.gl = o.regl._gl;\n  } else {\n    this.gl = createGl(o);\n  }\n\n  this.shader = shaderCache.get(this.gl);\n\n  if (!this.shader) {\n    this.regl = o.regl || createRegl({\n      gl: this.gl\n    });\n  } else {\n    this.regl = this.shader.regl;\n  }\n\n  this.charBuffer = this.regl.buffer({\n    type: 'uint8',\n    usage: 'stream'\n  });\n  this.sizeBuffer = this.regl.buffer({\n    type: 'float',\n    usage: 'stream'\n  });\n\n  if (!this.shader) {\n    this.shader = this.createShader();\n    shaderCache.set(this.gl, this.shader);\n  }\n\n  this.batch = []; // multiple options initial state\n\n  this.fontSize = [];\n  this.font = [];\n  this.fontAtlas = [];\n  this.draw = this.shader.draw.bind(this);\n\n  this.render = function () {\n    // FIXME: add Safari regl report here:\n    // charBuffer and width just do not trigger\n    this.regl._refresh();\n\n    this.draw(this.batch);\n  };\n\n  this.canvas = this.gl.canvas;\n  this.update(isObj(o) ? o : {});\n};\n\nGlText.prototype.createShader = function createShader() {\n  var regl = this.regl;\n  var draw = regl({\n    blend: {\n      enable: true,\n      color: [0, 0, 0, 1],\n      func: {\n        srcRGB: 'src alpha',\n        dstRGB: 'one minus src alpha',\n        srcAlpha: 'one minus dst alpha',\n        dstAlpha: 'one'\n      }\n    },\n    stencil: {\n      enable: false\n    },\n    depth: {\n      enable: false\n    },\n    count: regl.prop('count'),\n    offset: regl.prop('offset'),\n    attributes: {\n      charOffset: {\n        offset: 4,\n        stride: 8,\n        buffer: regl.this('sizeBuffer')\n      },\n      width: {\n        offset: 0,\n        stride: 8,\n        buffer: regl.this('sizeBuffer')\n      },\n      char: regl.this('charBuffer'),\n      position: regl.this('position')\n    },\n    uniforms: {\n      atlasSize: function (c, p) {\n        return [p.atlas.width, p.atlas.height];\n      },\n      atlasDim: function (c, p) {\n        return [p.atlas.cols, p.atlas.rows];\n      },\n      atlas: function (c, p) {\n        return p.atlas.texture;\n      },\n      charStep: function (c, p) {\n        return p.atlas.step;\n      },\n      em: function (c, p) {\n        return p.atlas.em;\n      },\n      color: regl.prop('color'),\n      opacity: regl.prop('opacity'),\n      viewport: regl.this('viewportArray'),\n      scale: regl.this('scale'),\n      align: regl.prop('align'),\n      baseline: regl.prop('baseline'),\n      translate: regl.this('translate'),\n      positionOffset: regl.prop('positionOffset')\n    },\n    primitive: 'points',\n    viewport: regl.this('viewport'),\n    vert: \"\\n\\t\\t\\tprecision highp float;\\n\\t\\t\\tattribute float width, charOffset, char;\\n\\t\\t\\tattribute vec2 position;\\n\\t\\t\\tuniform float fontSize, charStep, em, align, baseline;\\n\\t\\t\\tuniform vec4 viewport;\\n\\t\\t\\tuniform vec4 color;\\n\\t\\t\\tuniform vec2 atlasSize, atlasDim, scale, translate, positionOffset;\\n\\t\\t\\tvarying vec2 charCoord, charId;\\n\\t\\t\\tvarying float charWidth;\\n\\t\\t\\tvarying vec4 fontColor;\\n\\t\\t\\tvoid main () {\\n\\t\\t\\t\\tvec2 offset = floor(em * (vec2(align + charOffset, baseline)\\n\\t\\t\\t\\t\\t+ vec2(positionOffset.x, -positionOffset.y)))\\n\\t\\t\\t\\t\\t/ (viewport.zw * scale.xy);\\n\\n\\t\\t\\t\\tvec2 position = (position + translate) * scale;\\n\\t\\t\\t\\tposition += offset * scale;\\n\\n\\t\\t\\t\\tcharCoord = position * viewport.zw + viewport.xy;\\n\\n\\t\\t\\t\\tgl_Position = vec4(position * 2. - 1., 0, 1);\\n\\n\\t\\t\\t\\tgl_PointSize = charStep;\\n\\n\\t\\t\\t\\tcharId.x = mod(char, atlasDim.x);\\n\\t\\t\\t\\tcharId.y = floor(char / atlasDim.x);\\n\\n\\t\\t\\t\\tcharWidth = width * em;\\n\\n\\t\\t\\t\\tfontColor = color / 255.;\\n\\t\\t\\t}\",\n    frag: \"\\n\\t\\t\\tprecision highp float;\\n\\t\\t\\tuniform float fontSize, charStep, opacity;\\n\\t\\t\\tuniform vec2 atlasSize;\\n\\t\\t\\tuniform vec4 viewport;\\n\\t\\t\\tuniform sampler2D atlas;\\n\\t\\t\\tvarying vec4 fontColor;\\n\\t\\t\\tvarying vec2 charCoord, charId;\\n\\t\\t\\tvarying float charWidth;\\n\\n\\t\\t\\tfloat lightness(vec4 color) {\\n\\t\\t\\t\\treturn color.r * 0.299 + color.g * 0.587 + color.b * 0.114;\\n\\t\\t\\t}\\n\\n\\t\\t\\tvoid main () {\\n\\t\\t\\t\\tvec2 uv = gl_FragCoord.xy - charCoord + charStep * .5;\\n\\t\\t\\t\\tfloat halfCharStep = floor(charStep * .5 + .5);\\n\\n\\t\\t\\t\\t// invert y and shift by 1px (FF expecially needs that)\\n\\t\\t\\t\\tuv.y = charStep - uv.y;\\n\\n\\t\\t\\t\\t// ignore points outside of character bounding box\\n\\t\\t\\t\\tfloat halfCharWidth = ceil(charWidth * .5);\\n\\t\\t\\t\\tif (floor(uv.x) > halfCharStep + halfCharWidth ||\\n\\t\\t\\t\\t\\tfloor(uv.x) < halfCharStep - halfCharWidth) return;\\n\\n\\t\\t\\t\\tuv += charId * charStep;\\n\\t\\t\\t\\tuv = uv / atlasSize;\\n\\n\\t\\t\\t\\tvec4 color = fontColor;\\n\\t\\t\\t\\tvec4 mask = texture2D(atlas, uv);\\n\\n\\t\\t\\t\\tfloat maskY = lightness(mask);\\n\\t\\t\\t\\t// float colorY = lightness(color);\\n\\t\\t\\t\\tcolor.a *= maskY;\\n\\t\\t\\t\\tcolor.a *= opacity;\\n\\n\\t\\t\\t\\t// color.a += .1;\\n\\n\\t\\t\\t\\t// antialiasing, see yiq color space y-channel formula\\n\\t\\t\\t\\t// color.rgb += (1. - color.rgb) * (1. - mask.rgb);\\n\\n\\t\\t\\t\\tgl_FragColor = color;\\n\\t\\t\\t}\"\n  }); // per font-size atlas\n\n  var atlas = {};\n  return {\n    regl: regl,\n    draw: draw,\n    atlas: atlas\n  };\n};\n\nGlText.prototype.update = function update(o) {\n  var this$1 = this;\n\n  if (typeof o === 'string') {\n    o = {\n      text: o\n    };\n  } else if (!o) {\n    return;\n  } // FIXME: make this a static transform or more general approact\n\n\n  o = pick(o, {\n    position: 'position positions coord coords coordinates',\n    font: 'font fontFace fontface typeface cssFont css-font family fontFamily',\n    fontSize: 'fontSize fontsize size font-size',\n    text: 'text texts chars characters value values symbols',\n    align: 'align alignment textAlign textbaseline',\n    baseline: 'baseline textBaseline textbaseline',\n    direction: 'dir direction textDirection',\n    color: 'color colour fill fill-color fillColor textColor textcolor',\n    kerning: 'kerning kern',\n    range: 'range dataBox',\n    viewport: 'vp viewport viewBox viewbox viewPort',\n    opacity: 'opacity alpha transparency visible visibility opaque',\n    offset: 'offset positionOffset padding shift indent indentation'\n  }, true);\n\n  if (o.opacity != null) {\n    if (Array.isArray(o.opacity)) {\n      this.opacity = o.opacity.map(function (o) {\n        return parseFloat(o);\n      });\n    } else {\n      this.opacity = parseFloat(o.opacity);\n    }\n  }\n\n  if (o.viewport != null) {\n    this.viewport = parseRect(o.viewport);\n    this.viewportArray = [this.viewport.x, this.viewport.y, this.viewport.width, this.viewport.height];\n  }\n\n  if (this.viewport == null) {\n    this.viewport = {\n      x: 0,\n      y: 0,\n      width: this.gl.drawingBufferWidth,\n      height: this.gl.drawingBufferHeight\n    };\n    this.viewportArray = [this.viewport.x, this.viewport.y, this.viewport.width, this.viewport.height];\n  }\n\n  if (o.kerning != null) {\n    this.kerning = o.kerning;\n  }\n\n  if (o.offset != null) {\n    if (typeof o.offset === 'number') {\n      o.offset = [o.offset, 0];\n    }\n\n    this.positionOffset = flatten(o.offset);\n  }\n\n  if (o.direction) {\n    this.direction = o.direction;\n  }\n\n  if (o.range) {\n    this.range = o.range;\n    this.scale = [1 / (o.range[2] - o.range[0]), 1 / (o.range[3] - o.range[1])];\n    this.translate = [-o.range[0], -o.range[1]];\n  }\n\n  if (o.scale) {\n    this.scale = o.scale;\n  }\n\n  if (o.translate) {\n    this.translate = o.translate;\n  } // default scale corresponds to viewport\n\n\n  if (!this.scale) {\n    this.scale = [1 / this.viewport.width, 1 / this.viewport.height];\n  }\n\n  if (!this.translate) {\n    this.translate = [0, 0];\n  }\n\n  if (!this.font.length && !o.font) {\n    o.font = GlText.baseFontSize + 'px sans-serif';\n  } // normalize font caching string\n\n\n  var newFont = false,\n      newFontSize = false; // obtain new font data\n\n  if (o.font) {\n    (Array.isArray(o.font) ? o.font : [o.font]).forEach(function (font, i) {\n      // normalize font\n      if (typeof font === 'string') {\n        try {\n          font = Font.parse(font);\n        } catch (e) {\n          font = Font.parse(GlText.baseFontSize + 'px ' + font);\n        }\n      } else {\n        font = Font.parse(Font.stringify(font));\n      }\n\n      var baseString = Font.stringify({\n        size: GlText.baseFontSize,\n        family: font.family,\n        stretch: isStretchSupported ? font.stretch : undefined,\n        variant: font.variant,\n        weight: font.weight,\n        style: font.style\n      });\n      var unit = parseUnit(font.size);\n      var fs = Math.round(unit[0] * px(unit[1]));\n\n      if (fs !== this$1.fontSize[i]) {\n        newFontSize = true;\n        this$1.fontSize[i] = fs;\n      } // calc new font metrics/atlas\n\n\n      if (!this$1.font[i] || baseString != this$1.font[i].baseString) {\n        newFont = true; // obtain font cache or create one\n\n        this$1.font[i] = GlText.fonts[baseString];\n\n        if (!this$1.font[i]) {\n          var family = font.family.join(', ');\n          var style = [font.style];\n\n          if (font.style != font.variant) {\n            style.push(font.variant);\n          }\n\n          if (font.variant != font.weight) {\n            style.push(font.weight);\n          }\n\n          if (isStretchSupported && font.weight != font.stretch) {\n            style.push(font.stretch);\n          }\n\n          this$1.font[i] = {\n            baseString: baseString,\n            // typeface\n            family: family,\n            weight: font.weight,\n            stretch: font.stretch,\n            style: font.style,\n            variant: font.variant,\n            // widths of characters\n            width: {},\n            // kernin pairs offsets\n            kerning: {},\n            metrics: metrics(family, {\n              origin: 'top',\n              fontSize: GlText.baseFontSize,\n              fontStyle: style.join(' ')\n            })\n          };\n          GlText.fonts[baseString] = this$1.font[i];\n        }\n      }\n    });\n  } // FIXME: make independend font-size\n  // if (o.fontSize) {\n  // let unit = parseUnit(o.fontSize)\n  // let fs = Math.round(unit[0] * px(unit[1]))\n  // if (fs != this.fontSize) {\n  // \tnewFontSize = true\n  // \tthis.fontSize = fs\n  // }\n  // }\n\n\n  if (newFont || newFontSize) {\n    this.font.forEach(function (font, i) {\n      var fontString = Font.stringify({\n        size: this$1.fontSize[i],\n        family: font.family,\n        stretch: isStretchSupported ? font.stretch : undefined,\n        variant: font.variant,\n        weight: font.weight,\n        style: font.style\n      }); // calc new font size atlas\n\n      this$1.fontAtlas[i] = this$1.shader.atlas[fontString];\n\n      if (!this$1.fontAtlas[i]) {\n        var metrics = font.metrics;\n        this$1.shader.atlas[fontString] = this$1.fontAtlas[i] = {\n          fontString: fontString,\n          // even step is better for rendered characters\n          step: Math.ceil(this$1.fontSize[i] * metrics.bottom * .5) * 2,\n          em: this$1.fontSize[i],\n          cols: 0,\n          rows: 0,\n          height: 0,\n          width: 0,\n          chars: [],\n          ids: {},\n          texture: this$1.regl.texture()\n        };\n      } // bump atlas characters\n\n\n      if (o.text == null) {\n        o.text = this$1.text;\n      }\n    });\n  } // if multiple positions - duplicate text arguments\n  // FIXME: this possibly can be done better to avoid array spawn\n\n\n  if (typeof o.text === 'string' && o.position && o.position.length > 2) {\n    var textArray = Array(o.position.length * .5);\n\n    for (var i = 0; i < textArray.length; i++) {\n      textArray[i] = o.text;\n    }\n\n    o.text = textArray;\n  } // calculate offsets for the new font/text\n\n\n  var newAtlasChars;\n\n  if (o.text != null || newFont) {\n    // FIXME: ignore spaces\n    // text offsets within the text buffer\n    this.textOffsets = [0];\n\n    if (Array.isArray(o.text)) {\n      this.count = o.text[0].length;\n      this.counts = [this.count];\n\n      for (var i$1 = 1; i$1 < o.text.length; i$1++) {\n        this.textOffsets[i$1] = this.textOffsets[i$1 - 1] + o.text[i$1 - 1].length;\n        this.count += o.text[i$1].length;\n        this.counts.push(o.text[i$1].length);\n      }\n\n      this.text = o.text.join('');\n    } else {\n      this.text = o.text;\n      this.count = this.text.length;\n      this.counts = [this.count];\n    }\n\n    newAtlasChars = []; // detect & measure new characters\n\n    this.font.forEach(function (font, idx) {\n      GlText.atlasContext.font = font.baseString;\n      var atlas = this$1.fontAtlas[idx];\n\n      for (var i = 0; i < this$1.text.length; i++) {\n        var char = this$1.text.charAt(i);\n\n        if (atlas.ids[char] == null) {\n          atlas.ids[char] = atlas.chars.length;\n          atlas.chars.push(char);\n          newAtlasChars.push(char);\n        }\n\n        if (font.width[char] == null) {\n          font.width[char] = GlText.atlasContext.measureText(char).width / GlText.baseFontSize; // measure kerning pairs for the new character\n\n          if (this$1.kerning) {\n            var pairs = [];\n\n            for (var baseChar in font.width) {\n              pairs.push(baseChar + char, char + baseChar);\n            }\n\n            extend(font.kerning, kerning(font.family, {\n              pairs: pairs\n            }));\n          }\n        }\n      }\n    });\n  } // create single position buffer (faster than batch or multiple separate instances)\n\n\n  if (o.position) {\n    if (o.position.length > 2) {\n      var flat = !o.position[0].length;\n      var positionData = pool.mallocFloat(this.count * 2);\n\n      for (var i$2 = 0, ptr = 0; i$2 < this.counts.length; i$2++) {\n        var count = this.counts[i$2];\n\n        if (flat) {\n          for (var j = 0; j < count; j++) {\n            positionData[ptr++] = o.position[i$2 * 2];\n            positionData[ptr++] = o.position[i$2 * 2 + 1];\n          }\n        } else {\n          for (var j$1 = 0; j$1 < count; j$1++) {\n            positionData[ptr++] = o.position[i$2][0];\n            positionData[ptr++] = o.position[i$2][1];\n          }\n        }\n      }\n\n      if (this.position.call) {\n        this.position({\n          type: 'float',\n          data: positionData\n        });\n      } else {\n        this.position = this.regl.buffer({\n          type: 'float',\n          data: positionData\n        });\n      }\n\n      pool.freeFloat(positionData);\n    } else {\n      if (this.position.destroy) {\n        this.position.destroy();\n      }\n\n      this.position = {\n        constant: o.position\n      };\n    }\n  } // populate text/offset buffers if font/text has changed\n  // as [charWidth, offset, charWidth, offset...]\n  // that is in em units since font-size can change often\n\n\n  if (o.text || newFont) {\n    var charIds = pool.mallocUint8(this.count);\n    var sizeData = pool.mallocFloat(this.count * 2);\n    this.textWidth = [];\n\n    for (var i$3 = 0, ptr$1 = 0; i$3 < this.counts.length; i$3++) {\n      var count$1 = this.counts[i$3];\n      var font = this.font[i$3] || this.font[0];\n      var atlas = this.fontAtlas[i$3] || this.fontAtlas[0];\n\n      for (var j$2 = 0; j$2 < count$1; j$2++) {\n        var char = this.text.charAt(ptr$1);\n        var prevChar = this.text.charAt(ptr$1 - 1);\n        charIds[ptr$1] = atlas.ids[char];\n        sizeData[ptr$1 * 2] = font.width[char];\n\n        if (j$2) {\n          var prevWidth = sizeData[ptr$1 * 2 - 2];\n          var currWidth = sizeData[ptr$1 * 2];\n          var prevOffset = sizeData[ptr$1 * 2 - 1];\n          var offset = prevOffset + prevWidth * .5 + currWidth * .5;\n\n          if (this.kerning) {\n            var kerning$1 = font.kerning[prevChar + char];\n\n            if (kerning$1) {\n              offset += kerning$1 * 1e-3;\n            }\n          }\n\n          sizeData[ptr$1 * 2 + 1] = offset;\n        } else {\n          sizeData[ptr$1 * 2 + 1] = sizeData[ptr$1 * 2] * .5;\n        }\n\n        ptr$1++;\n      }\n\n      this.textWidth.push(!sizeData.length ? 0 : // last offset + half last width\n      sizeData[ptr$1 * 2 - 2] * .5 + sizeData[ptr$1 * 2 - 1]);\n    } // bump recalc align offset\n\n\n    if (!o.align) {\n      o.align = this.align;\n    }\n\n    this.charBuffer({\n      data: charIds,\n      type: 'uint8',\n      usage: 'stream'\n    });\n    this.sizeBuffer({\n      data: sizeData,\n      type: 'float',\n      usage: 'stream'\n    });\n    pool.freeUint8(charIds);\n    pool.freeFloat(sizeData); // udpate font atlas and texture\n\n    if (newAtlasChars.length) {\n      this.font.forEach(function (font, i) {\n        var atlas = this$1.fontAtlas[i]; // FIXME: insert metrics-based ratio here\n\n        var step = atlas.step;\n        var maxCols = Math.floor(GlText.maxAtlasSize / step);\n        var cols = Math.min(maxCols, atlas.chars.length);\n        var rows = Math.ceil(atlas.chars.length / cols);\n        var atlasWidth = nextPow2(cols * step); // let atlasHeight = Math.min(rows * step + step * .5, GlText.maxAtlasSize);\n\n        var atlasHeight = nextPow2(rows * step);\n        atlas.width = atlasWidth;\n        atlas.height = atlasHeight;\n        atlas.rows = rows;\n        atlas.cols = cols;\n\n        if (!atlas.em) {\n          return;\n        }\n\n        atlas.texture({\n          data: fontAtlas({\n            canvas: GlText.atlasCanvas,\n            font: atlas.fontString,\n            chars: atlas.chars,\n            shape: [atlasWidth, atlasHeight],\n            step: [step, step]\n          })\n        });\n      });\n    }\n  }\n\n  if (o.align) {\n    this.align = o.align;\n    this.alignOffset = this.textWidth.map(function (textWidth, i) {\n      var align = !Array.isArray(this$1.align) ? this$1.align : this$1.align.length > 1 ? this$1.align[i] : this$1.align[0];\n\n      if (typeof align === 'number') {\n        return align;\n      }\n\n      switch (align) {\n        case 'right':\n        case 'end':\n          return -textWidth;\n\n        case 'center':\n        case 'centre':\n        case 'middle':\n          return -textWidth * .5;\n      }\n\n      return 0;\n    });\n  }\n\n  if (this.baseline == null && o.baseline == null) {\n    o.baseline = 0;\n  }\n\n  if (o.baseline != null) {\n    this.baseline = o.baseline;\n\n    if (!Array.isArray(this.baseline)) {\n      this.baseline = [this.baseline];\n    }\n\n    this.baselineOffset = this.baseline.map(function (baseline, i) {\n      var m = (this$1.font[i] || this$1.font[0]).metrics;\n      var base = 0;\n      base += m.bottom * .5;\n\n      if (typeof baseline === 'number') {\n        base += baseline - m.baseline;\n      } else {\n        base += -m[baseline];\n      }\n\n      base *= -1;\n      return base;\n    });\n  } // flatten colors to a single uint8 array\n\n\n  if (o.color != null) {\n    if (!o.color) {\n      o.color = 'transparent';\n    } // single color\n\n\n    if (typeof o.color === 'string' || !isNaN(o.color)) {\n      this.color = rgba(o.color, 'uint8');\n    } // array\n    else {\n      var colorData; // flat array\n\n      if (typeof o.color[0] === 'number' && o.color.length > this.counts.length) {\n        var l = o.color.length;\n        colorData = pool.mallocUint8(l);\n        var sub = (o.color.subarray || o.color.slice).bind(o.color);\n\n        for (var i$4 = 0; i$4 < l; i$4 += 4) {\n          colorData.set(rgba(sub(i$4, i$4 + 4), 'uint8'), i$4);\n        }\n      } // nested array\n      else {\n        var l$1 = o.color.length;\n        colorData = pool.mallocUint8(l$1 * 4);\n\n        for (var i$5 = 0; i$5 < l$1; i$5++) {\n          colorData.set(rgba(o.color[i$5] || 0, 'uint8'), i$5 * 4);\n        }\n      }\n\n      this.color = colorData;\n    }\n  } // update render batch\n\n\n  if (o.position || o.text || o.color || o.baseline || o.align || o.font || o.offset || o.opacity) {\n    var isBatch = this.color.length > 4 || this.baselineOffset.length > 1 || this.align && this.align.length > 1 || this.fontAtlas.length > 1 || this.positionOffset.length > 2;\n\n    if (isBatch) {\n      var length = Math.max(this.position.length * .5 || 0, this.color.length * .25 || 0, this.baselineOffset.length || 0, this.alignOffset.length || 0, this.font.length || 0, this.opacity.length || 0, this.positionOffset.length * .5 || 0);\n      this.batch = Array(length);\n\n      for (var i$6 = 0; i$6 < this.batch.length; i$6++) {\n        this.batch[i$6] = {\n          count: this.counts.length > 1 ? this.counts[i$6] : this.counts[0],\n          offset: this.textOffsets.length > 1 ? this.textOffsets[i$6] : this.textOffsets[0],\n          color: !this.color ? [0, 0, 0, 255] : this.color.length <= 4 ? this.color : this.color.subarray(i$6 * 4, i$6 * 4 + 4),\n          opacity: Array.isArray(this.opacity) ? this.opacity[i$6] : this.opacity,\n          baseline: this.baselineOffset[i$6] != null ? this.baselineOffset[i$6] : this.baselineOffset[0],\n          align: !this.align ? 0 : this.alignOffset[i$6] != null ? this.alignOffset[i$6] : this.alignOffset[0],\n          atlas: this.fontAtlas[i$6] || this.fontAtlas[0],\n          positionOffset: this.positionOffset.length > 2 ? this.positionOffset.subarray(i$6 * 2, i$6 * 2 + 2) : this.positionOffset\n        };\n      }\n    } // single-color, single-baseline, single-align batch is faster to render\n    else {\n      if (this.count) {\n        this.batch = [{\n          count: this.count,\n          offset: 0,\n          color: this.color || [0, 0, 0, 255],\n          opacity: Array.isArray(this.opacity) ? this.opacity[0] : this.opacity,\n          baseline: this.baselineOffset[0],\n          align: this.alignOffset ? this.alignOffset[0] : 0,\n          atlas: this.fontAtlas[0],\n          positionOffset: this.positionOffset\n        }];\n      } else {\n        this.batch = [];\n      }\n    }\n  }\n};\n\nGlText.prototype.destroy = function destroy() {// TODO: count instances of atlases and destroy all on null\n}; // defaults\n\n\nGlText.prototype.kerning = true;\nGlText.prototype.position = {\n  constant: new Float32Array(2)\n};\nGlText.prototype.translate = null;\nGlText.prototype.scale = null;\nGlText.prototype.font = null;\nGlText.prototype.text = '';\nGlText.prototype.positionOffset = [0, 0];\nGlText.prototype.opacity = 1;\nGlText.prototype.color = new Uint8Array([0, 0, 0, 255]);\nGlText.prototype.alignOffset = [0, 0]; // size of an atlas\n\nGlText.maxAtlasSize = 1024; // font atlas canvas is singleton\n\nGlText.atlasCanvas = document.createElement('canvas');\nGlText.atlasContext = GlText.atlasCanvas.getContext('2d', {\n  alpha: false\n}); // font-size used for metrics, atlas step calculation\n\nGlText.baseFontSize = 64; // fonts storage\n\nGlText.fonts = {}; // max number of different font atlases/textures cached\n// FIXME: enable atlas size limitation via LRU\n// GlText.atlasCacheSize = 64\n\nfunction isRegl(o) {\n  return typeof o === 'function' && o._gl && o.prop && o.texture && o.buffer;\n}\n\nmodule.exports = GlText;","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/gl-text/dist.js"],"names":["Font","require","pick","createRegl","createGl","WeakMap","rgba","fontAtlas","pool","parseRect","isObj","parseUnit","px","kerning","extend","metrics","flatten","ref","nextPow2","shaderCache","isStretchSupported","document","body","el","appendChild","createElement","style","font","getComputedStyle","fontStretch","removeChild","GlText","o","isRegl","regl","gl","_gl","shader","get","charBuffer","buffer","type","usage","sizeBuffer","createShader","set","batch","fontSize","draw","bind","render","_refresh","canvas","update","prototype","blend","enable","color","func","srcRGB","dstRGB","srcAlpha","dstAlpha","stencil","depth","count","prop","offset","attributes","charOffset","stride","this","width","char","position","uniforms","atlasSize","c","p","atlas","height","atlasDim","cols","rows","texture","charStep","step","em","opacity","viewport","scale","align","baseline","translate","positionOffset","primitive","vert","frag","this$1","text","direction","range","Array","isArray","map","parseFloat","viewportArray","x","y","drawingBufferWidth","drawingBufferHeight","length","baseFontSize","newFont","newFontSize","forEach","i","parse","e","stringify","baseString","size","family","stretch","undefined","variant","weight","unit","fs","Math","round","fonts","join","push","origin","fontStyle","fontString","ceil","bottom","chars","ids","textArray","newAtlasChars","textOffsets","counts","i$1","idx","atlasContext","charAt","measureText","pairs","baseChar","flat","positionData","mallocFloat","i$2","ptr","j","j$1","call","data","freeFloat","destroy","constant","charIds","mallocUint8","sizeData","textWidth","i$3","ptr$1","count$1","j$2","prevChar","prevWidth","currWidth","prevOffset","kerning$1","freeUint8","maxCols","floor","maxAtlasSize","min","atlasWidth","atlasHeight","atlasCanvas","shape","alignOffset","baselineOffset","m","base","isNaN","colorData","l","sub","subarray","slice","i$4","l$1","i$5","isBatch","max","i$6","Float32Array","Uint8Array","getContext","alpha","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nvar Font = require('css-font')\nvar pick = require('pick-by-alias')\nvar createRegl = require('regl')\nvar createGl = require('gl-util/context')\nvar WeakMap = require('es6-weak-map')\nvar rgba = require('color-normalize')\nvar fontAtlas = require('font-atlas')\nvar pool = require('typedarray-pool')\nvar parseRect = require('parse-rect')\nvar isObj = require('is-plain-obj')\nvar parseUnit = require('parse-unit')\nvar px = require('to-px')\nvar kerning = require('detect-kerning')\nvar extend = require('object-assign')\nvar metrics = require('font-measure')\nvar flatten = require('flatten-vertex-data')\nvar ref = require('bit-twiddle');\nvar nextPow2 = ref.nextPow2;\n\nvar shaderCache = new WeakMap\n\n\n// Safari does not support font-stretch\nvar isStretchSupported = false\nif (document.body) {\n    var el = document.body.appendChild(document.createElement('div'))\n    el.style.font = 'italic small-caps bold condensed 16px/2 cursive'\n    if (getComputedStyle(el).fontStretch) {\n        isStretchSupported = true\n    }\n    document.body.removeChild(el)\n}\n\nvar GlText = function GlText (o) {\n\tif (isRegl(o)) {\n\t\to = {regl: o}\n\t\tthis.gl = o.regl._gl\n\t}\n\telse {\n\t\tthis.gl = createGl(o)\n\t}\n\n\tthis.shader = shaderCache.get(this.gl)\n\n\tif (!this.shader) {\n\t\tthis.regl = o.regl || createRegl({ gl: this.gl })\n\t}\n\telse {\n\t\tthis.regl = this.shader.regl\n\t}\n\n\tthis.charBuffer = this.regl.buffer({ type: 'uint8', usage: 'stream' })\n\tthis.sizeBuffer = this.regl.buffer({ type: 'float', usage: 'stream' })\n\n\tif (!this.shader) {\n\t\tthis.shader = this.createShader()\n\t\tshaderCache.set(this.gl, this.shader)\n\t}\n\n\tthis.batch = []\n\n\t// multiple options initial state\n\tthis.fontSize = []\n\tthis.font = []\n\tthis.fontAtlas = []\n\n\tthis.draw = this.shader.draw.bind(this)\n\tthis.render = function () {\n\t\t// FIXME: add Safari regl report here:\n\t\t// charBuffer and width just do not trigger\n\t\tthis.regl._refresh()\n\t\tthis.draw(this.batch)\n\t}\n\tthis.canvas = this.gl.canvas\n\n\tthis.update(isObj(o) ? o : {})\n};\n\nGlText.prototype.createShader = function createShader () {\n\tvar regl = this.regl\n\n\tvar draw = regl({\n\t\tblend: {\n\t\t\tenable: true,\n\t\t\tcolor: [0,0,0,1],\n\n\t\t\tfunc: {\n\t\t\t\tsrcRGB: 'src alpha',\n\t\t\t\tdstRGB: 'one minus src alpha',\n\t\t\t\tsrcAlpha: 'one minus dst alpha',\n\t\t\t\tdstAlpha: 'one'\n\t\t\t}\n\t\t},\n\t\tstencil: {enable: false},\n\t\tdepth: {enable: false},\n\n\t\tcount: regl.prop('count'),\n\t\toffset: regl.prop('offset'),\n\t\tattributes: {\n\t\t\tcharOffset: {\n\t\t\t\toffset: 4,\n\t\t\t\tstride: 8,\n\t\t\t\tbuffer: regl.this('sizeBuffer')\n\t\t\t},\n\t\t\twidth: {\n\t\t\t\toffset: 0,\n\t\t\t\tstride: 8,\n\t\t\t\tbuffer: regl.this('sizeBuffer')\n\t\t\t},\n\t\t\tchar: regl.this('charBuffer'),\n\t\t\tposition: regl.this('position')\n\t\t},\n\t\tuniforms: {\n\t\t\tatlasSize: function (c, p) { return [p.atlas.width, p.atlas.height]; },\n\t\t\tatlasDim: function (c, p) { return [p.atlas.cols, p.atlas.rows]; },\n\t\t\tatlas: function (c, p) { return p.atlas.texture; },\n\t\t\tcharStep: function (c, p) { return p.atlas.step; },\n\t\t\tem: function (c, p) { return p.atlas.em; },\n\t\t\tcolor: regl.prop('color'),\n\t\t\topacity: regl.prop('opacity'),\n\t\t\tviewport: regl.this('viewportArray'),\n\t\t\tscale: regl.this('scale'),\n\t\t\talign: regl.prop('align'),\n\t\t\tbaseline: regl.prop('baseline'),\n\t\t\ttranslate: regl.this('translate'),\n\t\t\tpositionOffset: regl.prop('positionOffset')\n\t\t},\n\t\tprimitive: 'points',\n\t\tviewport: regl.this('viewport'),\n\n\t\tvert: \"\\n\\t\\t\\tprecision highp float;\\n\\t\\t\\tattribute float width, charOffset, char;\\n\\t\\t\\tattribute vec2 position;\\n\\t\\t\\tuniform float fontSize, charStep, em, align, baseline;\\n\\t\\t\\tuniform vec4 viewport;\\n\\t\\t\\tuniform vec4 color;\\n\\t\\t\\tuniform vec2 atlasSize, atlasDim, scale, translate, positionOffset;\\n\\t\\t\\tvarying vec2 charCoord, charId;\\n\\t\\t\\tvarying float charWidth;\\n\\t\\t\\tvarying vec4 fontColor;\\n\\t\\t\\tvoid main () {\\n\\t\\t\\t\\tvec2 offset = floor(em * (vec2(align + charOffset, baseline)\\n\\t\\t\\t\\t\\t+ vec2(positionOffset.x, -positionOffset.y)))\\n\\t\\t\\t\\t\\t/ (viewport.zw * scale.xy);\\n\\n\\t\\t\\t\\tvec2 position = (position + translate) * scale;\\n\\t\\t\\t\\tposition += offset * scale;\\n\\n\\t\\t\\t\\tcharCoord = position * viewport.zw + viewport.xy;\\n\\n\\t\\t\\t\\tgl_Position = vec4(position * 2. - 1., 0, 1);\\n\\n\\t\\t\\t\\tgl_PointSize = charStep;\\n\\n\\t\\t\\t\\tcharId.x = mod(char, atlasDim.x);\\n\\t\\t\\t\\tcharId.y = floor(char / atlasDim.x);\\n\\n\\t\\t\\t\\tcharWidth = width * em;\\n\\n\\t\\t\\t\\tfontColor = color / 255.;\\n\\t\\t\\t}\",\n\n\t\tfrag: \"\\n\\t\\t\\tprecision highp float;\\n\\t\\t\\tuniform float fontSize, charStep, opacity;\\n\\t\\t\\tuniform vec2 atlasSize;\\n\\t\\t\\tuniform vec4 viewport;\\n\\t\\t\\tuniform sampler2D atlas;\\n\\t\\t\\tvarying vec4 fontColor;\\n\\t\\t\\tvarying vec2 charCoord, charId;\\n\\t\\t\\tvarying float charWidth;\\n\\n\\t\\t\\tfloat lightness(vec4 color) {\\n\\t\\t\\t\\treturn color.r * 0.299 + color.g * 0.587 + color.b * 0.114;\\n\\t\\t\\t}\\n\\n\\t\\t\\tvoid main () {\\n\\t\\t\\t\\tvec2 uv = gl_FragCoord.xy - charCoord + charStep * .5;\\n\\t\\t\\t\\tfloat halfCharStep = floor(charStep * .5 + .5);\\n\\n\\t\\t\\t\\t// invert y and shift by 1px (FF expecially needs that)\\n\\t\\t\\t\\tuv.y = charStep - uv.y;\\n\\n\\t\\t\\t\\t// ignore points outside of character bounding box\\n\\t\\t\\t\\tfloat halfCharWidth = ceil(charWidth * .5);\\n\\t\\t\\t\\tif (floor(uv.x) > halfCharStep + halfCharWidth ||\\n\\t\\t\\t\\t\\tfloor(uv.x) < halfCharStep - halfCharWidth) return;\\n\\n\\t\\t\\t\\tuv += charId * charStep;\\n\\t\\t\\t\\tuv = uv / atlasSize;\\n\\n\\t\\t\\t\\tvec4 color = fontColor;\\n\\t\\t\\t\\tvec4 mask = texture2D(atlas, uv);\\n\\n\\t\\t\\t\\tfloat maskY = lightness(mask);\\n\\t\\t\\t\\t// float colorY = lightness(color);\\n\\t\\t\\t\\tcolor.a *= maskY;\\n\\t\\t\\t\\tcolor.a *= opacity;\\n\\n\\t\\t\\t\\t// color.a += .1;\\n\\n\\t\\t\\t\\t// antialiasing, see yiq color space y-channel formula\\n\\t\\t\\t\\t// color.rgb += (1. - color.rgb) * (1. - mask.rgb);\\n\\n\\t\\t\\t\\tgl_FragColor = color;\\n\\t\\t\\t}\"\n\t})\n\n\t// per font-size atlas\n\tvar atlas = {}\n\n\treturn { regl: regl, draw: draw, atlas: atlas }\n};\n\nGlText.prototype.update = function update (o) {\n\t\tvar this$1 = this;\n\n\tif (typeof o === 'string') { o = { text: o } }\n\telse if (!o) { return }\n\n\t// FIXME: make this a static transform or more general approact\n\to = pick(o, {\n\t\tposition: 'position positions coord coords coordinates',\n\t\tfont: 'font fontFace fontface typeface cssFont css-font family fontFamily',\n\t\tfontSize: 'fontSize fontsize size font-size',\n\t\ttext: 'text texts chars characters value values symbols',\n\t\talign: 'align alignment textAlign textbaseline',\n\t\tbaseline: 'baseline textBaseline textbaseline',\n\t\tdirection: 'dir direction textDirection',\n\t\tcolor: 'color colour fill fill-color fillColor textColor textcolor',\n\t\tkerning: 'kerning kern',\n\t\trange: 'range dataBox',\n\t\tviewport: 'vp viewport viewBox viewbox viewPort',\n\t\topacity: 'opacity alpha transparency visible visibility opaque',\n\t\toffset: 'offset positionOffset padding shift indent indentation'\n\t}, true)\n\n\n\tif (o.opacity != null) {\n\t\tif (Array.isArray(o.opacity)) {\n\t\t\tthis.opacity = o.opacity.map(function (o) { return parseFloat(o); })\n\t\t}\n\t\telse {\n\t\t\tthis.opacity = parseFloat(o.opacity)\n\t\t}\n\t}\n\n\tif (o.viewport != null) {\n\t\tthis.viewport = parseRect(o.viewport)\n\n\t\tthis.viewportArray = [this.viewport.x, this.viewport.y, this.viewport.width, this.viewport.height]\n\n\t}\n\tif (this.viewport == null) {\n\t\tthis.viewport = {\n\t\t\tx: 0, y: 0,\n\t\t\twidth: this.gl.drawingBufferWidth,\n\t\t\theight: this.gl.drawingBufferHeight\n\t\t}\n\t\tthis.viewportArray = [this.viewport.x, this.viewport.y, this.viewport.width, this.viewport.height]\n\t}\n\n\tif (o.kerning != null) { this.kerning = o.kerning }\n\n\tif (o.offset != null) {\n\t\tif (typeof o.offset === 'number') { o.offset = [o.offset, 0] }\n\n\t\tthis.positionOffset = flatten(o.offset)\n\t}\n\n\tif (o.direction) { this.direction = o.direction }\n\n\tif (o.range) {\n\t\tthis.range = o.range\n\t\tthis.scale = [1 / (o.range[2] - o.range[0]), 1 / (o.range[3] - o.range[1])]\n\t\tthis.translate = [-o.range[0], -o.range[1]]\n\t}\n\tif (o.scale) { this.scale = o.scale }\n\tif (o.translate) { this.translate = o.translate }\n\n\t// default scale corresponds to viewport\n\tif (!this.scale) { this.scale = [1 / this.viewport.width, 1 / this.viewport.height] }\n\n\tif (!this.translate) { this.translate = [0, 0] }\n\n\tif (!this.font.length && !o.font) { o.font = GlText.baseFontSize + 'px sans-serif' }\n\n\t// normalize font caching string\n\tvar newFont = false, newFontSize = false\n\n\t// obtain new font data\n\tif (o.font) {\n\t\t(Array.isArray(o.font) ? o.font : [o.font]).forEach(function (font, i) {\n\t\t\t// normalize font\n\t\t\tif (typeof font === 'string') {\n\t\t\t\ttry {\n\t\t\t\t\tfont = Font.parse(font)\n\t\t\t\t} catch (e) {\n\t\t\t\t\tfont = Font.parse(GlText.baseFontSize + 'px ' + font)\n\t\t\t\t}\n\t\t\t}\n\t\t\telse { font = Font.parse(Font.stringify(font)) }\n\n\t\t\tvar baseString = Font.stringify({\n\t\t\t\tsize: GlText.baseFontSize,\n\t\t\t\tfamily: font.family,\n\t\t\t\tstretch: isStretchSupported ? font.stretch : undefined,\n\t\t\t\tvariant: font.variant,\n\t\t\t\tweight: font.weight,\n\t\t\t\tstyle: font.style\n\t\t\t})\n\n\t\t\tvar unit = parseUnit(font.size)\n\t\t\tvar fs = Math.round(unit[0] * px(unit[1]))\n\t\t\tif (fs !== this$1.fontSize[i]) {\n\t\t\t\tnewFontSize = true\n\t\t\t\tthis$1.fontSize[i] = fs\n\t\t\t}\n\n\t\t\t// calc new font metrics/atlas\n\t\t\tif (!this$1.font[i] || baseString != this$1.font[i].baseString) {\n\t\t\t\tnewFont = true\n\n\t\t\t\t// obtain font cache or create one\n\t\t\t\tthis$1.font[i] = GlText.fonts[baseString]\n\t\t\t\tif (!this$1.font[i]) {\n\t\t\t\t\tvar family = font.family.join(', ')\n\t\t\t\t\tvar style = [font.style]\n\t\t\t\t\tif (font.style != font.variant) { style.push(font.variant) }\n\t\t\t\t\tif (font.variant != font.weight) { style.push(font.weight) }\n\t\t\t\t\tif (isStretchSupported && font.weight != font.stretch) { style.push(font.stretch) }\n\n\t\t\t\t\tthis$1.font[i] = {\n\t\t\t\t\t\tbaseString: baseString,\n\n\t\t\t\t\t\t// typeface\n\t\t\t\t\t\tfamily: family,\n\t\t\t\t\t\tweight: font.weight,\n\t\t\t\t\t\tstretch: font.stretch,\n\t\t\t\t\t\tstyle: font.style,\n\t\t\t\t\t\tvariant: font.variant,\n\n\t\t\t\t\t\t// widths of characters\n\t\t\t\t\t\twidth: {},\n\n\t\t\t\t\t\t// kernin pairs offsets\n\t\t\t\t\t\tkerning: {},\n\n\t\t\t\t\t\tmetrics: metrics(family, {\n\t\t\t\t\t\t\torigin: 'top',\n\t\t\t\t\t\t\tfontSize: GlText.baseFontSize,\n\t\t\t\t\t\t\tfontStyle: style.join(' ')\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\n\t\t\t\t\tGlText.fonts[baseString] = this$1.font[i]\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t}\n\n\t// FIXME: make independend font-size\n\t// if (o.fontSize) {\n\t// let unit = parseUnit(o.fontSize)\n\t// let fs = Math.round(unit[0] * px(unit[1]))\n\n\t// if (fs != this.fontSize) {\n\t// \tnewFontSize = true\n\t// \tthis.fontSize = fs\n\t// }\n\t// }\n\n\tif (newFont || newFontSize) {\n\t\tthis.font.forEach(function (font, i) {\n\t\t\tvar fontString = Font.stringify({\n\t\t\t\tsize: this$1.fontSize[i],\n\t\t\t\tfamily: font.family,\n\t\t\t\tstretch: isStretchSupported ? font.stretch : undefined,\n\t\t\t\tvariant: font.variant,\n\t\t\t\tweight: font.weight,\n\t\t\t\tstyle: font.style\n\t\t\t})\n\n\t\t\t// calc new font size atlas\n\t\t\tthis$1.fontAtlas[i] = this$1.shader.atlas[fontString]\n\n\t\t\tif (!this$1.fontAtlas[i]) {\n\t\t\t\tvar metrics = font.metrics\n\n\t\t\t\tthis$1.shader.atlas[fontString] =\n\t\t\t\tthis$1.fontAtlas[i] = {\n\t\t\t\t\tfontString: fontString,\n\t\t\t\t\t// even step is better for rendered characters\n\t\t\t\t\tstep: Math.ceil(this$1.fontSize[i] * metrics.bottom * .5) * 2,\n\t\t\t\t\tem: this$1.fontSize[i],\n\t\t\t\t\tcols: 0,\n\t\t\t\t\trows: 0,\n\t\t\t\t\theight: 0,\n\t\t\t\t\twidth: 0,\n\t\t\t\t\tchars: [],\n\t\t\t\t\tids: {},\n\t\t\t\t\ttexture: this$1.regl.texture()\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// bump atlas characters\n\t\t\tif (o.text == null) { o.text = this$1.text }\n\t\t})\n\t}\n\n\t// if multiple positions - duplicate text arguments\n\t// FIXME: this possibly can be done better to avoid array spawn\n\tif (typeof o.text === 'string' && o.position && o.position.length > 2) {\n\t\tvar textArray = Array(o.position.length * .5)\n\t\tfor (var i = 0; i < textArray.length; i++) {\n\t\t\ttextArray[i] = o.text\n\t\t}\n\t\to.text = textArray\n\t}\n\n\t// calculate offsets for the new font/text\n\tvar newAtlasChars\n\tif (o.text != null || newFont) {\n\t\t// FIXME: ignore spaces\n\t\t// text offsets within the text buffer\n\t\tthis.textOffsets = [0]\n\n\t\tif (Array.isArray(o.text)) {\n\t\t\tthis.count = o.text[0].length\n\t\t\tthis.counts = [this.count]\n\t\t\tfor (var i$1 = 1; i$1 < o.text.length; i$1++) {\n\t\t\t\tthis.textOffsets[i$1] = this.textOffsets[i$1 - 1] + o.text[i$1 - 1].length\n\t\t\t\tthis.count += o.text[i$1].length\n\t\t\t\tthis.counts.push(o.text[i$1].length)\n\t\t\t}\n\t\t\tthis.text = o.text.join('')\n\t\t}\n\t\telse {\n\t\t\tthis.text = o.text\n\t\t\tthis.count = this.text.length\n\t\t\tthis.counts = [this.count]\n\t\t}\n\n\t\tnewAtlasChars = []\n\n\t\t// detect & measure new characters\n\t\tthis.font.forEach(function (font, idx) {\n\t\t\tGlText.atlasContext.font = font.baseString\n\n\t\t\tvar atlas = this$1.fontAtlas[idx]\n\n\t\t\tfor (var i = 0; i < this$1.text.length; i++) {\n\t\t\t\tvar char = this$1.text.charAt(i)\n\n\t\t\t\tif (atlas.ids[char] == null) {\n\t\t\t\t\tatlas.ids[char] = atlas.chars.length\n\t\t\t\t\tatlas.chars.push(char)\n\t\t\t\t\tnewAtlasChars.push(char)\n\t\t\t\t}\n\n\t\t\t\tif (font.width[char] == null) {\n\t\t\t\t\tfont.width[char] = GlText.atlasContext.measureText(char).width / GlText.baseFontSize\n\n\t\t\t\t\t// measure kerning pairs for the new character\n\t\t\t\t\tif (this$1.kerning) {\n\t\t\t\t\t\tvar pairs = []\n\t\t\t\t\t\tfor (var baseChar in font.width) {\n\t\t\t\t\t\t\tpairs.push(baseChar + char, char + baseChar)\n\t\t\t\t\t\t}\n\t\t\t\t\t\textend(font.kerning, kerning(font.family, {\n\t\t\t\t\t\t\tpairs: pairs\n\t\t\t\t\t\t}))\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t}\n\n\t// create single position buffer (faster than batch or multiple separate instances)\n\tif (o.position) {\n\t\tif (o.position.length > 2) {\n\t\t\tvar flat = !o.position[0].length\n\t\t\tvar positionData = pool.mallocFloat(this.count * 2)\n\t\t\tfor (var i$2 = 0, ptr = 0; i$2 < this.counts.length; i$2++) {\n\t\t\t\tvar count = this.counts[i$2]\n\t\t\t\tif (flat) {\n\t\t\t\t\tfor (var j = 0; j < count; j++) {\n\t\t\t\t\t\tpositionData[ptr++] = o.position[i$2 * 2]\n\t\t\t\t\t\tpositionData[ptr++] = o.position[i$2 * 2 + 1]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tfor (var j$1 = 0; j$1 < count; j$1++) {\n\t\t\t\t\t\tpositionData[ptr++] = o.position[i$2][0]\n\t\t\t\t\t\tpositionData[ptr++] = o.position[i$2][1]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this.position.call) {\n\t\t\t\tthis.position({\n\t\t\t\t\ttype: 'float',\n\t\t\t\t\tdata: positionData\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\tthis.position = this.regl.buffer({\n\t\t\t\t\ttype: 'float',\n\t\t\t\t\tdata: positionData\n\t\t\t\t})\n\t\t\t}\n\t\t\tpool.freeFloat(positionData)\n\t\t}\n\t\telse {\n\t\t\tif (this.position.destroy) { this.position.destroy() }\n\t\t\tthis.position = {\n\t\t\t\tconstant: o.position\n\t\t\t}\n\t\t}\n\t}\n\n\t// populate text/offset buffers if font/text has changed\n\t// as [charWidth, offset, charWidth, offset...]\n\t// that is in em units since font-size can change often\n\tif (o.text || newFont) {\n\t\tvar charIds = pool.mallocUint8(this.count)\n\t\tvar sizeData = pool.mallocFloat(this.count * 2)\n\t\tthis.textWidth = []\n\n\t\tfor (var i$3 = 0, ptr$1 = 0; i$3 < this.counts.length; i$3++) {\n\t\t\tvar count$1 = this.counts[i$3]\n\t\t\tvar font = this.font[i$3] || this.font[0]\n\t\t\tvar atlas = this.fontAtlas[i$3] || this.fontAtlas[0]\n\n\t\t\tfor (var j$2 = 0; j$2 < count$1; j$2++) {\n\t\t\t\tvar char = this.text.charAt(ptr$1)\n\t\t\t\tvar prevChar = this.text.charAt(ptr$1 - 1)\n\n\t\t\t\tcharIds[ptr$1] = atlas.ids[char]\n\t\t\t\tsizeData[ptr$1 * 2] = font.width[char]\n\n\t\t\t\tif (j$2) {\n\t\t\t\t\tvar prevWidth = sizeData[ptr$1 * 2 - 2]\n\t\t\t\t\tvar currWidth = sizeData[ptr$1 * 2]\n\t\t\t\t\tvar prevOffset = sizeData[ptr$1 * 2 - 1]\n\t\t\t\t\tvar offset = prevOffset + prevWidth * .5 + currWidth * .5;\n\n\t\t\t\t\tif (this.kerning) {\n\t\t\t\t\t\tvar kerning$1 = font.kerning[prevChar + char]\n\t\t\t\t\t\tif (kerning$1) {\n\t\t\t\t\t\t\toffset += kerning$1 * 1e-3\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tsizeData[ptr$1 * 2 + 1] = offset\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tsizeData[ptr$1 * 2 + 1] = sizeData[ptr$1 * 2] * .5\n\t\t\t\t}\n\n\t\t\t\tptr$1++\n\t\t\t}\n\t\t\tthis.textWidth.push(\n\t\t\t\t!sizeData.length ? 0 :\n\t\t\t\t// last offset + half last width\n\t\t\t\tsizeData[ptr$1 * 2 - 2] * .5 + sizeData[ptr$1 * 2 - 1]\n\t\t\t)\n\t\t}\n\n\n\t\t// bump recalc align offset\n\t\tif (!o.align) { o.align = this.align }\n\t\tthis.charBuffer({data: charIds, type: 'uint8', usage: 'stream'})\n\t\tthis.sizeBuffer({data: sizeData, type: 'float', usage: 'stream'})\n\t\tpool.freeUint8(charIds)\n\t\tpool.freeFloat(sizeData)\n\n\t\t// udpate font atlas and texture\n\t\tif (newAtlasChars.length) {\n\t\t\tthis.font.forEach(function (font, i) {\n\t\t\t\tvar atlas = this$1.fontAtlas[i]\n\n\t\t\t\t// FIXME: insert metrics-based ratio here\n\t\t\t\tvar step = atlas.step\n\n\t\t\t\tvar maxCols = Math.floor(GlText.maxAtlasSize / step)\n\t\t\t\tvar cols = Math.min(maxCols, atlas.chars.length)\n\t\t\t\tvar rows = Math.ceil(atlas.chars.length / cols)\n\n\t\t\t\tvar atlasWidth = nextPow2( cols * step )\n\t\t\t\t// let atlasHeight = Math.min(rows * step + step * .5, GlText.maxAtlasSize);\n\t\t\t\tvar atlasHeight = nextPow2( rows * step );\n\n\t\t\t\tatlas.width = atlasWidth\n\t\t\t\tatlas.height = atlasHeight;\n\t\t\t\tatlas.rows = rows\n\t\t\t\tatlas.cols = cols\n\n\t\t\t\tif (!atlas.em) { return }\n\n\t\t\t\tatlas.texture({\n\t\t\t\t\tdata: fontAtlas({\n\t\t\t\t\t\tcanvas: GlText.atlasCanvas,\n\t\t\t\t\t\tfont: atlas.fontString,\n\t\t\t\t\t\tchars: atlas.chars,\n\t\t\t\t\t\tshape: [atlasWidth, atlasHeight],\n\t\t\t\t\t\tstep: [step, step]\n\t\t\t\t\t})\n\t\t\t\t})\n\n\t\t\t})\n\t\t}\n\t}\n\n\tif (o.align) {\n\t\tthis.align = o.align\n\t\tthis.alignOffset = this.textWidth.map(function (textWidth, i) {\n\t\t\tvar align = !Array.isArray(this$1.align) ? this$1.align : this$1.align.length > 1 ? this$1.align[i] : this$1.align[0]\n\n\t\t\tif (typeof align === 'number') { return align }\n\t\t\tswitch (align) {\n\t\t\t\tcase 'right':\n\t\t\t\tcase 'end':\n\t\t\t\t\treturn -textWidth\n\t\t\t\tcase 'center':\n\t\t\t\tcase 'centre':\n\t\t\t\tcase 'middle':\n\t\t\t\t\treturn -textWidth * .5\n\t\t\t}\n\n\t\t\treturn 0\n\t\t})\n\t}\n\n\tif (this.baseline == null && o.baseline == null) {\n\t\to.baseline = 0\n\t}\n\tif (o.baseline != null) {\n\t\tthis.baseline = o.baseline\n\t\tif (!Array.isArray(this.baseline)) { this.baseline = [this.baseline] }\n\t\tthis.baselineOffset = this.baseline.map(function (baseline, i) {\n\t\t\tvar m = (this$1.font[i] || this$1.font[0]).metrics\n\t\t\tvar base = 0\n\n\t\t\tbase += m.bottom * .5\n\n\t\t\tif (typeof baseline === 'number') {\n\t\t\t\tbase += (baseline - m.baseline)\n\t\t\t}\n\t\t\telse {\n\t\t\t\tbase += -m[baseline]\n\t\t\t}\n\n\t\t\tbase *= -1\n\t\t\treturn base\n\t\t})\n\t}\n\n\t// flatten colors to a single uint8 array\n\tif (o.color != null) {\n\t\tif (!o.color) { o.color = 'transparent' }\n\n\t\t// single color\n\t\tif (typeof o.color === 'string' || !isNaN(o.color)) {\n\t\t\tthis.color = rgba(o.color, 'uint8')\n\t\t}\n\t\t// array\n\t\telse {\n\t\t\tvar colorData\n\n\t\t\t// flat array\n\t\t\tif (typeof o.color[0] === 'number' && o.color.length > this.counts.length) {\n\t\t\t\tvar l = o.color.length\n\t\t\t\tcolorData = pool.mallocUint8(l)\n\t\t\t\tvar sub = (o.color.subarray || o.color.slice).bind(o.color)\n\t\t\t\tfor (var i$4 = 0; i$4 < l; i$4 += 4) {\n\t\t\t\t\tcolorData.set(rgba(sub(i$4, i$4 + 4), 'uint8'), i$4)\n\t\t\t\t}\n\t\t\t}\n\t\t\t// nested array\n\t\t\telse {\n\t\t\t\tvar l$1 = o.color.length\n\t\t\t\tcolorData = pool.mallocUint8(l$1 * 4)\n\t\t\t\tfor (var i$5 = 0; i$5 < l$1; i$5++) {\n\t\t\t\t\tcolorData.set(rgba(o.color[i$5] || 0, 'uint8'), i$5 * 4)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.color = colorData\n\t\t}\n\t}\n\n\t// update render batch\n\tif (o.position || o.text || o.color || o.baseline || o.align || o.font || o.offset || o.opacity) {\n\t\tvar isBatch = (this.color.length > 4)\n\t\t\t|| (this.baselineOffset.length > 1)\n\t\t\t|| (this.align && this.align.length > 1)\n\t\t\t|| (this.fontAtlas.length > 1)\n\t\t\t|| (this.positionOffset.length > 2)\n\t\tif (isBatch) {\n\t\t\tvar length = Math.max(\n\t\t\t\tthis.position.length * .5 || 0,\n\t\t\t\tthis.color.length * .25 || 0,\n\t\t\t\tthis.baselineOffset.length || 0,\n\t\t\t\tthis.alignOffset.length || 0,\n\t\t\t\tthis.font.length || 0,\n\t\t\t\tthis.opacity.length || 0,\n\t\t\t\tthis.positionOffset.length * .5 || 0\n\t\t\t)\n\t\t\tthis.batch = Array(length)\n\t\t\tfor (var i$6 = 0; i$6 < this.batch.length; i$6++) {\n\t\t\t\tthis.batch[i$6] = {\n\t\t\t\t\tcount: this.counts.length > 1 ? this.counts[i$6] : this.counts[0],\n\t\t\t\t\toffset: this.textOffsets.length > 1 ? this.textOffsets[i$6] : this.textOffsets[0],\n\t\t\t\t\tcolor: !this.color ? [0,0,0,255] : this.color.length <= 4 ? this.color : this.color.subarray(i$6 * 4, i$6 * 4 + 4),\n\t\t\t\t\topacity: Array.isArray(this.opacity) ? this.opacity[i$6] : this.opacity,\n\t\t\t\t\tbaseline: this.baselineOffset[i$6] != null ? this.baselineOffset[i$6] : this.baselineOffset[0],\n\t\t\t\t\talign: !this.align ? 0 : this.alignOffset[i$6] != null ? this.alignOffset[i$6] : this.alignOffset[0],\n\t\t\t\t\tatlas: this.fontAtlas[i$6] || this.fontAtlas[0],\n\t\t\t\t\tpositionOffset: this.positionOffset.length > 2 ? this.positionOffset.subarray(i$6 * 2, i$6 * 2 + 2) : this.positionOffset\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// single-color, single-baseline, single-align batch is faster to render\n\t\telse {\n\t\t\tif (this.count) {\n\t\t\t\tthis.batch = [{\n\t\t\t\t\tcount: this.count,\n\t\t\t\t\toffset: 0,\n\t\t\t\t\tcolor: this.color || [0,0,0,255],\n\t\t\t\t\topacity: Array.isArray(this.opacity) ? this.opacity[0] : this.opacity,\n\t\t\t\t\tbaseline: this.baselineOffset[0],\n\t\t\t\t\talign: this.alignOffset ? this.alignOffset[0] : 0,\n\t\t\t\t\tatlas: this.fontAtlas[0],\n\t\t\t\t\tpositionOffset: this.positionOffset\n\t\t\t\t}]\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.batch = []\n\t\t\t}\n\t\t}\n\t}\n};\n\nGlText.prototype.destroy = function destroy () {\n\t// TODO: count instances of atlases and destroy all on null\n};\n\n\n// defaults\nGlText.prototype.kerning = true\nGlText.prototype.position = { constant: new Float32Array(2) }\nGlText.prototype.translate = null\nGlText.prototype.scale = null\nGlText.prototype.font = null\nGlText.prototype.text = ''\nGlText.prototype.positionOffset = [0, 0]\nGlText.prototype.opacity = 1\nGlText.prototype.color = new Uint8Array([0, 0, 0, 255])\nGlText.prototype.alignOffset = [0, 0]\n\n\n// size of an atlas\nGlText.maxAtlasSize = 1024\n\n// font atlas canvas is singleton\nGlText.atlasCanvas = document.createElement('canvas')\nGlText.atlasContext = GlText.atlasCanvas.getContext('2d', {alpha: false})\n\n// font-size used for metrics, atlas step calculation\nGlText.baseFontSize = 64\n\n// fonts storage\nGlText.fonts = {}\n\n// max number of different font atlases/textures cached\n// FIXME: enable atlas size limitation via LRU\n// GlText.atlasCacheSize = 64\n\nfunction isRegl (o) {\n\treturn typeof o === 'function' &&\n\to._gl &&\n\to.prop &&\n\to.texture &&\n\to.buffer\n}\n\n\nmodule.exports = GlText\n\n"]},"metadata":{},"sourceType":"script"}