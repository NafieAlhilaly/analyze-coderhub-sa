{"ast":null,"code":"/*\n * World Calendars\n * https://github.com/alexcjohnson/world-calendars\n *\n * Batch-converted from kbwood/calendars\n * Many thanks to Keith Wood and all of the contributors to the original project!\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/* http://keith-wood.name/calendars.html\n  Persian calendar for jQuery v2.0.2.\n  Written by Keith Wood (wood.keith{at}optusnet.com.au) August 2009.\n  Available under the MIT (http://keith-wood.name/licence.html) license. \n  Please attribute the author if you use it. */\nvar main = require('../main');\n\nvar assign = require('object-assign');\n/** Implementation of the Persian or Jalali calendar.\n    Based on code from <a href=\"http://www.iranchamber.com/calendar/converter/iranian_calendar_converter.php\">http://www.iranchamber.com/calendar/converter/iranian_calendar_converter.php</a>.\n    See also <a href=\"http://en.wikipedia.org/wiki/Iranian_calendar\">http://en.wikipedia.org/wiki/Iranian_calendar</a>.\n    @class PersianCalendar\n    @param [language=''] {string} The language code (default English) for localisation. */\n\n\nfunction PersianCalendar(language) {\n  this.local = this.regionalOptions[language || ''] || this.regionalOptions[''];\n}\n\nPersianCalendar.prototype = new main.baseCalendar();\nassign(PersianCalendar.prototype, {\n  /** The calendar name.\n      @memberof PersianCalendar */\n  name: 'Persian',\n\n  /** Julian date of start of Persian epoch: 19 March 622 CE.\n      @memberof PersianCalendar */\n  jdEpoch: 1948320.5,\n\n  /** Days per month in a common year.\n      @memberof PersianCalendar */\n  daysPerMonth: [31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 29],\n\n  /** <code>true</code> if has a year zero, <code>false</code> if not.\n      @memberof PersianCalendar */\n  hasYearZero: false,\n\n  /** The minimum month number.\n      @memberof PersianCalendar */\n  minMonth: 1,\n\n  /** The first month in the year.\n      @memberof PersianCalendar */\n  firstMonth: 1,\n\n  /** The minimum day number.\n      @memberof PersianCalendar */\n  minDay: 1,\n\n  /** Localisations for the plugin.\n      Entries are objects indexed by the language code ('' being the default US/English).\n      Each object has the following attributes.\n      @memberof PersianCalendar\n      @property name {string} The calendar name.\n      @property epochs {string[]} The epoch names.\n      @property monthNames {string[]} The long names of the months of the year.\n      @property monthNamesShort {string[]} The short names of the months of the year.\n      @property dayNames {string[]} The long names of the days of the week.\n      @property dayNamesShort {string[]} The short names of the days of the week.\n      @property dayNamesMin {string[]} The minimal names of the days of the week.\n      @property dateFormat {string} The date format for this calendar.\n              See the options on <a href=\"BaseCalendar.html#formatDate\"><code>formatDate</code></a> for details.\n      @property firstDay {number} The number of the first day of the week, starting at 0.\n      @property isRTL {number} <code>true</code> if this localisation reads right-to-left. */\n  regionalOptions: {\n    // Localisations\n    '': {\n      name: 'Persian',\n      epochs: ['BP', 'AP'],\n      monthNames: ['Farvardin', 'Ordibehesht', 'Khordad', 'Tir', 'Mordad', 'Shahrivar', 'Mehr', 'Aban', 'Azar', 'Day', 'Bahman', 'Esfand'],\n      monthNamesShort: ['Far', 'Ord', 'Kho', 'Tir', 'Mor', 'Sha', 'Meh', 'Aba', 'Aza', 'Day', 'Bah', 'Esf'],\n      dayNames: ['Yekshambe', 'Doshambe', 'Seshambe', 'Chæharshambe', 'Panjshambe', 'Jom\\'e', 'Shambe'],\n      dayNamesShort: ['Yek', 'Do', 'Se', 'Chæ', 'Panj', 'Jom', 'Sha'],\n      dayNamesMin: ['Ye', 'Do', 'Se', 'Ch', 'Pa', 'Jo', 'Sh'],\n      digits: null,\n      dateFormat: 'yyyy/mm/dd',\n      firstDay: 6,\n      isRTL: false\n    }\n  },\n\n  /** Determine whether this date is in a leap year.\n      @memberof PersianCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @return {boolean} <code>true</code> if this is a leap year, <code>false</code> if not.\n      @throws Error if an invalid year or a different calendar used. */\n  leapYear: function leapYear(year) {\n    var date = this._validate(year, this.minMonth, this.minDay, main.local.invalidYear);\n\n    return ((date.year() - (date.year() > 0 ? 474 : 473)) % 2820 + 474 + 38) * 682 % 2816 < 682;\n  },\n\n  /** Determine the week of the year for a date.\n      @memberof PersianCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @param [month] {number} The month to examine.\n      @param [day] {number} The day to examine.\n      @return {number} The week of the year.\n      @throws Error if an invalid date or a different calendar used. */\n  weekOfYear: function weekOfYear(year, month, day) {\n    // Find Saturday of this week starting on Saturday\n    var checkDate = this.newDate(year, month, day);\n    checkDate.add(-((checkDate.dayOfWeek() + 1) % 7), 'd');\n    return Math.floor((checkDate.dayOfYear() - 1) / 7) + 1;\n  },\n\n  /** Retrieve the number of days in a month.\n      @memberof PersianCalendar\n      @param year {CDate|number} The date to examine or the year of the month.\n      @param [month] {number} The month.\n      @return {number} The number of days in this month.\n      @throws Error if an invalid month/year or a different calendar used. */\n  daysInMonth: function daysInMonth(year, month) {\n    var date = this._validate(year, month, this.minDay, main.local.invalidMonth);\n\n    return this.daysPerMonth[date.month() - 1] + (date.month() === 12 && this.leapYear(date.year()) ? 1 : 0);\n  },\n\n  /** Determine whether this date is a week day.\n      @memberof PersianCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @param [month] {number} The month to examine.\n      @param [day] {number} The day to examine.\n      @return {boolean} <code>true</code> if a week day, <code>false</code> if not.\n      @throws Error if an invalid date or a different calendar used. */\n  weekDay: function weekDay(year, month, day) {\n    return this.dayOfWeek(year, month, day) !== 5;\n  },\n\n  /** Retrieve the Julian date equivalent for this date,\n      i.e. days since January 1, 4713 BCE Greenwich noon.\n      @memberof PersianCalendar\n      @param year {CDate|number} The date to convert or the year to convert.\n      @param [month] {number} The month to convert.\n      @param [day] {number} The day to convert.\n      @return {number} The equivalent Julian date.\n      @throws Error if an invalid date or a different calendar used. */\n  toJD: function toJD(year, month, day) {\n    var date = this._validate(year, month, day, main.local.invalidDate);\n\n    year = date.year();\n    month = date.month();\n    day = date.day();\n    var epBase = year - (year >= 0 ? 474 : 473);\n    var epYear = 474 + mod(epBase, 2820);\n    return day + (month <= 7 ? (month - 1) * 31 : (month - 1) * 30 + 6) + Math.floor((epYear * 682 - 110) / 2816) + (epYear - 1) * 365 + Math.floor(epBase / 2820) * 1029983 + this.jdEpoch - 1;\n  },\n\n  /** Create a new date from a Julian date.\n      @memberof PersianCalendar\n      @param jd {number} The Julian date to convert.\n      @return {CDate} The equivalent date. */\n  fromJD: function fromJD(jd) {\n    jd = Math.floor(jd) + 0.5;\n    var depoch = jd - this.toJD(475, 1, 1);\n    var cycle = Math.floor(depoch / 1029983);\n    var cyear = mod(depoch, 1029983);\n    var ycycle = 2820;\n\n    if (cyear !== 1029982) {\n      var aux1 = Math.floor(cyear / 366);\n      var aux2 = mod(cyear, 366);\n      ycycle = Math.floor((2134 * aux1 + 2816 * aux2 + 2815) / 1028522) + aux1 + 1;\n    }\n\n    var year = ycycle + 2820 * cycle + 474;\n    year = year <= 0 ? year - 1 : year;\n    var yday = jd - this.toJD(year, 1, 1) + 1;\n    var month = yday <= 186 ? Math.ceil(yday / 31) : Math.ceil((yday - 6) / 30);\n    var day = jd - this.toJD(year, month, 1) + 1;\n    return this.newDate(year, month, day);\n  }\n}); // Modulus function which works for non-integers.\n\nfunction mod(a, b) {\n  return a - b * Math.floor(a / b);\n} // Persian (Jalali) calendar implementation\n\n\nmain.calendars.persian = PersianCalendar;\nmain.calendars.jalali = PersianCalendar;","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/world-calendars/dist/calendars/persian.js"],"names":["main","require","assign","PersianCalendar","language","local","regionalOptions","prototype","baseCalendar","name","jdEpoch","daysPerMonth","hasYearZero","minMonth","firstMonth","minDay","epochs","monthNames","monthNamesShort","dayNames","dayNamesShort","dayNamesMin","digits","dateFormat","firstDay","isRTL","leapYear","year","date","_validate","invalidYear","weekOfYear","month","day","checkDate","newDate","add","dayOfWeek","Math","floor","dayOfYear","daysInMonth","invalidMonth","weekDay","toJD","invalidDate","epBase","epYear","mod","fromJD","jd","depoch","cycle","cyear","ycycle","aux1","aux2","yday","ceil","a","b","calendars","persian","jalali"],"mappings":"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","sourcesContent":["/*\n * World Calendars\n * https://github.com/alexcjohnson/world-calendars\n *\n * Batch-converted from kbwood/calendars\n * Many thanks to Keith Wood and all of the contributors to the original project!\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n﻿/* http://keith-wood.name/calendars.html\n   Persian calendar for jQuery v2.0.2.\n   Written by Keith Wood (wood.keith{at}optusnet.com.au) August 2009.\n   Available under the MIT (http://keith-wood.name/licence.html) license. \n   Please attribute the author if you use it. */\n\nvar main = require('../main');\nvar assign = require('object-assign');\n\n\n/** Implementation of the Persian or Jalali calendar.\n    Based on code from <a href=\"http://www.iranchamber.com/calendar/converter/iranian_calendar_converter.php\">http://www.iranchamber.com/calendar/converter/iranian_calendar_converter.php</a>.\n    See also <a href=\"http://en.wikipedia.org/wiki/Iranian_calendar\">http://en.wikipedia.org/wiki/Iranian_calendar</a>.\n    @class PersianCalendar\n    @param [language=''] {string} The language code (default English) for localisation. */\nfunction PersianCalendar(language) {\n    this.local = this.regionalOptions[language || ''] || this.regionalOptions[''];\n}\n\nPersianCalendar.prototype = new main.baseCalendar;\n\nassign(PersianCalendar.prototype, {\n    /** The calendar name.\n        @memberof PersianCalendar */\n    name: 'Persian',\n    /** Julian date of start of Persian epoch: 19 March 622 CE.\n        @memberof PersianCalendar */\n    jdEpoch: 1948320.5,\n    /** Days per month in a common year.\n        @memberof PersianCalendar */\n    daysPerMonth: [31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 29],\n    /** <code>true</code> if has a year zero, <code>false</code> if not.\n        @memberof PersianCalendar */\n    hasYearZero: false,\n    /** The minimum month number.\n        @memberof PersianCalendar */\n    minMonth: 1,\n    /** The first month in the year.\n        @memberof PersianCalendar */\n    firstMonth: 1,\n    /** The minimum day number.\n        @memberof PersianCalendar */\n    minDay: 1,\n\n    /** Localisations for the plugin.\n        Entries are objects indexed by the language code ('' being the default US/English).\n        Each object has the following attributes.\n        @memberof PersianCalendar\n        @property name {string} The calendar name.\n        @property epochs {string[]} The epoch names.\n        @property monthNames {string[]} The long names of the months of the year.\n        @property monthNamesShort {string[]} The short names of the months of the year.\n        @property dayNames {string[]} The long names of the days of the week.\n        @property dayNamesShort {string[]} The short names of the days of the week.\n        @property dayNamesMin {string[]} The minimal names of the days of the week.\n        @property dateFormat {string} The date format for this calendar.\n                See the options on <a href=\"BaseCalendar.html#formatDate\"><code>formatDate</code></a> for details.\n        @property firstDay {number} The number of the first day of the week, starting at 0.\n        @property isRTL {number} <code>true</code> if this localisation reads right-to-left. */\n    regionalOptions: { // Localisations\n        '': {\n            name: 'Persian',\n            epochs: ['BP', 'AP'],\n            monthNames: ['Farvardin', 'Ordibehesht', 'Khordad', 'Tir', 'Mordad', 'Shahrivar',\n            'Mehr', 'Aban', 'Azar', 'Day', 'Bahman', 'Esfand'],\n            monthNamesShort: ['Far', 'Ord', 'Kho', 'Tir', 'Mor', 'Sha', 'Meh', 'Aba', 'Aza', 'Day', 'Bah', 'Esf'],\n            dayNames: ['Yekshambe', 'Doshambe', 'Seshambe', 'Chæharshambe', 'Panjshambe', 'Jom\\'e', 'Shambe'],\n            dayNamesShort: ['Yek', 'Do', 'Se', 'Chæ', 'Panj', 'Jom', 'Sha'],\n            dayNamesMin: ['Ye','Do','Se','Ch','Pa','Jo','Sh'],\n            digits: null,\n            dateFormat: 'yyyy/mm/dd',\n            firstDay: 6,\n            isRTL: false\n        }\n    },\n\n    /** Determine whether this date is in a leap year.\n        @memberof PersianCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @return {boolean} <code>true</code> if this is a leap year, <code>false</code> if not.\n        @throws Error if an invalid year or a different calendar used. */\n    leapYear: function(year) {\n        var date = this._validate(year, this.minMonth, this.minDay, main.local.invalidYear);\n        return (((((date.year() - (date.year() > 0 ? 474 : 473)) % 2820) +\n            474 + 38) * 682) % 2816) < 682;\n    },\n\n    /** Determine the week of the year for a date.\n        @memberof PersianCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @param [month] {number} The month to examine.\n        @param [day] {number} The day to examine.\n        @return {number} The week of the year.\n        @throws Error if an invalid date or a different calendar used. */\n    weekOfYear: function(year, month, day) {\n        // Find Saturday of this week starting on Saturday\n        var checkDate = this.newDate(year, month, day);\n        checkDate.add(-((checkDate.dayOfWeek() + 1) % 7), 'd');\n        return Math.floor((checkDate.dayOfYear() - 1) / 7) + 1;\n    },\n\n    /** Retrieve the number of days in a month.\n        @memberof PersianCalendar\n        @param year {CDate|number} The date to examine or the year of the month.\n        @param [month] {number} The month.\n        @return {number} The number of days in this month.\n        @throws Error if an invalid month/year or a different calendar used. */\n    daysInMonth: function(year, month) {\n        var date = this._validate(year, month, this.minDay, main.local.invalidMonth);\n        return this.daysPerMonth[date.month() - 1] +\n            (date.month() === 12 && this.leapYear(date.year()) ? 1 : 0);\n    },\n\n    /** Determine whether this date is a week day.\n        @memberof PersianCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @param [month] {number} The month to examine.\n        @param [day] {number} The day to examine.\n        @return {boolean} <code>true</code> if a week day, <code>false</code> if not.\n        @throws Error if an invalid date or a different calendar used. */\n    weekDay: function(year, month, day) {\n        return this.dayOfWeek(year, month, day) !== 5;\n    },\n\n    /** Retrieve the Julian date equivalent for this date,\n        i.e. days since January 1, 4713 BCE Greenwich noon.\n        @memberof PersianCalendar\n        @param year {CDate|number} The date to convert or the year to convert.\n        @param [month] {number} The month to convert.\n        @param [day] {number} The day to convert.\n        @return {number} The equivalent Julian date.\n        @throws Error if an invalid date or a different calendar used. */\n    toJD: function(year, month, day) {\n        var date = this._validate(year, month, day, main.local.invalidDate);\n        year = date.year();\n        month = date.month();\n        day = date.day();\n        var epBase = year - (year >= 0 ? 474 : 473);\n        var epYear = 474 + mod(epBase, 2820);\n        return day + (month <= 7 ? (month - 1) * 31 : (month - 1) * 30 + 6) +\n            Math.floor((epYear * 682 - 110) / 2816) + (epYear - 1) * 365 +\n            Math.floor(epBase / 2820) * 1029983 + this.jdEpoch - 1;\n    },\n\n    /** Create a new date from a Julian date.\n        @memberof PersianCalendar\n        @param jd {number} The Julian date to convert.\n        @return {CDate} The equivalent date. */\n    fromJD: function(jd) {\n        jd = Math.floor(jd) + 0.5;\n        var depoch = jd - this.toJD(475, 1, 1);\n        var cycle = Math.floor(depoch / 1029983);\n        var cyear = mod(depoch, 1029983);\n        var ycycle = 2820;\n        if (cyear !== 1029982) {\n            var aux1 = Math.floor(cyear / 366);\n            var aux2 = mod(cyear, 366);\n            ycycle = Math.floor(((2134 * aux1) + (2816 * aux2) + 2815) / 1028522) + aux1 + 1;\n        }\n        var year = ycycle + (2820 * cycle) + 474;\n        year = (year <= 0 ? year - 1 : year);\n        var yday = jd - this.toJD(year, 1, 1) + 1;\n        var month = (yday <= 186 ? Math.ceil(yday / 31) : Math.ceil((yday - 6) / 30));\n        var day = jd - this.toJD(year, month, 1) + 1;\n        return this.newDate(year, month, day);\n    }\n});\n\n// Modulus function which works for non-integers.\nfunction mod(a, b) {\n    return a - (b * Math.floor(a / b));\n}\n\n// Persian (Jalali) calendar implementation\nmain.calendars.persian = PersianCalendar;\nmain.calendars.jalali = PersianCalendar;\n\n"]},"metadata":{},"sourceType":"script"}