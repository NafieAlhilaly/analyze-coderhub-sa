{"ast":null,"code":"'use strict';\n\nvar createMatrix = require('regl-splom');\n\nvar Lib = require('../../lib');\n\nvar AxisIDs = require('../../plots/cartesian/axis_ids');\n\nvar selectMode = require('../../components/dragelement/helpers').selectMode;\n\nmodule.exports = function plot(gd, _, splomCalcData) {\n  if (!splomCalcData.length) return;\n\n  for (var i = 0; i < splomCalcData.length; i++) {\n    plotOne(gd, splomCalcData[i][0]);\n  }\n};\n\nfunction plotOne(gd, cd0) {\n  var fullLayout = gd._fullLayout;\n  var gs = fullLayout._size;\n  var trace = cd0.trace;\n  var stash = cd0.t;\n  var scene = fullLayout._splomScenes[trace.uid];\n  var matrixOpts = scene.matrixOptions;\n  var cdata = matrixOpts.cdata;\n\n  var regl = fullLayout._glcanvas.data()[0].regl;\n\n  var dragmode = fullLayout.dragmode;\n  var xa, ya;\n  var i, j, k;\n  if (cdata.length === 0) return; // augment options with proper upper/lower halves\n  // regl-splom's default grid starts from bottom-left\n\n  matrixOpts.lower = trace.showupperhalf;\n  matrixOpts.upper = trace.showlowerhalf;\n  matrixOpts.diagonal = trace.diagonal.visible;\n  var visibleDims = trace._visibleDims;\n  var visibleLength = cdata.length;\n  var viewOpts = scene.viewOpts = {};\n  viewOpts.ranges = new Array(visibleLength);\n  viewOpts.domains = new Array(visibleLength);\n\n  for (k = 0; k < visibleDims.length; k++) {\n    i = visibleDims[k];\n    var rng = viewOpts.ranges[k] = new Array(4);\n    var dmn = viewOpts.domains[k] = new Array(4);\n    xa = AxisIDs.getFromId(gd, trace._diag[i][0]);\n\n    if (xa) {\n      rng[0] = xa._rl[0];\n      rng[2] = xa._rl[1];\n      dmn[0] = xa.domain[0];\n      dmn[2] = xa.domain[1];\n    }\n\n    ya = AxisIDs.getFromId(gd, trace._diag[i][1]);\n\n    if (ya) {\n      rng[1] = ya._rl[0];\n      rng[3] = ya._rl[1];\n      dmn[1] = ya.domain[0];\n      dmn[3] = ya.domain[1];\n    }\n  }\n\n  var plotGlPixelRatio = gd._context.plotGlPixelRatio;\n  var l = gs.l * plotGlPixelRatio;\n  var b = gs.b * plotGlPixelRatio;\n  var w = gs.w * plotGlPixelRatio;\n  var h = gs.h * plotGlPixelRatio;\n  viewOpts.viewport = [l, b, w + l, h + b];\n\n  if (scene.matrix === true) {\n    scene.matrix = createMatrix(regl);\n  }\n\n  var clickSelectEnabled = fullLayout.clickmode.indexOf('select') > -1;\n  var isSelectMode = selectMode(dragmode) || !!trace.selectedpoints || clickSelectEnabled;\n  var needsBaseUpdate = true;\n\n  if (isSelectMode) {\n    var commonLength = trace._length; // regenerate scene batch, if traces number changed during selection\n\n    if (trace.selectedpoints) {\n      scene.selectBatch = trace.selectedpoints;\n      var selPts = trace.selectedpoints;\n      var selDict = {};\n\n      for (i = 0; i < selPts.length; i++) {\n        selDict[selPts[i]] = true;\n      }\n\n      var unselPts = [];\n\n      for (i = 0; i < commonLength; i++) {\n        if (!selDict[i]) unselPts.push(i);\n      }\n\n      scene.unselectBatch = unselPts;\n    } // precalculate px coords since we are not going to pan during select\n\n\n    var xpx = stash.xpx = new Array(visibleLength);\n    var ypx = stash.ypx = new Array(visibleLength);\n\n    for (k = 0; k < visibleDims.length; k++) {\n      i = visibleDims[k];\n      xa = AxisIDs.getFromId(gd, trace._diag[i][0]);\n\n      if (xa) {\n        xpx[k] = new Array(commonLength);\n\n        for (j = 0; j < commonLength; j++) {\n          xpx[k][j] = xa.c2p(cdata[k][j]);\n        }\n      }\n\n      ya = AxisIDs.getFromId(gd, trace._diag[i][1]);\n\n      if (ya) {\n        ypx[k] = new Array(commonLength);\n\n        for (j = 0; j < commonLength; j++) {\n          ypx[k][j] = ya.c2p(cdata[k][j]);\n        }\n      }\n    }\n\n    if (scene.selectBatch.length || scene.unselectBatch.length) {\n      var unselOpts = Lib.extendFlat({}, matrixOpts, scene.unselectedOptions, viewOpts);\n      var selOpts = Lib.extendFlat({}, matrixOpts, scene.selectedOptions, viewOpts);\n      scene.matrix.update(unselOpts, selOpts);\n      needsBaseUpdate = false;\n    }\n  } else {\n    stash.xpx = stash.ypx = null;\n  }\n\n  if (needsBaseUpdate) {\n    var opts = Lib.extendFlat({}, matrixOpts, viewOpts);\n    scene.matrix.update(opts, null);\n  }\n}","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/plotly.js/src/traces/splom/plot.js"],"names":["createMatrix","require","Lib","AxisIDs","selectMode","module","exports","plot","gd","_","splomCalcData","length","i","plotOne","cd0","fullLayout","_fullLayout","gs","_size","trace","stash","t","scene","_splomScenes","uid","matrixOpts","matrixOptions","cdata","regl","_glcanvas","data","dragmode","xa","ya","j","k","lower","showupperhalf","upper","showlowerhalf","diagonal","visible","visibleDims","_visibleDims","visibleLength","viewOpts","ranges","Array","domains","rng","dmn","getFromId","_diag","_rl","domain","plotGlPixelRatio","_context","l","b","w","h","viewport","matrix","clickSelectEnabled","clickmode","indexOf","isSelectMode","selectedpoints","needsBaseUpdate","commonLength","_length","selectBatch","selPts","selDict","unselPts","push","unselectBatch","xpx","ypx","c2p","unselOpts","extendFlat","unselectedOptions","selOpts","selectedOptions","update","opts"],"mappings":"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","sourcesContent":["'use strict';\n\nvar createMatrix = require('regl-splom');\n\nvar Lib = require('../../lib');\nvar AxisIDs = require('../../plots/cartesian/axis_ids');\nvar selectMode = require('../../components/dragelement/helpers').selectMode;\n\nmodule.exports = function plot(gd, _, splomCalcData) {\n    if(!splomCalcData.length) return;\n\n    for(var i = 0; i < splomCalcData.length; i++) {\n        plotOne(gd, splomCalcData[i][0]);\n    }\n};\n\nfunction plotOne(gd, cd0) {\n    var fullLayout = gd._fullLayout;\n    var gs = fullLayout._size;\n    var trace = cd0.trace;\n    var stash = cd0.t;\n    var scene = fullLayout._splomScenes[trace.uid];\n    var matrixOpts = scene.matrixOptions;\n    var cdata = matrixOpts.cdata;\n    var regl = fullLayout._glcanvas.data()[0].regl;\n    var dragmode = fullLayout.dragmode;\n    var xa, ya;\n    var i, j, k;\n\n    if(cdata.length === 0) return;\n\n    // augment options with proper upper/lower halves\n    // regl-splom's default grid starts from bottom-left\n    matrixOpts.lower = trace.showupperhalf;\n    matrixOpts.upper = trace.showlowerhalf;\n    matrixOpts.diagonal = trace.diagonal.visible;\n\n    var visibleDims = trace._visibleDims;\n    var visibleLength = cdata.length;\n    var viewOpts = scene.viewOpts = {};\n    viewOpts.ranges = new Array(visibleLength);\n    viewOpts.domains = new Array(visibleLength);\n\n    for(k = 0; k < visibleDims.length; k++) {\n        i = visibleDims[k];\n\n        var rng = viewOpts.ranges[k] = new Array(4);\n        var dmn = viewOpts.domains[k] = new Array(4);\n\n        xa = AxisIDs.getFromId(gd, trace._diag[i][0]);\n        if(xa) {\n            rng[0] = xa._rl[0];\n            rng[2] = xa._rl[1];\n            dmn[0] = xa.domain[0];\n            dmn[2] = xa.domain[1];\n        }\n\n        ya = AxisIDs.getFromId(gd, trace._diag[i][1]);\n        if(ya) {\n            rng[1] = ya._rl[0];\n            rng[3] = ya._rl[1];\n            dmn[1] = ya.domain[0];\n            dmn[3] = ya.domain[1];\n        }\n    }\n\n    var plotGlPixelRatio = gd._context.plotGlPixelRatio;\n    var l = gs.l * plotGlPixelRatio;\n    var b = gs.b * plotGlPixelRatio;\n    var w = gs.w * plotGlPixelRatio;\n    var h = gs.h * plotGlPixelRatio;\n\n    viewOpts.viewport = [l, b, w + l, h + b];\n\n    if(scene.matrix === true) {\n        scene.matrix = createMatrix(regl);\n    }\n\n    var clickSelectEnabled = fullLayout.clickmode.indexOf('select') > -1;\n    var isSelectMode = selectMode(dragmode) ||\n      !!trace.selectedpoints || clickSelectEnabled;\n    var needsBaseUpdate = true;\n\n    if(isSelectMode) {\n        var commonLength = trace._length;\n\n        // regenerate scene batch, if traces number changed during selection\n        if(trace.selectedpoints) {\n            scene.selectBatch = trace.selectedpoints;\n\n            var selPts = trace.selectedpoints;\n            var selDict = {};\n            for(i = 0; i < selPts.length; i++) {\n                selDict[selPts[i]] = true;\n            }\n            var unselPts = [];\n            for(i = 0; i < commonLength; i++) {\n                if(!selDict[i]) unselPts.push(i);\n            }\n            scene.unselectBatch = unselPts;\n        }\n\n        // precalculate px coords since we are not going to pan during select\n        var xpx = stash.xpx = new Array(visibleLength);\n        var ypx = stash.ypx = new Array(visibleLength);\n\n        for(k = 0; k < visibleDims.length; k++) {\n            i = visibleDims[k];\n\n            xa = AxisIDs.getFromId(gd, trace._diag[i][0]);\n            if(xa) {\n                xpx[k] = new Array(commonLength);\n                for(j = 0; j < commonLength; j++) {\n                    xpx[k][j] = xa.c2p(cdata[k][j]);\n                }\n            }\n\n            ya = AxisIDs.getFromId(gd, trace._diag[i][1]);\n            if(ya) {\n                ypx[k] = new Array(commonLength);\n                for(j = 0; j < commonLength; j++) {\n                    ypx[k][j] = ya.c2p(cdata[k][j]);\n                }\n            }\n        }\n\n        if(scene.selectBatch.length || scene.unselectBatch.length) {\n            var unselOpts = Lib.extendFlat({}, matrixOpts, scene.unselectedOptions, viewOpts);\n            var selOpts = Lib.extendFlat({}, matrixOpts, scene.selectedOptions, viewOpts);\n            scene.matrix.update(unselOpts, selOpts);\n            needsBaseUpdate = false;\n        }\n    } else {\n        stash.xpx = stash.ypx = null;\n    }\n\n    if(needsBaseUpdate) {\n        var opts = Lib.extendFlat({}, matrixOpts, viewOpts);\n        scene.matrix.update(opts, null);\n    }\n}\n"]},"metadata":{},"sourceType":"script"}