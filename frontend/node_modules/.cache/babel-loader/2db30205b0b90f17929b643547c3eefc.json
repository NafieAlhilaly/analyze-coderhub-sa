{"ast":null,"code":"'use strict';\n\nvar dot = require('./matrix').dot;\n\nvar BADNUM = require('../constants/numerical').BADNUM;\n\nvar polygon = module.exports = {};\n/**\n * Turn an array of [x, y] pairs into a polygon object\n * that can test if points are inside it\n *\n * @param ptsIn Array of [x, y] pairs\n *\n * @returns polygon Object {xmin, xmax, ymin, ymax, pts, contains}\n *      (x|y)(min|max) are the bounding rect of the polygon\n *      pts is the original array, with the first pair repeated at the end\n *      contains is a function: (pt, omitFirstEdge)\n *          pt is the [x, y] pair to test\n *          omitFirstEdge truthy means points exactly on the first edge don't\n *              count. This is for use adding one polygon to another so we\n *              don't double-count the edge where they meet.\n *          returns boolean: is pt inside the polygon (including on its edges)\n */\n\npolygon.tester = function tester(ptsIn) {\n  var pts = ptsIn.slice();\n  var xmin = pts[0][0];\n  var xmax = xmin;\n  var ymin = pts[0][1];\n  var ymax = ymin;\n  var i;\n  pts.push(pts[0]);\n\n  for (i = 1; i < pts.length; i++) {\n    xmin = Math.min(xmin, pts[i][0]);\n    xmax = Math.max(xmax, pts[i][0]);\n    ymin = Math.min(ymin, pts[i][1]);\n    ymax = Math.max(ymax, pts[i][1]);\n  } // do we have a rectangle? Handle this here, so we can use the same\n  // tester for the rectangular case without sacrificing speed\n\n\n  var isRect = false;\n  var rectFirstEdgeTest;\n\n  if (pts.length === 5) {\n    if (pts[0][0] === pts[1][0]) {\n      // vert, horz, vert, horz\n      if (pts[2][0] === pts[3][0] && pts[0][1] === pts[3][1] && pts[1][1] === pts[2][1]) {\n        isRect = true;\n\n        rectFirstEdgeTest = function (pt) {\n          return pt[0] === pts[0][0];\n        };\n      }\n    } else if (pts[0][1] === pts[1][1]) {\n      // horz, vert, horz, vert\n      if (pts[2][1] === pts[3][1] && pts[0][0] === pts[3][0] && pts[1][0] === pts[2][0]) {\n        isRect = true;\n\n        rectFirstEdgeTest = function (pt) {\n          return pt[1] === pts[0][1];\n        };\n      }\n    }\n  }\n\n  function rectContains(pt, omitFirstEdge) {\n    var x = pt[0];\n    var y = pt[1];\n\n    if (x === BADNUM || x < xmin || x > xmax || y === BADNUM || y < ymin || y > ymax) {\n      // pt is outside the bounding box of polygon\n      return false;\n    }\n\n    if (omitFirstEdge && rectFirstEdgeTest(pt)) return false;\n    return true;\n  }\n\n  function contains(pt, omitFirstEdge) {\n    var x = pt[0];\n    var y = pt[1];\n\n    if (x === BADNUM || x < xmin || x > xmax || y === BADNUM || y < ymin || y > ymax) {\n      // pt is outside the bounding box of polygon\n      return false;\n    }\n\n    var imax = pts.length;\n    var x1 = pts[0][0];\n    var y1 = pts[0][1];\n    var crossings = 0;\n    var i;\n    var x0;\n    var y0;\n    var xmini;\n    var ycross;\n\n    for (i = 1; i < imax; i++) {\n      // find all crossings of a vertical line upward from pt with\n      // polygon segments\n      // crossings exactly at xmax don't count, unless the point is\n      // exactly on the segment, then it counts as inside.\n      x0 = x1;\n      y0 = y1;\n      x1 = pts[i][0];\n      y1 = pts[i][1];\n      xmini = Math.min(x0, x1);\n\n      if (x < xmini || x > Math.max(x0, x1) || y > Math.max(y0, y1)) {\n        // outside the bounding box of this segment, it's only a crossing\n        // if it's below the box.\n        continue;\n      } else if (y < Math.min(y0, y1)) {\n        // don't count the left-most point of the segment as a crossing\n        // because we don't want to double-count adjacent crossings\n        // UNLESS the polygon turns past vertical at exactly this x\n        // Note that this is repeated below, but we can't factor it out\n        // because\n        if (x !== xmini) crossings++;\n      } else {\n        // inside the bounding box, check the actual line intercept\n        // vertical segment - we know already that the point is exactly\n        // on the segment, so mark the crossing as exactly at the point.\n        if (x1 === x0) ycross = y; // any other angle\n        else ycross = y0 + (x - x0) * (y1 - y0) / (x1 - x0); // exactly on the edge: counts as inside the polygon, unless it's the\n        // first edge and we're omitting it.\n\n        if (y === ycross) {\n          if (i === 1 && omitFirstEdge) return false;\n          return true;\n        }\n\n        if (y <= ycross && x !== xmini) crossings++;\n      }\n    } // if we've gotten this far, odd crossings means inside, even is outside\n\n\n    return crossings % 2 === 1;\n  } // detect if poly is degenerate\n\n\n  var degenerate = true;\n  var lastPt = pts[0];\n\n  for (i = 1; i < pts.length; i++) {\n    if (lastPt[0] !== pts[i][0] || lastPt[1] !== pts[i][1]) {\n      degenerate = false;\n      break;\n    }\n  }\n\n  return {\n    xmin: xmin,\n    xmax: xmax,\n    ymin: ymin,\n    ymax: ymax,\n    pts: pts,\n    contains: isRect ? rectContains : contains,\n    isRect: isRect,\n    degenerate: degenerate\n  };\n};\n/**\n * Test if a segment of a points array is bent or straight\n *\n * @param pts Array of [x, y] pairs\n * @param start the index of the proposed start of the straight section\n * @param end the index of the proposed end point\n * @param tolerance the max distance off the line connecting start and end\n *      before the line counts as bent\n * @returns boolean: true means this segment is bent, false means straight\n */\n\n\npolygon.isSegmentBent = function isSegmentBent(pts, start, end, tolerance) {\n  var startPt = pts[start];\n  var segment = [pts[end][0] - startPt[0], pts[end][1] - startPt[1]];\n  var segmentSquared = dot(segment, segment);\n  var segmentLen = Math.sqrt(segmentSquared);\n  var unitPerp = [-segment[1] / segmentLen, segment[0] / segmentLen];\n  var i;\n  var part;\n  var partParallel;\n\n  for (i = start + 1; i < end; i++) {\n    part = [pts[i][0] - startPt[0], pts[i][1] - startPt[1]];\n    partParallel = dot(part, segment);\n    if (partParallel < 0 || partParallel > segmentSquared || Math.abs(dot(part, unitPerp)) > tolerance) return true;\n  }\n\n  return false;\n};\n/**\n * Make a filtering polygon, to minimize the number of segments\n *\n * @param pts Array of [x, y] pairs (must start with at least 1 pair)\n * @param tolerance the maximum deviation from straight allowed for\n *      removing points to simplify the polygon\n *\n * @returns Object {addPt, raw, filtered}\n *      addPt is a function(pt: [x, y] pair) to add a raw point and\n *          continue filtering\n *      raw is all the input points\n *      filtered is the resulting filtered Array of [x, y] pairs\n */\n\n\npolygon.filter = function filter(pts, tolerance) {\n  var ptsFiltered = [pts[0]];\n  var doneRawIndex = 0;\n  var doneFilteredIndex = 0;\n\n  function addPt(pt) {\n    pts.push(pt);\n    var prevFilterLen = ptsFiltered.length;\n    var iLast = doneRawIndex;\n    ptsFiltered.splice(doneFilteredIndex + 1);\n\n    for (var i = iLast + 1; i < pts.length; i++) {\n      if (i === pts.length - 1 || polygon.isSegmentBent(pts, iLast, i + 1, tolerance)) {\n        ptsFiltered.push(pts[i]);\n\n        if (ptsFiltered.length < prevFilterLen - 2) {\n          doneRawIndex = i;\n          doneFilteredIndex = ptsFiltered.length - 1;\n        }\n\n        iLast = i;\n      }\n    }\n  }\n\n  if (pts.length > 1) {\n    var lastPt = pts.pop();\n    addPt(lastPt);\n  }\n\n  return {\n    addPt: addPt,\n    raw: pts,\n    filtered: ptsFiltered\n  };\n};","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/plotly.js/src/lib/polygon.js"],"names":["dot","require","BADNUM","polygon","module","exports","tester","ptsIn","pts","slice","xmin","xmax","ymin","ymax","i","push","length","Math","min","max","isRect","rectFirstEdgeTest","pt","rectContains","omitFirstEdge","x","y","contains","imax","x1","y1","crossings","x0","y0","xmini","ycross","degenerate","lastPt","isSegmentBent","start","end","tolerance","startPt","segment","segmentSquared","segmentLen","sqrt","unitPerp","part","partParallel","abs","filter","ptsFiltered","doneRawIndex","doneFilteredIndex","addPt","prevFilterLen","iLast","splice","pop","raw","filtered"],"mappings":"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","sourcesContent":["'use strict';\n\nvar dot = require('./matrix').dot;\nvar BADNUM = require('../constants/numerical').BADNUM;\n\nvar polygon = module.exports = {};\n\n/**\n * Turn an array of [x, y] pairs into a polygon object\n * that can test if points are inside it\n *\n * @param ptsIn Array of [x, y] pairs\n *\n * @returns polygon Object {xmin, xmax, ymin, ymax, pts, contains}\n *      (x|y)(min|max) are the bounding rect of the polygon\n *      pts is the original array, with the first pair repeated at the end\n *      contains is a function: (pt, omitFirstEdge)\n *          pt is the [x, y] pair to test\n *          omitFirstEdge truthy means points exactly on the first edge don't\n *              count. This is for use adding one polygon to another so we\n *              don't double-count the edge where they meet.\n *          returns boolean: is pt inside the polygon (including on its edges)\n */\npolygon.tester = function tester(ptsIn) {\n    var pts = ptsIn.slice();\n    var xmin = pts[0][0];\n    var xmax = xmin;\n    var ymin = pts[0][1];\n    var ymax = ymin;\n    var i;\n\n    pts.push(pts[0]);\n    for(i = 1; i < pts.length; i++) {\n        xmin = Math.min(xmin, pts[i][0]);\n        xmax = Math.max(xmax, pts[i][0]);\n        ymin = Math.min(ymin, pts[i][1]);\n        ymax = Math.max(ymax, pts[i][1]);\n    }\n\n    // do we have a rectangle? Handle this here, so we can use the same\n    // tester for the rectangular case without sacrificing speed\n\n    var isRect = false;\n    var rectFirstEdgeTest;\n\n    if(pts.length === 5) {\n        if(pts[0][0] === pts[1][0]) { // vert, horz, vert, horz\n            if(pts[2][0] === pts[3][0] &&\n                    pts[0][1] === pts[3][1] &&\n                    pts[1][1] === pts[2][1]) {\n                isRect = true;\n                rectFirstEdgeTest = function(pt) { return pt[0] === pts[0][0]; };\n            }\n        } else if(pts[0][1] === pts[1][1]) { // horz, vert, horz, vert\n            if(pts[2][1] === pts[3][1] &&\n                    pts[0][0] === pts[3][0] &&\n                    pts[1][0] === pts[2][0]) {\n                isRect = true;\n                rectFirstEdgeTest = function(pt) { return pt[1] === pts[0][1]; };\n            }\n        }\n    }\n\n    function rectContains(pt, omitFirstEdge) {\n        var x = pt[0];\n        var y = pt[1];\n\n        if(x === BADNUM || x < xmin || x > xmax || y === BADNUM || y < ymin || y > ymax) {\n            // pt is outside the bounding box of polygon\n            return false;\n        }\n        if(omitFirstEdge && rectFirstEdgeTest(pt)) return false;\n\n        return true;\n    }\n\n    function contains(pt, omitFirstEdge) {\n        var x = pt[0];\n        var y = pt[1];\n\n        if(x === BADNUM || x < xmin || x > xmax || y === BADNUM || y < ymin || y > ymax) {\n            // pt is outside the bounding box of polygon\n            return false;\n        }\n\n        var imax = pts.length;\n        var x1 = pts[0][0];\n        var y1 = pts[0][1];\n        var crossings = 0;\n        var i;\n        var x0;\n        var y0;\n        var xmini;\n        var ycross;\n\n        for(i = 1; i < imax; i++) {\n            // find all crossings of a vertical line upward from pt with\n            // polygon segments\n            // crossings exactly at xmax don't count, unless the point is\n            // exactly on the segment, then it counts as inside.\n            x0 = x1;\n            y0 = y1;\n            x1 = pts[i][0];\n            y1 = pts[i][1];\n            xmini = Math.min(x0, x1);\n\n            if(x < xmini || x > Math.max(x0, x1) || y > Math.max(y0, y1)) {\n                // outside the bounding box of this segment, it's only a crossing\n                // if it's below the box.\n\n                continue;\n            } else if(y < Math.min(y0, y1)) {\n                // don't count the left-most point of the segment as a crossing\n                // because we don't want to double-count adjacent crossings\n                // UNLESS the polygon turns past vertical at exactly this x\n                // Note that this is repeated below, but we can't factor it out\n                // because\n                if(x !== xmini) crossings++;\n            } else {\n                // inside the bounding box, check the actual line intercept\n\n                // vertical segment - we know already that the point is exactly\n                // on the segment, so mark the crossing as exactly at the point.\n                if(x1 === x0) ycross = y;\n                // any other angle\n                else ycross = y0 + (x - x0) * (y1 - y0) / (x1 - x0);\n\n                // exactly on the edge: counts as inside the polygon, unless it's the\n                // first edge and we're omitting it.\n                if(y === ycross) {\n                    if(i === 1 && omitFirstEdge) return false;\n                    return true;\n                }\n\n                if(y <= ycross && x !== xmini) crossings++;\n            }\n        }\n\n        // if we've gotten this far, odd crossings means inside, even is outside\n        return crossings % 2 === 1;\n    }\n\n    // detect if poly is degenerate\n    var degenerate = true;\n    var lastPt = pts[0];\n    for(i = 1; i < pts.length; i++) {\n        if(lastPt[0] !== pts[i][0] || lastPt[1] !== pts[i][1]) {\n            degenerate = false;\n            break;\n        }\n    }\n\n    return {\n        xmin: xmin,\n        xmax: xmax,\n        ymin: ymin,\n        ymax: ymax,\n        pts: pts,\n        contains: isRect ? rectContains : contains,\n        isRect: isRect,\n        degenerate: degenerate\n    };\n};\n\n/**\n * Test if a segment of a points array is bent or straight\n *\n * @param pts Array of [x, y] pairs\n * @param start the index of the proposed start of the straight section\n * @param end the index of the proposed end point\n * @param tolerance the max distance off the line connecting start and end\n *      before the line counts as bent\n * @returns boolean: true means this segment is bent, false means straight\n */\npolygon.isSegmentBent = function isSegmentBent(pts, start, end, tolerance) {\n    var startPt = pts[start];\n    var segment = [pts[end][0] - startPt[0], pts[end][1] - startPt[1]];\n    var segmentSquared = dot(segment, segment);\n    var segmentLen = Math.sqrt(segmentSquared);\n    var unitPerp = [-segment[1] / segmentLen, segment[0] / segmentLen];\n    var i;\n    var part;\n    var partParallel;\n\n    for(i = start + 1; i < end; i++) {\n        part = [pts[i][0] - startPt[0], pts[i][1] - startPt[1]];\n        partParallel = dot(part, segment);\n\n        if(partParallel < 0 || partParallel > segmentSquared ||\n            Math.abs(dot(part, unitPerp)) > tolerance) return true;\n    }\n    return false;\n};\n\n/**\n * Make a filtering polygon, to minimize the number of segments\n *\n * @param pts Array of [x, y] pairs (must start with at least 1 pair)\n * @param tolerance the maximum deviation from straight allowed for\n *      removing points to simplify the polygon\n *\n * @returns Object {addPt, raw, filtered}\n *      addPt is a function(pt: [x, y] pair) to add a raw point and\n *          continue filtering\n *      raw is all the input points\n *      filtered is the resulting filtered Array of [x, y] pairs\n */\npolygon.filter = function filter(pts, tolerance) {\n    var ptsFiltered = [pts[0]];\n    var doneRawIndex = 0;\n    var doneFilteredIndex = 0;\n\n    function addPt(pt) {\n        pts.push(pt);\n        var prevFilterLen = ptsFiltered.length;\n        var iLast = doneRawIndex;\n        ptsFiltered.splice(doneFilteredIndex + 1);\n\n        for(var i = iLast + 1; i < pts.length; i++) {\n            if(i === pts.length - 1 || polygon.isSegmentBent(pts, iLast, i + 1, tolerance)) {\n                ptsFiltered.push(pts[i]);\n                if(ptsFiltered.length < prevFilterLen - 2) {\n                    doneRawIndex = i;\n                    doneFilteredIndex = ptsFiltered.length - 1;\n                }\n                iLast = i;\n            }\n        }\n    }\n\n    if(pts.length > 1) {\n        var lastPt = pts.pop();\n        addPt(lastPt);\n    }\n\n    return {\n        addPt: addPt,\n        raw: pts,\n        filtered: ptsFiltered\n    };\n};\n"]},"metadata":{},"sourceType":"script"}