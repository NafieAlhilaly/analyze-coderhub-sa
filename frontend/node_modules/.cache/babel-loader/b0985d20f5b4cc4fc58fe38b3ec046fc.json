{"ast":null,"code":"'use strict';\n\nmodule.exports = createGrid;\n\nvar createBuffer = require('gl-buffer');\n\nvar createShader = require('gl-shader');\n\nvar bsearch = require('binary-search-bounds');\n\nvar shaders = require('./shaders');\n\nfunction Grid(plot, vbo, shader, tickShader) {\n  this.plot = plot;\n  this.vbo = vbo;\n  this.shader = shader;\n  this.tickShader = tickShader;\n  this.ticks = [[], []];\n}\n\nfunction compareTickNum(a, b) {\n  return a - b;\n}\n\nvar proto = Grid.prototype;\n\nproto.draw = function () {\n  var DATA_SHIFT = [0, 0];\n  var DATA_SCALE = [0, 0];\n  var DATA_AXIS = [0, 0];\n  return function () {\n    var plot = this.plot;\n    var vbo = this.vbo;\n    var shader = this.shader;\n    var ticks = this.ticks;\n    var gl = plot.gl;\n    var bounds = plot._tickBounds;\n    var dataBox = plot.dataBox;\n    var viewPixels = plot.viewBox;\n    var lineWidth = plot.gridLineWidth;\n    var gridColor = plot.gridLineColor;\n    var gridEnable = plot.gridLineEnable;\n    var pixelRatio = plot.pixelRatio;\n\n    for (var i = 0; i < 2; ++i) {\n      var lo = bounds[i];\n      var hi = bounds[i + 2];\n      var boundScale = hi - lo;\n      var dataCenter = 0.5 * (dataBox[i + 2] + dataBox[i]);\n      var dataWidth = dataBox[i + 2] - dataBox[i];\n      DATA_SCALE[i] = 2.0 * boundScale / dataWidth;\n      DATA_SHIFT[i] = 2.0 * (lo - dataCenter) / dataWidth;\n    }\n\n    shader.bind();\n    vbo.bind();\n    shader.attributes.dataCoord.pointer();\n    shader.uniforms.dataShift = DATA_SHIFT;\n    shader.uniforms.dataScale = DATA_SCALE;\n    var offset = 0;\n\n    for (var i = 0; i < 2; ++i) {\n      DATA_AXIS[0] = DATA_AXIS[1] = 0;\n      DATA_AXIS[i] = 1;\n      shader.uniforms.dataAxis = DATA_AXIS;\n      shader.uniforms.lineWidth = lineWidth[i] / (viewPixels[i + 2] - viewPixels[i]) * pixelRatio;\n      shader.uniforms.color = gridColor[i];\n      var size = ticks[i].length * 6;\n\n      if (gridEnable[i] && size) {\n        gl.drawArrays(gl.TRIANGLES, offset, size);\n      }\n\n      offset += size;\n    }\n  };\n}();\n\nproto.drawTickMarks = function () {\n  var DATA_SHIFT = [0, 0];\n  var DATA_SCALE = [0, 0];\n  var X_AXIS = [1, 0];\n  var Y_AXIS = [0, 1];\n  var SCR_OFFSET = [0, 0];\n  var TICK_SCALE = [0, 0];\n  return function () {\n    var plot = this.plot;\n    var vbo = this.vbo;\n    var shader = this.tickShader;\n    var ticks = this.ticks;\n    var gl = plot.gl;\n    var bounds = plot._tickBounds;\n    var dataBox = plot.dataBox;\n    var viewBox = plot.viewBox;\n    var pixelRatio = plot.pixelRatio;\n    var screenBox = plot.screenBox;\n    var screenWidth = screenBox[2] - screenBox[0];\n    var screenHeight = screenBox[3] - screenBox[1];\n    var viewWidth = viewBox[2] - viewBox[0];\n    var viewHeight = viewBox[3] - viewBox[1];\n\n    for (var i = 0; i < 2; ++i) {\n      var lo = bounds[i];\n      var hi = bounds[i + 2];\n      var boundScale = hi - lo;\n      var dataCenter = 0.5 * (dataBox[i + 2] + dataBox[i]);\n      var dataWidth = dataBox[i + 2] - dataBox[i];\n      DATA_SCALE[i] = 2.0 * boundScale / dataWidth;\n      DATA_SHIFT[i] = 2.0 * (lo - dataCenter) / dataWidth;\n    }\n\n    DATA_SCALE[0] *= viewWidth / screenWidth;\n    DATA_SHIFT[0] *= viewWidth / screenWidth;\n    DATA_SCALE[1] *= viewHeight / screenHeight;\n    DATA_SHIFT[1] *= viewHeight / screenHeight;\n    shader.bind();\n    vbo.bind();\n    shader.attributes.dataCoord.pointer();\n    var uniforms = shader.uniforms;\n    uniforms.dataShift = DATA_SHIFT;\n    uniforms.dataScale = DATA_SCALE;\n    var tickMarkLength = plot.tickMarkLength;\n    var tickMarkWidth = plot.tickMarkWidth;\n    var tickMarkColor = plot.tickMarkColor;\n    var xTicksOffset = 0;\n    var yTicksOffset = ticks[0].length * 6;\n    var xStart = Math.min(bsearch.ge(ticks[0], (dataBox[0] - bounds[0]) / (bounds[2] - bounds[0]), compareTickNum), ticks[0].length);\n    var xEnd = Math.min(bsearch.gt(ticks[0], (dataBox[2] - bounds[0]) / (bounds[2] - bounds[0]), compareTickNum), ticks[0].length);\n    var xOffset = xTicksOffset + 6 * xStart;\n    var xCount = 6 * Math.max(0, xEnd - xStart);\n    var yStart = Math.min(bsearch.ge(ticks[1], (dataBox[1] - bounds[1]) / (bounds[3] - bounds[1]), compareTickNum), ticks[1].length);\n    var yEnd = Math.min(bsearch.gt(ticks[1], (dataBox[3] - bounds[1]) / (bounds[3] - bounds[1]), compareTickNum), ticks[1].length);\n    var yOffset = yTicksOffset + 6 * yStart;\n    var yCount = 6 * Math.max(0, yEnd - yStart);\n    SCR_OFFSET[0] = 2.0 * (viewBox[0] - tickMarkLength[1]) / screenWidth - 1.0;\n    SCR_OFFSET[1] = (viewBox[3] + viewBox[1]) / screenHeight - 1.0;\n    TICK_SCALE[0] = tickMarkLength[1] * pixelRatio / screenWidth;\n    TICK_SCALE[1] = tickMarkWidth[1] * pixelRatio / screenHeight;\n\n    if (yCount) {\n      uniforms.color = tickMarkColor[1];\n      uniforms.tickScale = TICK_SCALE;\n      uniforms.dataAxis = Y_AXIS;\n      uniforms.screenOffset = SCR_OFFSET;\n      gl.drawArrays(gl.TRIANGLES, yOffset, yCount);\n    }\n\n    SCR_OFFSET[0] = (viewBox[2] + viewBox[0]) / screenWidth - 1.0;\n    SCR_OFFSET[1] = 2.0 * (viewBox[1] - tickMarkLength[0]) / screenHeight - 1.0;\n    TICK_SCALE[0] = tickMarkWidth[0] * pixelRatio / screenWidth;\n    TICK_SCALE[1] = tickMarkLength[0] * pixelRatio / screenHeight;\n\n    if (xCount) {\n      uniforms.color = tickMarkColor[0];\n      uniforms.tickScale = TICK_SCALE;\n      uniforms.dataAxis = X_AXIS;\n      uniforms.screenOffset = SCR_OFFSET;\n      gl.drawArrays(gl.TRIANGLES, xOffset, xCount);\n    }\n\n    SCR_OFFSET[0] = 2.0 * (viewBox[2] + tickMarkLength[3]) / screenWidth - 1.0;\n    SCR_OFFSET[1] = (viewBox[3] + viewBox[1]) / screenHeight - 1.0;\n    TICK_SCALE[0] = tickMarkLength[3] * pixelRatio / screenWidth;\n    TICK_SCALE[1] = tickMarkWidth[3] * pixelRatio / screenHeight;\n\n    if (yCount) {\n      uniforms.color = tickMarkColor[3];\n      uniforms.tickScale = TICK_SCALE;\n      uniforms.dataAxis = Y_AXIS;\n      uniforms.screenOffset = SCR_OFFSET;\n      gl.drawArrays(gl.TRIANGLES, yOffset, yCount);\n    }\n\n    SCR_OFFSET[0] = (viewBox[2] + viewBox[0]) / screenWidth - 1.0;\n    SCR_OFFSET[1] = 2.0 * (viewBox[3] + tickMarkLength[2]) / screenHeight - 1.0;\n    TICK_SCALE[0] = tickMarkWidth[2] * pixelRatio / screenWidth;\n    TICK_SCALE[1] = tickMarkLength[2] * pixelRatio / screenHeight;\n\n    if (xCount) {\n      uniforms.color = tickMarkColor[2];\n      uniforms.tickScale = TICK_SCALE;\n      uniforms.dataAxis = X_AXIS;\n      uniforms.screenOffset = SCR_OFFSET;\n      gl.drawArrays(gl.TRIANGLES, xOffset, xCount);\n    }\n  };\n}();\n\nproto.update = function () {\n  var OFFSET_X = [1, 1, -1, -1, 1, -1];\n  var OFFSET_Y = [1, -1, 1, 1, -1, -1];\n  return function (options) {\n    var ticks = options.ticks;\n    var bounds = options.bounds;\n    var data = new Float32Array(6 * 3 * (ticks[0].length + ticks[1].length));\n    var zeroLineEnable = this.plot.zeroLineEnable;\n    var ptr = 0;\n    var gridTicks = [[], []];\n\n    for (var dim = 0; dim < 2; ++dim) {\n      var localTicks = gridTicks[dim];\n      var axisTicks = ticks[dim];\n      var lo = bounds[dim];\n      var hi = bounds[dim + 2];\n\n      for (var i = 0; i < axisTicks.length; ++i) {\n        var x = (axisTicks[i].x - lo) / (hi - lo);\n        localTicks.push(x);\n\n        for (var j = 0; j < 6; ++j) {\n          data[ptr++] = x;\n          data[ptr++] = OFFSET_X[j];\n          data[ptr++] = OFFSET_Y[j];\n        }\n      }\n    }\n\n    this.ticks = gridTicks;\n    this.vbo.update(data);\n  };\n}();\n\nproto.dispose = function () {\n  this.vbo.dispose();\n  this.shader.dispose();\n  this.tickShader.dispose();\n};\n\nfunction createGrid(plot) {\n  var gl = plot.gl;\n  var vbo = createBuffer(gl);\n  var shader = createShader(gl, shaders.gridVert, shaders.gridFrag);\n  var tickShader = createShader(gl, shaders.tickVert, shaders.gridFrag);\n  var grid = new Grid(plot, vbo, shader, tickShader);\n  return grid;\n}","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/gl-plot2d/lib/grid.js"],"names":["module","exports","createGrid","createBuffer","require","createShader","bsearch","shaders","Grid","plot","vbo","shader","tickShader","ticks","compareTickNum","a","b","proto","prototype","draw","DATA_SHIFT","DATA_SCALE","DATA_AXIS","gl","bounds","_tickBounds","dataBox","viewPixels","viewBox","lineWidth","gridLineWidth","gridColor","gridLineColor","gridEnable","gridLineEnable","pixelRatio","i","lo","hi","boundScale","dataCenter","dataWidth","bind","attributes","dataCoord","pointer","uniforms","dataShift","dataScale","offset","dataAxis","color","size","length","drawArrays","TRIANGLES","drawTickMarks","X_AXIS","Y_AXIS","SCR_OFFSET","TICK_SCALE","screenBox","screenWidth","screenHeight","viewWidth","viewHeight","tickMarkLength","tickMarkWidth","tickMarkColor","xTicksOffset","yTicksOffset","xStart","Math","min","ge","xEnd","gt","xOffset","xCount","max","yStart","yEnd","yOffset","yCount","tickScale","screenOffset","update","OFFSET_X","OFFSET_Y","options","data","Float32Array","zeroLineEnable","ptr","gridTicks","dim","localTicks","axisTicks","x","push","j","dispose","gridVert","gridFrag","tickVert","grid"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,UAAjB;;AAEA,IAAIC,YAAY,GAAIC,OAAO,CAAC,WAAD,CAA3B;;AACA,IAAIC,YAAY,GAAID,OAAO,CAAC,WAAD,CAA3B;;AACA,IAAIE,OAAO,GAASF,OAAO,CAAC,sBAAD,CAA3B;;AACA,IAAIG,OAAO,GAASH,OAAO,CAAC,WAAD,CAA3B;;AAEA,SAASI,IAAT,CAAcC,IAAd,EAAoBC,GAApB,EAAyBC,MAAzB,EAAiCC,UAAjC,EAA6C;AAC3C,OAAKH,IAAL,GAAcA,IAAd;AACA,OAAKC,GAAL,GAAcA,GAAd;AACA,OAAKC,MAAL,GAAcA,MAAd;AACA,OAAKC,UAAL,GAAkBA,UAAlB;AACA,OAAKC,KAAL,GAAc,CAAC,EAAD,EAAK,EAAL,CAAd;AACD;;AAED,SAASC,cAAT,CAAwBC,CAAxB,EAA2BC,CAA3B,EAA8B;AAC5B,SAAOD,CAAC,GAAGC,CAAX;AACD;;AAED,IAAIC,KAAK,GAAGT,IAAI,CAACU,SAAjB;;AAEAD,KAAK,CAACE,IAAN,GAAc,YAAW;AAEvB,MAAIC,UAAU,GAAG,CAAC,CAAD,EAAG,CAAH,CAAjB;AACA,MAAIC,UAAU,GAAG,CAAC,CAAD,EAAG,CAAH,CAAjB;AACA,MAAIC,SAAS,GAAI,CAAC,CAAD,EAAG,CAAH,CAAjB;AAEA,SAAO,YAAW;AAChB,QAAIb,IAAI,GAAS,KAAKA,IAAtB;AACA,QAAIC,GAAG,GAAU,KAAKA,GAAtB;AACA,QAAIC,MAAM,GAAO,KAAKA,MAAtB;AACA,QAAIE,KAAK,GAAQ,KAAKA,KAAtB;AACA,QAAIU,EAAE,GAAWd,IAAI,CAACc,EAAtB;AACA,QAAIC,MAAM,GAAOf,IAAI,CAACgB,WAAtB;AACA,QAAIC,OAAO,GAAMjB,IAAI,CAACiB,OAAtB;AACA,QAAIC,UAAU,GAAGlB,IAAI,CAACmB,OAAtB;AACA,QAAIC,SAAS,GAAIpB,IAAI,CAACqB,aAAtB;AACA,QAAIC,SAAS,GAAItB,IAAI,CAACuB,aAAtB;AACA,QAAIC,UAAU,GAAGxB,IAAI,CAACyB,cAAtB;AACA,QAAIC,UAAU,GAAG1B,IAAI,CAAC0B,UAAtB;;AAEA,SAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAC,CAAf,EAAkB,EAAEA,CAApB,EAAuB;AACrB,UAAIC,EAAE,GAAGb,MAAM,CAACY,CAAD,CAAf;AACA,UAAIE,EAAE,GAAGd,MAAM,CAACY,CAAC,GAAC,CAAH,CAAf;AACA,UAAIG,UAAU,GAAGD,EAAE,GAAGD,EAAtB;AACA,UAAIG,UAAU,GAAI,OAAOd,OAAO,CAACU,CAAC,GAAC,CAAH,CAAP,GAAeV,OAAO,CAACU,CAAD,CAA7B,CAAlB;AACA,UAAIK,SAAS,GAAKf,OAAO,CAACU,CAAC,GAAC,CAAH,CAAP,GAAeV,OAAO,CAACU,CAAD,CAAxC;AACAf,MAAAA,UAAU,CAACe,CAAD,CAAV,GAAgB,MAAMG,UAAN,GAAmBE,SAAnC;AACArB,MAAAA,UAAU,CAACgB,CAAD,CAAV,GAAgB,OAAOC,EAAE,GAAGG,UAAZ,IAA0BC,SAA1C;AACD;;AAED9B,IAAAA,MAAM,CAAC+B,IAAP;AACAhC,IAAAA,GAAG,CAACgC,IAAJ;AACA/B,IAAAA,MAAM,CAACgC,UAAP,CAAkBC,SAAlB,CAA4BC,OAA5B;AACAlC,IAAAA,MAAM,CAACmC,QAAP,CAAgBC,SAAhB,GAA4B3B,UAA5B;AACAT,IAAAA,MAAM,CAACmC,QAAP,CAAgBE,SAAhB,GAA4B3B,UAA5B;AAEA,QAAI4B,MAAM,GAAG,CAAb;;AACA,SAAI,IAAIb,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAC,CAAf,EAAkB,EAAEA,CAApB,EAAuB;AACrBd,MAAAA,SAAS,CAAC,CAAD,CAAT,GAAeA,SAAS,CAAC,CAAD,CAAT,GAAe,CAA9B;AACAA,MAAAA,SAAS,CAACc,CAAD,CAAT,GAAe,CAAf;AACAzB,MAAAA,MAAM,CAACmC,QAAP,CAAgBI,QAAhB,GAA4B5B,SAA5B;AACAX,MAAAA,MAAM,CAACmC,QAAP,CAAgBjB,SAAhB,GAA4BA,SAAS,CAACO,CAAD,CAAT,IAAgBT,UAAU,CAACS,CAAC,GAAC,CAAH,CAAV,GAAkBT,UAAU,CAACS,CAAD,CAA5C,IAAmDD,UAA/E;AACAxB,MAAAA,MAAM,CAACmC,QAAP,CAAgBK,KAAhB,GAA4BpB,SAAS,CAACK,CAAD,CAArC;AAEA,UAAIgB,IAAI,GAAGvC,KAAK,CAACuB,CAAD,CAAL,CAASiB,MAAT,GAAkB,CAA7B;;AACA,UAAGpB,UAAU,CAACG,CAAD,CAAV,IAAiBgB,IAApB,EAA0B;AACxB7B,QAAAA,EAAE,CAAC+B,UAAH,CAAc/B,EAAE,CAACgC,SAAjB,EAA4BN,MAA5B,EAAoCG,IAApC;AACD;;AACDH,MAAAA,MAAM,IAAIG,IAAV;AACD;AACF,GA5CD;AA6CD,CAnDY,EAAb;;AAqDAnC,KAAK,CAACuC,aAAN,GAAuB,YAAW;AAChC,MAAIpC,UAAU,GAAG,CAAC,CAAD,EAAG,CAAH,CAAjB;AACA,MAAIC,UAAU,GAAG,CAAC,CAAD,EAAG,CAAH,CAAjB;AACA,MAAIoC,MAAM,GAAO,CAAC,CAAD,EAAG,CAAH,CAAjB;AACA,MAAIC,MAAM,GAAO,CAAC,CAAD,EAAG,CAAH,CAAjB;AACA,MAAIC,UAAU,GAAG,CAAC,CAAD,EAAG,CAAH,CAAjB;AACA,MAAIC,UAAU,GAAG,CAAC,CAAD,EAAG,CAAH,CAAjB;AAEA,SAAO,YAAW;AAChB,QAAInD,IAAI,GAAS,KAAKA,IAAtB;AACA,QAAIC,GAAG,GAAU,KAAKA,GAAtB;AACA,QAAIC,MAAM,GAAO,KAAKC,UAAtB;AACA,QAAIC,KAAK,GAAQ,KAAKA,KAAtB;AACA,QAAIU,EAAE,GAAWd,IAAI,CAACc,EAAtB;AACA,QAAIC,MAAM,GAAOf,IAAI,CAACgB,WAAtB;AACA,QAAIC,OAAO,GAAMjB,IAAI,CAACiB,OAAtB;AACA,QAAIE,OAAO,GAAMnB,IAAI,CAACmB,OAAtB;AACA,QAAIO,UAAU,GAAG1B,IAAI,CAAC0B,UAAtB;AACA,QAAI0B,SAAS,GAAIpD,IAAI,CAACoD,SAAtB;AAEA,QAAIC,WAAW,GAAID,SAAS,CAAC,CAAD,CAAT,GAAeA,SAAS,CAAC,CAAD,CAA3C;AACA,QAAIE,YAAY,GAAGF,SAAS,CAAC,CAAD,CAAT,GAAeA,SAAS,CAAC,CAAD,CAA3C;AACA,QAAIG,SAAS,GAAMpC,OAAO,CAAC,CAAD,CAAP,GAAeA,OAAO,CAAC,CAAD,CAAzC;AACA,QAAIqC,UAAU,GAAKrC,OAAO,CAAC,CAAD,CAAP,GAAeA,OAAO,CAAC,CAAD,CAAzC;;AAEA,SAAI,IAAIQ,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAC,CAAf,EAAkB,EAAEA,CAApB,EAAuB;AACrB,UAAIC,EAAE,GAAGb,MAAM,CAACY,CAAD,CAAf;AACA,UAAIE,EAAE,GAAGd,MAAM,CAACY,CAAC,GAAC,CAAH,CAAf;AACA,UAAIG,UAAU,GAAGD,EAAE,GAAGD,EAAtB;AACA,UAAIG,UAAU,GAAI,OAAOd,OAAO,CAACU,CAAC,GAAC,CAAH,CAAP,GAAeV,OAAO,CAACU,CAAD,CAA7B,CAAlB;AACA,UAAIK,SAAS,GAAMf,OAAO,CAACU,CAAC,GAAC,CAAH,CAAP,GAAeV,OAAO,CAACU,CAAD,CAAzC;AACAf,MAAAA,UAAU,CAACe,CAAD,CAAV,GAAgB,MAAMG,UAAN,GAAmBE,SAAnC;AACArB,MAAAA,UAAU,CAACgB,CAAD,CAAV,GAAgB,OAAOC,EAAE,GAAGG,UAAZ,IAA0BC,SAA1C;AACD;;AAEDpB,IAAAA,UAAU,CAAC,CAAD,CAAV,IAAiB2C,SAAS,GAAGF,WAA7B;AACA1C,IAAAA,UAAU,CAAC,CAAD,CAAV,IAAiB4C,SAAS,GAAGF,WAA7B;AAEAzC,IAAAA,UAAU,CAAC,CAAD,CAAV,IAAiB4C,UAAU,GAAGF,YAA9B;AACA3C,IAAAA,UAAU,CAAC,CAAD,CAAV,IAAiB6C,UAAU,GAAGF,YAA9B;AAEApD,IAAAA,MAAM,CAAC+B,IAAP;AACAhC,IAAAA,GAAG,CAACgC,IAAJ;AAEA/B,IAAAA,MAAM,CAACgC,UAAP,CAAkBC,SAAlB,CAA4BC,OAA5B;AAEA,QAAIC,QAAQ,GAAGnC,MAAM,CAACmC,QAAtB;AACAA,IAAAA,QAAQ,CAACC,SAAT,GAAqB3B,UAArB;AACA0B,IAAAA,QAAQ,CAACE,SAAT,GAAqB3B,UAArB;AAEA,QAAI6C,cAAc,GAAGzD,IAAI,CAACyD,cAA1B;AACA,QAAIC,aAAa,GAAI1D,IAAI,CAAC0D,aAA1B;AACA,QAAIC,aAAa,GAAI3D,IAAI,CAAC2D,aAA1B;AAEA,QAAIC,YAAY,GAAG,CAAnB;AACA,QAAIC,YAAY,GAAGzD,KAAK,CAAC,CAAD,CAAL,CAASwC,MAAT,GAAkB,CAArC;AAEA,QAAIkB,MAAM,GAAGC,IAAI,CAACC,GAAL,CAASnE,OAAO,CAACoE,EAAR,CAAW7D,KAAK,CAAC,CAAD,CAAhB,EAAqB,CAACa,OAAO,CAAC,CAAD,CAAP,GAAaF,MAAM,CAAC,CAAD,CAApB,KAA4BA,MAAM,CAAC,CAAD,CAAN,GAAYA,MAAM,CAAC,CAAD,CAA9C,CAArB,EAAyEV,cAAzE,CAAT,EAAmGD,KAAK,CAAC,CAAD,CAAL,CAASwC,MAA5G,CAAb;AACA,QAAIsB,IAAI,GAAKH,IAAI,CAACC,GAAL,CAASnE,OAAO,CAACsE,EAAR,CAAW/D,KAAK,CAAC,CAAD,CAAhB,EAAqB,CAACa,OAAO,CAAC,CAAD,CAAP,GAAaF,MAAM,CAAC,CAAD,CAApB,KAA4BA,MAAM,CAAC,CAAD,CAAN,GAAYA,MAAM,CAAC,CAAD,CAA9C,CAArB,EAAyEV,cAAzE,CAAT,EAAmGD,KAAK,CAAC,CAAD,CAAL,CAASwC,MAA5G,CAAb;AACA,QAAIwB,OAAO,GAAGR,YAAY,GAAG,IAAIE,MAAjC;AACA,QAAIO,MAAM,GAAI,IAAIN,IAAI,CAACO,GAAL,CAAS,CAAT,EAAYJ,IAAI,GAAGJ,MAAnB,CAAlB;AAEA,QAAIS,MAAM,GAAGR,IAAI,CAACC,GAAL,CAASnE,OAAO,CAACoE,EAAR,CAAW7D,KAAK,CAAC,CAAD,CAAhB,EAAqB,CAACa,OAAO,CAAC,CAAD,CAAP,GAAaF,MAAM,CAAC,CAAD,CAApB,KAA4BA,MAAM,CAAC,CAAD,CAAN,GAAYA,MAAM,CAAC,CAAD,CAA9C,CAArB,EAAyEV,cAAzE,CAAT,EAAmGD,KAAK,CAAC,CAAD,CAAL,CAASwC,MAA5G,CAAb;AACA,QAAI4B,IAAI,GAAKT,IAAI,CAACC,GAAL,CAASnE,OAAO,CAACsE,EAAR,CAAW/D,KAAK,CAAC,CAAD,CAAhB,EAAqB,CAACa,OAAO,CAAC,CAAD,CAAP,GAAaF,MAAM,CAAC,CAAD,CAApB,KAA4BA,MAAM,CAAC,CAAD,CAAN,GAAYA,MAAM,CAAC,CAAD,CAA9C,CAArB,EAAyEV,cAAzE,CAAT,EAAmGD,KAAK,CAAC,CAAD,CAAL,CAASwC,MAA5G,CAAb;AACA,QAAI6B,OAAO,GAAGZ,YAAY,GAAG,IAAIU,MAAjC;AACA,QAAIG,MAAM,GAAI,IAAIX,IAAI,CAACO,GAAL,CAAS,CAAT,EAAYE,IAAI,GAAGD,MAAnB,CAAlB;AAEArB,IAAAA,UAAU,CAAC,CAAD,CAAV,GAAwB,OAAO/B,OAAO,CAAC,CAAD,CAAP,GAAasC,cAAc,CAAC,CAAD,CAAlC,IAAyCJ,WAAzC,GAAuD,GAA/E;AACAH,IAAAA,UAAU,CAAC,CAAD,CAAV,GAAwB,CAAC/B,OAAO,CAAC,CAAD,CAAP,GAAaA,OAAO,CAAC,CAAD,CAArB,IAA4BmC,YAA5B,GAA2C,GAAnE;AACAH,IAAAA,UAAU,CAAC,CAAD,CAAV,GAAwBM,cAAc,CAAC,CAAD,CAAd,GAAoB/B,UAApB,GAAiC2B,WAAzD;AACAF,IAAAA,UAAU,CAAC,CAAD,CAAV,GAAwBO,aAAa,CAAC,CAAD,CAAb,GAAoBhC,UAApB,GAAiC4B,YAAzD;;AAEA,QAAGoB,MAAH,EAAW;AACTrC,MAAAA,QAAQ,CAACK,KAAT,GAAwBiB,aAAa,CAAC,CAAD,CAArC;AACAtB,MAAAA,QAAQ,CAACsC,SAAT,GAAwBxB,UAAxB;AACAd,MAAAA,QAAQ,CAACI,QAAT,GAAwBQ,MAAxB;AACAZ,MAAAA,QAAQ,CAACuC,YAAT,GAAwB1B,UAAxB;AACApC,MAAAA,EAAE,CAAC+B,UAAH,CAAc/B,EAAE,CAACgC,SAAjB,EAA4B2B,OAA5B,EAAqCC,MAArC;AACD;;AAEDxB,IAAAA,UAAU,CAAC,CAAD,CAAV,GAAwB,CAAC/B,OAAO,CAAC,CAAD,CAAP,GAAaA,OAAO,CAAC,CAAD,CAArB,IAA4BkC,WAA5B,GAA0C,GAAlE;AACAH,IAAAA,UAAU,CAAC,CAAD,CAAV,GAAwB,OAAO/B,OAAO,CAAC,CAAD,CAAP,GAAasC,cAAc,CAAC,CAAD,CAAlC,IAAyCH,YAAzC,GAAwD,GAAhF;AACAH,IAAAA,UAAU,CAAC,CAAD,CAAV,GAAwBO,aAAa,CAAC,CAAD,CAAb,GAAoBhC,UAApB,GAAiC2B,WAAzD;AACAF,IAAAA,UAAU,CAAC,CAAD,CAAV,GAAwBM,cAAc,CAAC,CAAD,CAAd,GAAoB/B,UAApB,GAAiC4B,YAAzD;;AAEA,QAAGe,MAAH,EAAW;AACThC,MAAAA,QAAQ,CAACK,KAAT,GAAwBiB,aAAa,CAAC,CAAD,CAArC;AACAtB,MAAAA,QAAQ,CAACsC,SAAT,GAAwBxB,UAAxB;AACAd,MAAAA,QAAQ,CAACI,QAAT,GAAwBO,MAAxB;AACAX,MAAAA,QAAQ,CAACuC,YAAT,GAAwB1B,UAAxB;AACApC,MAAAA,EAAE,CAAC+B,UAAH,CAAc/B,EAAE,CAACgC,SAAjB,EAA4BsB,OAA5B,EAAqCC,MAArC;AACD;;AAEDnB,IAAAA,UAAU,CAAC,CAAD,CAAV,GAAwB,OAAO/B,OAAO,CAAC,CAAD,CAAP,GAAasC,cAAc,CAAC,CAAD,CAAlC,IAAyCJ,WAAzC,GAAuD,GAA/E;AACAH,IAAAA,UAAU,CAAC,CAAD,CAAV,GAAwB,CAAC/B,OAAO,CAAC,CAAD,CAAP,GAAaA,OAAO,CAAC,CAAD,CAArB,IAA4BmC,YAA5B,GAA2C,GAAnE;AACAH,IAAAA,UAAU,CAAC,CAAD,CAAV,GAAwBM,cAAc,CAAC,CAAD,CAAd,GAAoB/B,UAApB,GAAiC2B,WAAzD;AACAF,IAAAA,UAAU,CAAC,CAAD,CAAV,GAAwBO,aAAa,CAAC,CAAD,CAAb,GAAoBhC,UAApB,GAAiC4B,YAAzD;;AAEA,QAAGoB,MAAH,EAAW;AACTrC,MAAAA,QAAQ,CAACK,KAAT,GAAwBiB,aAAa,CAAC,CAAD,CAArC;AACAtB,MAAAA,QAAQ,CAACsC,SAAT,GAAwBxB,UAAxB;AACAd,MAAAA,QAAQ,CAACI,QAAT,GAAwBQ,MAAxB;AACAZ,MAAAA,QAAQ,CAACuC,YAAT,GAAwB1B,UAAxB;AACApC,MAAAA,EAAE,CAAC+B,UAAH,CAAc/B,EAAE,CAACgC,SAAjB,EAA4B2B,OAA5B,EAAqCC,MAArC;AACD;;AAEDxB,IAAAA,UAAU,CAAC,CAAD,CAAV,GAAwB,CAAC/B,OAAO,CAAC,CAAD,CAAP,GAAaA,OAAO,CAAC,CAAD,CAArB,IAA4BkC,WAA5B,GAA0C,GAAlE;AACAH,IAAAA,UAAU,CAAC,CAAD,CAAV,GAAwB,OAAO/B,OAAO,CAAC,CAAD,CAAP,GAAasC,cAAc,CAAC,CAAD,CAAlC,IAAyCH,YAAzC,GAAwD,GAAhF;AACAH,IAAAA,UAAU,CAAC,CAAD,CAAV,GAAwBO,aAAa,CAAC,CAAD,CAAb,GAAoBhC,UAApB,GAAiC2B,WAAzD;AACAF,IAAAA,UAAU,CAAC,CAAD,CAAV,GAAwBM,cAAc,CAAC,CAAD,CAAd,GAAoB/B,UAApB,GAAiC4B,YAAzD;;AAEA,QAAGe,MAAH,EAAW;AACThC,MAAAA,QAAQ,CAACK,KAAT,GAAwBiB,aAAa,CAAC,CAAD,CAArC;AACAtB,MAAAA,QAAQ,CAACsC,SAAT,GAAwBxB,UAAxB;AACAd,MAAAA,QAAQ,CAACI,QAAT,GAAwBO,MAAxB;AACAX,MAAAA,QAAQ,CAACuC,YAAT,GAAwB1B,UAAxB;AACApC,MAAAA,EAAE,CAAC+B,UAAH,CAAc/B,EAAE,CAACgC,SAAjB,EAA4BsB,OAA5B,EAAqCC,MAArC;AACD;AACF,GA9GD;AA+GD,CAvHqB,EAAtB;;AAyHA7D,KAAK,CAACqE,MAAN,GAAgB,YAAW;AACzB,MAAIC,QAAQ,GAAG,CAAC,CAAD,EAAK,CAAL,EAAQ,CAAC,CAAT,EAAY,CAAC,CAAb,EAAiB,CAAjB,EAAoB,CAAC,CAArB,CAAf;AACA,MAAIC,QAAQ,GAAG,CAAC,CAAD,EAAI,CAAC,CAAL,EAAS,CAAT,EAAa,CAAb,EAAgB,CAAC,CAAjB,EAAoB,CAAC,CAArB,CAAf;AAEA,SAAO,UAASC,OAAT,EAAkB;AACvB,QAAI5E,KAAK,GAAI4E,OAAO,CAAC5E,KAArB;AACA,QAAIW,MAAM,GAAGiE,OAAO,CAACjE,MAArB;AACA,QAAIkE,IAAI,GAAK,IAAIC,YAAJ,CAAiB,IAAI,CAAJ,IAAS9E,KAAK,CAAC,CAAD,CAAL,CAASwC,MAAT,GAAkBxC,KAAK,CAAC,CAAD,CAAL,CAASwC,MAApC,CAAjB,CAAb;AAEA,QAAIuC,cAAc,GAAG,KAAKnF,IAAL,CAAUmF,cAA/B;AAEA,QAAIC,GAAG,GAAM,CAAb;AACA,QAAIC,SAAS,GAAG,CAAC,EAAD,EAAK,EAAL,CAAhB;;AACA,SAAI,IAAIC,GAAG,GAAC,CAAZ,EAAeA,GAAG,GAAC,CAAnB,EAAsB,EAAEA,GAAxB,EAA6B;AAC3B,UAAIC,UAAU,GAAGF,SAAS,CAACC,GAAD,CAA1B;AACA,UAAIE,SAAS,GAAGpF,KAAK,CAACkF,GAAD,CAArB;AACA,UAAI1D,EAAE,GAAGb,MAAM,CAACuE,GAAD,CAAf;AACA,UAAIzD,EAAE,GAAGd,MAAM,CAACuE,GAAG,GAAC,CAAL,CAAf;;AACA,WAAI,IAAI3D,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAC6D,SAAS,CAAC5C,MAAzB,EAAiC,EAAEjB,CAAnC,EAAsC;AACpC,YAAI8D,CAAC,GAAG,CAACD,SAAS,CAAC7D,CAAD,CAAT,CAAa8D,CAAb,GAAiB7D,EAAlB,KAAyBC,EAAE,GAAGD,EAA9B,CAAR;AACA2D,QAAAA,UAAU,CAACG,IAAX,CAAgBD,CAAhB;;AACA,aAAI,IAAIE,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAC,CAAf,EAAkB,EAAEA,CAApB,EAAuB;AACrBV,UAAAA,IAAI,CAACG,GAAG,EAAJ,CAAJ,GAAcK,CAAd;AACAR,UAAAA,IAAI,CAACG,GAAG,EAAJ,CAAJ,GAAcN,QAAQ,CAACa,CAAD,CAAtB;AACAV,UAAAA,IAAI,CAACG,GAAG,EAAJ,CAAJ,GAAcL,QAAQ,CAACY,CAAD,CAAtB;AACD;AACF;AACF;;AAED,SAAKvF,KAAL,GAAaiF,SAAb;AACA,SAAKpF,GAAL,CAAS4E,MAAT,CAAgBI,IAAhB;AACD,GA3BD;AA4BD,CAhCc,EAAf;;AAkCAzE,KAAK,CAACoF,OAAN,GAAgB,YAAW;AACzB,OAAK3F,GAAL,CAAS2F,OAAT;AACA,OAAK1F,MAAL,CAAY0F,OAAZ;AACA,OAAKzF,UAAL,CAAgByF,OAAhB;AACD,CAJD;;AAMA,SAASnG,UAAT,CAAoBO,IAApB,EAA0B;AACxB,MAAIc,EAAE,GAAOd,IAAI,CAACc,EAAlB;AACA,MAAIb,GAAG,GAAMP,YAAY,CAACoB,EAAD,CAAzB;AACA,MAAIZ,MAAM,GAAGN,YAAY,CAACkB,EAAD,EAAKhB,OAAO,CAAC+F,QAAb,EAAuB/F,OAAO,CAACgG,QAA/B,CAAzB;AACA,MAAI3F,UAAU,GAAGP,YAAY,CAACkB,EAAD,EAAKhB,OAAO,CAACiG,QAAb,EAAuBjG,OAAO,CAACgG,QAA/B,CAA7B;AACA,MAAIE,IAAI,GAAK,IAAIjG,IAAJ,CAASC,IAAT,EAAeC,GAAf,EAAoBC,MAApB,EAA4BC,UAA5B,CAAb;AACA,SAAO6F,IAAP;AACD","sourcesContent":["'use strict'\n\nmodule.exports = createGrid\n\nvar createBuffer  = require('gl-buffer')\nvar createShader  = require('gl-shader')\nvar bsearch       = require('binary-search-bounds')\nvar shaders       = require('./shaders')\n\nfunction Grid(plot, vbo, shader, tickShader) {\n  this.plot   = plot\n  this.vbo    = vbo\n  this.shader = shader\n  this.tickShader = tickShader\n  this.ticks  = [[], []]\n}\n\nfunction compareTickNum(a, b) {\n  return a - b\n}\n\nvar proto = Grid.prototype\n\nproto.draw = (function() {\n\n  var DATA_SHIFT = [0,0]\n  var DATA_SCALE = [0,0]\n  var DATA_AXIS  = [0,0]\n\n  return function() {\n    var plot       = this.plot\n    var vbo        = this.vbo\n    var shader     = this.shader\n    var ticks      = this.ticks\n    var gl         = plot.gl\n    var bounds     = plot._tickBounds\n    var dataBox    = plot.dataBox\n    var viewPixels = plot.viewBox\n    var lineWidth  = plot.gridLineWidth\n    var gridColor  = plot.gridLineColor\n    var gridEnable = plot.gridLineEnable\n    var pixelRatio = plot.pixelRatio\n\n    for(var i=0; i<2; ++i) {\n      var lo = bounds[i]\n      var hi = bounds[i+2]\n      var boundScale = hi - lo\n      var dataCenter  = 0.5 * (dataBox[i+2] + dataBox[i])\n      var dataWidth   = dataBox[i+2] - dataBox[i]\n      DATA_SCALE[i] = 2.0 * boundScale / dataWidth\n      DATA_SHIFT[i] = 2.0 * (lo - dataCenter) / dataWidth\n    }\n\n    shader.bind()\n    vbo.bind()\n    shader.attributes.dataCoord.pointer()\n    shader.uniforms.dataShift = DATA_SHIFT\n    shader.uniforms.dataScale = DATA_SCALE\n\n    var offset = 0\n    for(var i=0; i<2; ++i) {\n      DATA_AXIS[0] = DATA_AXIS[1] = 0\n      DATA_AXIS[i] = 1\n      shader.uniforms.dataAxis  = DATA_AXIS\n      shader.uniforms.lineWidth = lineWidth[i] / (viewPixels[i+2] - viewPixels[i]) * pixelRatio\n      shader.uniforms.color     = gridColor[i]\n\n      var size = ticks[i].length * 6\n      if(gridEnable[i] && size) {\n        gl.drawArrays(gl.TRIANGLES, offset, size)\n      }\n      offset += size\n    }\n  }\n})()\n\nproto.drawTickMarks = (function() {\n  var DATA_SHIFT = [0,0]\n  var DATA_SCALE = [0,0]\n  var X_AXIS     = [1,0]\n  var Y_AXIS     = [0,1]\n  var SCR_OFFSET = [0,0]\n  var TICK_SCALE = [0,0]\n\n  return function() {\n    var plot       = this.plot\n    var vbo        = this.vbo\n    var shader     = this.tickShader\n    var ticks      = this.ticks\n    var gl         = plot.gl\n    var bounds     = plot._tickBounds\n    var dataBox    = plot.dataBox\n    var viewBox    = plot.viewBox\n    var pixelRatio = plot.pixelRatio\n    var screenBox  = plot.screenBox\n\n    var screenWidth  = screenBox[2] - screenBox[0]\n    var screenHeight = screenBox[3] - screenBox[1]\n    var viewWidth    = viewBox[2]   - viewBox[0]\n    var viewHeight   = viewBox[3]   - viewBox[1]\n\n    for(var i=0; i<2; ++i) {\n      var lo = bounds[i]\n      var hi = bounds[i+2]\n      var boundScale = hi - lo\n      var dataCenter  = 0.5 * (dataBox[i+2] + dataBox[i])\n      var dataWidth   = (dataBox[i+2] - dataBox[i])\n      DATA_SCALE[i] = 2.0 * boundScale / dataWidth\n      DATA_SHIFT[i] = 2.0 * (lo - dataCenter) / dataWidth\n    }\n\n    DATA_SCALE[0] *= viewWidth / screenWidth\n    DATA_SHIFT[0] *= viewWidth / screenWidth\n\n    DATA_SCALE[1] *= viewHeight / screenHeight\n    DATA_SHIFT[1] *= viewHeight / screenHeight\n\n    shader.bind()\n    vbo.bind()\n\n    shader.attributes.dataCoord.pointer()\n\n    var uniforms = shader.uniforms\n    uniforms.dataShift = DATA_SHIFT\n    uniforms.dataScale = DATA_SCALE\n\n    var tickMarkLength = plot.tickMarkLength\n    var tickMarkWidth  = plot.tickMarkWidth\n    var tickMarkColor  = plot.tickMarkColor\n\n    var xTicksOffset = 0\n    var yTicksOffset = ticks[0].length * 6\n\n    var xStart = Math.min(bsearch.ge(ticks[0], (dataBox[0] - bounds[0]) / (bounds[2] - bounds[0]), compareTickNum), ticks[0].length)\n    var xEnd   = Math.min(bsearch.gt(ticks[0], (dataBox[2] - bounds[0]) / (bounds[2] - bounds[0]), compareTickNum), ticks[0].length)\n    var xOffset = xTicksOffset + 6 * xStart\n    var xCount  = 6 * Math.max(0, xEnd - xStart)\n\n    var yStart = Math.min(bsearch.ge(ticks[1], (dataBox[1] - bounds[1]) / (bounds[3] - bounds[1]), compareTickNum), ticks[1].length)\n    var yEnd   = Math.min(bsearch.gt(ticks[1], (dataBox[3] - bounds[1]) / (bounds[3] - bounds[1]), compareTickNum), ticks[1].length)\n    var yOffset = yTicksOffset + 6 * yStart\n    var yCount  = 6 * Math.max(0, yEnd - yStart)\n\n    SCR_OFFSET[0]         = 2.0 * (viewBox[0] - tickMarkLength[1]) / screenWidth - 1.0\n    SCR_OFFSET[1]         = (viewBox[3] + viewBox[1]) / screenHeight - 1.0\n    TICK_SCALE[0]         = tickMarkLength[1] * pixelRatio / screenWidth\n    TICK_SCALE[1]         = tickMarkWidth[1]  * pixelRatio / screenHeight\n\n    if(yCount) {\n      uniforms.color        = tickMarkColor[1]\n      uniforms.tickScale    = TICK_SCALE\n      uniforms.dataAxis     = Y_AXIS\n      uniforms.screenOffset = SCR_OFFSET\n      gl.drawArrays(gl.TRIANGLES, yOffset, yCount)\n    }\n\n    SCR_OFFSET[0]         = (viewBox[2] + viewBox[0]) / screenWidth - 1.0\n    SCR_OFFSET[1]         = 2.0 * (viewBox[1] - tickMarkLength[0]) / screenHeight - 1.0\n    TICK_SCALE[0]         = tickMarkWidth[0]  * pixelRatio / screenWidth\n    TICK_SCALE[1]         = tickMarkLength[0] * pixelRatio / screenHeight\n\n    if(xCount) {\n      uniforms.color        = tickMarkColor[0]\n      uniforms.tickScale    = TICK_SCALE\n      uniforms.dataAxis     = X_AXIS\n      uniforms.screenOffset = SCR_OFFSET\n      gl.drawArrays(gl.TRIANGLES, xOffset, xCount)\n    }\n\n    SCR_OFFSET[0]         = 2.0 * (viewBox[2] + tickMarkLength[3]) / screenWidth - 1.0\n    SCR_OFFSET[1]         = (viewBox[3] + viewBox[1]) / screenHeight - 1.0\n    TICK_SCALE[0]         = tickMarkLength[3] * pixelRatio / screenWidth\n    TICK_SCALE[1]         = tickMarkWidth[3]  * pixelRatio / screenHeight\n\n    if(yCount) {\n      uniforms.color        = tickMarkColor[3]\n      uniforms.tickScale    = TICK_SCALE\n      uniforms.dataAxis     = Y_AXIS\n      uniforms.screenOffset = SCR_OFFSET\n      gl.drawArrays(gl.TRIANGLES, yOffset, yCount)\n    }\n\n    SCR_OFFSET[0]         = (viewBox[2] + viewBox[0]) / screenWidth - 1.0\n    SCR_OFFSET[1]         = 2.0 * (viewBox[3] + tickMarkLength[2]) / screenHeight - 1.0\n    TICK_SCALE[0]         = tickMarkWidth[2]  * pixelRatio / screenWidth\n    TICK_SCALE[1]         = tickMarkLength[2] * pixelRatio / screenHeight\n\n    if(xCount) {\n      uniforms.color        = tickMarkColor[2]\n      uniforms.tickScale    = TICK_SCALE\n      uniforms.dataAxis     = X_AXIS\n      uniforms.screenOffset = SCR_OFFSET\n      gl.drawArrays(gl.TRIANGLES, xOffset, xCount)\n    }\n  }\n})()\n\nproto.update = (function() {\n  var OFFSET_X = [1,  1, -1, -1,  1, -1]\n  var OFFSET_Y = [1, -1,  1,  1, -1, -1]\n\n  return function(options) {\n    var ticks  = options.ticks\n    var bounds = options.bounds\n    var data   = new Float32Array(6 * 3 * (ticks[0].length + ticks[1].length))\n\n    var zeroLineEnable = this.plot.zeroLineEnable\n\n    var ptr    = 0\n    var gridTicks = [[], []]\n    for(var dim=0; dim<2; ++dim) {\n      var localTicks = gridTicks[dim]\n      var axisTicks = ticks[dim]\n      var lo = bounds[dim]\n      var hi = bounds[dim+2]\n      for(var i=0; i<axisTicks.length; ++i) {\n        var x = (axisTicks[i].x - lo) / (hi - lo)\n        localTicks.push(x)\n        for(var j=0; j<6; ++j) {\n          data[ptr++] = x\n          data[ptr++] = OFFSET_X[j]\n          data[ptr++] = OFFSET_Y[j]\n        }\n      }\n    }\n\n    this.ticks = gridTicks\n    this.vbo.update(data)\n  }\n})()\n\nproto.dispose = function() {\n  this.vbo.dispose()\n  this.shader.dispose()\n  this.tickShader.dispose()\n}\n\nfunction createGrid(plot) {\n  var gl     = plot.gl\n  var vbo    = createBuffer(gl)\n  var shader = createShader(gl, shaders.gridVert, shaders.gridFrag)\n  var tickShader = createShader(gl, shaders.tickVert, shaders.gridFrag)\n  var grid   = new Grid(plot, vbo, shader, tickShader)\n  return grid\n}\n"]},"metadata":{},"sourceType":"script"}