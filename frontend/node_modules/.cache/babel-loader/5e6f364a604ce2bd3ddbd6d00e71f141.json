{"ast":null,"code":"\"use strict\";\n\nmodule.exports = surfaceNets;\n\nvar generateContourExtractor = require(\"ndarray-extract-contour\");\n\nvar zeroCrossings = require(\"zero-crossings\");\n\nvar allFns = {\n  \"2d\": function (genContour, order, dtype) {\n    var contour = genContour({\n      order: order,\n      scalarArguments: 3,\n      getters: dtype === \"generic\" ? [0] : undefined,\n      phase: function phaseFunc(p, a, b, c) {\n        return p > c | 0;\n      },\n      vertex: function vertexFunc(d0, d1, v0, v1, v2, v3, p0, p1, p2, p3, a, b, c) {\n        var m = (p0 << 0) + (p1 << 1) + (p2 << 2) + (p3 << 3) | 0;\n\n        if (m === 0 || m === 15) {\n          return;\n        }\n\n        switch (m) {\n          case 0:\n            a.push([d0 - 0.5, d1 - 0.5]);\n            break;\n\n          case 1:\n            a.push([d0 - 0.25 - 0.25 * (v1 + v0 - 2 * c) / (v0 - v1), d1 - 0.25 - 0.25 * (v2 + v0 - 2 * c) / (v0 - v2)]);\n            break;\n\n          case 2:\n            a.push([d0 - 0.75 - 0.25 * (-v1 - v0 + 2 * c) / (v1 - v0), d1 - 0.25 - 0.25 * (v3 + v1 - 2 * c) / (v1 - v3)]);\n            break;\n\n          case 3:\n            a.push([d0 - 0.5, d1 - 0.5 - 0.5 * (v2 + v0 + v3 + v1 - 4 * c) / (v0 - v2 + v1 - v3)]);\n            break;\n\n          case 4:\n            a.push([d0 - 0.25 - 0.25 * (v3 + v2 - 2 * c) / (v2 - v3), d1 - 0.75 - 0.25 * (-v2 - v0 + 2 * c) / (v2 - v0)]);\n            break;\n\n          case 5:\n            a.push([d0 - 0.5 - 0.5 * (v1 + v0 + v3 + v2 - 4 * c) / (v0 - v1 + v2 - v3), d1 - 0.5]);\n            break;\n\n          case 6:\n            a.push([d0 - 0.5 - 0.25 * (-v1 - v0 + v3 + v2) / (v1 - v0 + v2 - v3), d1 - 0.5 - 0.25 * (-v2 - v0 + v3 + v1) / (v2 - v0 + v1 - v3)]);\n            break;\n\n          case 7:\n            a.push([d0 - 0.75 - 0.25 * (v3 + v2 - 2 * c) / (v2 - v3), d1 - 0.75 - 0.25 * (v3 + v1 - 2 * c) / (v1 - v3)]);\n            break;\n\n          case 8:\n            a.push([d0 - 0.75 - 0.25 * (-v3 - v2 + 2 * c) / (v3 - v2), d1 - 0.75 - 0.25 * (-v3 - v1 + 2 * c) / (v3 - v1)]);\n            break;\n\n          case 9:\n            a.push([d0 - 0.5 - 0.25 * (v1 + v0 + -v3 - v2) / (v0 - v1 + v3 - v2), d1 - 0.5 - 0.25 * (v2 + v0 + -v3 - v1) / (v0 - v2 + v3 - v1)]);\n            break;\n\n          case 10:\n            a.push([d0 - 0.5 - 0.5 * (-v1 - v0 + -v3 - v2 + 4 * c) / (v1 - v0 + v3 - v2), d1 - 0.5]);\n            break;\n\n          case 11:\n            a.push([d0 - 0.25 - 0.25 * (-v3 - v2 + 2 * c) / (v3 - v2), d1 - 0.75 - 0.25 * (v2 + v0 - 2 * c) / (v0 - v2)]);\n            break;\n\n          case 12:\n            a.push([d0 - 0.5, d1 - 0.5 - 0.5 * (-v2 - v0 + -v3 - v1 + 4 * c) / (v2 - v0 + v3 - v1)]);\n            break;\n\n          case 13:\n            a.push([d0 - 0.75 - 0.25 * (v1 + v0 - 2 * c) / (v0 - v1), d1 - 0.25 - 0.25 * (-v3 - v1 + 2 * c) / (v3 - v1)]);\n            break;\n\n          case 14:\n            a.push([d0 - 0.25 - 0.25 * (-v1 - v0 + 2 * c) / (v1 - v0), d1 - 0.25 - 0.25 * (-v2 - v0 + 2 * c) / (v2 - v0)]);\n            break;\n\n          case 15:\n            a.push([d0 - 0.5, d1 - 0.5]);\n            break;\n        }\n      },\n      cell: function cellFunc(v0, v1, c0, c1, p0, p1, a, b, c) {\n        if (p0) {\n          b.push([v0, v1]);\n        } else {\n          b.push([v1, v0]);\n        }\n      }\n    });\n    return function (array, level) {\n      var verts = [],\n          cells = [];\n      contour(array, verts, cells, level);\n      return {\n        positions: verts,\n        cells: cells\n      };\n    };\n  }\n};\n\nfunction buildSurfaceNets(order, dtype) {\n  var inKey = order.length + 'd';\n  var fn = allFns[inKey];\n  if (fn) return fn(generateContourExtractor, order, dtype);\n} //1D case: Need to handle specially\n\n\nfunction mesh1D(array, level) {\n  var zc = zeroCrossings(array, level);\n  var n = zc.length;\n  var npos = new Array(n);\n  var ncel = new Array(n);\n\n  for (var i = 0; i < n; ++i) {\n    npos[i] = [zc[i]];\n    ncel[i] = [i];\n  }\n\n  return {\n    positions: npos,\n    cells: ncel\n  };\n}\n\nvar CACHE = {};\n\nfunction surfaceNets(array, level) {\n  if (array.dimension <= 0) {\n    return {\n      positions: [],\n      cells: []\n    };\n  } else if (array.dimension === 1) {\n    return mesh1D(array, level);\n  }\n\n  var typesig = array.order.join() + \"-\" + array.dtype;\n  var proc = CACHE[typesig];\n  var level = +level || 0.0;\n\n  if (!proc) {\n    proc = CACHE[typesig] = buildSurfaceNets(array.order, array.dtype);\n  }\n\n  return proc(array, level);\n}","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/surface-nets/surfacenets.js"],"names":["module","exports","surfaceNets","generateContourExtractor","require","zeroCrossings","allFns","genContour","order","dtype","contour","scalarArguments","getters","undefined","phase","phaseFunc","p","a","b","c","vertex","vertexFunc","d0","d1","v0","v1","v2","v3","p0","p1","p2","p3","m","push","cell","cellFunc","c0","c1","array","level","verts","cells","positions","buildSurfaceNets","inKey","length","fn","mesh1D","zc","n","npos","Array","ncel","i","CACHE","dimension","typesig","join","proc"],"mappings":"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","sourcesContent":["\"use strict\"\r\n\r\nmodule.exports = surfaceNets\r\n\r\nvar generateContourExtractor = require(\"ndarray-extract-contour\")\r\nvar zeroCrossings = require(\"zero-crossings\")\r\n\r\nvar allFns = {\r\n  \"2d\": function (genContour, order, dtype) {\r\n    var contour = genContour({\r\n      order: order,\r\n      scalarArguments: 3,\r\n      getters: dtype === \"generic\" ? [0] : undefined,\r\n      phase: function phaseFunc(p, a, b, c) {\r\n        return (p > c) | 0;\r\n      },\r\n      vertex: function vertexFunc(d0, d1, v0, v1, v2, v3, p0, p1, p2, p3, a, b, c) {\r\n        var m = ((p0 << 0) + (p1 << 1) + (p2 << 2) + (p3 << 3)) | 0;\r\n        if (m === 0 || m === 15) {\r\n          return;\r\n        }\r\n        switch (m) {\r\n          case 0:\r\n            a.push([d0 - 0.5, d1 - 0.5]);\r\n            break;\r\n          case 1:\r\n            a.push([d0 - 0.25 - (0.25 * (v1 + v0 - 2 * c)) / (v0 - v1), d1 - 0.25 - (0.25 * (v2 + v0 - 2 * c)) / (v0 - v2)]);\r\n            break;\r\n          case 2:\r\n            a.push([d0 - 0.75 - (0.25 * (-v1 - v0 + 2 * c)) / (v1 - v0), d1 - 0.25 - (0.25 * (v3 + v1 - 2 * c)) / (v1 - v3)]);\r\n            break;\r\n          case 3:\r\n            a.push([d0 - 0.5, d1 - 0.5 - (0.5 * (v2 + v0 + v3 + v1 - 4 * c)) / (v0 - v2 + v1 - v3)]);\r\n            break;\r\n          case 4:\r\n            a.push([d0 - 0.25 - (0.25 * (v3 + v2 - 2 * c)) / (v2 - v3), d1 - 0.75 - (0.25 * (-v2 - v0 + 2 * c)) / (v2 - v0)]);\r\n            break;\r\n          case 5:\r\n            a.push([d0 - 0.5 - (0.5 * (v1 + v0 + v3 + v2 - 4 * c)) / (v0 - v1 + v2 - v3), d1 - 0.5]);\r\n            break;\r\n          case 6:\r\n            a.push([d0 - 0.5 - (0.25 * (-v1 - v0 + v3 + v2)) / (v1 - v0 + v2 - v3), d1 - 0.5 - (0.25 * (-v2 - v0 + v3 + v1)) / (v2 - v0 + v1 - v3)]);\r\n            break;\r\n          case 7:\r\n            a.push([d0 - 0.75 - (0.25 * (v3 + v2 - 2 * c)) / (v2 - v3), d1 - 0.75 - (0.25 * (v3 + v1 - 2 * c)) / (v1 - v3)]);\r\n            break;\r\n          case 8:\r\n            a.push([d0 - 0.75 - (0.25 * (-v3 - v2 + 2 * c)) / (v3 - v2), d1 - 0.75 - (0.25 * (-v3 - v1 + 2 * c)) / (v3 - v1)]);\r\n            break;\r\n          case 9:\r\n            a.push([d0 - 0.5 - (0.25 * (v1 + v0 + -v3 - v2)) / (v0 - v1 + v3 - v2), d1 - 0.5 - (0.25 * (v2 + v0 + -v3 - v1)) / (v0 - v2 + v3 - v1)]);\r\n            break;\r\n          case 10:\r\n            a.push([d0 - 0.5 - (0.5 * (-v1 - v0 + -v3 - v2 + 4 * c)) / (v1 - v0 + v3 - v2), d1 - 0.5]);\r\n            break;\r\n          case 11:\r\n            a.push([d0 - 0.25 - (0.25 * (-v3 - v2 + 2 * c)) / (v3 - v2), d1 - 0.75 - (0.25 * (v2 + v0 - 2 * c)) / (v0 - v2)]);\r\n            break;\r\n          case 12:\r\n            a.push([d0 - 0.5, d1 - 0.5 - (0.5 * (-v2 - v0 + -v3 - v1 + 4 * c)) / (v2 - v0 + v3 - v1)]);\r\n            break;\r\n          case 13:\r\n            a.push([d0 - 0.75 - (0.25 * (v1 + v0 - 2 * c)) / (v0 - v1), d1 - 0.25 - (0.25 * (-v3 - v1 + 2 * c)) / (v3 - v1)]);\r\n            break;\r\n          case 14:\r\n            a.push([d0 - 0.25 - (0.25 * (-v1 - v0 + 2 * c)) / (v1 - v0), d1 - 0.25 - (0.25 * (-v2 - v0 + 2 * c)) / (v2 - v0)]);\r\n            break;\r\n          case 15:\r\n            a.push([d0 - 0.5, d1 - 0.5]);\r\n            break;\r\n        }\r\n      },\r\n      cell: function cellFunc(v0, v1, c0, c1, p0, p1, a, b, c) {\r\n        if (p0) {\r\n          b.push([v0, v1]);\r\n        } else {\r\n          b.push([v1, v0]);\r\n        }\r\n      },\r\n    });\r\n    return function (array, level) {\r\n      var verts = [],\r\n        cells = [];\r\n      contour(array, verts, cells, level);\r\n      return { positions: verts, cells: cells };\r\n    };\r\n  }\r\n}\r\n\r\nfunction buildSurfaceNets(order, dtype) {\r\n  var inKey = order.length + 'd'\r\n  var fn = allFns[inKey]\r\n  if(fn) return fn(generateContourExtractor, order, dtype)\r\n}\r\n\r\n//1D case: Need to handle specially\r\nfunction mesh1D(array, level) {\r\n  var zc = zeroCrossings(array, level)\r\n  var n = zc.length\r\n  var npos = new Array(n)\r\n  var ncel = new Array(n)\r\n  for(var i=0; i<n; ++i) {\r\n    npos[i] = [ zc[i] ]\r\n    ncel[i] = [ i ]\r\n  }\r\n  return {\r\n    positions: npos,\r\n    cells: ncel\r\n  }\r\n}\r\n\r\nvar CACHE = {}\r\n\r\nfunction surfaceNets(array,level) {\r\n  if(array.dimension <= 0) {\r\n    return { positions: [], cells: [] }\r\n  } else if(array.dimension === 1) {\r\n    return mesh1D(array, level)\r\n  }\r\n  var typesig = array.order.join() + \"-\" + array.dtype\r\n  var proc = CACHE[typesig]\r\n  var level = (+level) || 0.0\r\n  if(!proc) {\r\n    proc = CACHE[typesig] = buildSurfaceNets(array.order, array.dtype)\r\n  }\r\n  return proc(array,level)\r\n}"]},"metadata":{},"sourceType":"script"}