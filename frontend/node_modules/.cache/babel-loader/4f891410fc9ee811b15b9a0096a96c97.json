{"ast":null,"code":"var sprintf = require('sprintf-js').sprintf;\n\nvar glConstants = require('gl-constants/lookup');\n\nvar shaderName = require('glsl-shader-name');\n\nvar addLineNumbers = require('add-line-numbers');\n\nmodule.exports = formatCompilerError;\n\nfunction formatCompilerError(errLog, src, type) {\n  \"use strict\";\n\n  var name = shaderName(src) || 'of unknown name (see npm glsl-shader-name)';\n  var typeName = 'unknown type';\n\n  if (type !== undefined) {\n    typeName = type === glConstants.FRAGMENT_SHADER ? 'fragment' : 'vertex';\n  }\n\n  var longForm = sprintf('Error compiling %s shader %s:\\n', typeName, name);\n  var shortForm = sprintf(\"%s%s\", longForm, errLog);\n  var errorStrings = errLog.split('\\n');\n  var errors = {};\n\n  for (var i = 0; i < errorStrings.length; i++) {\n    var errorString = errorStrings[i];\n    if (errorString === '' || errorString === \"\\0\") continue;\n    var lineNo = parseInt(errorString.split(':')[2]);\n\n    if (isNaN(lineNo)) {\n      throw new Error(sprintf('Could not parse error: %s', errorString));\n    }\n\n    errors[lineNo] = errorString;\n  }\n\n  var lines = addLineNumbers(src).split('\\n');\n\n  for (var i = 0; i < lines.length; i++) {\n    if (!errors[i + 3] && !errors[i + 2] && !errors[i + 1]) continue;\n    var line = lines[i];\n    longForm += line + '\\n';\n\n    if (errors[i + 1]) {\n      var e = errors[i + 1];\n      e = e.substr(e.split(':', 3).join(':').length + 1).trim();\n      longForm += sprintf('^^^ %s\\n\\n', e);\n    }\n  }\n\n  return {\n    long: longForm.trim(),\n    short: shortForm.trim()\n  };\n}","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/gl-format-compiler-error/index.js"],"names":["sprintf","require","glConstants","shaderName","addLineNumbers","module","exports","formatCompilerError","errLog","src","type","name","typeName","undefined","FRAGMENT_SHADER","longForm","shortForm","errorStrings","split","errors","i","length","errorString","lineNo","parseInt","isNaN","Error","lines","line","e","substr","join","trim","long","short"],"mappings":"AACA,IAAIA,OAAO,GAAGC,OAAO,CAAC,YAAD,CAAP,CAAsBD,OAApC;;AACA,IAAIE,WAAW,GAAGD,OAAO,CAAC,qBAAD,CAAzB;;AACA,IAAIE,UAAU,GAAGF,OAAO,CAAC,kBAAD,CAAxB;;AACA,IAAIG,cAAc,GAAGH,OAAO,CAAC,kBAAD,CAA5B;;AAEAI,MAAM,CAACC,OAAP,GAAiBC,mBAAjB;;AAEA,SAASA,mBAAT,CAA6BC,MAA7B,EAAqCC,GAArC,EAA0CC,IAA1C,EAAgD;AAC5C;;AAEA,MAAIC,IAAI,GAAGR,UAAU,CAACM,GAAD,CAAV,IAAmB,4CAA9B;AAEA,MAAIG,QAAQ,GAAG,cAAf;;AACA,MAAIF,IAAI,KAAKG,SAAb,EAAwB;AACpBD,IAAAA,QAAQ,GAAGF,IAAI,KAAKR,WAAW,CAACY,eAArB,GAAuC,UAAvC,GAAoD,QAA/D;AACH;;AAED,MAAIC,QAAQ,GAAGf,OAAO,CAAC,iCAAD,EAAoCY,QAApC,EAA8CD,IAA9C,CAAtB;AACA,MAAIK,SAAS,GAAGhB,OAAO,CAAC,MAAD,EAASe,QAAT,EAAmBP,MAAnB,CAAvB;AAEA,MAAIS,YAAY,GAAGT,MAAM,CAACU,KAAP,CAAa,IAAb,CAAnB;AACA,MAAIC,MAAM,GAAG,EAAb;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,YAAY,CAACI,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;AAC1C,QAAIE,WAAW,GAAGL,YAAY,CAACG,CAAD,CAA9B;AACA,QAAIE,WAAW,KAAK,EAAhB,IAAsBA,WAAW,KAAK,IAA1C,EAAgD;AAChD,QAAIC,MAAM,GAAGC,QAAQ,CAACF,WAAW,CAACJ,KAAZ,CAAkB,GAAlB,EAAuB,CAAvB,CAAD,CAArB;;AACA,QAAIO,KAAK,CAACF,MAAD,CAAT,EAAmB;AACf,YAAM,IAAIG,KAAJ,CAAU1B,OAAO,CAAC,2BAAD,EAA8BsB,WAA9B,CAAjB,CAAN;AACH;;AACDH,IAAAA,MAAM,CAACI,MAAD,CAAN,GAAiBD,WAAjB;AACH;;AAED,MAAIK,KAAK,GAAGvB,cAAc,CAACK,GAAD,CAAd,CAAoBS,KAApB,CAA0B,IAA1B,CAAZ;;AAEA,OAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGO,KAAK,CAACN,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnC,QAAI,CAACD,MAAM,CAACC,CAAC,GAAC,CAAH,CAAP,IAAgB,CAACD,MAAM,CAACC,CAAC,GAAC,CAAH,CAAvB,IAAgC,CAACD,MAAM,CAACC,CAAC,GAAC,CAAH,CAA3C,EAAkD;AAClD,QAAIQ,IAAI,GAAGD,KAAK,CAACP,CAAD,CAAhB;AACAL,IAAAA,QAAQ,IAAIa,IAAI,GAAG,IAAnB;;AACA,QAAIT,MAAM,CAACC,CAAC,GAAC,CAAH,CAAV,EAAiB;AACb,UAAIS,CAAC,GAAGV,MAAM,CAACC,CAAC,GAAC,CAAH,CAAd;AACAS,MAAAA,CAAC,GAAGA,CAAC,CAACC,MAAF,CAASD,CAAC,CAACX,KAAF,CAAQ,GAAR,EAAa,CAAb,EAAgBa,IAAhB,CAAqB,GAArB,EAA0BV,MAA1B,GAAmC,CAA5C,EAA+CW,IAA/C,EAAJ;AACAjB,MAAAA,QAAQ,IAAIf,OAAO,CAAC,YAAD,EAAe6B,CAAf,CAAnB;AACH;AACJ;;AAED,SAAO;AACHI,IAAAA,IAAI,EAAElB,QAAQ,CAACiB,IAAT,EADH;AAEHE,IAAAA,KAAK,EAAElB,SAAS,CAACgB,IAAV;AAFJ,GAAP;AAIH","sourcesContent":["\nvar sprintf = require('sprintf-js').sprintf;\nvar glConstants = require('gl-constants/lookup');\nvar shaderName = require('glsl-shader-name');\nvar addLineNumbers = require('add-line-numbers');\n\nmodule.exports = formatCompilerError;\n\nfunction formatCompilerError(errLog, src, type) {\n    \"use strict\";\n\n    var name = shaderName(src) || 'of unknown name (see npm glsl-shader-name)';\n\n    var typeName = 'unknown type';\n    if (type !== undefined) {\n        typeName = type === glConstants.FRAGMENT_SHADER ? 'fragment' : 'vertex'\n    }\n\n    var longForm = sprintf('Error compiling %s shader %s:\\n', typeName, name);\n    var shortForm = sprintf(\"%s%s\", longForm, errLog);\n\n    var errorStrings = errLog.split('\\n');\n    var errors = {};\n\n    for (var i = 0; i < errorStrings.length; i++) {\n        var errorString = errorStrings[i];\n        if (errorString === '' || errorString === \"\\0\") continue;\n        var lineNo = parseInt(errorString.split(':')[2]);\n        if (isNaN(lineNo)) {\n            throw new Error(sprintf('Could not parse error: %s', errorString));\n        }\n        errors[lineNo] = errorString;\n    }\n\n    var lines = addLineNumbers(src).split('\\n');\n\n    for (var i = 0; i < lines.length; i++) {\n        if (!errors[i+3] && !errors[i+2] && !errors[i+1]) continue;\n        var line = lines[i];\n        longForm += line + '\\n';\n        if (errors[i+1]) {\n            var e = errors[i+1];\n            e = e.substr(e.split(':', 3).join(':').length + 1).trim();\n            longForm += sprintf('^^^ %s\\n\\n', e);\n        }\n    }\n\n    return {\n        long: longForm.trim(),\n        short: shortForm.trim()\n    };\n}\n\n"]},"metadata":{},"sourceType":"script"}