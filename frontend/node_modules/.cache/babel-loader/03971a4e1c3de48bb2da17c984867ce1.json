{"ast":null,"code":"'use strict';\n\nvar Lib = require('../../lib');\n\nvar handleXYZDefaults = require('../heatmap/xyz_defaults');\n\nvar attributes = require('./attributes');\n\nvar handleConstraintDefaults = require('../contour/constraint_defaults');\n\nvar handleContoursDefaults = require('../contour/contours_defaults');\n\nvar handleStyleDefaults = require('../contour/style_defaults');\n\nmodule.exports = function supplyDefaults(traceIn, traceOut, defaultColor, layout) {\n  function coerce(attr, dflt) {\n    return Lib.coerce(traceIn, traceOut, attributes, attr, dflt);\n  }\n\n  function coerce2(attr) {\n    return Lib.coerce2(traceIn, traceOut, attributes, attr);\n  }\n\n  coerce('carpet'); // If either a or b is not present, then it's not a valid trace *unless* the carpet\n  // axis has the a or b values we're looking for. So if these are not found, just defer\n  // that decision until the calc step.\n  //\n  // NB: the calc step will modify the original data input by assigning whichever of\n  // a or b are missing. This is necessary because panning goes right from supplyDefaults\n  // to plot (skipping calc). That means on subsequent updates, this *will* need to be\n  // able to find a and b.\n  //\n  // The long-term proper fix is that this should perhaps use underscored attributes to\n  // at least modify the user input to a slightly lesser extent. Fully removing the\n  // input mutation is challenging. The underscore approach is not currently taken since\n  // it requires modification to all of the functions below that expect the coerced\n  // attribute name to match the property name -- except '_a' !== 'a' so that is not\n  // straightforward.\n\n  if (traceIn.a && traceIn.b) {\n    var len = handleXYZDefaults(traceIn, traceOut, coerce, layout, 'a', 'b');\n\n    if (!len) {\n      traceOut.visible = false;\n      return;\n    }\n\n    coerce('text');\n    var isConstraint = coerce('contours.type') === 'constraint';\n\n    if (isConstraint) {\n      handleConstraintDefaults(traceIn, traceOut, coerce, layout, defaultColor, {\n        hasHover: false\n      });\n    } else {\n      handleContoursDefaults(traceIn, traceOut, coerce, coerce2);\n      handleStyleDefaults(traceIn, traceOut, coerce, layout, {\n        hasHover: false\n      });\n    }\n  } else {\n    traceOut._defaultColor = defaultColor;\n    traceOut._length = null;\n  }\n};","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/plotly.js/src/traces/contourcarpet/defaults.js"],"names":["Lib","require","handleXYZDefaults","attributes","handleConstraintDefaults","handleContoursDefaults","handleStyleDefaults","module","exports","supplyDefaults","traceIn","traceOut","defaultColor","layout","coerce","attr","dflt","coerce2","a","b","len","visible","isConstraint","hasHover","_defaultColor","_length"],"mappings":"AAAA;;AAEA,IAAIA,GAAG,GAAGC,OAAO,CAAC,WAAD,CAAjB;;AAEA,IAAIC,iBAAiB,GAAGD,OAAO,CAAC,yBAAD,CAA/B;;AACA,IAAIE,UAAU,GAAGF,OAAO,CAAC,cAAD,CAAxB;;AACA,IAAIG,wBAAwB,GAAGH,OAAO,CAAC,gCAAD,CAAtC;;AACA,IAAII,sBAAsB,GAAGJ,OAAO,CAAC,8BAAD,CAApC;;AACA,IAAIK,mBAAmB,GAAGL,OAAO,CAAC,2BAAD,CAAjC;;AAEAM,MAAM,CAACC,OAAP,GAAiB,SAASC,cAAT,CAAwBC,OAAxB,EAAiCC,QAAjC,EAA2CC,YAA3C,EAAyDC,MAAzD,EAAiE;AAC9E,WAASC,MAAT,CAAgBC,IAAhB,EAAsBC,IAAtB,EAA4B;AACxB,WAAOhB,GAAG,CAACc,MAAJ,CAAWJ,OAAX,EAAoBC,QAApB,EAA8BR,UAA9B,EAA0CY,IAA1C,EAAgDC,IAAhD,CAAP;AACH;;AAED,WAASC,OAAT,CAAiBF,IAAjB,EAAuB;AACnB,WAAOf,GAAG,CAACiB,OAAJ,CAAYP,OAAZ,EAAqBC,QAArB,EAA+BR,UAA/B,EAA2CY,IAA3C,CAAP;AACH;;AAEDD,EAAAA,MAAM,CAAC,QAAD,CAAN,CAT8E,CAW9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAGJ,OAAO,CAACQ,CAAR,IAAaR,OAAO,CAACS,CAAxB,EAA2B;AACvB,QAAIC,GAAG,GAAGlB,iBAAiB,CAACQ,OAAD,EAAUC,QAAV,EAAoBG,MAApB,EAA4BD,MAA5B,EAAoC,GAApC,EAAyC,GAAzC,CAA3B;;AAEA,QAAG,CAACO,GAAJ,EAAS;AACLT,MAAAA,QAAQ,CAACU,OAAT,GAAmB,KAAnB;AACA;AACH;;AAEDP,IAAAA,MAAM,CAAC,MAAD,CAAN;AACA,QAAIQ,YAAY,GAAIR,MAAM,CAAC,eAAD,CAAN,KAA4B,YAAhD;;AAEA,QAAGQ,YAAH,EAAiB;AACblB,MAAAA,wBAAwB,CAACM,OAAD,EAAUC,QAAV,EAAoBG,MAApB,EAA4BD,MAA5B,EAAoCD,YAApC,EAAkD;AAACW,QAAAA,QAAQ,EAAE;AAAX,OAAlD,CAAxB;AACH,KAFD,MAEO;AACHlB,MAAAA,sBAAsB,CAACK,OAAD,EAAUC,QAAV,EAAoBG,MAApB,EAA4BG,OAA5B,CAAtB;AACAX,MAAAA,mBAAmB,CAACI,OAAD,EAAUC,QAAV,EAAoBG,MAApB,EAA4BD,MAA5B,EAAoC;AAACU,QAAAA,QAAQ,EAAE;AAAX,OAApC,CAAnB;AACH;AACJ,GAjBD,MAiBO;AACHZ,IAAAA,QAAQ,CAACa,aAAT,GAAyBZ,YAAzB;AACAD,IAAAA,QAAQ,CAACc,OAAT,GAAmB,IAAnB;AACH;AACJ,CA/CD","sourcesContent":["'use strict';\n\nvar Lib = require('../../lib');\n\nvar handleXYZDefaults = require('../heatmap/xyz_defaults');\nvar attributes = require('./attributes');\nvar handleConstraintDefaults = require('../contour/constraint_defaults');\nvar handleContoursDefaults = require('../contour/contours_defaults');\nvar handleStyleDefaults = require('../contour/style_defaults');\n\nmodule.exports = function supplyDefaults(traceIn, traceOut, defaultColor, layout) {\n    function coerce(attr, dflt) {\n        return Lib.coerce(traceIn, traceOut, attributes, attr, dflt);\n    }\n\n    function coerce2(attr) {\n        return Lib.coerce2(traceIn, traceOut, attributes, attr);\n    }\n\n    coerce('carpet');\n\n    // If either a or b is not present, then it's not a valid trace *unless* the carpet\n    // axis has the a or b values we're looking for. So if these are not found, just defer\n    // that decision until the calc step.\n    //\n    // NB: the calc step will modify the original data input by assigning whichever of\n    // a or b are missing. This is necessary because panning goes right from supplyDefaults\n    // to plot (skipping calc). That means on subsequent updates, this *will* need to be\n    // able to find a and b.\n    //\n    // The long-term proper fix is that this should perhaps use underscored attributes to\n    // at least modify the user input to a slightly lesser extent. Fully removing the\n    // input mutation is challenging. The underscore approach is not currently taken since\n    // it requires modification to all of the functions below that expect the coerced\n    // attribute name to match the property name -- except '_a' !== 'a' so that is not\n    // straightforward.\n    if(traceIn.a && traceIn.b) {\n        var len = handleXYZDefaults(traceIn, traceOut, coerce, layout, 'a', 'b');\n\n        if(!len) {\n            traceOut.visible = false;\n            return;\n        }\n\n        coerce('text');\n        var isConstraint = (coerce('contours.type') === 'constraint');\n\n        if(isConstraint) {\n            handleConstraintDefaults(traceIn, traceOut, coerce, layout, defaultColor, {hasHover: false});\n        } else {\n            handleContoursDefaults(traceIn, traceOut, coerce, coerce2);\n            handleStyleDefaults(traceIn, traceOut, coerce, layout, {hasHover: false});\n        }\n    } else {\n        traceOut._defaultColor = defaultColor;\n        traceOut._length = null;\n    }\n};\n"]},"metadata":{},"sourceType":"script"}