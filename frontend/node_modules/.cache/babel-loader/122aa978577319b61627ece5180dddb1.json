{"ast":null,"code":"'use strict';\n\nvar timeFormat = require('d3-time-format').timeFormat;\n\nvar isNumeric = require('fast-isnumeric');\n\nvar Loggers = require('./loggers');\n\nvar mod = require('./mod').mod;\n\nvar constants = require('../constants/numerical');\n\nvar BADNUM = constants.BADNUM;\nvar ONEDAY = constants.ONEDAY;\nvar ONEHOUR = constants.ONEHOUR;\nvar ONEMIN = constants.ONEMIN;\nvar ONESEC = constants.ONESEC;\nvar EPOCHJD = constants.EPOCHJD;\n\nvar Registry = require('../registry');\n\nvar utcFormat = require('d3-time-format').utcFormat;\n\nvar DATETIME_REGEXP = /^\\s*(-?\\d\\d\\d\\d|\\d\\d)(-(\\d?\\d)(-(\\d?\\d)([ Tt]([01]?\\d|2[0-3])(:([0-5]\\d)(:([0-5]\\d(\\.\\d+)?))?(Z|z|[+\\-]\\d\\d(:?\\d\\d)?)?)?)?)?)?\\s*$/m; // special regex for chinese calendars to support yyyy-mmi-dd etc for intercalary months\n\nvar DATETIME_REGEXP_CN = /^\\s*(-?\\d\\d\\d\\d|\\d\\d)(-(\\d?\\di?)(-(\\d?\\d)([ Tt]([01]?\\d|2[0-3])(:([0-5]\\d)(:([0-5]\\d(\\.\\d+)?))?(Z|z|[+\\-]\\d\\d(:?\\d\\d)?)?)?)?)?)?\\s*$/m; // for 2-digit years, the first year we map them onto\n\nvar YFIRST = new Date().getFullYear() - 70;\n\nfunction isWorldCalendar(calendar) {\n  return calendar && Registry.componentsRegistry.calendars && typeof calendar === 'string' && calendar !== 'gregorian';\n}\n/*\n * dateTick0: get the canonical tick for this calendar\n *\n * integer weekdays : Saturday: 0, Sunday: 1, Monday: 2, etc.\n */\n\n\nexports.dateTick0 = function (calendar, dayOfWeek) {\n  var tick0 = _dateTick0(calendar, !!dayOfWeek);\n\n  if (dayOfWeek < 2) return tick0;\n  var v = exports.dateTime2ms(tick0, calendar);\n  v += ONEDAY * (dayOfWeek - 1); // shift Sunday to Monday, etc.\n\n  return exports.ms2DateTime(v, 0, calendar);\n};\n/*\n * _dateTick0: get the canonical tick for this calendar\n *\n * bool sunday is for week ticks, shift it to a Sunday.\n */\n\n\nfunction _dateTick0(calendar, sunday) {\n  if (isWorldCalendar(calendar)) {\n    return sunday ? Registry.getComponentMethod('calendars', 'CANONICAL_SUNDAY')[calendar] : Registry.getComponentMethod('calendars', 'CANONICAL_TICK')[calendar];\n  } else {\n    return sunday ? '2000-01-02' : '2000-01-01';\n  }\n}\n/*\n * dfltRange: for each calendar, give a valid default range\n */\n\n\nexports.dfltRange = function (calendar) {\n  if (isWorldCalendar(calendar)) {\n    return Registry.getComponentMethod('calendars', 'DFLTRANGE')[calendar];\n  } else {\n    return ['2000-01-01', '2001-01-01'];\n  }\n}; // is an object a javascript date?\n\n\nexports.isJSDate = function (v) {\n  return typeof v === 'object' && v !== null && typeof v.getTime === 'function';\n}; // The absolute limits of our date-time system\n// This is a little weird: we use MIN_MS and MAX_MS in dateTime2ms\n// but we use dateTime2ms to calculate them (after defining it!)\n\n\nvar MIN_MS, MAX_MS;\n/**\n * dateTime2ms - turn a date object or string s into milliseconds\n * (relative to 1970-01-01, per javascript standard)\n * optional calendar (string) to use a non-gregorian calendar\n *\n * Returns BADNUM if it doesn't find a date\n *\n * strings should have the form:\n *\n *    -?YYYY-mm-dd<sep>HH:MM:SS.sss<tzInfo>?\n *\n * <sep>: space (our normal standard) or T or t (ISO-8601)\n * <tzInfo>: Z, z, [+\\-]HH:?MM or [+\\-]HH and we THROW IT AWAY\n * this format comes from https://tools.ietf.org/html/rfc3339#section-5.6\n * and 4.2.5.1 Difference between local time and UTC of day (ISO-8601)\n * but we allow it even with a space as the separator\n *\n * May truncate after any full field, and sss can be any length\n * even >3 digits, though javascript dates truncate to milliseconds,\n * we keep as much as javascript numeric precision can hold, but we only\n * report back up to 100 microsecond precision, because most dates support\n * this precision (close to 1970 support more, very far away support less)\n *\n * Expanded to support negative years to -9999 but you must always\n * give 4 digits, except for 2-digit positive years which we assume are\n * near the present time.\n * Note that we follow ISO 8601:2004: there *is* a year 0, which\n * is 1BC/BCE, and -1===2BC etc.\n *\n * World calendars: not all of these *have* agreed extensions to this full range,\n * if you have another calendar system but want a date range outside its validity,\n * you can use a gregorian date string prefixed with 'G' or 'g'.\n *\n * Where to cut off 2-digit years between 1900s and 2000s?\n * from https://docs.microsoft.com/en-us/office/troubleshoot/excel/two-digit-year-numbers#the-2029-rule:\n *   1930-2029 (the most retro of all...)\n * but in my mac chrome from eg. d=new Date(Date.parse('8/19/50')):\n *   1950-2049\n * by Java, from http://stackoverflow.com/questions/2024273/:\n *   now-80 - now+19\n * or FileMaker Pro, from\n *      https://fmhelp.filemaker.com/help/18/fmp/en/index.html#page/FMP_Help/dates-with-two-digit-years.html:\n *   now-70 - now+29\n * but python strptime etc, via\n *      http://docs.python.org/py3k/library/time.html:\n *   1969-2068 (super forward-looking, but static, not sliding!)\n *\n * lets go with now-70 to now+29, and if anyone runs into this problem\n * they can learn the hard way not to use 2-digit years, as no choice we\n * make now will cover all possibilities. mostly this will all be taken\n * care of in initial parsing, should only be an issue for hand-entered data\n * currently (2016) this range is:\n *   1946-2045\n */\n\nexports.dateTime2ms = function (s, calendar) {\n  // first check if s is a date object\n  if (exports.isJSDate(s)) {\n    // Convert to the UTC milliseconds that give the same\n    // hours as this date has in the local timezone\n    var tzOffset = s.getTimezoneOffset() * ONEMIN;\n    var offsetTweak = (s.getUTCMinutes() - s.getMinutes()) * ONEMIN + (s.getUTCSeconds() - s.getSeconds()) * ONESEC + (s.getUTCMilliseconds() - s.getMilliseconds());\n\n    if (offsetTweak) {\n      var comb = 3 * ONEMIN;\n      tzOffset = tzOffset - comb / 2 + mod(offsetTweak - tzOffset + comb / 2, comb);\n    }\n\n    s = Number(s) - tzOffset;\n    if (s >= MIN_MS && s <= MAX_MS) return s;\n    return BADNUM;\n  } // otherwise only accept strings and numbers\n\n\n  if (typeof s !== 'string' && typeof s !== 'number') return BADNUM;\n  s = String(s);\n  var isWorld = isWorldCalendar(calendar); // to handle out-of-range dates in international calendars, accept\n  // 'G' as a prefix to force the built-in gregorian calendar.\n\n  var s0 = s.charAt(0);\n\n  if (isWorld && (s0 === 'G' || s0 === 'g')) {\n    s = s.substr(1);\n    calendar = '';\n  }\n\n  var isChinese = isWorld && calendar.substr(0, 7) === 'chinese';\n  var match = s.match(isChinese ? DATETIME_REGEXP_CN : DATETIME_REGEXP);\n  if (!match) return BADNUM;\n  var y = match[1];\n  var m = match[3] || '1';\n  var d = Number(match[5] || 1);\n  var H = Number(match[7] || 0);\n  var M = Number(match[9] || 0);\n  var S = Number(match[11] || 0);\n\n  if (isWorld) {\n    // disallow 2-digit years for world calendars\n    if (y.length === 2) return BADNUM;\n    y = Number(y);\n    var cDate;\n\n    try {\n      var calInstance = Registry.getComponentMethod('calendars', 'getCal')(calendar);\n\n      if (isChinese) {\n        var isIntercalary = m.charAt(m.length - 1) === 'i';\n        m = parseInt(m, 10);\n        cDate = calInstance.newDate(y, calInstance.toMonthIndex(y, m, isIntercalary), d);\n      } else {\n        cDate = calInstance.newDate(y, Number(m), d);\n      }\n    } catch (e) {\n      return BADNUM;\n    } // Invalid ... date\n\n\n    if (!cDate) return BADNUM;\n    return (cDate.toJD() - EPOCHJD) * ONEDAY + H * ONEHOUR + M * ONEMIN + S * ONESEC;\n  }\n\n  if (y.length === 2) {\n    y = (Number(y) + 2000 - YFIRST) % 100 + YFIRST;\n  } else y = Number(y); // new Date uses months from 0; subtract 1 here just so we\n  // don't have to do it again during the validity test below\n\n\n  m -= 1; // javascript takes new Date(0..99,m,d) to mean 1900-1999, so\n  // to support years 0-99 we need to use setFullYear explicitly\n  // Note that 2000 is a leap year.\n\n  var date = new Date(Date.UTC(2000, m, d, H, M));\n  date.setUTCFullYear(y);\n  if (date.getUTCMonth() !== m) return BADNUM;\n  if (date.getUTCDate() !== d) return BADNUM;\n  return date.getTime() + S * ONESEC;\n};\n\nMIN_MS = exports.MIN_MS = exports.dateTime2ms('-9999');\nMAX_MS = exports.MAX_MS = exports.dateTime2ms('9999-12-31 23:59:59.9999'); // is string s a date? (see above)\n\nexports.isDateTime = function (s, calendar) {\n  return exports.dateTime2ms(s, calendar) !== BADNUM;\n}; // pad a number with zeroes, to given # of digits before the decimal point\n\n\nfunction lpad(val, digits) {\n  return String(val + Math.pow(10, digits)).substr(1);\n}\n/**\n * Turn ms into string of the form YYYY-mm-dd HH:MM:SS.ssss\n * Crop any trailing zeros in time, except never stop right after hours\n * (we could choose to crop '-01' from date too but for now we always\n * show the whole date)\n * Optional range r is the data range that applies, also in ms.\n * If rng is big, the later parts of time will be omitted\n */\n\n\nvar NINETYDAYS = 90 * ONEDAY;\nvar THREEHOURS = 3 * ONEHOUR;\nvar FIVEMIN = 5 * ONEMIN;\n\nexports.ms2DateTime = function (ms, r, calendar) {\n  if (typeof ms !== 'number' || !(ms >= MIN_MS && ms <= MAX_MS)) return BADNUM;\n  if (!r) r = 0;\n  var msecTenths = Math.floor(mod(ms + 0.05, 1) * 10);\n  var msRounded = Math.round(ms - msecTenths / 10);\n  var dateStr, h, m, s, msec10, d;\n\n  if (isWorldCalendar(calendar)) {\n    var dateJD = Math.floor(msRounded / ONEDAY) + EPOCHJD;\n    var timeMs = Math.floor(mod(ms, ONEDAY));\n\n    try {\n      dateStr = Registry.getComponentMethod('calendars', 'getCal')(calendar).fromJD(dateJD).formatDate('yyyy-mm-dd');\n    } catch (e) {\n      // invalid date in this calendar - fall back to Gyyyy-mm-dd\n      dateStr = utcFormat('G%Y-%m-%d')(new Date(msRounded));\n    } // yyyy does NOT guarantee 4-digit years. YYYY mostly does, but does\n    // other things for a few calendars, so we can't trust it. Just pad\n    // it manually (after the '-' if there is one)\n\n\n    if (dateStr.charAt(0) === '-') {\n      while (dateStr.length < 11) dateStr = '-0' + dateStr.substr(1);\n    } else {\n      while (dateStr.length < 10) dateStr = '0' + dateStr;\n    } // TODO: if this is faster, we could use this block for extracting\n    // the time components of regular gregorian too\n\n\n    h = r < NINETYDAYS ? Math.floor(timeMs / ONEHOUR) : 0;\n    m = r < NINETYDAYS ? Math.floor(timeMs % ONEHOUR / ONEMIN) : 0;\n    s = r < THREEHOURS ? Math.floor(timeMs % ONEMIN / ONESEC) : 0;\n    msec10 = r < FIVEMIN ? timeMs % ONESEC * 10 + msecTenths : 0;\n  } else {\n    d = new Date(msRounded);\n    dateStr = utcFormat('%Y-%m-%d')(d); // <90 days: add hours and minutes - never *only* add hours\n\n    h = r < NINETYDAYS ? d.getUTCHours() : 0;\n    m = r < NINETYDAYS ? d.getUTCMinutes() : 0; // <3 hours: add seconds\n\n    s = r < THREEHOURS ? d.getUTCSeconds() : 0; // <5 minutes: add ms (plus one extra digit, this is msec*10)\n\n    msec10 = r < FIVEMIN ? d.getUTCMilliseconds() * 10 + msecTenths : 0;\n  }\n\n  return includeTime(dateStr, h, m, s, msec10);\n}; // For converting old-style milliseconds to date strings,\n// we use the local timezone rather than UTC like we use\n// everywhere else, both for backward compatibility and\n// because that's how people mostly use javasript date objects.\n// Clip one extra day off our date range though so we can't get\n// thrown beyond the range by the timezone shift.\n\n\nexports.ms2DateTimeLocal = function (ms) {\n  if (!(ms >= MIN_MS + ONEDAY && ms <= MAX_MS - ONEDAY)) return BADNUM;\n  var msecTenths = Math.floor(mod(ms + 0.05, 1) * 10);\n  var d = new Date(Math.round(ms - msecTenths / 10));\n  var dateStr = timeFormat('%Y-%m-%d')(d);\n  var h = d.getHours();\n  var m = d.getMinutes();\n  var s = d.getSeconds();\n  var msec10 = d.getUTCMilliseconds() * 10 + msecTenths;\n  return includeTime(dateStr, h, m, s, msec10);\n};\n\nfunction includeTime(dateStr, h, m, s, msec10) {\n  // include each part that has nonzero data in or after it\n  if (h || m || s || msec10) {\n    dateStr += ' ' + lpad(h, 2) + ':' + lpad(m, 2);\n\n    if (s || msec10) {\n      dateStr += ':' + lpad(s, 2);\n\n      if (msec10) {\n        var digits = 4;\n\n        while (msec10 % 10 === 0) {\n          digits -= 1;\n          msec10 /= 10;\n        }\n\n        dateStr += '.' + lpad(msec10, digits);\n      }\n    }\n  }\n\n  return dateStr;\n} // normalize date format to date string, in case it starts as\n// a Date object or milliseconds\n// optional dflt is the return value if cleaning fails\n\n\nexports.cleanDate = function (v, dflt, calendar) {\n  // let us use cleanDate to provide a missing default without an error\n  if (v === BADNUM) return dflt;\n\n  if (exports.isJSDate(v) || typeof v === 'number' && isFinite(v)) {\n    // do not allow milliseconds (old) or jsdate objects (inherently\n    // described as gregorian dates) with world calendars\n    if (isWorldCalendar(calendar)) {\n      Loggers.error('JS Dates and milliseconds are incompatible with world calendars', v);\n      return dflt;\n    } // NOTE: if someone puts in a year as a number rather than a string,\n    // this will mistakenly convert it thinking it's milliseconds from 1970\n    // that is: '2012' -> Jan. 1, 2012, but 2012 -> 2012 epoch milliseconds\n\n\n    v = exports.ms2DateTimeLocal(+v);\n    if (!v && dflt !== undefined) return dflt;\n  } else if (!exports.isDateTime(v, calendar)) {\n    Loggers.error('unrecognized date', v);\n    return dflt;\n  }\n\n  return v;\n};\n/*\n *  Date formatting for ticks and hovertext\n */\n\n/*\n * modDateFormat: Support world calendars, and add two items to\n * d3's vocabulary:\n * %{n}f where n is the max number of digits of fractional seconds\n * %h formats: half of the year as a decimal number [1,2]\n */\n\n\nvar fracMatch = /%\\d?f/g;\nvar halfYearMatch = /%h/g;\nvar quarterToHalfYear = {\n  '1': '1',\n  '2': '1',\n  '3': '2',\n  '4': '2'\n};\n\nfunction modDateFormat(fmt, x, formatter, calendar) {\n  fmt = fmt.replace(fracMatch, function (match) {\n    var digits = Math.min(+match.charAt(1) || 6, 6);\n    var fracSecs = (x / 1000 % 1 + 2).toFixed(digits).substr(2).replace(/0+$/, '') || '0';\n    return fracSecs;\n  });\n  var d = new Date(Math.floor(x + 0.05));\n  fmt = fmt.replace(halfYearMatch, function () {\n    return quarterToHalfYear[formatter('%q')(d)];\n  });\n\n  if (isWorldCalendar(calendar)) {\n    try {\n      fmt = Registry.getComponentMethod('calendars', 'worldCalFmt')(fmt, x, calendar);\n    } catch (e) {\n      return 'Invalid';\n    }\n  }\n\n  return formatter(fmt)(d);\n}\n/*\n * formatTime: create a time string from:\n *   x: milliseconds\n *   tr: tickround ('M', 'S', or # digits)\n * only supports UTC times (where every day is 24 hours and 0 is at midnight)\n */\n\n\nvar MAXSECONDS = [59, 59.9, 59.99, 59.999, 59.9999];\n\nfunction formatTime(x, tr) {\n  var timePart = mod(x + 0.05, ONEDAY);\n  var timeStr = lpad(Math.floor(timePart / ONEHOUR), 2) + ':' + lpad(mod(Math.floor(timePart / ONEMIN), 60), 2);\n\n  if (tr !== 'M') {\n    if (!isNumeric(tr)) tr = 0; // should only be 'S'\n\n    /*\n     * this is a weird one - and shouldn't come up unless people\n     * monkey with tick0 in weird ways, but we need to do something!\n     * IN PARTICULAR we had better not display garbage (see below)\n     * for numbers we always round to the nearest increment of the\n     * precision we're showing, and this seems like the right way to\n     * handle seconds and milliseconds, as they have a decimal point\n     * and people will interpret that to mean rounding like numbers.\n     * but for larger increments we floor the value: it's always\n     * 2013 until the ball drops on the new year. We could argue about\n     * which field it is where we start rounding (should 12:08:59\n     * round to 12:09 if we're stopping at minutes?) but for now I'll\n     * say we round seconds but floor everything else. BUT that means\n     * we need to never round up to 60 seconds, ie 23:59:60\n     */\n\n    var sec = Math.min(mod(x / ONESEC, 60), MAXSECONDS[tr]);\n    var secStr = (100 + sec).toFixed(tr).substr(1);\n\n    if (tr > 0) {\n      secStr = secStr.replace(/0+$/, '').replace(/[\\.]$/, '');\n    }\n\n    timeStr += ':' + secStr;\n  }\n\n  return timeStr;\n}\n/*\n * formatDate: turn a date into tick or hover label text.\n *\n *   x: milliseconds, the value to convert\n *   fmt: optional, an explicit format string (d3 format, even for world calendars)\n *   tr: tickround ('y', 'm', 'd', 'M', 'S', or # digits)\n *      used if no explicit fmt is provided\n *   formatter: locale-aware d3 date formatter for standard gregorian calendars\n *      should be the result of exports.getD3DateFormat(gd)\n *   calendar: optional string, the world calendar system to use\n *\n * returns the date/time as a string, potentially with the leading portion\n * on a separate line (after '\\n')\n * Note that this means if you provide an explicit format which includes '\\n'\n * the axis may choose to strip things after it when they don't change from\n * one tick to the next (as it does with automatic formatting)\n */\n\n\nexports.formatDate = function (x, fmt, tr, formatter, calendar, extraFormat) {\n  calendar = isWorldCalendar(calendar) && calendar;\n\n  if (!fmt) {\n    if (tr === 'y') fmt = extraFormat.year;else if (tr === 'm') fmt = extraFormat.month;else if (tr === 'd') {\n      fmt = extraFormat.dayMonth + '\\n' + extraFormat.year;\n    } else {\n      return formatTime(x, tr) + '\\n' + modDateFormat(extraFormat.dayMonthYear, x, formatter, calendar);\n    }\n  }\n\n  return modDateFormat(fmt, x, formatter, calendar);\n};\n/*\n * incrementMonth: make a new milliseconds value from the given one,\n * having changed the month\n *\n * special case for world calendars: multiples of 12 are treated as years,\n * even for calendar systems that don't have (always or ever) 12 months/year\n * TODO: perhaps we need a different code for year increments to support this?\n *\n * ms (number): the initial millisecond value\n * dMonth (int): the (signed) number of months to shift\n * calendar (string): the calendar system to use\n *\n * changing month does not (and CANNOT) always preserve day, since\n * months have different lengths. The worst example of this is:\n *   d = new Date(1970,0,31); d.setMonth(1) -> Feb 31 turns into Mar 3\n *\n * But we want to be able to iterate over the last day of each month,\n * regardless of what its number is.\n * So shift 3 days forward, THEN set the new month, then unshift:\n *   1/31 -> 2/28 (or 29) -> 3/31 -> 4/30 -> ...\n *\n * Note that odd behavior still exists if you start from the 26th-28th:\n *   1/28 -> 2/28 -> 3/31\n * but at least you can't shift any dates into the wrong month,\n * and ticks on these days incrementing by month would be very unusual\n */\n\n\nvar THREEDAYS = 3 * ONEDAY;\n\nexports.incrementMonth = function (ms, dMonth, calendar) {\n  calendar = isWorldCalendar(calendar) && calendar; // pull time out and operate on pure dates, then add time back at the end\n  // this gives maximum precision - not that we *normally* care if we're\n  // incrementing by month, but better to be safe!\n\n  var timeMs = mod(ms, ONEDAY);\n  ms = Math.round(ms - timeMs);\n\n  if (calendar) {\n    try {\n      var dateJD = Math.round(ms / ONEDAY) + EPOCHJD;\n      var calInstance = Registry.getComponentMethod('calendars', 'getCal')(calendar);\n      var cDate = calInstance.fromJD(dateJD);\n      if (dMonth % 12) calInstance.add(cDate, dMonth, 'm');else calInstance.add(cDate, dMonth / 12, 'y');\n      return (cDate.toJD() - EPOCHJD) * ONEDAY + timeMs;\n    } catch (e) {\n      Loggers.error('invalid ms ' + ms + ' in calendar ' + calendar); // then keep going in gregorian even though the result will be 'Invalid'\n    }\n  }\n\n  var y = new Date(ms + THREEDAYS);\n  return y.setUTCMonth(y.getUTCMonth() + dMonth) + timeMs - THREEDAYS;\n};\n/*\n * findExactDates: what fraction of data is exact days, months, or years?\n *\n * data: array of millisecond values\n * calendar (string) the calendar to test against\n */\n\n\nexports.findExactDates = function (data, calendar) {\n  var exactYears = 0;\n  var exactMonths = 0;\n  var exactDays = 0;\n  var blankCount = 0;\n  var d;\n  var di;\n  var calInstance = isWorldCalendar(calendar) && Registry.getComponentMethod('calendars', 'getCal')(calendar);\n\n  for (var i = 0; i < data.length; i++) {\n    di = data[i]; // not date data at all\n\n    if (!isNumeric(di)) {\n      blankCount++;\n      continue;\n    } // not an exact date\n\n\n    if (di % ONEDAY) continue;\n\n    if (calInstance) {\n      try {\n        d = calInstance.fromJD(di / ONEDAY + EPOCHJD);\n\n        if (d.day() === 1) {\n          if (d.month() === 1) exactYears++;else exactMonths++;\n        } else exactDays++;\n      } catch (e) {// invalid date in this calendar - ignore it here.\n      }\n    } else {\n      d = new Date(di);\n\n      if (d.getUTCDate() === 1) {\n        if (d.getUTCMonth() === 0) exactYears++;else exactMonths++;\n      } else exactDays++;\n    }\n  }\n\n  exactMonths += exactYears;\n  exactDays += exactMonths;\n  var dataCount = data.length - blankCount;\n  return {\n    exactYears: exactYears / dataCount,\n    exactMonths: exactMonths / dataCount,\n    exactDays: exactDays / dataCount\n  };\n};","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/plotly.js/src/lib/dates.js"],"names":["timeFormat","require","isNumeric","Loggers","mod","constants","BADNUM","ONEDAY","ONEHOUR","ONEMIN","ONESEC","EPOCHJD","Registry","utcFormat","DATETIME_REGEXP","DATETIME_REGEXP_CN","YFIRST","Date","getFullYear","isWorldCalendar","calendar","componentsRegistry","calendars","exports","dateTick0","dayOfWeek","tick0","_dateTick0","v","dateTime2ms","ms2DateTime","sunday","getComponentMethod","dfltRange","isJSDate","getTime","MIN_MS","MAX_MS","s","tzOffset","getTimezoneOffset","offsetTweak","getUTCMinutes","getMinutes","getUTCSeconds","getSeconds","getUTCMilliseconds","getMilliseconds","comb","Number","String","isWorld","s0","charAt","substr","isChinese","match","y","m","d","H","M","S","length","cDate","calInstance","isIntercalary","parseInt","newDate","toMonthIndex","e","toJD","date","UTC","setUTCFullYear","getUTCMonth","getUTCDate","isDateTime","lpad","val","digits","Math","pow","NINETYDAYS","THREEHOURS","FIVEMIN","ms","r","msecTenths","floor","msRounded","round","dateStr","h","msec10","dateJD","timeMs","fromJD","formatDate","getUTCHours","includeTime","ms2DateTimeLocal","getHours","cleanDate","dflt","isFinite","error","undefined","fracMatch","halfYearMatch","quarterToHalfYear","modDateFormat","fmt","x","formatter","replace","min","fracSecs","toFixed","MAXSECONDS","formatTime","tr","timePart","timeStr","sec","secStr","extraFormat","year","month","dayMonth","dayMonthYear","THREEDAYS","incrementMonth","dMonth","add","setUTCMonth","findExactDates","data","exactYears","exactMonths","exactDays","blankCount","di","i","day","dataCount"],"mappings":"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","sourcesContent":["'use strict';\n\nvar timeFormat = require('d3-time-format').timeFormat;\nvar isNumeric = require('fast-isnumeric');\n\nvar Loggers = require('./loggers');\nvar mod = require('./mod').mod;\n\nvar constants = require('../constants/numerical');\nvar BADNUM = constants.BADNUM;\nvar ONEDAY = constants.ONEDAY;\nvar ONEHOUR = constants.ONEHOUR;\nvar ONEMIN = constants.ONEMIN;\nvar ONESEC = constants.ONESEC;\nvar EPOCHJD = constants.EPOCHJD;\n\nvar Registry = require('../registry');\n\nvar utcFormat = require('d3-time-format').utcFormat;\n\nvar DATETIME_REGEXP = /^\\s*(-?\\d\\d\\d\\d|\\d\\d)(-(\\d?\\d)(-(\\d?\\d)([ Tt]([01]?\\d|2[0-3])(:([0-5]\\d)(:([0-5]\\d(\\.\\d+)?))?(Z|z|[+\\-]\\d\\d(:?\\d\\d)?)?)?)?)?)?\\s*$/m;\n// special regex for chinese calendars to support yyyy-mmi-dd etc for intercalary months\nvar DATETIME_REGEXP_CN = /^\\s*(-?\\d\\d\\d\\d|\\d\\d)(-(\\d?\\di?)(-(\\d?\\d)([ Tt]([01]?\\d|2[0-3])(:([0-5]\\d)(:([0-5]\\d(\\.\\d+)?))?(Z|z|[+\\-]\\d\\d(:?\\d\\d)?)?)?)?)?)?\\s*$/m;\n\n// for 2-digit years, the first year we map them onto\nvar YFIRST = new Date().getFullYear() - 70;\n\nfunction isWorldCalendar(calendar) {\n    return (\n        calendar &&\n        Registry.componentsRegistry.calendars &&\n        typeof calendar === 'string' && calendar !== 'gregorian'\n    );\n}\n\n/*\n * dateTick0: get the canonical tick for this calendar\n *\n * integer weekdays : Saturday: 0, Sunday: 1, Monday: 2, etc.\n */\nexports.dateTick0 = function(calendar, dayOfWeek) {\n    var tick0 = _dateTick0(calendar, !!dayOfWeek);\n    if(dayOfWeek < 2) return tick0;\n\n    var v = exports.dateTime2ms(tick0, calendar);\n    v += ONEDAY * (dayOfWeek - 1); // shift Sunday to Monday, etc.\n    return exports.ms2DateTime(v, 0, calendar);\n};\n\n/*\n * _dateTick0: get the canonical tick for this calendar\n *\n * bool sunday is for week ticks, shift it to a Sunday.\n */\nfunction _dateTick0(calendar, sunday) {\n    if(isWorldCalendar(calendar)) {\n        return sunday ?\n            Registry.getComponentMethod('calendars', 'CANONICAL_SUNDAY')[calendar] :\n            Registry.getComponentMethod('calendars', 'CANONICAL_TICK')[calendar];\n    } else {\n        return sunday ? '2000-01-02' : '2000-01-01';\n    }\n}\n\n/*\n * dfltRange: for each calendar, give a valid default range\n */\nexports.dfltRange = function(calendar) {\n    if(isWorldCalendar(calendar)) {\n        return Registry.getComponentMethod('calendars', 'DFLTRANGE')[calendar];\n    } else {\n        return ['2000-01-01', '2001-01-01'];\n    }\n};\n\n// is an object a javascript date?\nexports.isJSDate = function(v) {\n    return typeof v === 'object' && v !== null && typeof v.getTime === 'function';\n};\n\n// The absolute limits of our date-time system\n// This is a little weird: we use MIN_MS and MAX_MS in dateTime2ms\n// but we use dateTime2ms to calculate them (after defining it!)\nvar MIN_MS, MAX_MS;\n\n/**\n * dateTime2ms - turn a date object or string s into milliseconds\n * (relative to 1970-01-01, per javascript standard)\n * optional calendar (string) to use a non-gregorian calendar\n *\n * Returns BADNUM if it doesn't find a date\n *\n * strings should have the form:\n *\n *    -?YYYY-mm-dd<sep>HH:MM:SS.sss<tzInfo>?\n *\n * <sep>: space (our normal standard) or T or t (ISO-8601)\n * <tzInfo>: Z, z, [+\\-]HH:?MM or [+\\-]HH and we THROW IT AWAY\n * this format comes from https://tools.ietf.org/html/rfc3339#section-5.6\n * and 4.2.5.1 Difference between local time and UTC of day (ISO-8601)\n * but we allow it even with a space as the separator\n *\n * May truncate after any full field, and sss can be any length\n * even >3 digits, though javascript dates truncate to milliseconds,\n * we keep as much as javascript numeric precision can hold, but we only\n * report back up to 100 microsecond precision, because most dates support\n * this precision (close to 1970 support more, very far away support less)\n *\n * Expanded to support negative years to -9999 but you must always\n * give 4 digits, except for 2-digit positive years which we assume are\n * near the present time.\n * Note that we follow ISO 8601:2004: there *is* a year 0, which\n * is 1BC/BCE, and -1===2BC etc.\n *\n * World calendars: not all of these *have* agreed extensions to this full range,\n * if you have another calendar system but want a date range outside its validity,\n * you can use a gregorian date string prefixed with 'G' or 'g'.\n *\n * Where to cut off 2-digit years between 1900s and 2000s?\n * from https://docs.microsoft.com/en-us/office/troubleshoot/excel/two-digit-year-numbers#the-2029-rule:\n *   1930-2029 (the most retro of all...)\n * but in my mac chrome from eg. d=new Date(Date.parse('8/19/50')):\n *   1950-2049\n * by Java, from http://stackoverflow.com/questions/2024273/:\n *   now-80 - now+19\n * or FileMaker Pro, from\n *      https://fmhelp.filemaker.com/help/18/fmp/en/index.html#page/FMP_Help/dates-with-two-digit-years.html:\n *   now-70 - now+29\n * but python strptime etc, via\n *      http://docs.python.org/py3k/library/time.html:\n *   1969-2068 (super forward-looking, but static, not sliding!)\n *\n * lets go with now-70 to now+29, and if anyone runs into this problem\n * they can learn the hard way not to use 2-digit years, as no choice we\n * make now will cover all possibilities. mostly this will all be taken\n * care of in initial parsing, should only be an issue for hand-entered data\n * currently (2016) this range is:\n *   1946-2045\n */\nexports.dateTime2ms = function(s, calendar) {\n    // first check if s is a date object\n    if(exports.isJSDate(s)) {\n        // Convert to the UTC milliseconds that give the same\n        // hours as this date has in the local timezone\n        var tzOffset = s.getTimezoneOffset() * ONEMIN;\n        var offsetTweak = (s.getUTCMinutes() - s.getMinutes()) * ONEMIN +\n            (s.getUTCSeconds() - s.getSeconds()) * ONESEC +\n            (s.getUTCMilliseconds() - s.getMilliseconds());\n\n        if(offsetTweak) {\n            var comb = 3 * ONEMIN;\n            tzOffset = tzOffset - comb / 2 + mod(offsetTweak - tzOffset + comb / 2, comb);\n        }\n        s = Number(s) - tzOffset;\n        if(s >= MIN_MS && s <= MAX_MS) return s;\n        return BADNUM;\n    }\n    // otherwise only accept strings and numbers\n    if(typeof s !== 'string' && typeof s !== 'number') return BADNUM;\n\n    s = String(s);\n\n    var isWorld = isWorldCalendar(calendar);\n\n    // to handle out-of-range dates in international calendars, accept\n    // 'G' as a prefix to force the built-in gregorian calendar.\n    var s0 = s.charAt(0);\n    if(isWorld && (s0 === 'G' || s0 === 'g')) {\n        s = s.substr(1);\n        calendar = '';\n    }\n\n    var isChinese = isWorld && calendar.substr(0, 7) === 'chinese';\n\n    var match = s.match(isChinese ? DATETIME_REGEXP_CN : DATETIME_REGEXP);\n    if(!match) return BADNUM;\n    var y = match[1];\n    var m = match[3] || '1';\n    var d = Number(match[5] || 1);\n    var H = Number(match[7] || 0);\n    var M = Number(match[9] || 0);\n    var S = Number(match[11] || 0);\n\n    if(isWorld) {\n        // disallow 2-digit years for world calendars\n        if(y.length === 2) return BADNUM;\n        y = Number(y);\n\n        var cDate;\n        try {\n            var calInstance = Registry.getComponentMethod('calendars', 'getCal')(calendar);\n            if(isChinese) {\n                var isIntercalary = m.charAt(m.length - 1) === 'i';\n                m = parseInt(m, 10);\n                cDate = calInstance.newDate(y, calInstance.toMonthIndex(y, m, isIntercalary), d);\n            } else {\n                cDate = calInstance.newDate(y, Number(m), d);\n            }\n        } catch(e) { return BADNUM; } // Invalid ... date\n\n        if(!cDate) return BADNUM;\n\n        return ((cDate.toJD() - EPOCHJD) * ONEDAY) +\n            (H * ONEHOUR) + (M * ONEMIN) + (S * ONESEC);\n    }\n\n    if(y.length === 2) {\n        y = (Number(y) + 2000 - YFIRST) % 100 + YFIRST;\n    } else y = Number(y);\n\n    // new Date uses months from 0; subtract 1 here just so we\n    // don't have to do it again during the validity test below\n    m -= 1;\n\n    // javascript takes new Date(0..99,m,d) to mean 1900-1999, so\n    // to support years 0-99 we need to use setFullYear explicitly\n    // Note that 2000 is a leap year.\n    var date = new Date(Date.UTC(2000, m, d, H, M));\n    date.setUTCFullYear(y);\n\n    if(date.getUTCMonth() !== m) return BADNUM;\n    if(date.getUTCDate() !== d) return BADNUM;\n\n    return date.getTime() + S * ONESEC;\n};\n\nMIN_MS = exports.MIN_MS = exports.dateTime2ms('-9999');\nMAX_MS = exports.MAX_MS = exports.dateTime2ms('9999-12-31 23:59:59.9999');\n\n// is string s a date? (see above)\nexports.isDateTime = function(s, calendar) {\n    return (exports.dateTime2ms(s, calendar) !== BADNUM);\n};\n\n// pad a number with zeroes, to given # of digits before the decimal point\nfunction lpad(val, digits) {\n    return String(val + Math.pow(10, digits)).substr(1);\n}\n\n/**\n * Turn ms into string of the form YYYY-mm-dd HH:MM:SS.ssss\n * Crop any trailing zeros in time, except never stop right after hours\n * (we could choose to crop '-01' from date too but for now we always\n * show the whole date)\n * Optional range r is the data range that applies, also in ms.\n * If rng is big, the later parts of time will be omitted\n */\nvar NINETYDAYS = 90 * ONEDAY;\nvar THREEHOURS = 3 * ONEHOUR;\nvar FIVEMIN = 5 * ONEMIN;\nexports.ms2DateTime = function(ms, r, calendar) {\n    if(typeof ms !== 'number' || !(ms >= MIN_MS && ms <= MAX_MS)) return BADNUM;\n\n    if(!r) r = 0;\n\n    var msecTenths = Math.floor(mod(ms + 0.05, 1) * 10);\n    var msRounded = Math.round(ms - msecTenths / 10);\n    var dateStr, h, m, s, msec10, d;\n\n    if(isWorldCalendar(calendar)) {\n        var dateJD = Math.floor(msRounded / ONEDAY) + EPOCHJD;\n        var timeMs = Math.floor(mod(ms, ONEDAY));\n        try {\n            dateStr = Registry.getComponentMethod('calendars', 'getCal')(calendar)\n                .fromJD(dateJD).formatDate('yyyy-mm-dd');\n        } catch(e) {\n            // invalid date in this calendar - fall back to Gyyyy-mm-dd\n            dateStr = utcFormat('G%Y-%m-%d')(new Date(msRounded));\n        }\n\n        // yyyy does NOT guarantee 4-digit years. YYYY mostly does, but does\n        // other things for a few calendars, so we can't trust it. Just pad\n        // it manually (after the '-' if there is one)\n        if(dateStr.charAt(0) === '-') {\n            while(dateStr.length < 11) dateStr = '-0' + dateStr.substr(1);\n        } else {\n            while(dateStr.length < 10) dateStr = '0' + dateStr;\n        }\n\n        // TODO: if this is faster, we could use this block for extracting\n        // the time components of regular gregorian too\n        h = (r < NINETYDAYS) ? Math.floor(timeMs / ONEHOUR) : 0;\n        m = (r < NINETYDAYS) ? Math.floor((timeMs % ONEHOUR) / ONEMIN) : 0;\n        s = (r < THREEHOURS) ? Math.floor((timeMs % ONEMIN) / ONESEC) : 0;\n        msec10 = (r < FIVEMIN) ? (timeMs % ONESEC) * 10 + msecTenths : 0;\n    } else {\n        d = new Date(msRounded);\n\n        dateStr = utcFormat('%Y-%m-%d')(d);\n\n        // <90 days: add hours and minutes - never *only* add hours\n        h = (r < NINETYDAYS) ? d.getUTCHours() : 0;\n        m = (r < NINETYDAYS) ? d.getUTCMinutes() : 0;\n        // <3 hours: add seconds\n        s = (r < THREEHOURS) ? d.getUTCSeconds() : 0;\n        // <5 minutes: add ms (plus one extra digit, this is msec*10)\n        msec10 = (r < FIVEMIN) ? d.getUTCMilliseconds() * 10 + msecTenths : 0;\n    }\n\n    return includeTime(dateStr, h, m, s, msec10);\n};\n\n// For converting old-style milliseconds to date strings,\n// we use the local timezone rather than UTC like we use\n// everywhere else, both for backward compatibility and\n// because that's how people mostly use javasript date objects.\n// Clip one extra day off our date range though so we can't get\n// thrown beyond the range by the timezone shift.\nexports.ms2DateTimeLocal = function(ms) {\n    if(!(ms >= MIN_MS + ONEDAY && ms <= MAX_MS - ONEDAY)) return BADNUM;\n\n    var msecTenths = Math.floor(mod(ms + 0.05, 1) * 10);\n    var d = new Date(Math.round(ms - msecTenths / 10));\n    var dateStr = timeFormat('%Y-%m-%d')(d);\n    var h = d.getHours();\n    var m = d.getMinutes();\n    var s = d.getSeconds();\n    var msec10 = d.getUTCMilliseconds() * 10 + msecTenths;\n\n    return includeTime(dateStr, h, m, s, msec10);\n};\n\nfunction includeTime(dateStr, h, m, s, msec10) {\n    // include each part that has nonzero data in or after it\n    if(h || m || s || msec10) {\n        dateStr += ' ' + lpad(h, 2) + ':' + lpad(m, 2);\n        if(s || msec10) {\n            dateStr += ':' + lpad(s, 2);\n            if(msec10) {\n                var digits = 4;\n                while(msec10 % 10 === 0) {\n                    digits -= 1;\n                    msec10 /= 10;\n                }\n                dateStr += '.' + lpad(msec10, digits);\n            }\n        }\n    }\n    return dateStr;\n}\n\n// normalize date format to date string, in case it starts as\n// a Date object or milliseconds\n// optional dflt is the return value if cleaning fails\nexports.cleanDate = function(v, dflt, calendar) {\n    // let us use cleanDate to provide a missing default without an error\n    if(v === BADNUM) return dflt;\n    if(exports.isJSDate(v) || (typeof v === 'number' && isFinite(v))) {\n        // do not allow milliseconds (old) or jsdate objects (inherently\n        // described as gregorian dates) with world calendars\n        if(isWorldCalendar(calendar)) {\n            Loggers.error('JS Dates and milliseconds are incompatible with world calendars', v);\n            return dflt;\n        }\n\n        // NOTE: if someone puts in a year as a number rather than a string,\n        // this will mistakenly convert it thinking it's milliseconds from 1970\n        // that is: '2012' -> Jan. 1, 2012, but 2012 -> 2012 epoch milliseconds\n        v = exports.ms2DateTimeLocal(+v);\n        if(!v && dflt !== undefined) return dflt;\n    } else if(!exports.isDateTime(v, calendar)) {\n        Loggers.error('unrecognized date', v);\n        return dflt;\n    }\n    return v;\n};\n\n/*\n *  Date formatting for ticks and hovertext\n */\n\n/*\n * modDateFormat: Support world calendars, and add two items to\n * d3's vocabulary:\n * %{n}f where n is the max number of digits of fractional seconds\n * %h formats: half of the year as a decimal number [1,2]\n */\nvar fracMatch = /%\\d?f/g;\nvar halfYearMatch = /%h/g;\nvar quarterToHalfYear = {\n    '1': '1',\n    '2': '1',\n    '3': '2',\n    '4': '2',\n};\nfunction modDateFormat(fmt, x, formatter, calendar) {\n    fmt = fmt.replace(fracMatch, function(match) {\n        var digits = Math.min(+(match.charAt(1)) || 6, 6);\n        var fracSecs = ((x / 1000 % 1) + 2)\n            .toFixed(digits)\n            .substr(2).replace(/0+$/, '') || '0';\n        return fracSecs;\n    });\n\n    var d = new Date(Math.floor(x + 0.05));\n\n    fmt = fmt.replace(halfYearMatch, function() {\n        return quarterToHalfYear[formatter('%q')(d)];\n    });\n\n    if(isWorldCalendar(calendar)) {\n        try {\n            fmt = Registry.getComponentMethod('calendars', 'worldCalFmt')(fmt, x, calendar);\n        } catch(e) {\n            return 'Invalid';\n        }\n    }\n    return formatter(fmt)(d);\n}\n\n/*\n * formatTime: create a time string from:\n *   x: milliseconds\n *   tr: tickround ('M', 'S', or # digits)\n * only supports UTC times (where every day is 24 hours and 0 is at midnight)\n */\nvar MAXSECONDS = [59, 59.9, 59.99, 59.999, 59.9999];\nfunction formatTime(x, tr) {\n    var timePart = mod(x + 0.05, ONEDAY);\n\n    var timeStr = lpad(Math.floor(timePart / ONEHOUR), 2) + ':' +\n        lpad(mod(Math.floor(timePart / ONEMIN), 60), 2);\n\n    if(tr !== 'M') {\n        if(!isNumeric(tr)) tr = 0; // should only be 'S'\n\n        /*\n         * this is a weird one - and shouldn't come up unless people\n         * monkey with tick0 in weird ways, but we need to do something!\n         * IN PARTICULAR we had better not display garbage (see below)\n         * for numbers we always round to the nearest increment of the\n         * precision we're showing, and this seems like the right way to\n         * handle seconds and milliseconds, as they have a decimal point\n         * and people will interpret that to mean rounding like numbers.\n         * but for larger increments we floor the value: it's always\n         * 2013 until the ball drops on the new year. We could argue about\n         * which field it is where we start rounding (should 12:08:59\n         * round to 12:09 if we're stopping at minutes?) but for now I'll\n         * say we round seconds but floor everything else. BUT that means\n         * we need to never round up to 60 seconds, ie 23:59:60\n         */\n        var sec = Math.min(mod(x / ONESEC, 60), MAXSECONDS[tr]);\n\n        var secStr = (100 + sec).toFixed(tr).substr(1);\n        if(tr > 0) {\n            secStr = secStr.replace(/0+$/, '').replace(/[\\.]$/, '');\n        }\n\n        timeStr += ':' + secStr;\n    }\n    return timeStr;\n}\n\n/*\n * formatDate: turn a date into tick or hover label text.\n *\n *   x: milliseconds, the value to convert\n *   fmt: optional, an explicit format string (d3 format, even for world calendars)\n *   tr: tickround ('y', 'm', 'd', 'M', 'S', or # digits)\n *      used if no explicit fmt is provided\n *   formatter: locale-aware d3 date formatter for standard gregorian calendars\n *      should be the result of exports.getD3DateFormat(gd)\n *   calendar: optional string, the world calendar system to use\n *\n * returns the date/time as a string, potentially with the leading portion\n * on a separate line (after '\\n')\n * Note that this means if you provide an explicit format which includes '\\n'\n * the axis may choose to strip things after it when they don't change from\n * one tick to the next (as it does with automatic formatting)\n */\nexports.formatDate = function(x, fmt, tr, formatter, calendar, extraFormat) {\n    calendar = isWorldCalendar(calendar) && calendar;\n\n    if(!fmt) {\n        if(tr === 'y') fmt = extraFormat.year;\n        else if(tr === 'm') fmt = extraFormat.month;\n        else if(tr === 'd') {\n            fmt = extraFormat.dayMonth + '\\n' + extraFormat.year;\n        } else {\n            return formatTime(x, tr) + '\\n' + modDateFormat(extraFormat.dayMonthYear, x, formatter, calendar);\n        }\n    }\n\n    return modDateFormat(fmt, x, formatter, calendar);\n};\n\n/*\n * incrementMonth: make a new milliseconds value from the given one,\n * having changed the month\n *\n * special case for world calendars: multiples of 12 are treated as years,\n * even for calendar systems that don't have (always or ever) 12 months/year\n * TODO: perhaps we need a different code for year increments to support this?\n *\n * ms (number): the initial millisecond value\n * dMonth (int): the (signed) number of months to shift\n * calendar (string): the calendar system to use\n *\n * changing month does not (and CANNOT) always preserve day, since\n * months have different lengths. The worst example of this is:\n *   d = new Date(1970,0,31); d.setMonth(1) -> Feb 31 turns into Mar 3\n *\n * But we want to be able to iterate over the last day of each month,\n * regardless of what its number is.\n * So shift 3 days forward, THEN set the new month, then unshift:\n *   1/31 -> 2/28 (or 29) -> 3/31 -> 4/30 -> ...\n *\n * Note that odd behavior still exists if you start from the 26th-28th:\n *   1/28 -> 2/28 -> 3/31\n * but at least you can't shift any dates into the wrong month,\n * and ticks on these days incrementing by month would be very unusual\n */\nvar THREEDAYS = 3 * ONEDAY;\nexports.incrementMonth = function(ms, dMonth, calendar) {\n    calendar = isWorldCalendar(calendar) && calendar;\n\n    // pull time out and operate on pure dates, then add time back at the end\n    // this gives maximum precision - not that we *normally* care if we're\n    // incrementing by month, but better to be safe!\n    var timeMs = mod(ms, ONEDAY);\n    ms = Math.round(ms - timeMs);\n\n    if(calendar) {\n        try {\n            var dateJD = Math.round(ms / ONEDAY) + EPOCHJD;\n            var calInstance = Registry.getComponentMethod('calendars', 'getCal')(calendar);\n            var cDate = calInstance.fromJD(dateJD);\n\n            if(dMonth % 12) calInstance.add(cDate, dMonth, 'm');\n            else calInstance.add(cDate, dMonth / 12, 'y');\n\n            return (cDate.toJD() - EPOCHJD) * ONEDAY + timeMs;\n        } catch(e) {\n            Loggers.error('invalid ms ' + ms + ' in calendar ' + calendar);\n            // then keep going in gregorian even though the result will be 'Invalid'\n        }\n    }\n\n    var y = new Date(ms + THREEDAYS);\n    return y.setUTCMonth(y.getUTCMonth() + dMonth) + timeMs - THREEDAYS;\n};\n\n/*\n * findExactDates: what fraction of data is exact days, months, or years?\n *\n * data: array of millisecond values\n * calendar (string) the calendar to test against\n */\nexports.findExactDates = function(data, calendar) {\n    var exactYears = 0;\n    var exactMonths = 0;\n    var exactDays = 0;\n    var blankCount = 0;\n    var d;\n    var di;\n\n    var calInstance = (\n        isWorldCalendar(calendar) &&\n        Registry.getComponentMethod('calendars', 'getCal')(calendar)\n    );\n\n    for(var i = 0; i < data.length; i++) {\n        di = data[i];\n\n        // not date data at all\n        if(!isNumeric(di)) {\n            blankCount ++;\n            continue;\n        }\n\n        // not an exact date\n        if(di % ONEDAY) continue;\n\n        if(calInstance) {\n            try {\n                d = calInstance.fromJD(di / ONEDAY + EPOCHJD);\n                if(d.day() === 1) {\n                    if(d.month() === 1) exactYears++;\n                    else exactMonths++;\n                } else exactDays++;\n            } catch(e) {\n                // invalid date in this calendar - ignore it here.\n            }\n        } else {\n            d = new Date(di);\n            if(d.getUTCDate() === 1) {\n                if(d.getUTCMonth() === 0) exactYears++;\n                else exactMonths++;\n            } else exactDays++;\n        }\n    }\n    exactMonths += exactYears;\n    exactDays += exactMonths;\n\n    var dataCount = data.length - blankCount;\n\n    return {\n        exactYears: exactYears / dataCount,\n        exactMonths: exactMonths / dataCount,\n        exactDays: exactDays / dataCount\n    };\n};\n"]},"metadata":{},"sourceType":"script"}