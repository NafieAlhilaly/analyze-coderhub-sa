{"ast":null,"code":"'use strict';\n\nvar Lib = require('../../lib');\n\nvar Registry = require('../../registry');\n\nvar arrayEditor = require('../../plot_api/plot_template').arrayEditor;\n\nmodule.exports = {\n  hasClickToShow: hasClickToShow,\n  onClick: onClick\n};\n/*\n * hasClickToShow: does the given hoverData have ANY annotations which will\n * turn ON if we click here? (used by hover events to set cursor)\n *\n * gd: graphDiv\n * hoverData: a hoverData array, as included with the *plotly_hover* or\n *     *plotly_click* events in the `points` attribute\n *\n * returns: boolean\n */\n\nfunction hasClickToShow(gd, hoverData) {\n  var sets = getToggleSets(gd, hoverData);\n  return sets.on.length > 0 || sets.explicitOff.length > 0;\n}\n/*\n * onClick: perform the toggling (via Plotly.update) implied by clicking\n * at this hoverData\n *\n * gd: graphDiv\n * hoverData: a hoverData array, as included with the *plotly_hover* or\n *     *plotly_click* events in the `points` attribute\n *\n * returns: Promise that the update is complete\n */\n\n\nfunction onClick(gd, hoverData) {\n  var toggleSets = getToggleSets(gd, hoverData);\n  var onSet = toggleSets.on;\n  var offSet = toggleSets.off.concat(toggleSets.explicitOff);\n  var update = {};\n  var annotationsOut = gd._fullLayout.annotations;\n  var i, editHelpers;\n  if (!(onSet.length || offSet.length)) return;\n\n  for (i = 0; i < onSet.length; i++) {\n    editHelpers = arrayEditor(gd.layout, 'annotations', annotationsOut[onSet[i]]);\n    editHelpers.modifyItem('visible', true);\n    Lib.extendFlat(update, editHelpers.getUpdateObj());\n  }\n\n  for (i = 0; i < offSet.length; i++) {\n    editHelpers = arrayEditor(gd.layout, 'annotations', annotationsOut[offSet[i]]);\n    editHelpers.modifyItem('visible', false);\n    Lib.extendFlat(update, editHelpers.getUpdateObj());\n  }\n\n  return Registry.call('update', gd, {}, update);\n}\n/*\n * getToggleSets: find the annotations which will turn on or off at this\n * hoverData\n *\n * gd: graphDiv\n * hoverData: a hoverData array, as included with the *plotly_hover* or\n *     *plotly_click* events in the `points` attribute\n *\n * returns: {\n *   on: Array (indices of annotations to turn on),\n *   off: Array (indices to turn off because you're not hovering on them),\n *   explicitOff: Array (indices to turn off because you *are* hovering on them)\n * }\n */\n\n\nfunction getToggleSets(gd, hoverData) {\n  var annotations = gd._fullLayout.annotations;\n  var onSet = [];\n  var offSet = [];\n  var explicitOffSet = [];\n  var hoverLen = (hoverData || []).length;\n  var i, j, anni, showMode, pointj, xa, ya, toggleType;\n\n  for (i = 0; i < annotations.length; i++) {\n    anni = annotations[i];\n    showMode = anni.clicktoshow;\n\n    if (showMode) {\n      for (j = 0; j < hoverLen; j++) {\n        pointj = hoverData[j];\n        xa = pointj.xaxis;\n        ya = pointj.yaxis;\n\n        if (xa._id === anni.xref && ya._id === anni.yref && xa.d2r(pointj.x) === clickData2r(anni._xclick, xa) && ya.d2r(pointj.y) === clickData2r(anni._yclick, ya)) {\n          // match! toggle this annotation\n          // regardless of its clicktoshow mode\n          // but if it's onout mode, off is implicit\n          if (anni.visible) {\n            if (showMode === 'onout') toggleType = offSet;else toggleType = explicitOffSet;\n          } else {\n            toggleType = onSet;\n          }\n\n          toggleType.push(i);\n          break;\n        }\n      }\n\n      if (j === hoverLen) {\n        // no match - only turn this annotation OFF, and only if\n        // showmode is 'onout'\n        if (anni.visible && showMode === 'onout') offSet.push(i);\n      }\n    }\n  }\n\n  return {\n    on: onSet,\n    off: offSet,\n    explicitOff: explicitOffSet\n  };\n} // to handle log axes until v3\n\n\nfunction clickData2r(d, ax) {\n  return ax.type === 'log' ? ax.l2r(d) : ax.d2r(d);\n}","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/plotly.js/src/components/annotations/click.js"],"names":["Lib","require","Registry","arrayEditor","module","exports","hasClickToShow","onClick","gd","hoverData","sets","getToggleSets","on","length","explicitOff","toggleSets","onSet","offSet","off","concat","update","annotationsOut","_fullLayout","annotations","i","editHelpers","layout","modifyItem","extendFlat","getUpdateObj","call","explicitOffSet","hoverLen","j","anni","showMode","pointj","xa","ya","toggleType","clicktoshow","xaxis","yaxis","_id","xref","yref","d2r","x","clickData2r","_xclick","y","_yclick","visible","push","d","ax","type","l2r"],"mappings":"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","sourcesContent":["'use strict';\n\nvar Lib = require('../../lib');\nvar Registry = require('../../registry');\nvar arrayEditor = require('../../plot_api/plot_template').arrayEditor;\n\nmodule.exports = {\n    hasClickToShow: hasClickToShow,\n    onClick: onClick\n};\n\n/*\n * hasClickToShow: does the given hoverData have ANY annotations which will\n * turn ON if we click here? (used by hover events to set cursor)\n *\n * gd: graphDiv\n * hoverData: a hoverData array, as included with the *plotly_hover* or\n *     *plotly_click* events in the `points` attribute\n *\n * returns: boolean\n */\nfunction hasClickToShow(gd, hoverData) {\n    var sets = getToggleSets(gd, hoverData);\n    return sets.on.length > 0 || sets.explicitOff.length > 0;\n}\n\n/*\n * onClick: perform the toggling (via Plotly.update) implied by clicking\n * at this hoverData\n *\n * gd: graphDiv\n * hoverData: a hoverData array, as included with the *plotly_hover* or\n *     *plotly_click* events in the `points` attribute\n *\n * returns: Promise that the update is complete\n */\nfunction onClick(gd, hoverData) {\n    var toggleSets = getToggleSets(gd, hoverData);\n    var onSet = toggleSets.on;\n    var offSet = toggleSets.off.concat(toggleSets.explicitOff);\n    var update = {};\n    var annotationsOut = gd._fullLayout.annotations;\n    var i, editHelpers;\n\n    if(!(onSet.length || offSet.length)) return;\n\n    for(i = 0; i < onSet.length; i++) {\n        editHelpers = arrayEditor(gd.layout, 'annotations', annotationsOut[onSet[i]]);\n        editHelpers.modifyItem('visible', true);\n        Lib.extendFlat(update, editHelpers.getUpdateObj());\n    }\n\n    for(i = 0; i < offSet.length; i++) {\n        editHelpers = arrayEditor(gd.layout, 'annotations', annotationsOut[offSet[i]]);\n        editHelpers.modifyItem('visible', false);\n        Lib.extendFlat(update, editHelpers.getUpdateObj());\n    }\n\n    return Registry.call('update', gd, {}, update);\n}\n\n/*\n * getToggleSets: find the annotations which will turn on or off at this\n * hoverData\n *\n * gd: graphDiv\n * hoverData: a hoverData array, as included with the *plotly_hover* or\n *     *plotly_click* events in the `points` attribute\n *\n * returns: {\n *   on: Array (indices of annotations to turn on),\n *   off: Array (indices to turn off because you're not hovering on them),\n *   explicitOff: Array (indices to turn off because you *are* hovering on them)\n * }\n */\nfunction getToggleSets(gd, hoverData) {\n    var annotations = gd._fullLayout.annotations;\n    var onSet = [];\n    var offSet = [];\n    var explicitOffSet = [];\n    var hoverLen = (hoverData || []).length;\n\n    var i, j, anni, showMode, pointj, xa, ya, toggleType;\n\n    for(i = 0; i < annotations.length; i++) {\n        anni = annotations[i];\n        showMode = anni.clicktoshow;\n\n        if(showMode) {\n            for(j = 0; j < hoverLen; j++) {\n                pointj = hoverData[j];\n                xa = pointj.xaxis;\n                ya = pointj.yaxis;\n\n                if(xa._id === anni.xref &&\n                    ya._id === anni.yref &&\n                    xa.d2r(pointj.x) === clickData2r(anni._xclick, xa) &&\n                    ya.d2r(pointj.y) === clickData2r(anni._yclick, ya)\n                ) {\n                    // match! toggle this annotation\n                    // regardless of its clicktoshow mode\n                    // but if it's onout mode, off is implicit\n                    if(anni.visible) {\n                        if(showMode === 'onout') toggleType = offSet;\n                        else toggleType = explicitOffSet;\n                    } else {\n                        toggleType = onSet;\n                    }\n                    toggleType.push(i);\n                    break;\n                }\n            }\n\n            if(j === hoverLen) {\n                // no match - only turn this annotation OFF, and only if\n                // showmode is 'onout'\n                if(anni.visible && showMode === 'onout') offSet.push(i);\n            }\n        }\n    }\n\n    return {on: onSet, off: offSet, explicitOff: explicitOffSet};\n}\n\n// to handle log axes until v3\nfunction clickData2r(d, ax) {\n    return ax.type === 'log' ? ax.l2r(d) : ax.d2r(d);\n}\n"]},"metadata":{},"sourceType":"script"}