{"ast":null,"code":"/*\n * World Calendars\n * https://github.com/alexcjohnson/world-calendars\n *\n * Batch-converted from kbwood/calendars\n * Many thanks to Keith Wood and all of the contributors to the original project!\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/* http://keith-wood.name/calendars.html\n  Hebrew calendar for jQuery v2.0.2.\n  Written by Keith Wood (wood.keith{at}optusnet.com.au) August 2009.\n  Available under the MIT (http://keith-wood.name/licence.html) license. \n  Please attribute the author if you use it. */\nvar main = require('../main');\n\nvar assign = require('object-assign');\n/** Implementation of the Hebrew civil calendar.\n    Based on code from <a href=\"http://www.fourmilab.ch/documents/calendar/\">http://www.fourmilab.ch/documents/calendar/</a>.\n    See also <a href=\"http://en.wikipedia.org/wiki/Hebrew_calendar\">http://en.wikipedia.org/wiki/Hebrew_calendar</a>.\n    @class HebrewCalendar\n    @param [language=''] {string} The language code (default English) for localisation. */\n\n\nfunction HebrewCalendar(language) {\n  this.local = this.regionalOptions[language || ''] || this.regionalOptions[''];\n}\n\nHebrewCalendar.prototype = new main.baseCalendar();\nassign(HebrewCalendar.prototype, {\n  /** The calendar name.\n      @memberof HebrewCalendar */\n  name: 'Hebrew',\n\n  /** Julian date of start of Hebrew epoch: 7 October 3761 BCE.\n      @memberof HebrewCalendar */\n  jdEpoch: 347995.5,\n\n  /** Days per month in a common year.\n      @memberof HebrewCalendar */\n  daysPerMonth: [30, 29, 30, 29, 30, 29, 30, 29, 30, 29, 30, 29, 29],\n\n  /** <code>true</code> if has a year zero, <code>false</code> if not.\n      @memberof HebrewCalendar */\n  hasYearZero: false,\n\n  /** The minimum month number.\n      @memberof HebrewCalendar */\n  minMonth: 1,\n\n  /** The first month in the year.\n      @memberof HebrewCalendar */\n  firstMonth: 7,\n\n  /** The minimum day number.\n      @memberof HebrewCalendar */\n  minDay: 1,\n\n  /** Localisations for the plugin.\n      Entries are objects indexed by the language code ('' being the default US/English).\n      Each object has the following attributes.\n      @memberof HebrewCalendar\n      @property name {string} The calendar name.\n      @property epochs {string[]} The epoch names.\n      @property monthNames {string[]} The long names of the months of the year.\n      @property monthNamesShort {string[]} The short names of the months of the year.\n      @property dayNames {string[]} The long names of the days of the week.\n      @property dayNamesShort {string[]} The short names of the days of the week.\n      @property dayNamesMin {string[]} The minimal names of the days of the week.\n      @property dateFormat {string} The date format for this calendar.\n              See the options on <a href=\"BaseCalendar.html#formatDate\"><code>formatDate</code></a> for details.\n      @property firstDay {number} The number of the first day of the week, starting at 0.\n      @property isRTL {number} <code>true</code> if this localisation reads right-to-left. */\n  regionalOptions: {\n    // Localisations\n    '': {\n      name: 'Hebrew',\n      epochs: ['BAM', 'AM'],\n      monthNames: ['Nisan', 'Iyar', 'Sivan', 'Tammuz', 'Av', 'Elul', 'Tishrei', 'Cheshvan', 'Kislev', 'Tevet', 'Shevat', 'Adar', 'Adar II'],\n      monthNamesShort: ['Nis', 'Iya', 'Siv', 'Tam', 'Av', 'Elu', 'Tis', 'Che', 'Kis', 'Tev', 'She', 'Ada', 'Ad2'],\n      dayNames: ['Yom Rishon', 'Yom Sheni', 'Yom Shlishi', 'Yom Revi\\'i', 'Yom Chamishi', 'Yom Shishi', 'Yom Shabbat'],\n      dayNamesShort: ['Ris', 'She', 'Shl', 'Rev', 'Cha', 'Shi', 'Sha'],\n      dayNamesMin: ['Ri', 'She', 'Shl', 'Re', 'Ch', 'Shi', 'Sha'],\n      digits: null,\n      dateFormat: 'dd/mm/yyyy',\n      firstDay: 0,\n      isRTL: false\n    }\n  },\n\n  /** Determine whether this date is in a leap year.\n      @memberof HebrewCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @return {boolean} <code>true</code> if this is a leap year, <code>false</code> if not.\n      @throws Error if an invalid year or a different calendar used. */\n  leapYear: function (year) {\n    var date = this._validate(year, this.minMonth, this.minDay, main.local.invalidYear);\n\n    return this._leapYear(date.year());\n  },\n\n  /** Determine whether this date is in a leap year.\n      @memberof HebrewCalendar\n      @private\n      @param year {number} The year to examine.\n      @return {boolean} <code>true</code> if this is a leap year, <code>false</code> if not.\n      @throws Error if an invalid year or a different calendar used. */\n  _leapYear: function (year) {\n    year = year < 0 ? year + 1 : year;\n    return mod(year * 7 + 1, 19) < 7;\n  },\n\n  /** Retrieve the number of months in a year.\n      @memberof HebrewCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @return {number} The number of months.\n      @throws Error if an invalid year or a different calendar used. */\n  monthsInYear: function (year) {\n    this._validate(year, this.minMonth, this.minDay, main.local.invalidYear);\n\n    return this._leapYear(year.year ? year.year() : year) ? 13 : 12;\n  },\n\n  /** Determine the week of the year for a date.\n      @memberof HebrewCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @param [month] {number} The month to examine.\n      @param [day] {number} The day to examine.\n      @return {number} The week of the year.\n      @throws Error if an invalid date or a different calendar used. */\n  weekOfYear: function (year, month, day) {\n    // Find Sunday of this week starting on Sunday\n    var checkDate = this.newDate(year, month, day);\n    checkDate.add(-checkDate.dayOfWeek(), 'd');\n    return Math.floor((checkDate.dayOfYear() - 1) / 7) + 1;\n  },\n\n  /** Retrieve the number of days in a year.\n      @memberof HebrewCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @return {number} The number of days.\n      @throws Error if an invalid year or a different calendar used. */\n  daysInYear: function (year) {\n    var date = this._validate(year, this.minMonth, this.minDay, main.local.invalidYear);\n\n    year = date.year();\n    return this.toJD(year === -1 ? +1 : year + 1, 7, 1) - this.toJD(year, 7, 1);\n  },\n\n  /** Retrieve the number of days in a month.\n      @memberof HebrewCalendar\n      @param year {CDate|number} The date to examine or the year of the month.\n      @param [month] {number} The month.\n      @return {number} The number of days in this month.\n      @throws Error if an invalid month/year or a different calendar used. */\n  daysInMonth: function (year, month) {\n    if (year.year) {\n      month = year.month();\n      year = year.year();\n    }\n\n    this._validate(year, month, this.minDay, main.local.invalidMonth);\n\n    return month === 12 && this.leapYear(year) ? 30 : month === 8 && mod(this.daysInYear(year), 10) === 5 ? 30 : month === 9 && mod(this.daysInYear(year), 10) === 3 ? 29 : // Kislev in chaserah year\n    this.daysPerMonth[month - 1];\n  },\n\n  /** Determine whether this date is a week day.\n      @memberof HebrewCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @param [month] {number} The month to examine.\n      @param [day] {number} The day to examine.\n      @return {boolean} <code>true</code> if a week day, <code>false</code> if not.\n      @throws Error if an invalid date or a different calendar used. */\n  weekDay: function (year, month, day) {\n    return this.dayOfWeek(year, month, day) !== 6;\n  },\n\n  /** Retrieve additional information about a date - year type.\n      @memberof HebrewCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @param [month] {number} The month to examine.\n      @param [day] {number} The day to examine.\n      @return {object} Additional information - contents depends on calendar.\n      @throws Error if an invalid date or a different calendar used. */\n  extraInfo: function (year, month, day) {\n    var date = this._validate(year, month, day, main.local.invalidDate);\n\n    return {\n      yearType: (this.leapYear(date) ? 'embolismic' : 'common') + ' ' + ['deficient', 'regular', 'complete'][this.daysInYear(date) % 10 - 3]\n    };\n  },\n\n  /** Retrieve the Julian date equivalent for this date,\n      i.e. days since January 1, 4713 BCE Greenwich noon.\n      @memberof HebrewCalendar\n      @param year {CDate)|number} The date to convert or the year to convert.\n      @param [month] {number} The month to convert.\n      @param [day] {number} The day to convert.\n      @return {number} The equivalent Julian date.\n      @throws Error if an invalid date or a different calendar used. */\n  toJD: function (year, month, day) {\n    var date = this._validate(year, month, day, main.local.invalidDate);\n\n    year = date.year();\n    month = date.month();\n    day = date.day();\n    var adjYear = year <= 0 ? year + 1 : year;\n    var jd = this.jdEpoch + this._delay1(adjYear) + this._delay2(adjYear) + day + 1;\n\n    if (month < 7) {\n      for (var m = 7; m <= this.monthsInYear(year); m++) {\n        jd += this.daysInMonth(year, m);\n      }\n\n      for (var m = 1; m < month; m++) {\n        jd += this.daysInMonth(year, m);\n      }\n    } else {\n      for (var m = 7; m < month; m++) {\n        jd += this.daysInMonth(year, m);\n      }\n    }\n\n    return jd;\n  },\n\n  /** Test for delay of start of new year and to avoid\n      Sunday, Wednesday, or Friday as start of the new year.\n      @memberof HebrewCalendar\n      @private\n      @param year {number} The year to examine.\n      @return {number} The days to offset by. */\n  _delay1: function (year) {\n    var months = Math.floor((235 * year - 234) / 19);\n    var parts = 12084 + 13753 * months;\n    var day = months * 29 + Math.floor(parts / 25920);\n\n    if (mod(3 * (day + 1), 7) < 3) {\n      day++;\n    }\n\n    return day;\n  },\n\n  /** Check for delay in start of new year due to length of adjacent years.\n      @memberof HebrewCalendar\n      @private\n      @param year {number} The year to examine.\n      @return {number} The days to offset by. */\n  _delay2: function (year) {\n    var last = this._delay1(year - 1);\n\n    var present = this._delay1(year);\n\n    var next = this._delay1(year + 1);\n\n    return next - present === 356 ? 2 : present - last === 382 ? 1 : 0;\n  },\n\n  /** Create a new date from a Julian date.\n      @memberof HebrewCalendar\n      @param jd {number} The Julian date to convert.\n      @return {CDate} The equivalent date. */\n  fromJD: function (jd) {\n    jd = Math.floor(jd) + 0.5;\n    var year = Math.floor((jd - this.jdEpoch) * 98496.0 / 35975351.0) - 1;\n\n    while (jd >= this.toJD(year === -1 ? +1 : year + 1, 7, 1)) {\n      year++;\n    }\n\n    var month = jd < this.toJD(year, 1, 1) ? 7 : 1;\n\n    while (jd > this.toJD(year, month, this.daysInMonth(year, month))) {\n      month++;\n    }\n\n    var day = jd - this.toJD(year, month, 1) + 1;\n    return this.newDate(year, month, day);\n  }\n}); // Modulus function which works for non-integers.\n\nfunction mod(a, b) {\n  return a - b * Math.floor(a / b);\n} // Hebrew calendar implementation\n\n\nmain.calendars.hebrew = HebrewCalendar;","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/world-calendars/dist/calendars/hebrew.js"],"names":["main","require","assign","HebrewCalendar","language","local","regionalOptions","prototype","baseCalendar","name","jdEpoch","daysPerMonth","hasYearZero","minMonth","firstMonth","minDay","epochs","monthNames","monthNamesShort","dayNames","dayNamesShort","dayNamesMin","digits","dateFormat","firstDay","isRTL","leapYear","year","date","_validate","invalidYear","_leapYear","mod","monthsInYear","weekOfYear","month","day","checkDate","newDate","add","dayOfWeek","Math","floor","dayOfYear","daysInYear","toJD","daysInMonth","invalidMonth","weekDay","extraInfo","invalidDate","yearType","adjYear","jd","_delay1","_delay2","m","months","parts","last","present","next","fromJD","a","b","calendars","hebrew"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEC;AACD;AACA;AACA;AACA;AAEA,IAAIA,IAAI,GAAGC,OAAO,CAAC,SAAD,CAAlB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,eAAD,CAApB;AAGA;AACA;AACA;AACA;AACA;;;AACA,SAASE,cAAT,CAAwBC,QAAxB,EAAkC;AAC9B,OAAKC,KAAL,GAAa,KAAKC,eAAL,CAAqBF,QAAQ,IAAI,EAAjC,KAAwC,KAAKE,eAAL,CAAqB,EAArB,CAArD;AACH;;AAEDH,cAAc,CAACI,SAAf,GAA2B,IAAIP,IAAI,CAACQ,YAAT,EAA3B;AAEAN,MAAM,CAACC,cAAc,CAACI,SAAhB,EAA2B;AAC7B;AACJ;AACIE,EAAAA,IAAI,EAAE,QAHuB;;AAI7B;AACJ;AACIC,EAAAA,OAAO,EAAE,QANoB;;AAO7B;AACJ;AACIC,EAAAA,YAAY,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,EAAiD,EAAjD,CATe;;AAU7B;AACJ;AACIC,EAAAA,WAAW,EAAE,KAZgB;;AAa7B;AACJ;AACIC,EAAAA,QAAQ,EAAE,CAfmB;;AAgB7B;AACJ;AACIC,EAAAA,UAAU,EAAE,CAlBiB;;AAmB7B;AACJ;AACIC,EAAAA,MAAM,EAAE,CArBqB;;AAuB7B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIT,EAAAA,eAAe,EAAE;AAAE;AACf,QAAI;AACAG,MAAAA,IAAI,EAAE,QADN;AAEAO,MAAAA,MAAM,EAAE,CAAC,KAAD,EAAQ,IAAR,CAFR;AAGAC,MAAAA,UAAU,EAAE,CAAC,OAAD,EAAU,MAAV,EAAkB,OAAlB,EAA2B,QAA3B,EAAqC,IAArC,EAA2C,MAA3C,EACZ,SADY,EACD,UADC,EACW,QADX,EACqB,OADrB,EAC8B,QAD9B,EACwC,MADxC,EACgD,SADhD,CAHZ;AAKAC,MAAAA,eAAe,EAAE,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,IAA7B,EAAmC,KAAnC,EAA0C,KAA1C,EAAiD,KAAjD,EAAwD,KAAxD,EAA+D,KAA/D,EAAsE,KAAtE,EAA6E,KAA7E,EAAoF,KAApF,CALjB;AAMAC,MAAAA,QAAQ,EAAE,CAAC,YAAD,EAAe,WAAf,EAA4B,aAA5B,EAA2C,aAA3C,EAA0D,cAA1D,EAA0E,YAA1E,EAAwF,aAAxF,CANV;AAOAC,MAAAA,aAAa,EAAE,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,KAApC,EAA2C,KAA3C,CAPf;AAQAC,MAAAA,WAAW,EAAE,CAAC,IAAD,EAAM,KAAN,EAAY,KAAZ,EAAkB,IAAlB,EAAuB,IAAvB,EAA4B,KAA5B,EAAkC,KAAlC,CARb;AASAC,MAAAA,MAAM,EAAE,IATR;AAUAC,MAAAA,UAAU,EAAE,YAVZ;AAWAC,MAAAA,QAAQ,EAAE,CAXV;AAYAC,MAAAA,KAAK,EAAE;AAZP;AADS,GAtCY;;AAuD7B;AACJ;AACA;AACA;AACA;AACIC,EAAAA,QAAQ,EAAE,UAASC,IAAT,EAAe;AACrB,QAAIC,IAAI,GAAG,KAAKC,SAAL,CAAeF,IAAf,EAAqB,KAAKd,QAA1B,EAAoC,KAAKE,MAAzC,EAAiDf,IAAI,CAACK,KAAL,CAAWyB,WAA5D,CAAX;;AACA,WAAO,KAAKC,SAAL,CAAeH,IAAI,CAACD,IAAL,EAAf,CAAP;AACH,GA/D4B;;AAiE7B;AACJ;AACA;AACA;AACA;AACA;AACII,EAAAA,SAAS,EAAE,UAASJ,IAAT,EAAe;AACtBA,IAAAA,IAAI,GAAIA,IAAI,GAAG,CAAP,GAAWA,IAAI,GAAG,CAAlB,GAAsBA,IAA9B;AACA,WAAOK,GAAG,CAACL,IAAI,GAAG,CAAP,GAAW,CAAZ,EAAe,EAAf,CAAH,GAAwB,CAA/B;AACH,GA1E4B;;AA4E7B;AACJ;AACA;AACA;AACA;AACIM,EAAAA,YAAY,EAAE,UAASN,IAAT,EAAe;AACzB,SAAKE,SAAL,CAAeF,IAAf,EAAqB,KAAKd,QAA1B,EAAoC,KAAKE,MAAzC,EAAiDf,IAAI,CAACK,KAAL,CAAWyB,WAA5D;;AACA,WAAO,KAAKC,SAAL,CAAeJ,IAAI,CAACA,IAAL,GAAYA,IAAI,CAACA,IAAL,EAAZ,GAA0BA,IAAzC,IAAiD,EAAjD,GAAsD,EAA7D;AACH,GApF4B;;AAsF7B;AACJ;AACA;AACA;AACA;AACA;AACA;AACIO,EAAAA,UAAU,EAAE,UAASP,IAAT,EAAeQ,KAAf,EAAsBC,GAAtB,EAA2B;AACnC;AACA,QAAIC,SAAS,GAAG,KAAKC,OAAL,CAAaX,IAAb,EAAmBQ,KAAnB,EAA0BC,GAA1B,CAAhB;AACAC,IAAAA,SAAS,CAACE,GAAV,CAAc,CAACF,SAAS,CAACG,SAAV,EAAf,EAAsC,GAAtC;AACA,WAAOC,IAAI,CAACC,KAAL,CAAW,CAACL,SAAS,CAACM,SAAV,KAAwB,CAAzB,IAA8B,CAAzC,IAA8C,CAArD;AACH,GAlG4B;;AAoG7B;AACJ;AACA;AACA;AACA;AACIC,EAAAA,UAAU,EAAE,UAASjB,IAAT,EAAe;AACvB,QAAIC,IAAI,GAAG,KAAKC,SAAL,CAAeF,IAAf,EAAqB,KAAKd,QAA1B,EAAoC,KAAKE,MAAzC,EAAiDf,IAAI,CAACK,KAAL,CAAWyB,WAA5D,CAAX;;AACAH,IAAAA,IAAI,GAAGC,IAAI,CAACD,IAAL,EAAP;AACA,WAAO,KAAKkB,IAAL,CAAWlB,IAAI,KAAK,CAAC,CAAV,GAAc,CAAC,CAAf,GAAmBA,IAAI,GAAG,CAArC,EAAyC,CAAzC,EAA4C,CAA5C,IAAiD,KAAKkB,IAAL,CAAUlB,IAAV,EAAgB,CAAhB,EAAmB,CAAnB,CAAxD;AACH,GA7G4B;;AA+G7B;AACJ;AACA;AACA;AACA;AACA;AACImB,EAAAA,WAAW,EAAE,UAASnB,IAAT,EAAeQ,KAAf,EAAsB;AAC/B,QAAIR,IAAI,CAACA,IAAT,EAAe;AACXQ,MAAAA,KAAK,GAAGR,IAAI,CAACQ,KAAL,EAAR;AACAR,MAAAA,IAAI,GAAGA,IAAI,CAACA,IAAL,EAAP;AACH;;AACD,SAAKE,SAAL,CAAeF,IAAf,EAAqBQ,KAArB,EAA4B,KAAKpB,MAAjC,EAAyCf,IAAI,CAACK,KAAL,CAAW0C,YAApD;;AACA,WAAQZ,KAAK,KAAK,EAAV,IAAgB,KAAKT,QAAL,CAAcC,IAAd,CAAhB,GAAsC,EAAtC,GACCQ,KAAK,KAAK,CAAV,IAAeH,GAAG,CAAC,KAAKY,UAAL,CAAgBjB,IAAhB,CAAD,EAAwB,EAAxB,CAAH,KAAmC,CAAlD,GAAsD,EAAtD,GACAQ,KAAK,KAAK,CAAV,IAAeH,GAAG,CAAC,KAAKY,UAAL,CAAgBjB,IAAhB,CAAD,EAAwB,EAAxB,CAAH,KAAmC,CAAlD,GAAsD,EAAtD,GAA2D;AAC5D,SAAKhB,YAAL,CAAkBwB,KAAK,GAAG,CAA1B,CAHR;AAIH,GA/H4B;;AAiI7B;AACJ;AACA;AACA;AACA;AACA;AACA;AACIa,EAAAA,OAAO,EAAE,UAASrB,IAAT,EAAeQ,KAAf,EAAsBC,GAAtB,EAA2B;AAChC,WAAO,KAAKI,SAAL,CAAeb,IAAf,EAAqBQ,KAArB,EAA4BC,GAA5B,MAAqC,CAA5C;AACH,GA1I4B;;AA4I7B;AACJ;AACA;AACA;AACA;AACA;AACA;AACIa,EAAAA,SAAS,EAAE,UAAStB,IAAT,EAAeQ,KAAf,EAAsBC,GAAtB,EAA2B;AAClC,QAAIR,IAAI,GAAG,KAAKC,SAAL,CAAeF,IAAf,EAAqBQ,KAArB,EAA4BC,GAA5B,EAAiCpC,IAAI,CAACK,KAAL,CAAW6C,WAA5C,CAAX;;AACA,WAAO;AAACC,MAAAA,QAAQ,EAAE,CAAC,KAAKzB,QAAL,CAAcE,IAAd,IAAsB,YAAtB,GAAqC,QAAtC,IAAkD,GAAlD,GACd,CAAC,WAAD,EAAc,SAAd,EAAyB,UAAzB,EAAqC,KAAKgB,UAAL,CAAgBhB,IAAhB,IAAwB,EAAxB,GAA6B,CAAlE;AADG,KAAP;AAEH,GAvJ4B;;AAyJ7B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACIiB,EAAAA,IAAI,EAAE,UAASlB,IAAT,EAAeQ,KAAf,EAAsBC,GAAtB,EAA2B;AAC7B,QAAIR,IAAI,GAAG,KAAKC,SAAL,CAAeF,IAAf,EAAqBQ,KAArB,EAA4BC,GAA5B,EAAiCpC,IAAI,CAACK,KAAL,CAAW6C,WAA5C,CAAX;;AACAvB,IAAAA,IAAI,GAAGC,IAAI,CAACD,IAAL,EAAP;AACAQ,IAAAA,KAAK,GAAGP,IAAI,CAACO,KAAL,EAAR;AACAC,IAAAA,GAAG,GAAGR,IAAI,CAACQ,GAAL,EAAN;AACA,QAAIgB,OAAO,GAAIzB,IAAI,IAAI,CAAR,GAAYA,IAAI,GAAG,CAAnB,GAAuBA,IAAtC;AACA,QAAI0B,EAAE,GAAG,KAAK3C,OAAL,GAAe,KAAK4C,OAAL,CAAaF,OAAb,CAAf,GACL,KAAKG,OAAL,CAAaH,OAAb,CADK,GACmBhB,GADnB,GACyB,CADlC;;AAEA,QAAID,KAAK,GAAG,CAAZ,EAAe;AACX,WAAK,IAAIqB,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,KAAKvB,YAAL,CAAkBN,IAAlB,CAArB,EAA8C6B,CAAC,EAA/C,EAAmD;AAC/CH,QAAAA,EAAE,IAAI,KAAKP,WAAL,CAAiBnB,IAAjB,EAAuB6B,CAAvB,CAAN;AACH;;AACD,WAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGrB,KAApB,EAA2BqB,CAAC,EAA5B,EAAgC;AAC5BH,QAAAA,EAAE,IAAI,KAAKP,WAAL,CAAiBnB,IAAjB,EAAuB6B,CAAvB,CAAN;AACH;AACJ,KAPD,MAQK;AACD,WAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGrB,KAApB,EAA2BqB,CAAC,EAA5B,EAAgC;AAC5BH,QAAAA,EAAE,IAAI,KAAKP,WAAL,CAAiBnB,IAAjB,EAAuB6B,CAAvB,CAAN;AACH;AACJ;;AACD,WAAOH,EAAP;AACH,GAvL4B;;AAyL7B;AACJ;AACA;AACA;AACA;AACA;AACIC,EAAAA,OAAO,EAAE,UAAS3B,IAAT,EAAe;AACpB,QAAI8B,MAAM,GAAGhB,IAAI,CAACC,KAAL,CAAW,CAAC,MAAMf,IAAN,GAAa,GAAd,IAAqB,EAAhC,CAAb;AACA,QAAI+B,KAAK,GAAG,QAAQ,QAAQD,MAA5B;AACA,QAAIrB,GAAG,GAAGqB,MAAM,GAAG,EAAT,GAAchB,IAAI,CAACC,KAAL,CAAWgB,KAAK,GAAG,KAAnB,CAAxB;;AACA,QAAI1B,GAAG,CAAC,KAAKI,GAAG,GAAG,CAAX,CAAD,EAAgB,CAAhB,CAAH,GAAwB,CAA5B,EAA+B;AAC3BA,MAAAA,GAAG;AACN;;AACD,WAAOA,GAAP;AACH,GAvM4B;;AAyM7B;AACJ;AACA;AACA;AACA;AACImB,EAAAA,OAAO,EAAE,UAAS5B,IAAT,EAAe;AACpB,QAAIgC,IAAI,GAAG,KAAKL,OAAL,CAAa3B,IAAI,GAAG,CAApB,CAAX;;AACA,QAAIiC,OAAO,GAAG,KAAKN,OAAL,CAAa3B,IAAb,CAAd;;AACA,QAAIkC,IAAI,GAAG,KAAKP,OAAL,CAAa3B,IAAI,GAAG,CAApB,CAAX;;AACA,WAASkC,IAAI,GAAGD,OAAR,KAAqB,GAArB,GAA2B,CAA3B,GAAiCA,OAAO,GAAGD,IAAX,KAAqB,GAArB,GAA2B,CAA3B,GAA+B,CAAvE;AACH,GAnN4B;;AAqN7B;AACJ;AACA;AACA;AACIG,EAAAA,MAAM,EAAE,UAAST,EAAT,EAAa;AACjBA,IAAAA,EAAE,GAAGZ,IAAI,CAACC,KAAL,CAAWW,EAAX,IAAiB,GAAtB;AACA,QAAI1B,IAAI,GAAGc,IAAI,CAACC,KAAL,CAAY,CAACW,EAAE,GAAG,KAAK3C,OAAX,IAAsB,OAAvB,GAAkC,UAA7C,IAA2D,CAAtE;;AACA,WAAO2C,EAAE,IAAI,KAAKR,IAAL,CAAWlB,IAAI,KAAK,CAAC,CAAV,GAAc,CAAC,CAAf,GAAmBA,IAAI,GAAG,CAArC,EAAyC,CAAzC,EAA4C,CAA5C,CAAb,EAA6D;AACzDA,MAAAA,IAAI;AACP;;AACD,QAAIQ,KAAK,GAAIkB,EAAE,GAAG,KAAKR,IAAL,CAAUlB,IAAV,EAAgB,CAAhB,EAAmB,CAAnB,CAAN,GAA+B,CAA/B,GAAmC,CAA/C;;AACA,WAAO0B,EAAE,GAAG,KAAKR,IAAL,CAAUlB,IAAV,EAAgBQ,KAAhB,EAAuB,KAAKW,WAAL,CAAiBnB,IAAjB,EAAuBQ,KAAvB,CAAvB,CAAZ,EAAmE;AAC/DA,MAAAA,KAAK;AACR;;AACD,QAAIC,GAAG,GAAGiB,EAAE,GAAG,KAAKR,IAAL,CAAUlB,IAAV,EAAgBQ,KAAhB,EAAuB,CAAvB,CAAL,GAAiC,CAA3C;AACA,WAAO,KAAKG,OAAL,CAAaX,IAAb,EAAmBQ,KAAnB,EAA0BC,GAA1B,CAAP;AACH;AArO4B,CAA3B,CAAN,C,CAwOA;;AACA,SAASJ,GAAT,CAAa+B,CAAb,EAAgBC,CAAhB,EAAmB;AACf,SAAOD,CAAC,GAAIC,CAAC,GAAGvB,IAAI,CAACC,KAAL,CAAWqB,CAAC,GAAGC,CAAf,CAAhB;AACH,C,CAED;;;AACAhE,IAAI,CAACiE,SAAL,CAAeC,MAAf,GAAwB/D,cAAxB","sourcesContent":["/*\n * World Calendars\n * https://github.com/alexcjohnson/world-calendars\n *\n * Batch-converted from kbwood/calendars\n * Many thanks to Keith Wood and all of the contributors to the original project!\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n﻿/* http://keith-wood.name/calendars.html\n   Hebrew calendar for jQuery v2.0.2.\n   Written by Keith Wood (wood.keith{at}optusnet.com.au) August 2009.\n   Available under the MIT (http://keith-wood.name/licence.html) license. \n   Please attribute the author if you use it. */\n\nvar main = require('../main');\nvar assign = require('object-assign');\n\n\n/** Implementation of the Hebrew civil calendar.\n    Based on code from <a href=\"http://www.fourmilab.ch/documents/calendar/\">http://www.fourmilab.ch/documents/calendar/</a>.\n    See also <a href=\"http://en.wikipedia.org/wiki/Hebrew_calendar\">http://en.wikipedia.org/wiki/Hebrew_calendar</a>.\n    @class HebrewCalendar\n    @param [language=''] {string} The language code (default English) for localisation. */\nfunction HebrewCalendar(language) {\n    this.local = this.regionalOptions[language || ''] || this.regionalOptions[''];\n}\n\nHebrewCalendar.prototype = new main.baseCalendar;\n\nassign(HebrewCalendar.prototype, {\n    /** The calendar name.\n        @memberof HebrewCalendar */\n    name: 'Hebrew',\n    /** Julian date of start of Hebrew epoch: 7 October 3761 BCE.\n        @memberof HebrewCalendar */\n    jdEpoch: 347995.5,\n    /** Days per month in a common year.\n        @memberof HebrewCalendar */\n    daysPerMonth: [30, 29, 30, 29, 30, 29, 30, 29, 30, 29, 30, 29, 29],\n    /** <code>true</code> if has a year zero, <code>false</code> if not.\n        @memberof HebrewCalendar */\n    hasYearZero: false,\n    /** The minimum month number.\n        @memberof HebrewCalendar */\n    minMonth: 1,\n    /** The first month in the year.\n        @memberof HebrewCalendar */\n    firstMonth: 7,\n    /** The minimum day number.\n        @memberof HebrewCalendar */\n    minDay: 1,\n\n    /** Localisations for the plugin.\n        Entries are objects indexed by the language code ('' being the default US/English).\n        Each object has the following attributes.\n        @memberof HebrewCalendar\n        @property name {string} The calendar name.\n        @property epochs {string[]} The epoch names.\n        @property monthNames {string[]} The long names of the months of the year.\n        @property monthNamesShort {string[]} The short names of the months of the year.\n        @property dayNames {string[]} The long names of the days of the week.\n        @property dayNamesShort {string[]} The short names of the days of the week.\n        @property dayNamesMin {string[]} The minimal names of the days of the week.\n        @property dateFormat {string} The date format for this calendar.\n                See the options on <a href=\"BaseCalendar.html#formatDate\"><code>formatDate</code></a> for details.\n        @property firstDay {number} The number of the first day of the week, starting at 0.\n        @property isRTL {number} <code>true</code> if this localisation reads right-to-left. */\n    regionalOptions: { // Localisations\n        '': {\n            name: 'Hebrew',\n            epochs: ['BAM', 'AM'],\n            monthNames: ['Nisan', 'Iyar', 'Sivan', 'Tammuz', 'Av', 'Elul',\n            'Tishrei', 'Cheshvan', 'Kislev', 'Tevet', 'Shevat', 'Adar', 'Adar II'],\n            monthNamesShort: ['Nis', 'Iya', 'Siv', 'Tam', 'Av', 'Elu', 'Tis', 'Che', 'Kis', 'Tev', 'She', 'Ada', 'Ad2'],\n            dayNames: ['Yom Rishon', 'Yom Sheni', 'Yom Shlishi', 'Yom Revi\\'i', 'Yom Chamishi', 'Yom Shishi', 'Yom Shabbat'],\n            dayNamesShort: ['Ris', 'She', 'Shl', 'Rev', 'Cha', 'Shi', 'Sha'],\n            dayNamesMin: ['Ri','She','Shl','Re','Ch','Shi','Sha'],\n            digits: null,\n            dateFormat: 'dd/mm/yyyy',\n            firstDay: 0,\n            isRTL: false\n        }\n    },\n\n    /** Determine whether this date is in a leap year.\n        @memberof HebrewCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @return {boolean} <code>true</code> if this is a leap year, <code>false</code> if not.\n        @throws Error if an invalid year or a different calendar used. */\n    leapYear: function(year) {\n        var date = this._validate(year, this.minMonth, this.minDay, main.local.invalidYear);\n        return this._leapYear(date.year());\n    },\n\n    /** Determine whether this date is in a leap year.\n        @memberof HebrewCalendar\n        @private\n        @param year {number} The year to examine.\n        @return {boolean} <code>true</code> if this is a leap year, <code>false</code> if not.\n        @throws Error if an invalid year or a different calendar used. */\n    _leapYear: function(year) {\n        year = (year < 0 ? year + 1 : year);\n        return mod(year * 7 + 1, 19) < 7;\n    },\n\n    /** Retrieve the number of months in a year.\n        @memberof HebrewCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @return {number} The number of months.\n        @throws Error if an invalid year or a different calendar used. */\n    monthsInYear: function(year) {\n        this._validate(year, this.minMonth, this.minDay, main.local.invalidYear);\n        return this._leapYear(year.year ? year.year() : year) ? 13 : 12;\n    },\n\n    /** Determine the week of the year for a date.\n        @memberof HebrewCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @param [month] {number} The month to examine.\n        @param [day] {number} The day to examine.\n        @return {number} The week of the year.\n        @throws Error if an invalid date or a different calendar used. */\n    weekOfYear: function(year, month, day) {\n        // Find Sunday of this week starting on Sunday\n        var checkDate = this.newDate(year, month, day);\n        checkDate.add(-checkDate.dayOfWeek(), 'd');\n        return Math.floor((checkDate.dayOfYear() - 1) / 7) + 1;\n    },\n\n    /** Retrieve the number of days in a year.\n        @memberof HebrewCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @return {number} The number of days.\n        @throws Error if an invalid year or a different calendar used. */\n    daysInYear: function(year) {\n        var date = this._validate(year, this.minMonth, this.minDay, main.local.invalidYear);\n        year = date.year();\n        return this.toJD((year === -1 ? +1 : year + 1), 7, 1) - this.toJD(year, 7, 1);\n    },\n\n    /** Retrieve the number of days in a month.\n        @memberof HebrewCalendar\n        @param year {CDate|number} The date to examine or the year of the month.\n        @param [month] {number} The month.\n        @return {number} The number of days in this month.\n        @throws Error if an invalid month/year or a different calendar used. */\n    daysInMonth: function(year, month) {\n        if (year.year) {\n            month = year.month();\n            year = year.year();\n        }\n        this._validate(year, month, this.minDay, main.local.invalidMonth);\n        return (month === 12 && this.leapYear(year) ? 30 : // Adar I\n                (month === 8 && mod(this.daysInYear(year), 10) === 5 ? 30 : // Cheshvan in shlemah year\n                (month === 9 && mod(this.daysInYear(year), 10) === 3 ? 29 : // Kislev in chaserah year\n                this.daysPerMonth[month - 1])));\n    },\n\n    /** Determine whether this date is a week day.\n        @memberof HebrewCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @param [month] {number} The month to examine.\n        @param [day] {number} The day to examine.\n        @return {boolean} <code>true</code> if a week day, <code>false</code> if not.\n        @throws Error if an invalid date or a different calendar used. */\n    weekDay: function(year, month, day) {\n        return this.dayOfWeek(year, month, day) !== 6;\n    },\n\n    /** Retrieve additional information about a date - year type.\n        @memberof HebrewCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @param [month] {number} The month to examine.\n        @param [day] {number} The day to examine.\n        @return {object} Additional information - contents depends on calendar.\n        @throws Error if an invalid date or a different calendar used. */\n    extraInfo: function(year, month, day) {\n        var date = this._validate(year, month, day, main.local.invalidDate);\n        return {yearType: (this.leapYear(date) ? 'embolismic' : 'common') + ' ' +\n            ['deficient', 'regular', 'complete'][this.daysInYear(date) % 10 - 3]};\n    },\n\n    /** Retrieve the Julian date equivalent for this date,\n        i.e. days since January 1, 4713 BCE Greenwich noon.\n        @memberof HebrewCalendar\n        @param year {CDate)|number} The date to convert or the year to convert.\n        @param [month] {number} The month to convert.\n        @param [day] {number} The day to convert.\n        @return {number} The equivalent Julian date.\n        @throws Error if an invalid date or a different calendar used. */\n    toJD: function(year, month, day) {\n        var date = this._validate(year, month, day, main.local.invalidDate);\n        year = date.year();\n        month = date.month();\n        day = date.day();\n        var adjYear = (year <= 0 ? year + 1 : year);\n        var jd = this.jdEpoch + this._delay1(adjYear) +\n            this._delay2(adjYear) + day + 1;\n        if (month < 7) {\n            for (var m = 7; m <= this.monthsInYear(year); m++) {\n                jd += this.daysInMonth(year, m);\n            }\n            for (var m = 1; m < month; m++) {\n                jd += this.daysInMonth(year, m);\n            }\n        }\n        else {\n            for (var m = 7; m < month; m++) {\n                jd += this.daysInMonth(year, m);\n            }\n        }\n        return jd;\n    },\n\n    /** Test for delay of start of new year and to avoid\n        Sunday, Wednesday, or Friday as start of the new year.\n        @memberof HebrewCalendar\n        @private\n        @param year {number} The year to examine.\n        @return {number} The days to offset by. */\n    _delay1: function(year) {\n        var months = Math.floor((235 * year - 234) / 19);\n        var parts = 12084 + 13753 * months;\n        var day = months * 29 + Math.floor(parts / 25920);\n        if (mod(3 * (day + 1), 7) < 3) {\n            day++;\n        }\n        return day;\n    },\n\n    /** Check for delay in start of new year due to length of adjacent years.\n        @memberof HebrewCalendar\n        @private\n        @param year {number} The year to examine.\n        @return {number} The days to offset by. */\n    _delay2: function(year) {\n        var last = this._delay1(year - 1);\n        var present = this._delay1(year);\n        var next = this._delay1(year + 1);\n        return ((next - present) === 356 ? 2 : ((present - last) === 382 ? 1 : 0));\n    },\n\n    /** Create a new date from a Julian date.\n        @memberof HebrewCalendar\n        @param jd {number} The Julian date to convert.\n        @return {CDate} The equivalent date. */\n    fromJD: function(jd) {\n        jd = Math.floor(jd) + 0.5;\n        var year = Math.floor(((jd - this.jdEpoch) * 98496.0) / 35975351.0) - 1;\n        while (jd >= this.toJD((year === -1 ? +1 : year + 1), 7, 1)) {\n            year++;\n        }\n        var month = (jd < this.toJD(year, 1, 1)) ? 7 : 1;\n        while (jd > this.toJD(year, month, this.daysInMonth(year, month))) {\n            month++;\n        }\n        var day = jd - this.toJD(year, month, 1) + 1;\n        return this.newDate(year, month, day);\n    }\n});\n\n// Modulus function which works for non-integers.\nfunction mod(a, b) {\n    return a - (b * Math.floor(a / b));\n}\n\n// Hebrew calendar implementation\nmain.calendars.hebrew = HebrewCalendar;\n\n"]},"metadata":{},"sourceType":"script"}