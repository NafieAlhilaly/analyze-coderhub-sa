{"ast":null,"code":"'use strict';\n\nvar paren = require('parenthesis');\n\nmodule.exports = function splitBy(string, separator, o) {\n  if (string == null) throw Error('First argument should be a string');\n  if (separator == null) throw Error('Separator should be a string or a RegExp');\n  if (!o) o = {};else if (typeof o === 'string' || Array.isArray(o)) {\n    o = {\n      ignore: o\n    };\n  }\n  if (o.escape == null) o.escape = true;\n  if (o.ignore == null) o.ignore = ['[]', '()', '{}', '<>', '\"\"', \"''\", '``', '“”', '«»'];else {\n    if (typeof o.ignore === 'string') {\n      o.ignore = [o.ignore];\n    }\n\n    o.ignore = o.ignore.map(function (pair) {\n      // '\"' → '\"\"'\n      if (pair.length === 1) pair = pair + pair;\n      return pair;\n    });\n  }\n  var tokens = paren.parse(string, {\n    flat: true,\n    brackets: o.ignore\n  });\n  var str = tokens[0];\n  var parts = str.split(separator); // join parts separated by escape\n\n  if (o.escape) {\n    var cleanParts = [];\n\n    for (var i = 0; i < parts.length; i++) {\n      var prev = parts[i];\n      var part = parts[i + 1];\n\n      if (prev[prev.length - 1] === '\\\\' && prev[prev.length - 2] !== '\\\\') {\n        cleanParts.push(prev + separator + part);\n        i++;\n      } else {\n        cleanParts.push(prev);\n      }\n    }\n\n    parts = cleanParts;\n  } // open parens pack & apply unquotes, if any\n\n\n  for (var i = 0; i < parts.length; i++) {\n    tokens[0] = parts[i];\n    parts[i] = paren.stringify(tokens, {\n      flat: true\n    });\n  }\n\n  return parts;\n};","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/string-split-by/index.js"],"names":["paren","require","module","exports","splitBy","string","separator","o","Error","Array","isArray","ignore","escape","map","pair","length","tokens","parse","flat","brackets","str","parts","split","cleanParts","i","prev","part","push","stringify"],"mappings":"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","sourcesContent":["'use strict'\r\n\r\nvar paren = require('parenthesis')\r\n\r\nmodule.exports = function splitBy (string, separator, o) {\r\n\tif (string == null) throw Error('First argument should be a string')\r\n\tif (separator == null) throw Error('Separator should be a string or a RegExp')\r\n\r\n\tif (!o) o = {}\r\n\telse if (typeof o === 'string' || Array.isArray(o)) {\r\n\t\to = {ignore: o}\r\n\t}\r\n\r\n\tif (o.escape == null) o.escape = true\r\n\tif (o.ignore == null) o.ignore = ['[]', '()', '{}', '<>', '\"\"', \"''\", '``', '“”', '«»']\r\n\telse {\r\n\t\tif (typeof o.ignore === 'string') {o.ignore = [o.ignore]}\r\n\r\n\t\to.ignore = o.ignore.map(function (pair) {\r\n\t\t\t// '\"' → '\"\"'\r\n\t\t\tif (pair.length === 1) pair = pair + pair\r\n\t\t\treturn pair\r\n\t\t})\r\n\t}\r\n\r\n\tvar tokens = paren.parse(string, {flat: true, brackets: o.ignore})\r\n\tvar str = tokens[0]\r\n\r\n\tvar parts = str.split(separator)\r\n\r\n\t// join parts separated by escape\r\n\tif (o.escape) {\r\n\t\tvar cleanParts = []\r\n\t\tfor (var i = 0; i < parts.length; i++) {\r\n\t\t\tvar prev = parts[i]\r\n\t\t\tvar part = parts[i + 1]\r\n\r\n\t\t\tif (prev[prev.length - 1] === '\\\\' && prev[prev.length - 2] !== '\\\\') {\r\n\t\t\t\tcleanParts.push(prev + separator + part)\r\n\t\t\t\ti++\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tcleanParts.push(prev)\r\n\t\t\t}\r\n\t\t}\r\n\t\tparts = cleanParts\r\n\t}\r\n\r\n\t// open parens pack & apply unquotes, if any\r\n\tfor (var i = 0; i < parts.length; i++) {\r\n\t\ttokens[0] = parts[i]\r\n\t\tparts[i] = paren.stringify(tokens, {flat: true})\r\n\t}\r\n\r\n\treturn parts\r\n}\r\n"]},"metadata":{},"sourceType":"script"}