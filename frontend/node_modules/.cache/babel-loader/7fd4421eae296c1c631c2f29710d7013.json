{"ast":null,"code":"// (c) Copyright 2016, Sean Connelly (@voidqk), http://syntheti.cc\n// MIT License\n// Project Home: https://github.com/voidqk/polybooljs\n//\n// used strictly for logging the processing of the algorithm... only useful if you intend on\n// looking under the covers (for pretty UI's or debugging)\n//\nfunction BuildLog() {\n  var my;\n  var nextSegmentId = 0;\n  var curVert = false;\n\n  function push(type, data) {\n    my.list.push({\n      type: type,\n      data: data ? JSON.parse(JSON.stringify(data)) : void 0\n    });\n    return my;\n  }\n\n  my = {\n    list: [],\n    segmentId: function segmentId() {\n      return nextSegmentId++;\n    },\n    checkIntersection: function checkIntersection(seg1, seg2) {\n      return push('check', {\n        seg1: seg1,\n        seg2: seg2\n      });\n    },\n    segmentChop: function segmentChop(seg, end) {\n      push('div_seg', {\n        seg: seg,\n        pt: end\n      });\n      return push('chop', {\n        seg: seg,\n        pt: end\n      });\n    },\n    statusRemove: function statusRemove(seg) {\n      return push('pop_seg', {\n        seg: seg\n      });\n    },\n    segmentUpdate: function segmentUpdate(seg) {\n      return push('seg_update', {\n        seg: seg\n      });\n    },\n    segmentNew: function segmentNew(seg, primary) {\n      return push('new_seg', {\n        seg: seg,\n        primary: primary\n      });\n    },\n    segmentRemove: function segmentRemove(seg) {\n      return push('rem_seg', {\n        seg: seg\n      });\n    },\n    tempStatus: function tempStatus(seg, above, below) {\n      return push('temp_status', {\n        seg: seg,\n        above: above,\n        below: below\n      });\n    },\n    rewind: function rewind(seg) {\n      return push('rewind', {\n        seg: seg\n      });\n    },\n    status: function status(seg, above, below) {\n      return push('status', {\n        seg: seg,\n        above: above,\n        below: below\n      });\n    },\n    vert: function vert(x) {\n      if (x === curVert) return my;\n      curVert = x;\n      return push('vert', {\n        x: x\n      });\n    },\n    log: function log(data) {\n      if (typeof data !== 'string') data = JSON.stringify(data, false, '  ');\n      return push('log', {\n        txt: data\n      });\n    },\n    reset: function reset() {\n      return push('reset');\n    },\n    selected: function selected(segs) {\n      return push('selected', {\n        segs: segs\n      });\n    },\n    chainStart: function chainStart(seg) {\n      return push('chain_start', {\n        seg: seg\n      });\n    },\n    chainRemoveHead: function chainRemoveHead(index, pt) {\n      return push('chain_rem_head', {\n        index: index,\n        pt: pt\n      });\n    },\n    chainRemoveTail: function chainRemoveTail(index, pt) {\n      return push('chain_rem_tail', {\n        index: index,\n        pt: pt\n      });\n    },\n    chainNew: function chainNew(pt1, pt2) {\n      return push('chain_new', {\n        pt1: pt1,\n        pt2: pt2\n      });\n    },\n    chainMatch: function chainMatch(index) {\n      return push('chain_match', {\n        index: index\n      });\n    },\n    chainClose: function chainClose(index) {\n      return push('chain_close', {\n        index: index\n      });\n    },\n    chainAddHead: function chainAddHead(index, pt) {\n      return push('chain_add_head', {\n        index: index,\n        pt: pt\n      });\n    },\n    chainAddTail: function chainAddTail(index, pt) {\n      return push('chain_add_tail', {\n        index: index,\n        pt: pt\n      });\n    },\n    chainConnect: function chainConnect(index1, index2) {\n      return push('chain_con', {\n        index1: index1,\n        index2: index2\n      });\n    },\n    chainReverse: function chainReverse(index) {\n      return push('chain_rev', {\n        index: index\n      });\n    },\n    chainJoin: function chainJoin(index1, index2) {\n      return push('chain_join', {\n        index1: index1,\n        index2: index2\n      });\n    },\n    done: function done() {\n      return push('done');\n    }\n  };\n  return my;\n}\n\nmodule.exports = BuildLog;","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/polybooljs/lib/build-log.js"],"names":["BuildLog","my","nextSegmentId","curVert","push","type","data","list","JSON","parse","stringify","segmentId","checkIntersection","seg1","seg2","segmentChop","seg","end","pt","statusRemove","segmentUpdate","segmentNew","primary","segmentRemove","tempStatus","above","below","rewind","status","vert","x","log","txt","reset","selected","segs","chainStart","chainRemoveHead","index","chainRemoveTail","chainNew","pt1","pt2","chainMatch","chainClose","chainAddHead","chainAddTail","chainConnect","index1","index2","chainReverse","chainJoin","done","module","exports"],"mappings":"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","sourcesContent":["// (c) Copyright 2016, Sean Connelly (@voidqk), http://syntheti.cc\n// MIT License\n// Project Home: https://github.com/voidqk/polybooljs\n\n//\n// used strictly for logging the processing of the algorithm... only useful if you intend on\n// looking under the covers (for pretty UI's or debugging)\n//\n\nfunction BuildLog(){\n\tvar my;\n\tvar nextSegmentId = 0;\n\tvar curVert = false;\n\n\tfunction push(type, data){\n\t\tmy.list.push({\n\t\t\ttype: type,\n\t\t\tdata: data ? JSON.parse(JSON.stringify(data)) : void 0\n\t\t});\n\t\treturn my;\n\t}\n\n\tmy = {\n\t\tlist: [],\n\t\tsegmentId: function(){\n\t\t\treturn nextSegmentId++;\n\t\t},\n\t\tcheckIntersection: function(seg1, seg2){\n\t\t\treturn push('check', { seg1: seg1, seg2: seg2 });\n\t\t},\n\t\tsegmentChop: function(seg, end){\n\t\t\tpush('div_seg', { seg: seg, pt: end });\n\t\t\treturn push('chop', { seg: seg, pt: end });\n\t\t},\n\t\tstatusRemove: function(seg){\n\t\t\treturn push('pop_seg', { seg: seg });\n\t\t},\n\t\tsegmentUpdate: function(seg){\n\t\t\treturn push('seg_update', { seg: seg });\n\t\t},\n\t\tsegmentNew: function(seg, primary){\n\t\t\treturn push('new_seg', { seg: seg, primary: primary });\n\t\t},\n\t\tsegmentRemove: function(seg){\n\t\t\treturn push('rem_seg', { seg: seg });\n\t\t},\n\t\ttempStatus: function(seg, above, below){\n\t\t\treturn push('temp_status', { seg: seg, above: above, below: below });\n\t\t},\n\t\trewind: function(seg){\n\t\t\treturn push('rewind', { seg: seg });\n\t\t},\n\t\tstatus: function(seg, above, below){\n\t\t\treturn push('status', { seg: seg, above: above, below: below });\n\t\t},\n\t\tvert: function(x){\n\t\t\tif (x === curVert)\n\t\t\t\treturn my;\n\t\t\tcurVert = x;\n\t\t\treturn push('vert', { x: x });\n\t\t},\n\t\tlog: function(data){\n\t\t\tif (typeof data !== 'string')\n\t\t\t\tdata = JSON.stringify(data, false, '  ');\n\t\t\treturn push('log', { txt: data });\n\t\t},\n\t\treset: function(){\n\t\t\treturn push('reset');\n\t\t},\n\t\tselected: function(segs){\n\t\t\treturn push('selected', { segs: segs });\n\t\t},\n\t\tchainStart: function(seg){\n\t\t\treturn push('chain_start', { seg: seg });\n\t\t},\n\t\tchainRemoveHead: function(index, pt){\n\t\t\treturn push('chain_rem_head', { index: index, pt: pt });\n\t\t},\n\t\tchainRemoveTail: function(index, pt){\n\t\t\treturn push('chain_rem_tail', { index: index, pt: pt });\n\t\t},\n\t\tchainNew: function(pt1, pt2){\n\t\t\treturn push('chain_new', { pt1: pt1, pt2: pt2 });\n\t\t},\n\t\tchainMatch: function(index){\n\t\t\treturn push('chain_match', { index: index });\n\t\t},\n\t\tchainClose: function(index){\n\t\t\treturn push('chain_close', { index: index });\n\t\t},\n\t\tchainAddHead: function(index, pt){\n\t\t\treturn push('chain_add_head', { index: index, pt: pt });\n\t\t},\n\t\tchainAddTail: function(index, pt){\n\t\t\treturn push('chain_add_tail', { index: index, pt: pt, });\n\t\t},\n\t\tchainConnect: function(index1, index2){\n\t\t\treturn push('chain_con', { index1: index1, index2: index2 });\n\t\t},\n\t\tchainReverse: function(index){\n\t\t\treturn push('chain_rev', { index: index });\n\t\t},\n\t\tchainJoin: function(index1, index2){\n\t\t\treturn push('chain_join', { index1: index1, index2: index2 });\n\t\t},\n\t\tdone: function(){\n\t\t\treturn push('done');\n\t\t}\n\t};\n\treturn my;\n}\n\nmodule.exports = BuildLog;\n"]},"metadata":{},"sourceType":"script"}