{"ast":null,"code":"/*\n * World Calendars\n * https://github.com/alexcjohnson/world-calendars\n *\n * Batch-converted from kbwood/calendars\n * Many thanks to Keith Wood and all of the contributors to the original project!\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/* http://keith-wood.name/calendars.html\n  Nepali calendar for jQuery v2.0.2.\n  Written by Artur Neumann (ict.projects{at}nepal.inf.org) April 2013.\n  Available under the MIT (http://keith-wood.name/licence.html) license. \n  Please attribute the author if you use it. */\nvar main = require('../main');\n\nvar assign = require('object-assign');\n/** Implementation of the Nepali civil calendar.\n    Based on the ideas from \n    <a href=\"http://codeissue.com/articles/a04e050dea7468f/algorithm-to-convert-english-date-to-nepali-date-using-c-net\">http://codeissue.com/articles/a04e050dea7468f/algorithm-to-convert-english-date-to-nepali-date-using-c-net</a>\n    and <a href=\"http://birenj2ee.blogspot.com/2011/04/nepali-calendar-in-java.html\">http://birenj2ee.blogspot.com/2011/04/nepali-calendar-in-java.html</a>\n    See also <a href=\"http://en.wikipedia.org/wiki/Nepali_calendar\">http://en.wikipedia.org/wiki/Nepali_calendar</a>\n    and <a href=\"https://en.wikipedia.org/wiki/Bikram_Samwat\">https://en.wikipedia.org/wiki/Bikram_Samwat</a>.\n    @class NepaliCalendar\n    @param [language=''] {string} The language code (default English) for localisation. */\n\n\nfunction NepaliCalendar(language) {\n  this.local = this.regionalOptions[language || ''] || this.regionalOptions[''];\n}\n\nNepaliCalendar.prototype = new main.baseCalendar();\nassign(NepaliCalendar.prototype, {\n  /** The calendar name.\n      @memberof NepaliCalendar */\n  name: 'Nepali',\n\n  /** Julian date of start of Nepali epoch: 14 April 57 BCE.\n      @memberof NepaliCalendar */\n  jdEpoch: 1700709.5,\n\n  /** Days per month in a common year.\n      @memberof NepaliCalendar */\n  daysPerMonth: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n\n  /** <code>true</code> if has a year zero, <code>false</code> if not.\n      @memberof NepaliCalendar */\n  hasYearZero: false,\n\n  /** The minimum month number.\n      @memberof NepaliCalendar */\n  minMonth: 1,\n\n  /** The first month in the year.\n      @memberof NepaliCalendar */\n  firstMonth: 1,\n\n  /** The minimum day number.\n      @memberof NepaliCalendar */\n  minDay: 1,\n\n  /** The number of days in the year.\n      @memberof NepaliCalendar */\n  daysPerYear: 365,\n\n  /** Localisations for the plugin.\n      Entries are objects indexed by the language code ('' being the default US/English).\n      Each object has the following attributes.\n      @memberof NepaliCalendar\n      @property name {string} The calendar name.\n      @property epochs {string[]} The epoch names.\n      @property monthNames {string[]} The long names of the months of the year.\n      @property monthNamesShort {string[]} The short names of the months of the year.\n      @property dayNames {string[]} The long names of the days of the week.\n      @property dayNamesShort {string[]} The short names of the days of the week.\n      @property dayNamesMin {string[]} The minimal names of the days of the week.\n      @property dateFormat {string} The date format for this calendar.\n              See the options on <a href=\"BaseCalendar.html#formatDate\"><code>formatDate</code></a> for details.\n      @property firstDay {number} The number of the first day of the week, starting at 0.\n      @property isRTL {number} <code>true</code> if this localisation reads right-to-left. */\n  regionalOptions: {\n    // Localisations\n    '': {\n      name: 'Nepali',\n      epochs: ['BBS', 'ABS'],\n      monthNames: ['Baisakh', 'Jestha', 'Ashadh', 'Shrawan', 'Bhadra', 'Ashwin', 'Kartik', 'Mangsir', 'Paush', 'Mangh', 'Falgun', 'Chaitra'],\n      monthNamesShort: ['Bai', 'Je', 'As', 'Shra', 'Bha', 'Ash', 'Kar', 'Mang', 'Pau', 'Ma', 'Fal', 'Chai'],\n      dayNames: ['Aaitabaar', 'Sombaar', 'Manglbaar', 'Budhabaar', 'Bihibaar', 'Shukrabaar', 'Shanibaar'],\n      dayNamesShort: ['Aaita', 'Som', 'Mangl', 'Budha', 'Bihi', 'Shukra', 'Shani'],\n      dayNamesMin: ['Aai', 'So', 'Man', 'Bu', 'Bi', 'Shu', 'Sha'],\n      digits: null,\n      dateFormat: 'dd/mm/yyyy',\n      firstDay: 1,\n      isRTL: false\n    }\n  },\n\n  /** Determine whether this date is in a leap year.\n      @memberof NepaliCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @return {boolean} <code>true</code> if this is a leap year, <code>false</code> if not.\n      @throws Error if an invalid year or a different calendar used. */\n  leapYear: function (year) {\n    return this.daysInYear(year) !== this.daysPerYear;\n  },\n\n  /** Determine the week of the year for a date.\n      @memberof NepaliCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @param [month] {number} The month to examine.\n      @param [day] {number} The day to examine.\n      @return {number} The week of the year.\n      @throws Error if an invalid date or a different calendar used. */\n  weekOfYear: function (year, month, day) {\n    // Find Sunday of this week starting on Sunday\n    var checkDate = this.newDate(year, month, day);\n    checkDate.add(-checkDate.dayOfWeek(), 'd');\n    return Math.floor((checkDate.dayOfYear() - 1) / 7) + 1;\n  },\n\n  /** Retrieve the number of days in a year.\n      @memberof NepaliCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @return {number} The number of days.\n      @throws Error if an invalid year or a different calendar used. */\n  daysInYear: function (year) {\n    var date = this._validate(year, this.minMonth, this.minDay, main.local.invalidYear);\n\n    year = date.year();\n\n    if (typeof this.NEPALI_CALENDAR_DATA[year] === 'undefined') {\n      return this.daysPerYear;\n    }\n\n    var daysPerYear = 0;\n\n    for (var month_number = this.minMonth; month_number <= 12; month_number++) {\n      daysPerYear += this.NEPALI_CALENDAR_DATA[year][month_number];\n    }\n\n    return daysPerYear;\n  },\n\n  /** Retrieve the number of days in a month.\n      @memberof NepaliCalendar\n      @param year {CDate|number| The date to examine or the year of the month.\n      @param [month] {number} The month.\n      @return {number} The number of days in this month.\n      @throws Error if an invalid month/year or a different calendar used. */\n  daysInMonth: function (year, month) {\n    if (year.year) {\n      month = year.month();\n      year = year.year();\n    }\n\n    this._validate(year, month, this.minDay, main.local.invalidMonth);\n\n    return typeof this.NEPALI_CALENDAR_DATA[year] === 'undefined' ? this.daysPerMonth[month - 1] : this.NEPALI_CALENDAR_DATA[year][month];\n  },\n\n  /** Determine whether this date is a week day.\n      @memberof NepaliCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @param [month] {number} The month to examine.\n      @param [day] {number} The day to examine.\n      @return {boolean} <code>true</code> if a week day, <code>false</code> if not.\n      @throws Error if an invalid date or a different calendar used. */\n  weekDay: function (year, month, day) {\n    return this.dayOfWeek(year, month, day) !== 6;\n  },\n\n  /** Retrieve the Julian date equivalent for this date,\n      i.e. days since January 1, 4713 BCE Greenwich noon.\n      @memberof NepaliCalendar\n      @param year {CDate|number} The date to convert or the year to convert.\n      @param [month] {number} The month to convert.\n      @param [day] {number} The day to convert.\n      @return {number} The equivalent Julian date.\n      @throws Error if an invalid date or a different calendar used. */\n  toJD: function (nepaliYear, nepaliMonth, nepaliDay) {\n    var date = this._validate(nepaliYear, nepaliMonth, nepaliDay, main.local.invalidDate);\n\n    nepaliYear = date.year();\n    nepaliMonth = date.month();\n    nepaliDay = date.day();\n    var gregorianCalendar = main.instance();\n    var gregorianDayOfYear = 0; // We will add all the days that went by since\n    // the 1st. January and then we can get the Gregorian Date\n\n    var nepaliMonthToCheck = nepaliMonth;\n    var nepaliYearToCheck = nepaliYear;\n\n    this._createMissingCalendarData(nepaliYear); // Get the correct year\n\n\n    var gregorianYear = nepaliYear - (nepaliMonthToCheck > 9 || nepaliMonthToCheck === 9 && nepaliDay >= this.NEPALI_CALENDAR_DATA[nepaliYearToCheck][0] ? 56 : 57); // First we add the amount of days in the actual Nepali month as the day of year in the\n    // Gregorian one because at least this days are gone since the 1st. Jan. \n\n    if (nepaliMonth !== 9) {\n      gregorianDayOfYear = nepaliDay;\n      nepaliMonthToCheck--;\n    } // Now we loop throw all Nepali month and add the amount of days to gregorianDayOfYear \n    // we do this till we reach Paush (9th month). 1st. January always falls in this month  \n\n\n    while (nepaliMonthToCheck !== 9) {\n      if (nepaliMonthToCheck <= 0) {\n        nepaliMonthToCheck = 12;\n        nepaliYearToCheck--;\n      }\n\n      gregorianDayOfYear += this.NEPALI_CALENDAR_DATA[nepaliYearToCheck][nepaliMonthToCheck];\n      nepaliMonthToCheck--;\n    } // If the date that has to be converted is in Paush (month no. 9) we have to do some other calculation\n\n\n    if (nepaliMonth === 9) {\n      // Add the days that are passed since the first day of Paush and substract the\n      // amount of days that lie between 1st. Jan and 1st Paush\n      gregorianDayOfYear += nepaliDay - this.NEPALI_CALENDAR_DATA[nepaliYearToCheck][0]; // For the first days of Paush we are now in negative values,\n      // because in the end of the gregorian year we substract\n      // 365 / 366 days (P.S. remember math in school + - gives -)\n\n      if (gregorianDayOfYear < 0) {\n        gregorianDayOfYear += gregorianCalendar.daysInYear(gregorianYear);\n      }\n    } else {\n      gregorianDayOfYear += this.NEPALI_CALENDAR_DATA[nepaliYearToCheck][9] - this.NEPALI_CALENDAR_DATA[nepaliYearToCheck][0];\n    }\n\n    return gregorianCalendar.newDate(gregorianYear, 1, 1).add(gregorianDayOfYear, 'd').toJD();\n  },\n\n  /** Create a new date from a Julian date.\n      @memberof NepaliCalendar\n      @param jd {number} The Julian date to convert.\n      @return {CDate} The equivalent date. */\n  fromJD: function (jd) {\n    var gregorianCalendar = main.instance();\n    var gregorianDate = gregorianCalendar.fromJD(jd);\n    var gregorianYear = gregorianDate.year();\n    var gregorianDayOfYear = gregorianDate.dayOfYear();\n    var nepaliYear = gregorianYear + 56; //this is not final, it could be also +57 but +56 is always true for 1st Jan.\n\n    this._createMissingCalendarData(nepaliYear);\n\n    var nepaliMonth = 9; // Jan 1 always fall in Nepali month Paush which is the 9th month of Nepali calendar.\n    // Get the Nepali day in Paush (month 9) of 1st January \n\n    var dayOfFirstJanInPaush = this.NEPALI_CALENDAR_DATA[nepaliYear][0]; // Check how many days are left of Paush .\n    // Days calculated from 1st Jan till the end of the actual Nepali month, \n    // we use this value to check if the gregorian Date is in the actual Nepali month.\n\n    var daysSinceJanFirstToEndOfNepaliMonth = this.NEPALI_CALENDAR_DATA[nepaliYear][nepaliMonth] - dayOfFirstJanInPaush + 1; // If the gregorian day-of-year is smaller o equal than the sum of days between the 1st January and \n    // the end of the actual nepali month we found the correct nepali month.\n    // Example: \n    // The 4th February 2011 is the gregorianDayOfYear 35 (31 days of January + 4)\n    // 1st January 2011 is in the nepali year 2067, where 1st. January is in the 17th day of Paush (9th month)\n    // In 2067 Paush has 30days, This means (30-17+1=14) there are 14days between 1st January and end of Paush \n    // (including 17th January)\n    // The gregorianDayOfYear (35) is bigger than 14, so we check the next month\n    // The next nepali month (Mangh) has 29 days \n    // 29+14=43, this is bigger than gregorianDayOfYear(35) so, we found the correct nepali month\n\n    while (gregorianDayOfYear > daysSinceJanFirstToEndOfNepaliMonth) {\n      nepaliMonth++;\n\n      if (nepaliMonth > 12) {\n        nepaliMonth = 1;\n        nepaliYear++;\n      }\n\n      daysSinceJanFirstToEndOfNepaliMonth += this.NEPALI_CALENDAR_DATA[nepaliYear][nepaliMonth];\n    } // The last step is to calculate the nepali day-of-month\n    // to continue our example from before:\n    // we calculated there are 43 days from 1st. January (17 Paush) till end of Mangh (29 days)\n    // when we subtract from this 43 days the day-of-year of the the Gregorian date (35),\n    // we know how far the searched day is away from the end of the Nepali month.\n    // So we simply subtract this number from the amount of days in this month (30) \n\n\n    var nepaliDayOfMonth = this.NEPALI_CALENDAR_DATA[nepaliYear][nepaliMonth] - (daysSinceJanFirstToEndOfNepaliMonth - gregorianDayOfYear);\n    return this.newDate(nepaliYear, nepaliMonth, nepaliDayOfMonth);\n  },\n\n  /** Creates missing data in the NEPALI_CALENDAR_DATA table.\n      This data will not be correct but just give an estimated result. Mostly -/+ 1 day\n      @private\n      @param nepaliYear {number} The missing year number. */\n  _createMissingCalendarData: function (nepaliYear) {\n    var tmp_calendar_data = this.daysPerMonth.slice(0);\n    tmp_calendar_data.unshift(17);\n\n    for (var nepaliYearToCreate = nepaliYear - 1; nepaliYearToCreate < nepaliYear + 2; nepaliYearToCreate++) {\n      if (typeof this.NEPALI_CALENDAR_DATA[nepaliYearToCreate] === 'undefined') {\n        this.NEPALI_CALENDAR_DATA[nepaliYearToCreate] = tmp_calendar_data;\n      }\n    }\n  },\n  NEPALI_CALENDAR_DATA: {\n    // These data are from http://www.ashesh.com.np\n    1970: [18, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n    1971: [18, 31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30],\n    1972: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],\n    1973: [19, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n    1974: [19, 31, 31, 32, 30, 31, 31, 30, 29, 30, 29, 30, 30],\n    1975: [18, 31, 31, 32, 32, 30, 31, 30, 29, 30, 29, 30, 30],\n    1976: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n    1977: [18, 31, 32, 31, 32, 31, 31, 29, 30, 29, 30, 29, 31],\n    1978: [18, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n    1979: [18, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n    1980: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n    1981: [18, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],\n    1982: [18, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n    1983: [18, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n    1984: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n    1985: [18, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],\n    1986: [18, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n    1987: [18, 31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n    1988: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n    1989: [18, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],\n    1990: [18, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n    1991: [18, 31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n    // These data are from http://nepalicalendar.rat32.com/index.php\n    1992: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n    1993: [18, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],\n    1994: [18, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n    1995: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],\n    1996: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n    1997: [18, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n    1998: [18, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n    1999: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n    2000: [17, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n    2001: [18, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n    2002: [18, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n    2003: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n    2004: [17, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n    2005: [18, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n    2006: [18, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n    2007: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n    2008: [17, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31],\n    2009: [18, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n    2010: [18, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n    2011: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n    2012: [17, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],\n    2013: [18, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n    2014: [18, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n    2015: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n    2016: [17, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],\n    2017: [18, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n    2018: [18, 31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n    2019: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n    2020: [17, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],\n    2021: [18, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n    2022: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],\n    2023: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n    2024: [17, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],\n    2025: [18, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n    2026: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n    2027: [17, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n    2028: [17, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n    2029: [18, 31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30],\n    2030: [17, 31, 32, 31, 32, 31, 30, 30, 30, 30, 30, 30, 31],\n    2031: [17, 31, 32, 31, 32, 31, 31, 31, 31, 31, 31, 31, 31],\n    2032: [17, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32],\n    2033: [18, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n    2034: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n    2035: [17, 30, 32, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31],\n    2036: [17, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n    2037: [18, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n    2038: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n    2039: [17, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],\n    2040: [17, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n    2041: [18, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n    2042: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n    2043: [17, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],\n    2044: [17, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n    2045: [18, 31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n    2046: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n    2047: [17, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],\n    2048: [17, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n    2049: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],\n    2050: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n    2051: [17, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],\n    2052: [17, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n    2053: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],\n    2054: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n    2055: [17, 31, 31, 32, 31, 31, 31, 30, 29, 30, 30, 29, 30],\n    2056: [17, 31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30],\n    2057: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n    2058: [17, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n    2059: [17, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n    2060: [17, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n    2061: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n    2062: [17, 30, 32, 31, 32, 31, 31, 29, 30, 29, 30, 29, 31],\n    2063: [17, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n    2064: [17, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n    2065: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n    2066: [17, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31],\n    2067: [17, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n    2068: [17, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n    2069: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n    2070: [17, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],\n    2071: [17, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n    2072: [17, 31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n    2073: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n    2074: [17, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],\n    2075: [17, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n    2076: [16, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],\n    2077: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n    2078: [17, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],\n    2079: [17, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n    2080: [16, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],\n    // These data are from http://www.ashesh.com.np/nepali-calendar/\n    2081: [17, 31, 31, 32, 32, 31, 30, 30, 30, 29, 30, 30, 30],\n    2082: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],\n    2083: [17, 31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30],\n    2084: [17, 31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30],\n    2085: [17, 31, 32, 31, 32, 31, 31, 30, 30, 29, 30, 30, 30],\n    2086: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],\n    2087: [16, 31, 31, 32, 31, 31, 31, 30, 30, 29, 30, 30, 30],\n    2088: [16, 30, 31, 32, 32, 30, 31, 30, 30, 29, 30, 30, 30],\n    2089: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],\n    2090: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],\n    2091: [16, 31, 31, 32, 31, 31, 31, 30, 30, 29, 30, 30, 30],\n    2092: [16, 31, 31, 32, 32, 31, 30, 30, 30, 29, 30, 30, 30],\n    2093: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],\n    2094: [17, 31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30],\n    2095: [17, 31, 31, 32, 31, 31, 31, 30, 29, 30, 30, 30, 30],\n    2096: [17, 30, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n    2097: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],\n    2098: [17, 31, 31, 32, 31, 31, 31, 29, 30, 29, 30, 30, 31],\n    2099: [17, 31, 31, 32, 31, 31, 31, 30, 29, 29, 30, 30, 30],\n    2100: [17, 31, 32, 31, 32, 30, 31, 30, 29, 30, 29, 30, 30]\n  }\n}); // Nepali calendar implementation\n\nmain.calendars.nepali = NepaliCalendar;","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/world-calendars/dist/calendars/nepali.js"],"names":["main","require","assign","NepaliCalendar","language","local","regionalOptions","prototype","baseCalendar","name","jdEpoch","daysPerMonth","hasYearZero","minMonth","firstMonth","minDay","daysPerYear","epochs","monthNames","monthNamesShort","dayNames","dayNamesShort","dayNamesMin","digits","dateFormat","firstDay","isRTL","leapYear","year","daysInYear","weekOfYear","month","day","checkDate","newDate","add","dayOfWeek","Math","floor","dayOfYear","date","_validate","invalidYear","NEPALI_CALENDAR_DATA","month_number","daysInMonth","invalidMonth","weekDay","toJD","nepaliYear","nepaliMonth","nepaliDay","invalidDate","gregorianCalendar","instance","gregorianDayOfYear","nepaliMonthToCheck","nepaliYearToCheck","_createMissingCalendarData","gregorianYear","fromJD","jd","gregorianDate","dayOfFirstJanInPaush","daysSinceJanFirstToEndOfNepaliMonth","nepaliDayOfMonth","tmp_calendar_data","slice","unshift","nepaliYearToCreate","calendars","nepali"],"mappings":"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","sourcesContent":["/*\n * World Calendars\n * https://github.com/alexcjohnson/world-calendars\n *\n * Batch-converted from kbwood/calendars\n * Many thanks to Keith Wood and all of the contributors to the original project!\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n﻿/* http://keith-wood.name/calendars.html\n   Nepali calendar for jQuery v2.0.2.\n   Written by Artur Neumann (ict.projects{at}nepal.inf.org) April 2013.\n   Available under the MIT (http://keith-wood.name/licence.html) license. \n   Please attribute the author if you use it. */\n\nvar main = require('../main');\nvar assign = require('object-assign');\n\n\n/** Implementation of the Nepali civil calendar.\n    Based on the ideas from \n    <a href=\"http://codeissue.com/articles/a04e050dea7468f/algorithm-to-convert-english-date-to-nepali-date-using-c-net\">http://codeissue.com/articles/a04e050dea7468f/algorithm-to-convert-english-date-to-nepali-date-using-c-net</a>\n    and <a href=\"http://birenj2ee.blogspot.com/2011/04/nepali-calendar-in-java.html\">http://birenj2ee.blogspot.com/2011/04/nepali-calendar-in-java.html</a>\n    See also <a href=\"http://en.wikipedia.org/wiki/Nepali_calendar\">http://en.wikipedia.org/wiki/Nepali_calendar</a>\n    and <a href=\"https://en.wikipedia.org/wiki/Bikram_Samwat\">https://en.wikipedia.org/wiki/Bikram_Samwat</a>.\n    @class NepaliCalendar\n    @param [language=''] {string} The language code (default English) for localisation. */\nfunction NepaliCalendar(language) {\n    this.local = this.regionalOptions[language || ''] || this.regionalOptions[''];\n}\n\nNepaliCalendar.prototype = new main.baseCalendar;\n\nassign(NepaliCalendar.prototype, {\n    /** The calendar name.\n        @memberof NepaliCalendar */\n    name: 'Nepali',\n    /** Julian date of start of Nepali epoch: 14 April 57 BCE.\n        @memberof NepaliCalendar */\n    jdEpoch: 1700709.5,\n    /** Days per month in a common year.\n        @memberof NepaliCalendar */\n    daysPerMonth: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n    /** <code>true</code> if has a year zero, <code>false</code> if not.\n        @memberof NepaliCalendar */\n    hasYearZero: false,\n    /** The minimum month number.\n        @memberof NepaliCalendar */\n    minMonth: 1,\n    /** The first month in the year.\n        @memberof NepaliCalendar */\n    firstMonth: 1,\n    /** The minimum day number.\n        @memberof NepaliCalendar */\n    minDay: 1, \n    /** The number of days in the year.\n        @memberof NepaliCalendar */\n    daysPerYear: 365,\n\n    /** Localisations for the plugin.\n        Entries are objects indexed by the language code ('' being the default US/English).\n        Each object has the following attributes.\n        @memberof NepaliCalendar\n        @property name {string} The calendar name.\n        @property epochs {string[]} The epoch names.\n        @property monthNames {string[]} The long names of the months of the year.\n        @property monthNamesShort {string[]} The short names of the months of the year.\n        @property dayNames {string[]} The long names of the days of the week.\n        @property dayNamesShort {string[]} The short names of the days of the week.\n        @property dayNamesMin {string[]} The minimal names of the days of the week.\n        @property dateFormat {string} The date format for this calendar.\n                See the options on <a href=\"BaseCalendar.html#formatDate\"><code>formatDate</code></a> for details.\n        @property firstDay {number} The number of the first day of the week, starting at 0.\n        @property isRTL {number} <code>true</code> if this localisation reads right-to-left. */\n    regionalOptions: { // Localisations\n        '': {\n            name: 'Nepali',\n            epochs: ['BBS', 'ABS'],\n            monthNames: ['Baisakh', 'Jestha', 'Ashadh', 'Shrawan', 'Bhadra', 'Ashwin',\n            'Kartik', 'Mangsir', 'Paush', 'Mangh', 'Falgun', 'Chaitra'],\n            monthNamesShort: ['Bai', 'Je', 'As', 'Shra', 'Bha', 'Ash', 'Kar', 'Mang', 'Pau', 'Ma', 'Fal', 'Chai'],\n            dayNames: ['Aaitabaar', 'Sombaar', 'Manglbaar', 'Budhabaar', 'Bihibaar', 'Shukrabaar', 'Shanibaar'],\n            dayNamesShort: ['Aaita', 'Som', 'Mangl', 'Budha', 'Bihi', 'Shukra', 'Shani'],\n            dayNamesMin: ['Aai', 'So', 'Man', 'Bu', 'Bi', 'Shu', 'Sha'],\n            digits: null,\n            dateFormat: 'dd/mm/yyyy',\n            firstDay: 1,\n            isRTL: false\n        }\n    },\n\n    /** Determine whether this date is in a leap year.\n        @memberof NepaliCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @return {boolean} <code>true</code> if this is a leap year, <code>false</code> if not.\n        @throws Error if an invalid year or a different calendar used. */\n    leapYear: function(year) {\n        return this.daysInYear(year) !== this.daysPerYear;\n    },\n\n    /** Determine the week of the year for a date.\n        @memberof NepaliCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @param [month] {number} The month to examine.\n        @param [day] {number} The day to examine.\n        @return {number} The week of the year.\n        @throws Error if an invalid date or a different calendar used. */\n    weekOfYear: function(year, month, day) {\n        // Find Sunday of this week starting on Sunday\n        var checkDate = this.newDate(year, month, day);\n        checkDate.add(-checkDate.dayOfWeek(), 'd');\n        return Math.floor((checkDate.dayOfYear() - 1) / 7) + 1;\n    },\n\n    /** Retrieve the number of days in a year.\n        @memberof NepaliCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @return {number} The number of days.\n        @throws Error if an invalid year or a different calendar used. */\n    daysInYear: function(year) {\n        var date = this._validate(year, this.minMonth, this.minDay, main.local.invalidYear);\n        year = date.year();\n        if (typeof this.NEPALI_CALENDAR_DATA[year] === 'undefined') {\n            return this.daysPerYear;\n        }\n        var daysPerYear = 0;\n        for (var month_number = this.minMonth; month_number <= 12; month_number++) {\n            daysPerYear += this.NEPALI_CALENDAR_DATA[year][month_number];\n        }\n        return daysPerYear;\n    },\n\n    /** Retrieve the number of days in a month.\n        @memberof NepaliCalendar\n        @param year {CDate|number| The date to examine or the year of the month.\n        @param [month] {number} The month.\n        @return {number} The number of days in this month.\n        @throws Error if an invalid month/year or a different calendar used. */\n    daysInMonth: function(year, month) {\n        if (year.year) {\n            month = year.month();\n            year = year.year();\n        }\n        this._validate(year, month, this.minDay, main.local.invalidMonth);\n        return (typeof this.NEPALI_CALENDAR_DATA[year] === 'undefined' ?\n            this.daysPerMonth[month - 1] : this.NEPALI_CALENDAR_DATA[year][month]);\n    },\n\n    /** Determine whether this date is a week day.\n        @memberof NepaliCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @param [month] {number} The month to examine.\n        @param [day] {number} The day to examine.\n        @return {boolean} <code>true</code> if a week day, <code>false</code> if not.\n        @throws Error if an invalid date or a different calendar used. */\n    weekDay: function(year, month, day) {\n        return this.dayOfWeek(year, month, day) !== 6;\n    },\n\n    /** Retrieve the Julian date equivalent for this date,\n        i.e. days since January 1, 4713 BCE Greenwich noon.\n        @memberof NepaliCalendar\n        @param year {CDate|number} The date to convert or the year to convert.\n        @param [month] {number} The month to convert.\n        @param [day] {number} The day to convert.\n        @return {number} The equivalent Julian date.\n        @throws Error if an invalid date or a different calendar used. */\n    toJD: function(nepaliYear, nepaliMonth, nepaliDay) {\n        var date = this._validate(nepaliYear, nepaliMonth, nepaliDay, main.local.invalidDate);\n        nepaliYear = date.year();\n        nepaliMonth = date.month();\n        nepaliDay = date.day();\n        var gregorianCalendar = main.instance();\n        var gregorianDayOfYear = 0; // We will add all the days that went by since\n        // the 1st. January and then we can get the Gregorian Date\n        var nepaliMonthToCheck = nepaliMonth;\n        var nepaliYearToCheck = nepaliYear;\n        this._createMissingCalendarData(nepaliYear);\n        // Get the correct year\n        var gregorianYear = nepaliYear - (nepaliMonthToCheck > 9 || (nepaliMonthToCheck === 9 &&\n            nepaliDay >= this.NEPALI_CALENDAR_DATA[nepaliYearToCheck][0]) ? 56 : 57);\n        // First we add the amount of days in the actual Nepali month as the day of year in the\n        // Gregorian one because at least this days are gone since the 1st. Jan. \n        if (nepaliMonth !== 9) {\n            gregorianDayOfYear = nepaliDay;\n            nepaliMonthToCheck--;\n        }\n        // Now we loop throw all Nepali month and add the amount of days to gregorianDayOfYear \n        // we do this till we reach Paush (9th month). 1st. January always falls in this month  \n        while (nepaliMonthToCheck !== 9) {\n            if (nepaliMonthToCheck <= 0) {\n                nepaliMonthToCheck = 12;\n                nepaliYearToCheck--;\n            }                \n            gregorianDayOfYear += this.NEPALI_CALENDAR_DATA[nepaliYearToCheck][nepaliMonthToCheck];\n            nepaliMonthToCheck--;\n        }        \n        // If the date that has to be converted is in Paush (month no. 9) we have to do some other calculation\n        if (nepaliMonth === 9) {\n            // Add the days that are passed since the first day of Paush and substract the\n            // amount of days that lie between 1st. Jan and 1st Paush\n            gregorianDayOfYear += nepaliDay - this.NEPALI_CALENDAR_DATA[nepaliYearToCheck][0];\n            // For the first days of Paush we are now in negative values,\n            // because in the end of the gregorian year we substract\n            // 365 / 366 days (P.S. remember math in school + - gives -)\n            if (gregorianDayOfYear < 0) {\n                gregorianDayOfYear += gregorianCalendar.daysInYear(gregorianYear);\n            }\n        }\n        else {\n            gregorianDayOfYear += this.NEPALI_CALENDAR_DATA[nepaliYearToCheck][9] -\n                this.NEPALI_CALENDAR_DATA[nepaliYearToCheck][0];\n        }        \n        return gregorianCalendar.newDate(gregorianYear, 1 ,1).add(gregorianDayOfYear, 'd').toJD();\n    },\n    \n    /** Create a new date from a Julian date.\n        @memberof NepaliCalendar\n        @param jd {number} The Julian date to convert.\n        @return {CDate} The equivalent date. */\n    fromJD: function(jd) {\n        var gregorianCalendar =  main.instance();\n        var gregorianDate = gregorianCalendar.fromJD(jd);\n        var gregorianYear = gregorianDate.year();\n        var gregorianDayOfYear = gregorianDate.dayOfYear();\n        var nepaliYear = gregorianYear + 56; //this is not final, it could be also +57 but +56 is always true for 1st Jan.\n        this._createMissingCalendarData(nepaliYear);\n        var nepaliMonth = 9; // Jan 1 always fall in Nepali month Paush which is the 9th month of Nepali calendar.\n        // Get the Nepali day in Paush (month 9) of 1st January \n        var dayOfFirstJanInPaush = this.NEPALI_CALENDAR_DATA[nepaliYear][0];\n        // Check how many days are left of Paush .\n        // Days calculated from 1st Jan till the end of the actual Nepali month, \n        // we use this value to check if the gregorian Date is in the actual Nepali month.\n        var daysSinceJanFirstToEndOfNepaliMonth =\n            this.NEPALI_CALENDAR_DATA[nepaliYear][nepaliMonth] - dayOfFirstJanInPaush + 1;\n        // If the gregorian day-of-year is smaller o equal than the sum of days between the 1st January and \n        // the end of the actual nepali month we found the correct nepali month.\n        // Example: \n        // The 4th February 2011 is the gregorianDayOfYear 35 (31 days of January + 4)\n        // 1st January 2011 is in the nepali year 2067, where 1st. January is in the 17th day of Paush (9th month)\n        // In 2067 Paush has 30days, This means (30-17+1=14) there are 14days between 1st January and end of Paush \n        // (including 17th January)\n        // The gregorianDayOfYear (35) is bigger than 14, so we check the next month\n        // The next nepali month (Mangh) has 29 days \n        // 29+14=43, this is bigger than gregorianDayOfYear(35) so, we found the correct nepali month\n        while (gregorianDayOfYear > daysSinceJanFirstToEndOfNepaliMonth) {\n            nepaliMonth++;\n            if (nepaliMonth > 12) {\n                nepaliMonth = 1;\n                nepaliYear++;\n            }    \n            daysSinceJanFirstToEndOfNepaliMonth += this.NEPALI_CALENDAR_DATA[nepaliYear][nepaliMonth];\n        }\n        // The last step is to calculate the nepali day-of-month\n        // to continue our example from before:\n        // we calculated there are 43 days from 1st. January (17 Paush) till end of Mangh (29 days)\n        // when we subtract from this 43 days the day-of-year of the the Gregorian date (35),\n        // we know how far the searched day is away from the end of the Nepali month.\n        // So we simply subtract this number from the amount of days in this month (30) \n        var nepaliDayOfMonth = this.NEPALI_CALENDAR_DATA[nepaliYear][nepaliMonth] -\n            (daysSinceJanFirstToEndOfNepaliMonth - gregorianDayOfYear);        \n        return this.newDate(nepaliYear, nepaliMonth, nepaliDayOfMonth);\n    },\n    \n    /** Creates missing data in the NEPALI_CALENDAR_DATA table.\n        This data will not be correct but just give an estimated result. Mostly -/+ 1 day\n        @private\n        @param nepaliYear {number} The missing year number. */\n    _createMissingCalendarData: function(nepaliYear) {\n        var tmp_calendar_data = this.daysPerMonth.slice(0);\n        tmp_calendar_data.unshift(17);\n        for (var nepaliYearToCreate = (nepaliYear - 1); nepaliYearToCreate < (nepaliYear + 2); nepaliYearToCreate++) {\n            if (typeof this.NEPALI_CALENDAR_DATA[nepaliYearToCreate] === 'undefined') {\n                this.NEPALI_CALENDAR_DATA[nepaliYearToCreate] = tmp_calendar_data;\n            }\n        }\n    },\n    \n    NEPALI_CALENDAR_DATA:  {\n        // These data are from http://www.ashesh.com.np\n        1970: [18, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n        1971: [18, 31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30],\n        1972: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],\n        1973: [19, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n        1974: [19, 31, 31, 32, 30, 31, 31, 30, 29, 30, 29, 30, 30],\n        1975: [18, 31, 31, 32, 32, 30, 31, 30, 29, 30, 29, 30, 30],\n        1976: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n        1977: [18, 31, 32, 31, 32, 31, 31, 29, 30, 29, 30, 29, 31],\n        1978: [18, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n        1979: [18, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n        1980: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n        1981: [18, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],\n        1982: [18, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n        1983: [18, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n        1984: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n        1985: [18, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],\n        1986: [18, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n        1987: [18, 31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n        1988: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n        1989: [18, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],\n        1990: [18, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n        1991: [18, 31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30],    \n        // These data are from http://nepalicalendar.rat32.com/index.php\n        1992: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n        1993: [18, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],\n        1994: [18, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n        1995: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],\n        1996: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n        1997: [18, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n        1998: [18, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n        1999: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n        2000: [17, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n        2001: [18, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n        2002: [18, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n        2003: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n        2004: [17, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n        2005: [18, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n        2006: [18, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n        2007: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n        2008: [17, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31],\n        2009: [18, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n        2010: [18, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n        2011: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n        2012: [17, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],\n        2013: [18, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n        2014: [18, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n        2015: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n        2016: [17, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],\n        2017: [18, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n        2018: [18, 31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n        2019: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n        2020: [17, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],\n        2021: [18, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n        2022: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],\n        2023: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n        2024: [17, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],\n        2025: [18, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n        2026: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n        2027: [17, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n        2028: [17, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n        2029: [18, 31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30],\n        2030: [17, 31, 32, 31, 32, 31, 30, 30, 30, 30, 30, 30, 31],\n        2031: [17, 31, 32, 31, 32, 31, 31, 31, 31, 31, 31, 31, 31],\n        2032: [17, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32],\n        2033: [18, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n        2034: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n        2035: [17, 30, 32, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31],\n        2036: [17, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n        2037: [18, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n        2038: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n        2039: [17, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],\n        2040: [17, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n        2041: [18, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n        2042: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n        2043: [17, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],\n        2044: [17, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n        2045: [18, 31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n        2046: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n        2047: [17, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],\n        2048: [17, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n        2049: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],\n        2050: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n        2051: [17, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],\n        2052: [17, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n        2053: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],\n        2054: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n        2055: [17, 31, 31, 32, 31, 31, 31, 30, 29, 30, 30, 29, 30],\n        2056: [17, 31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30],\n        2057: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n        2058: [17, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n        2059: [17, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n        2060: [17, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n        2061: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n        2062: [17, 30, 32, 31, 32, 31, 31, 29, 30, 29, 30, 29, 31],\n        2063: [17, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n        2064: [17, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n        2065: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n        2066: [17, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31],\n        2067: [17, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n        2068: [17, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n        2069: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n        2070: [17, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],\n        2071: [17, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n        2072: [17, 31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n        2073: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n        2074: [17, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],\n        2075: [17, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n        2076: [16, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],\n        2077: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n        2078: [17, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],\n        2079: [17, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n        2080: [16, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],\n        // These data are from http://www.ashesh.com.np/nepali-calendar/\n        2081: [17, 31, 31, 32, 32, 31, 30, 30, 30, 29, 30, 30, 30],\n        2082: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],\n        2083: [17, 31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30],\n        2084: [17, 31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30],\n        2085: [17, 31, 32, 31, 32, 31, 31, 30, 30, 29, 30, 30, 30],\n        2086: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],\n        2087: [16, 31, 31, 32, 31, 31, 31, 30, 30, 29, 30, 30, 30],\n        2088: [16, 30, 31, 32, 32, 30, 31, 30, 30, 29, 30, 30, 30],\n        2089: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],\n        2090: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],\n        2091: [16, 31, 31, 32, 31, 31, 31, 30, 30, 29, 30, 30, 30],\n        2092: [16, 31, 31, 32, 32, 31, 30, 30, 30, 29, 30, 30, 30],\n        2093: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],\n        2094: [17, 31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30],\n        2095: [17, 31, 31, 32, 31, 31, 31, 30, 29, 30, 30, 30, 30],\n        2096: [17, 30, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n        2097: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],\n        2098: [17, 31, 31, 32, 31, 31, 31, 29, 30, 29, 30, 30, 31],\n        2099: [17, 31, 31, 32, 31, 31, 31, 30, 29, 29, 30, 30, 30],\n        2100: [17, 31, 32, 31, 32, 30, 31, 30, 29, 30, 29, 30, 30]    \n    }\n});    \n\n// Nepali calendar implementation\nmain.calendars.nepali = NepaliCalendar;\n\n"]},"metadata":{},"sourceType":"script"}