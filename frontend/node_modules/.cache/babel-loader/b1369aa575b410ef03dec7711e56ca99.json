{"ast":null,"code":"'use strict';\n\nvar d3 = require('@plotly/d3');\n\nvar isNumeric = require('fast-isnumeric');\n\nvar Lib = require('../../lib');\n\nvar Drawing = require('../../components/drawing');\n\nvar helpers = require('../../plots/polar/helpers');\n\nmodule.exports = function plot(gd, subplot, cdbar) {\n  var xa = subplot.xaxis;\n  var ya = subplot.yaxis;\n  var radialAxis = subplot.radialAxis;\n  var angularAxis = subplot.angularAxis;\n  var pathFn = makePathFn(subplot);\n  var barLayer = subplot.layers.frontplot.select('g.barlayer');\n  Lib.makeTraceGroups(barLayer, cdbar, 'trace bars').each(function () {\n    var plotGroup = d3.select(this);\n    var pointGroup = Lib.ensureSingle(plotGroup, 'g', 'points');\n    var bars = pointGroup.selectAll('g.point').data(Lib.identity);\n    bars.enter().append('g').style('vector-effect', 'non-scaling-stroke').style('stroke-miterlimit', 2).classed('point', true);\n    bars.exit().remove();\n    bars.each(function (di) {\n      var bar = d3.select(this);\n      var rp0 = di.rp0 = radialAxis.c2p(di.s0);\n      var rp1 = di.rp1 = radialAxis.c2p(di.s1);\n      var thetag0 = di.thetag0 = angularAxis.c2g(di.p0);\n      var thetag1 = di.thetag1 = angularAxis.c2g(di.p1);\n      var dPath;\n\n      if (!isNumeric(rp0) || !isNumeric(rp1) || !isNumeric(thetag0) || !isNumeric(thetag1) || rp0 === rp1 || thetag0 === thetag1) {\n        // do not remove blank bars, to keep data-to-node\n        // mapping intact during radial drag, that we\n        // can skip calling _module.style during interactions\n        dPath = 'M0,0Z';\n      } else {\n        // this 'center' pt is used for selections and hover labels\n        var rg1 = radialAxis.c2g(di.s1);\n        var thetagMid = (thetag0 + thetag1) / 2;\n        di.ct = [xa.c2p(rg1 * Math.cos(thetagMid)), ya.c2p(rg1 * Math.sin(thetagMid))];\n        dPath = pathFn(rp0, rp1, thetag0, thetag1);\n      }\n\n      Lib.ensureSingle(bar, 'path').attr('d', dPath);\n    }); // clip plotGroup, when trace layer isn't clipped\n\n    Drawing.setClipUrl(plotGroup, subplot._hasClipOnAxisFalse ? subplot.clipIds.forTraces : null, gd);\n  });\n};\n\nfunction makePathFn(subplot) {\n  var cxx = subplot.cxx;\n  var cyy = subplot.cyy;\n\n  if (subplot.vangles) {\n    return function (r0, r1, _a0, _a1) {\n      var a0, a1;\n\n      if (Lib.angleDelta(_a0, _a1) > 0) {\n        a0 = _a0;\n        a1 = _a1;\n      } else {\n        a0 = _a1;\n        a1 = _a0;\n      }\n\n      var va0 = helpers.findEnclosingVertexAngles(a0, subplot.vangles)[0];\n      var va1 = helpers.findEnclosingVertexAngles(a1, subplot.vangles)[1];\n      var vaBar = [va0, (a0 + a1) / 2, va1];\n      return helpers.pathPolygonAnnulus(r0, r1, a0, a1, vaBar, cxx, cyy);\n    };\n  }\n\n  return function (r0, r1, a0, a1) {\n    return Lib.pathAnnulus(r0, r1, a0, a1, cxx, cyy);\n  };\n}","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/plotly.js/src/traces/barpolar/plot.js"],"names":["d3","require","isNumeric","Lib","Drawing","helpers","module","exports","plot","gd","subplot","cdbar","xa","xaxis","ya","yaxis","radialAxis","angularAxis","pathFn","makePathFn","barLayer","layers","frontplot","select","makeTraceGroups","each","plotGroup","pointGroup","ensureSingle","bars","selectAll","data","identity","enter","append","style","classed","exit","remove","di","bar","rp0","c2p","s0","rp1","s1","thetag0","c2g","p0","thetag1","p1","dPath","rg1","thetagMid","ct","Math","cos","sin","attr","setClipUrl","_hasClipOnAxisFalse","clipIds","forTraces","cxx","cyy","vangles","r0","r1","_a0","_a1","a0","a1","angleDelta","va0","findEnclosingVertexAngles","va1","vaBar","pathPolygonAnnulus","pathAnnulus"],"mappings":"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","sourcesContent":["'use strict';\n\nvar d3 = require('@plotly/d3');\nvar isNumeric = require('fast-isnumeric');\n\nvar Lib = require('../../lib');\nvar Drawing = require('../../components/drawing');\nvar helpers = require('../../plots/polar/helpers');\n\nmodule.exports = function plot(gd, subplot, cdbar) {\n    var xa = subplot.xaxis;\n    var ya = subplot.yaxis;\n    var radialAxis = subplot.radialAxis;\n    var angularAxis = subplot.angularAxis;\n    var pathFn = makePathFn(subplot);\n    var barLayer = subplot.layers.frontplot.select('g.barlayer');\n\n    Lib.makeTraceGroups(barLayer, cdbar, 'trace bars').each(function() {\n        var plotGroup = d3.select(this);\n        var pointGroup = Lib.ensureSingle(plotGroup, 'g', 'points');\n        var bars = pointGroup.selectAll('g.point').data(Lib.identity);\n\n        bars.enter().append('g')\n            .style('vector-effect', 'non-scaling-stroke')\n            .style('stroke-miterlimit', 2)\n            .classed('point', true);\n\n        bars.exit().remove();\n\n        bars.each(function(di) {\n            var bar = d3.select(this);\n\n            var rp0 = di.rp0 = radialAxis.c2p(di.s0);\n            var rp1 = di.rp1 = radialAxis.c2p(di.s1);\n            var thetag0 = di.thetag0 = angularAxis.c2g(di.p0);\n            var thetag1 = di.thetag1 = angularAxis.c2g(di.p1);\n\n            var dPath;\n\n            if(!isNumeric(rp0) || !isNumeric(rp1) ||\n                !isNumeric(thetag0) || !isNumeric(thetag1) ||\n                rp0 === rp1 || thetag0 === thetag1\n            ) {\n                // do not remove blank bars, to keep data-to-node\n                // mapping intact during radial drag, that we\n                // can skip calling _module.style during interactions\n                dPath = 'M0,0Z';\n            } else {\n                // this 'center' pt is used for selections and hover labels\n                var rg1 = radialAxis.c2g(di.s1);\n                var thetagMid = (thetag0 + thetag1) / 2;\n                di.ct = [\n                    xa.c2p(rg1 * Math.cos(thetagMid)),\n                    ya.c2p(rg1 * Math.sin(thetagMid))\n                ];\n\n                dPath = pathFn(rp0, rp1, thetag0, thetag1);\n            }\n\n            Lib.ensureSingle(bar, 'path').attr('d', dPath);\n        });\n\n        // clip plotGroup, when trace layer isn't clipped\n        Drawing.setClipUrl(\n            plotGroup,\n            subplot._hasClipOnAxisFalse ? subplot.clipIds.forTraces : null,\n            gd\n        );\n    });\n};\n\nfunction makePathFn(subplot) {\n    var cxx = subplot.cxx;\n    var cyy = subplot.cyy;\n\n    if(subplot.vangles) {\n        return function(r0, r1, _a0, _a1) {\n            var a0, a1;\n\n            if(Lib.angleDelta(_a0, _a1) > 0) {\n                a0 = _a0;\n                a1 = _a1;\n            } else {\n                a0 = _a1;\n                a1 = _a0;\n            }\n\n            var va0 = helpers.findEnclosingVertexAngles(a0, subplot.vangles)[0];\n            var va1 = helpers.findEnclosingVertexAngles(a1, subplot.vangles)[1];\n            var vaBar = [va0, (a0 + a1) / 2, va1];\n            return helpers.pathPolygonAnnulus(r0, r1, a0, a1, vaBar, cxx, cyy);\n        };\n    }\n\n    return function(r0, r1, a0, a1) {\n        return Lib.pathAnnulus(r0, r1, a0, a1, cxx, cyy);\n    };\n}\n"]},"metadata":{},"sourceType":"script"}