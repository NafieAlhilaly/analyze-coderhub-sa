{"ast":null,"code":"'use strict';\n/**\n * mergeLength: set trace length as the minimum of all dimension data lengths\n *     and propagates this length into each dimension\n *\n * @param {object} traceOut: the fullData trace\n * @param {Array(object)} dimensions: array of dimension objects\n * @param {string} dataAttr: the attribute of each dimension containing the data\n * @param {integer} len: an already-existing length from other attributes\n */\n\nmodule.exports = function (traceOut, dimensions, dataAttr, len) {\n  if (!len) len = Infinity;\n  var i, dimi;\n\n  for (i = 0; i < dimensions.length; i++) {\n    dimi = dimensions[i];\n    if (dimi.visible) len = Math.min(len, dimi[dataAttr].length);\n  }\n\n  if (len === Infinity) len = 0;\n  traceOut._length = len;\n\n  for (i = 0; i < dimensions.length; i++) {\n    dimi = dimensions[i];\n    if (dimi.visible) dimi._length = len;\n  }\n\n  return len;\n};","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/plotly.js/src/traces/parcoords/merge_length.js"],"names":["module","exports","traceOut","dimensions","dataAttr","len","Infinity","i","dimi","length","visible","Math","min","_length"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,OAAP,GAAiB,UAASC,QAAT,EAAmBC,UAAnB,EAA+BC,QAA/B,EAAyCC,GAAzC,EAA8C;AAC3D,MAAG,CAACA,GAAJ,EAASA,GAAG,GAAGC,QAAN;AACT,MAAIC,CAAJ,EAAOC,IAAP;;AACA,OAAID,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGJ,UAAU,CAACM,MAA1B,EAAkCF,CAAC,EAAnC,EAAuC;AACnCC,IAAAA,IAAI,GAAGL,UAAU,CAACI,CAAD,CAAjB;AACA,QAAGC,IAAI,CAACE,OAAR,EAAiBL,GAAG,GAAGM,IAAI,CAACC,GAAL,CAASP,GAAT,EAAcG,IAAI,CAACJ,QAAD,CAAJ,CAAeK,MAA7B,CAAN;AACpB;;AACD,MAAGJ,GAAG,KAAKC,QAAX,EAAqBD,GAAG,GAAG,CAAN;AAErBH,EAAAA,QAAQ,CAACW,OAAT,GAAmBR,GAAnB;;AACA,OAAIE,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGJ,UAAU,CAACM,MAA1B,EAAkCF,CAAC,EAAnC,EAAuC;AACnCC,IAAAA,IAAI,GAAGL,UAAU,CAACI,CAAD,CAAjB;AACA,QAAGC,IAAI,CAACE,OAAR,EAAiBF,IAAI,CAACK,OAAL,GAAeR,GAAf;AACpB;;AAED,SAAOA,GAAP;AACH,CAhBD","sourcesContent":["'use strict';\n\n/**\n * mergeLength: set trace length as the minimum of all dimension data lengths\n *     and propagates this length into each dimension\n *\n * @param {object} traceOut: the fullData trace\n * @param {Array(object)} dimensions: array of dimension objects\n * @param {string} dataAttr: the attribute of each dimension containing the data\n * @param {integer} len: an already-existing length from other attributes\n */\nmodule.exports = function(traceOut, dimensions, dataAttr, len) {\n    if(!len) len = Infinity;\n    var i, dimi;\n    for(i = 0; i < dimensions.length; i++) {\n        dimi = dimensions[i];\n        if(dimi.visible) len = Math.min(len, dimi[dataAttr].length);\n    }\n    if(len === Infinity) len = 0;\n\n    traceOut._length = len;\n    for(i = 0; i < dimensions.length; i++) {\n        dimi = dimensions[i];\n        if(dimi.visible) dimi._length = len;\n    }\n\n    return len;\n};\n"]},"metadata":{},"sourceType":"script"}