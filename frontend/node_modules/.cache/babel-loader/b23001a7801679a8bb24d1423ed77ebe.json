{"ast":null,"code":"'use strict';\n\nvar subtypes = require('../scatter/subtypes');\n\nvar BADNUM = require('../../constants/numerical').BADNUM;\n\nmodule.exports = function selectPoints(searchInfo, selectionTester) {\n  var cd = searchInfo.cd;\n  var xa = searchInfo.xaxis;\n  var ya = searchInfo.yaxis;\n  var selection = [];\n  var trace = cd[0].trace;\n  var di, lonlat, x, y, i;\n  var hasOnlyLines = !subtypes.hasMarkers(trace) && !subtypes.hasText(trace);\n  if (hasOnlyLines) return [];\n\n  if (selectionTester === false) {\n    for (i = 0; i < cd.length; i++) {\n      cd[i].selected = 0;\n    }\n  } else {\n    for (i = 0; i < cd.length; i++) {\n      di = cd[i];\n      lonlat = di.lonlat; // some projection types can't handle BADNUMs\n\n      if (lonlat[0] === BADNUM) continue;\n      x = xa.c2p(lonlat);\n      y = ya.c2p(lonlat);\n\n      if (selectionTester.contains([x, y], null, i, searchInfo)) {\n        selection.push({\n          pointNumber: i,\n          lon: lonlat[0],\n          lat: lonlat[1]\n        });\n        di.selected = 1;\n      } else {\n        di.selected = 0;\n      }\n    }\n  }\n\n  return selection;\n};","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/plotly.js/src/traces/scattergeo/select.js"],"names":["subtypes","require","BADNUM","module","exports","selectPoints","searchInfo","selectionTester","cd","xa","xaxis","ya","yaxis","selection","trace","di","lonlat","x","y","i","hasOnlyLines","hasMarkers","hasText","length","selected","c2p","contains","push","pointNumber","lon","lat"],"mappings":"AAAA;;AAEA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,qBAAD,CAAtB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,2BAAD,CAAP,CAAqCC,MAAlD;;AAEAC,MAAM,CAACC,OAAP,GAAiB,SAASC,YAAT,CAAsBC,UAAtB,EAAkCC,eAAlC,EAAmD;AAChE,MAAIC,EAAE,GAAGF,UAAU,CAACE,EAApB;AACA,MAAIC,EAAE,GAAGH,UAAU,CAACI,KAApB;AACA,MAAIC,EAAE,GAAGL,UAAU,CAACM,KAApB;AACA,MAAIC,SAAS,GAAG,EAAhB;AACA,MAAIC,KAAK,GAAGN,EAAE,CAAC,CAAD,CAAF,CAAMM,KAAlB;AAEA,MAAIC,EAAJ,EAAQC,MAAR,EAAgBC,CAAhB,EAAmBC,CAAnB,EAAsBC,CAAtB;AAEA,MAAIC,YAAY,GAAI,CAACpB,QAAQ,CAACqB,UAAT,CAAoBP,KAApB,CAAD,IAA+B,CAACd,QAAQ,CAACsB,OAAT,CAAiBR,KAAjB,CAApD;AACA,MAAGM,YAAH,EAAiB,OAAO,EAAP;;AAEjB,MAAGb,eAAe,KAAK,KAAvB,EAA8B;AAC1B,SAAIY,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGX,EAAE,CAACe,MAAlB,EAA0BJ,CAAC,EAA3B,EAA+B;AAC3BX,MAAAA,EAAE,CAACW,CAAD,CAAF,CAAMK,QAAN,GAAiB,CAAjB;AACH;AACJ,GAJD,MAIO;AACH,SAAIL,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGX,EAAE,CAACe,MAAlB,EAA0BJ,CAAC,EAA3B,EAA+B;AAC3BJ,MAAAA,EAAE,GAAGP,EAAE,CAACW,CAAD,CAAP;AACAH,MAAAA,MAAM,GAAGD,EAAE,CAACC,MAAZ,CAF2B,CAI3B;;AACA,UAAGA,MAAM,CAAC,CAAD,CAAN,KAAcd,MAAjB,EAAyB;AAEzBe,MAAAA,CAAC,GAAGR,EAAE,CAACgB,GAAH,CAAOT,MAAP,CAAJ;AACAE,MAAAA,CAAC,GAAGP,EAAE,CAACc,GAAH,CAAOT,MAAP,CAAJ;;AAEA,UAAGT,eAAe,CAACmB,QAAhB,CAAyB,CAACT,CAAD,EAAIC,CAAJ,CAAzB,EAAiC,IAAjC,EAAuCC,CAAvC,EAA0Cb,UAA1C,CAAH,EAA0D;AACtDO,QAAAA,SAAS,CAACc,IAAV,CAAe;AACXC,UAAAA,WAAW,EAAET,CADF;AAEXU,UAAAA,GAAG,EAAEb,MAAM,CAAC,CAAD,CAFA;AAGXc,UAAAA,GAAG,EAAEd,MAAM,CAAC,CAAD;AAHA,SAAf;AAKAD,QAAAA,EAAE,CAACS,QAAH,GAAc,CAAd;AACH,OAPD,MAOO;AACHT,QAAAA,EAAE,CAACS,QAAH,GAAc,CAAd;AACH;AACJ;AACJ;;AAED,SAAOX,SAAP;AACH,CAzCD","sourcesContent":["'use strict';\n\nvar subtypes = require('../scatter/subtypes');\nvar BADNUM = require('../../constants/numerical').BADNUM;\n\nmodule.exports = function selectPoints(searchInfo, selectionTester) {\n    var cd = searchInfo.cd;\n    var xa = searchInfo.xaxis;\n    var ya = searchInfo.yaxis;\n    var selection = [];\n    var trace = cd[0].trace;\n\n    var di, lonlat, x, y, i;\n\n    var hasOnlyLines = (!subtypes.hasMarkers(trace) && !subtypes.hasText(trace));\n    if(hasOnlyLines) return [];\n\n    if(selectionTester === false) {\n        for(i = 0; i < cd.length; i++) {\n            cd[i].selected = 0;\n        }\n    } else {\n        for(i = 0; i < cd.length; i++) {\n            di = cd[i];\n            lonlat = di.lonlat;\n\n            // some projection types can't handle BADNUMs\n            if(lonlat[0] === BADNUM) continue;\n\n            x = xa.c2p(lonlat);\n            y = ya.c2p(lonlat);\n\n            if(selectionTester.contains([x, y], null, i, searchInfo)) {\n                selection.push({\n                    pointNumber: i,\n                    lon: lonlat[0],\n                    lat: lonlat[1]\n                });\n                di.selected = 1;\n            } else {\n                di.selected = 0;\n            }\n        }\n    }\n\n    return selection;\n};\n"]},"metadata":{},"sourceType":"script"}