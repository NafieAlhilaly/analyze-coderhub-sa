{"ast":null,"code":"'use strict';\n\nvar colorScaleAttrs = require('../../components/colorscale/attributes');\n\nvar axisHoverFormat = require('../../plots/cartesian/axis_format_attributes').axisHoverFormat;\n\nvar hovertemplateAttrs = require('../../plots/template_attributes').hovertemplateAttrs;\n\nvar surfaceAttrs = require('../surface/attributes');\n\nvar baseAttrs = require('../../plots/attributes');\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nmodule.exports = extendFlat({\n  x: {\n    valType: 'data_array',\n    editType: 'calc+clearAxisTypes',\n    description: ['Sets the X coordinates of the vertices. The nth element of vectors `x`, `y` and `z`', 'jointly represent the X, Y and Z coordinates of the nth vertex.'].join(' ')\n  },\n  y: {\n    valType: 'data_array',\n    editType: 'calc+clearAxisTypes',\n    description: ['Sets the Y coordinates of the vertices. The nth element of vectors `x`, `y` and `z`', 'jointly represent the X, Y and Z coordinates of the nth vertex.'].join(' ')\n  },\n  z: {\n    valType: 'data_array',\n    editType: 'calc+clearAxisTypes',\n    description: ['Sets the Z coordinates of the vertices. The nth element of vectors `x`, `y` and `z`', 'jointly represent the X, Y and Z coordinates of the nth vertex.'].join(' ')\n  },\n  i: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: ['A vector of vertex indices, i.e. integer values between 0 and the length of the vertex', 'vectors, representing the *first* vertex of a triangle. For example, `{i[m], j[m], k[m]}`', 'together represent face m (triangle m) in the mesh, where `i[m] = n` points to the triplet', '`{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `i` represents a', 'point in space, which is the first vertex of a triangle.'].join(' ')\n  },\n  j: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: ['A vector of vertex indices, i.e. integer values between 0 and the length of the vertex', 'vectors, representing the *second* vertex of a triangle. For example, `{i[m], j[m], k[m]}` ', 'together represent face m (triangle m) in the mesh, where `j[m] = n` points to the triplet', '`{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `j` represents a', 'point in space, which is the second vertex of a triangle.'].join(' ')\n  },\n  k: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: ['A vector of vertex indices, i.e. integer values between 0 and the length of the vertex', 'vectors, representing the *third* vertex of a triangle. For example, `{i[m], j[m], k[m]}`', 'together represent face m (triangle m) in the mesh, where `k[m] = n` points to the triplet ', '`{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `k` represents a', 'point in space, which is the third vertex of a triangle.'].join(' ')\n  },\n  text: {\n    valType: 'string',\n    dflt: '',\n    arrayOk: true,\n    editType: 'calc',\n    description: ['Sets the text elements associated with the vertices.', 'If trace `hoverinfo` contains a *text* flag and *hovertext* is not set,', 'these elements will be seen in the hover labels.'].join(' ')\n  },\n  hovertext: {\n    valType: 'string',\n    dflt: '',\n    arrayOk: true,\n    editType: 'calc',\n    description: 'Same as `text`.'\n  },\n  hovertemplate: hovertemplateAttrs({\n    editType: 'calc'\n  }),\n  xhoverformat: axisHoverFormat('x'),\n  yhoverformat: axisHoverFormat('y'),\n  zhoverformat: axisHoverFormat('z'),\n  delaunayaxis: {\n    valType: 'enumerated',\n    values: ['x', 'y', 'z'],\n    dflt: 'z',\n    editType: 'calc',\n    description: ['Sets the Delaunay axis, which is the axis that is perpendicular to the surface of the', 'Delaunay triangulation.', 'It has an effect if `i`, `j`, `k` are not provided and `alphahull` is set to indicate', 'Delaunay triangulation.'].join(' ')\n  },\n  alphahull: {\n    valType: 'number',\n    dflt: -1,\n    editType: 'calc',\n    description: ['Determines how the mesh surface triangles are derived from the set of', 'vertices (points) represented by the `x`, `y` and `z` arrays, if', 'the `i`, `j`, `k` arrays are not supplied.', 'For general use of `mesh3d` it is preferred that `i`, `j`, `k` are', 'supplied.', 'If *-1*, Delaunay triangulation is used, which is mainly suitable if the', 'mesh is a single, more or less layer surface that is perpendicular to `delaunayaxis`.', 'In case the `delaunayaxis` intersects the mesh surface at more than one point', 'it will result triangles that are very long in the dimension of `delaunayaxis`.', 'If *>0*, the alpha-shape algorithm is used. In this case, the positive `alphahull` value', 'signals the use of the alpha-shape algorithm, _and_ its value', 'acts as the parameter for the mesh fitting.', 'If *0*,  the convex-hull algorithm is used. It is suitable for convex bodies', 'or if the intention is to enclose the `x`, `y` and `z` point set into a convex', 'hull.'].join(' ')\n  },\n  intensity: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: ['Sets the intensity values for vertices or cells', 'as defined by `intensitymode`.', 'It can be used for plotting fields on meshes.'].join(' ')\n  },\n  intensitymode: {\n    valType: 'enumerated',\n    values: ['vertex', 'cell'],\n    dflt: 'vertex',\n    editType: 'calc',\n    description: ['Determines the source of `intensity` values.'].join(' ')\n  },\n  // Color field\n  color: {\n    valType: 'color',\n    editType: 'calc',\n    description: 'Sets the color of the whole mesh'\n  },\n  vertexcolor: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: ['Sets the color of each vertex', 'Overrides *color*. While Red, green and blue colors', 'are in the range of 0 and 255; in the case of having', 'vertex color data in RGBA format, the alpha color', 'should be normalized to be between 0 and 1.'].join(' ')\n  },\n  facecolor: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: ['Sets the color of each face', 'Overrides *color* and *vertexcolor*.'].join(' ')\n  },\n  transforms: undefined\n}, colorScaleAttrs('', {\n  colorAttr: '`intensity`',\n  showScaleDflt: true,\n  editTypeOverride: 'calc'\n}), {\n  opacity: surfaceAttrs.opacity,\n  // Flat shaded mode\n  flatshading: {\n    valType: 'boolean',\n    dflt: false,\n    editType: 'calc',\n    description: ['Determines whether or not normal smoothing is applied to the meshes,', 'creating meshes with an angular, low-poly look via flat reflections.'].join(' ')\n  },\n  contour: {\n    show: extendFlat({}, surfaceAttrs.contours.x.show, {\n      description: ['Sets whether or not dynamic contours are shown on hover'].join(' ')\n    }),\n    color: surfaceAttrs.contours.x.color,\n    width: surfaceAttrs.contours.x.width,\n    editType: 'calc'\n  },\n  lightposition: {\n    x: extendFlat({}, surfaceAttrs.lightposition.x, {\n      dflt: 1e5\n    }),\n    y: extendFlat({}, surfaceAttrs.lightposition.y, {\n      dflt: 1e5\n    }),\n    z: extendFlat({}, surfaceAttrs.lightposition.z, {\n      dflt: 0\n    }),\n    editType: 'calc'\n  },\n  lighting: extendFlat({\n    vertexnormalsepsilon: {\n      valType: 'number',\n      min: 0.00,\n      max: 1,\n      dflt: 1e-12,\n      // otherwise finely tessellated things eg. the brain will have no specular light reflection\n      editType: 'calc',\n      description: 'Epsilon for vertex normals calculation avoids math issues arising from degenerate geometry.'\n    },\n    facenormalsepsilon: {\n      valType: 'number',\n      min: 0.00,\n      max: 1,\n      dflt: 1e-6,\n      // even the brain model doesn't appear to need finer than this\n      editType: 'calc',\n      description: 'Epsilon for face normals calculation avoids math issues arising from degenerate geometry.'\n    },\n    editType: 'calc'\n  }, surfaceAttrs.lighting),\n  hoverinfo: extendFlat({}, baseAttrs.hoverinfo, {\n    editType: 'calc'\n  }),\n  showlegend: extendFlat({}, baseAttrs.showlegend, {\n    dflt: false\n  })\n});","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/plotly.js/src/traces/mesh3d/attributes.js"],"names":["colorScaleAttrs","require","axisHoverFormat","hovertemplateAttrs","surfaceAttrs","baseAttrs","extendFlat","module","exports","x","valType","editType","description","join","y","z","i","j","k","text","dflt","arrayOk","hovertext","hovertemplate","xhoverformat","yhoverformat","zhoverformat","delaunayaxis","values","alphahull","intensity","intensitymode","color","vertexcolor","facecolor","transforms","undefined","colorAttr","showScaleDflt","editTypeOverride","opacity","flatshading","contour","show","contours","width","lightposition","lighting","vertexnormalsepsilon","min","max","facenormalsepsilon","hoverinfo","showlegend"],"mappings":"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","sourcesContent":["'use strict';\n\nvar colorScaleAttrs = require('../../components/colorscale/attributes');\nvar axisHoverFormat = require('../../plots/cartesian/axis_format_attributes').axisHoverFormat;\nvar hovertemplateAttrs = require('../../plots/template_attributes').hovertemplateAttrs;\nvar surfaceAttrs = require('../surface/attributes');\nvar baseAttrs = require('../../plots/attributes');\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nmodule.exports = extendFlat({\n    x: {\n        valType: 'data_array',\n        editType: 'calc+clearAxisTypes',\n        description: [\n            'Sets the X coordinates of the vertices. The nth element of vectors `x`, `y` and `z`',\n            'jointly represent the X, Y and Z coordinates of the nth vertex.'\n        ].join(' ')\n    },\n    y: {\n        valType: 'data_array',\n        editType: 'calc+clearAxisTypes',\n        description: [\n            'Sets the Y coordinates of the vertices. The nth element of vectors `x`, `y` and `z`',\n            'jointly represent the X, Y and Z coordinates of the nth vertex.'\n        ].join(' ')\n    },\n    z: {\n        valType: 'data_array',\n        editType: 'calc+clearAxisTypes',\n        description: [\n            'Sets the Z coordinates of the vertices. The nth element of vectors `x`, `y` and `z`',\n            'jointly represent the X, Y and Z coordinates of the nth vertex.'\n        ].join(' ')\n    },\n\n    i: {\n        valType: 'data_array',\n        editType: 'calc',\n        description: [\n            'A vector of vertex indices, i.e. integer values between 0 and the length of the vertex',\n            'vectors, representing the *first* vertex of a triangle. For example, `{i[m], j[m], k[m]}`',\n            'together represent face m (triangle m) in the mesh, where `i[m] = n` points to the triplet',\n            '`{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `i` represents a',\n            'point in space, which is the first vertex of a triangle.'\n        ].join(' ')\n    },\n    j: {\n        valType: 'data_array',\n        editType: 'calc',\n        description: [\n            'A vector of vertex indices, i.e. integer values between 0 and the length of the vertex',\n            'vectors, representing the *second* vertex of a triangle. For example, `{i[m], j[m], k[m]}` ',\n            'together represent face m (triangle m) in the mesh, where `j[m] = n` points to the triplet',\n            '`{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `j` represents a',\n            'point in space, which is the second vertex of a triangle.'\n        ].join(' ')\n\n    },\n    k: {\n        valType: 'data_array',\n        editType: 'calc',\n        description: [\n            'A vector of vertex indices, i.e. integer values between 0 and the length of the vertex',\n            'vectors, representing the *third* vertex of a triangle. For example, `{i[m], j[m], k[m]}`',\n            'together represent face m (triangle m) in the mesh, where `k[m] = n` points to the triplet ',\n            '`{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `k` represents a',\n            'point in space, which is the third vertex of a triangle.'\n        ].join(' ')\n\n    },\n\n    text: {\n        valType: 'string',\n        dflt: '',\n        arrayOk: true,\n        editType: 'calc',\n        description: [\n            'Sets the text elements associated with the vertices.',\n            'If trace `hoverinfo` contains a *text* flag and *hovertext* is not set,',\n            'these elements will be seen in the hover labels.'\n        ].join(' ')\n    },\n    hovertext: {\n        valType: 'string',\n        dflt: '',\n        arrayOk: true,\n        editType: 'calc',\n        description: 'Same as `text`.'\n    },\n    hovertemplate: hovertemplateAttrs({editType: 'calc'}),\n\n    xhoverformat: axisHoverFormat('x'),\n    yhoverformat: axisHoverFormat('y'),\n    zhoverformat: axisHoverFormat('z'),\n\n    delaunayaxis: {\n        valType: 'enumerated',\n        values: [ 'x', 'y', 'z' ],\n        dflt: 'z',\n        editType: 'calc',\n        description: [\n            'Sets the Delaunay axis, which is the axis that is perpendicular to the surface of the',\n            'Delaunay triangulation.',\n            'It has an effect if `i`, `j`, `k` are not provided and `alphahull` is set to indicate',\n            'Delaunay triangulation.'\n        ].join(' ')\n    },\n\n    alphahull: {\n        valType: 'number',\n        dflt: -1,\n        editType: 'calc',\n        description: [\n            'Determines how the mesh surface triangles are derived from the set of',\n            'vertices (points) represented by the `x`, `y` and `z` arrays, if',\n            'the `i`, `j`, `k` arrays are not supplied.',\n            'For general use of `mesh3d` it is preferred that `i`, `j`, `k` are',\n            'supplied.',\n\n            'If *-1*, Delaunay triangulation is used, which is mainly suitable if the',\n            'mesh is a single, more or less layer surface that is perpendicular to `delaunayaxis`.',\n            'In case the `delaunayaxis` intersects the mesh surface at more than one point',\n            'it will result triangles that are very long in the dimension of `delaunayaxis`.',\n\n            'If *>0*, the alpha-shape algorithm is used. In this case, the positive `alphahull` value',\n            'signals the use of the alpha-shape algorithm, _and_ its value',\n            'acts as the parameter for the mesh fitting.',\n\n            'If *0*,  the convex-hull algorithm is used. It is suitable for convex bodies',\n            'or if the intention is to enclose the `x`, `y` and `z` point set into a convex',\n            'hull.'\n        ].join(' ')\n    },\n\n    intensity: {\n        valType: 'data_array',\n        editType: 'calc',\n        description: [\n            'Sets the intensity values for vertices or cells',\n            'as defined by `intensitymode`.',\n            'It can be used for plotting fields on meshes.'\n        ].join(' ')\n    },\n    intensitymode: {\n        valType: 'enumerated',\n        values: ['vertex', 'cell'],\n        dflt: 'vertex',\n        editType: 'calc',\n        description: [\n            'Determines the source of `intensity` values.'\n        ].join(' ')\n    },\n\n    // Color field\n    color: {\n        valType: 'color',\n        editType: 'calc',\n        description: 'Sets the color of the whole mesh'\n    },\n    vertexcolor: {\n        valType: 'data_array',\n        editType: 'calc',\n        description: [\n            'Sets the color of each vertex',\n            'Overrides *color*. While Red, green and blue colors',\n            'are in the range of 0 and 255; in the case of having',\n            'vertex color data in RGBA format, the alpha color',\n            'should be normalized to be between 0 and 1.'\n        ].join(' ')\n    },\n    facecolor: {\n        valType: 'data_array',\n        editType: 'calc',\n        description: [\n            'Sets the color of each face',\n            'Overrides *color* and *vertexcolor*.'\n        ].join(' ')\n    },\n    transforms: undefined\n},\n\ncolorScaleAttrs('', {\n    colorAttr: '`intensity`',\n    showScaleDflt: true,\n    editTypeOverride: 'calc'\n}), {\n    opacity: surfaceAttrs.opacity,\n\n    // Flat shaded mode\n    flatshading: {\n        valType: 'boolean',\n        dflt: false,\n        editType: 'calc',\n        description: [\n            'Determines whether or not normal smoothing is applied to the meshes,',\n            'creating meshes with an angular, low-poly look via flat reflections.'\n        ].join(' ')\n    },\n\n    contour: {\n        show: extendFlat({}, surfaceAttrs.contours.x.show, {\n            description: [\n                'Sets whether or not dynamic contours are shown on hover'\n            ].join(' ')\n        }),\n        color: surfaceAttrs.contours.x.color,\n        width: surfaceAttrs.contours.x.width,\n        editType: 'calc'\n    },\n\n    lightposition: {\n        x: extendFlat({}, surfaceAttrs.lightposition.x, {dflt: 1e5}),\n        y: extendFlat({}, surfaceAttrs.lightposition.y, {dflt: 1e5}),\n        z: extendFlat({}, surfaceAttrs.lightposition.z, {dflt: 0}),\n        editType: 'calc'\n    },\n    lighting: extendFlat({\n        vertexnormalsepsilon: {\n            valType: 'number',\n            min: 0.00,\n            max: 1,\n            dflt: 1e-12, // otherwise finely tessellated things eg. the brain will have no specular light reflection\n            editType: 'calc',\n            description: 'Epsilon for vertex normals calculation avoids math issues arising from degenerate geometry.'\n        },\n        facenormalsepsilon: {\n            valType: 'number',\n            min: 0.00,\n            max: 1,\n            dflt: 1e-6, // even the brain model doesn't appear to need finer than this\n            editType: 'calc',\n            description: 'Epsilon for face normals calculation avoids math issues arising from degenerate geometry.'\n        },\n        editType: 'calc'\n    }, surfaceAttrs.lighting),\n\n    hoverinfo: extendFlat({}, baseAttrs.hoverinfo, {editType: 'calc'}),\n    showlegend: extendFlat({}, baseAttrs.showlegend, {dflt: false})\n});\n"]},"metadata":{},"sourceType":"script"}