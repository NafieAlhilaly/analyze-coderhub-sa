{"ast":null,"code":"\"use strict\";\n\nmodule.exports = robustSubtract; //Easy case: Add two scalars\n\nfunction scalarScalar(a, b) {\n  var x = a + b;\n  var bv = x - a;\n  var av = x - bv;\n  var br = b - bv;\n  var ar = a - av;\n  var y = ar + br;\n\n  if (y) {\n    return [y, x];\n  }\n\n  return [x];\n}\n\nfunction robustSubtract(e, f) {\n  var ne = e.length | 0;\n  var nf = f.length | 0;\n\n  if (ne === 1 && nf === 1) {\n    return scalarScalar(e[0], -f[0]);\n  }\n\n  var n = ne + nf;\n  var g = new Array(n);\n  var count = 0;\n  var eptr = 0;\n  var fptr = 0;\n  var abs = Math.abs;\n  var ei = e[eptr];\n  var ea = abs(ei);\n  var fi = -f[fptr];\n  var fa = abs(fi);\n  var a, b;\n\n  if (ea < fa) {\n    b = ei;\n    eptr += 1;\n\n    if (eptr < ne) {\n      ei = e[eptr];\n      ea = abs(ei);\n    }\n  } else {\n    b = fi;\n    fptr += 1;\n\n    if (fptr < nf) {\n      fi = -f[fptr];\n      fa = abs(fi);\n    }\n  }\n\n  if (eptr < ne && ea < fa || fptr >= nf) {\n    a = ei;\n    eptr += 1;\n\n    if (eptr < ne) {\n      ei = e[eptr];\n      ea = abs(ei);\n    }\n  } else {\n    a = fi;\n    fptr += 1;\n\n    if (fptr < nf) {\n      fi = -f[fptr];\n      fa = abs(fi);\n    }\n  }\n\n  var x = a + b;\n  var bv = x - a;\n  var y = b - bv;\n  var q0 = y;\n  var q1 = x;\n\n  var _x, _bv, _av, _br, _ar;\n\n  while (eptr < ne && fptr < nf) {\n    if (ea < fa) {\n      a = ei;\n      eptr += 1;\n\n      if (eptr < ne) {\n        ei = e[eptr];\n        ea = abs(ei);\n      }\n    } else {\n      a = fi;\n      fptr += 1;\n\n      if (fptr < nf) {\n        fi = -f[fptr];\n        fa = abs(fi);\n      }\n    }\n\n    b = q0;\n    x = a + b;\n    bv = x - a;\n    y = b - bv;\n\n    if (y) {\n      g[count++] = y;\n    }\n\n    _x = q1 + x;\n    _bv = _x - q1;\n    _av = _x - _bv;\n    _br = x - _bv;\n    _ar = q1 - _av;\n    q0 = _ar + _br;\n    q1 = _x;\n  }\n\n  while (eptr < ne) {\n    a = ei;\n    b = q0;\n    x = a + b;\n    bv = x - a;\n    y = b - bv;\n\n    if (y) {\n      g[count++] = y;\n    }\n\n    _x = q1 + x;\n    _bv = _x - q1;\n    _av = _x - _bv;\n    _br = x - _bv;\n    _ar = q1 - _av;\n    q0 = _ar + _br;\n    q1 = _x;\n    eptr += 1;\n\n    if (eptr < ne) {\n      ei = e[eptr];\n    }\n  }\n\n  while (fptr < nf) {\n    a = fi;\n    b = q0;\n    x = a + b;\n    bv = x - a;\n    y = b - bv;\n\n    if (y) {\n      g[count++] = y;\n    }\n\n    _x = q1 + x;\n    _bv = _x - q1;\n    _av = _x - _bv;\n    _br = x - _bv;\n    _ar = q1 - _av;\n    q0 = _ar + _br;\n    q1 = _x;\n    fptr += 1;\n\n    if (fptr < nf) {\n      fi = -f[fptr];\n    }\n  }\n\n  if (q0) {\n    g[count++] = q0;\n  }\n\n  if (q1) {\n    g[count++] = q1;\n  }\n\n  if (!count) {\n    g[count++] = 0.0;\n  }\n\n  g.length = count;\n  return g;\n}","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/robust-subtract/robust-diff.js"],"names":["module","exports","robustSubtract","scalarScalar","a","b","x","bv","av","br","ar","y","e","f","ne","length","nf","n","g","Array","count","eptr","fptr","abs","Math","ei","ea","fi","fa","q0","q1","_x","_bv","_av","_br","_ar"],"mappings":"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","sourcesContent":["\"use strict\"\n\nmodule.exports = robustSubtract\n\n//Easy case: Add two scalars\nfunction scalarScalar(a, b) {\n  var x = a + b\n  var bv = x - a\n  var av = x - bv\n  var br = b - bv\n  var ar = a - av\n  var y = ar + br\n  if(y) {\n    return [y, x]\n  }\n  return [x]\n}\n\nfunction robustSubtract(e, f) {\n  var ne = e.length|0\n  var nf = f.length|0\n  if(ne === 1 && nf === 1) {\n    return scalarScalar(e[0], -f[0])\n  }\n  var n = ne + nf\n  var g = new Array(n)\n  var count = 0\n  var eptr = 0\n  var fptr = 0\n  var abs = Math.abs\n  var ei = e[eptr]\n  var ea = abs(ei)\n  var fi = -f[fptr]\n  var fa = abs(fi)\n  var a, b\n  if(ea < fa) {\n    b = ei\n    eptr += 1\n    if(eptr < ne) {\n      ei = e[eptr]\n      ea = abs(ei)\n    }\n  } else {\n    b = fi\n    fptr += 1\n    if(fptr < nf) {\n      fi = -f[fptr]\n      fa = abs(fi)\n    }\n  }\n  if((eptr < ne && ea < fa) || (fptr >= nf)) {\n    a = ei\n    eptr += 1\n    if(eptr < ne) {\n      ei = e[eptr]\n      ea = abs(ei)\n    }\n  } else {\n    a = fi\n    fptr += 1\n    if(fptr < nf) {\n      fi = -f[fptr]\n      fa = abs(fi)\n    }\n  }\n  var x = a + b\n  var bv = x - a\n  var y = b - bv\n  var q0 = y\n  var q1 = x\n  var _x, _bv, _av, _br, _ar\n  while(eptr < ne && fptr < nf) {\n    if(ea < fa) {\n      a = ei\n      eptr += 1\n      if(eptr < ne) {\n        ei = e[eptr]\n        ea = abs(ei)\n      }\n    } else {\n      a = fi\n      fptr += 1\n      if(fptr < nf) {\n        fi = -f[fptr]\n        fa = abs(fi)\n      }\n    }\n    b = q0\n    x = a + b\n    bv = x - a\n    y = b - bv\n    if(y) {\n      g[count++] = y\n    }\n    _x = q1 + x\n    _bv = _x - q1\n    _av = _x - _bv\n    _br = x - _bv\n    _ar = q1 - _av\n    q0 = _ar + _br\n    q1 = _x\n  }\n  while(eptr < ne) {\n    a = ei\n    b = q0\n    x = a + b\n    bv = x - a\n    y = b - bv\n    if(y) {\n      g[count++] = y\n    }\n    _x = q1 + x\n    _bv = _x - q1\n    _av = _x - _bv\n    _br = x - _bv\n    _ar = q1 - _av\n    q0 = _ar + _br\n    q1 = _x\n    eptr += 1\n    if(eptr < ne) {\n      ei = e[eptr]\n    }\n  }\n  while(fptr < nf) {\n    a = fi\n    b = q0\n    x = a + b\n    bv = x - a\n    y = b - bv\n    if(y) {\n      g[count++] = y\n    } \n    _x = q1 + x\n    _bv = _x - q1\n    _av = _x - _bv\n    _br = x - _bv\n    _ar = q1 - _av\n    q0 = _ar + _br\n    q1 = _x\n    fptr += 1\n    if(fptr < nf) {\n      fi = -f[fptr]\n    }\n  }\n  if(q0) {\n    g[count++] = q0\n  }\n  if(q1) {\n    g[count++] = q1\n  }\n  if(!count) {\n    g[count++] = 0.0  \n  }\n  g.length = count\n  return g\n}"]},"metadata":{},"sourceType":"script"}