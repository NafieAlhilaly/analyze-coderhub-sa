{"ast":null,"code":"'use strict';\n\nvar getBounds = require('array-bounds');\n\nmodule.exports = normalize;\n\nfunction normalize(arr, dim, bounds) {\n  if (!arr || arr.length == null) throw Error('Argument should be an array');\n  if (dim == null) dim = 1;\n  if (bounds == null) bounds = getBounds(arr, dim);\n\n  for (var offset = 0; offset < dim; offset++) {\n    var max = bounds[dim + offset],\n        min = bounds[offset],\n        i = offset,\n        l = arr.length;\n\n    if (max === Infinity && min === -Infinity) {\n      for (i = offset; i < l; i += dim) {\n        arr[i] = arr[i] === max ? 1 : arr[i] === min ? 0 : .5;\n      }\n    } else if (max === Infinity) {\n      for (i = offset; i < l; i += dim) {\n        arr[i] = arr[i] === max ? 1 : 0;\n      }\n    } else if (min === -Infinity) {\n      for (i = offset; i < l; i += dim) {\n        arr[i] = arr[i] === min ? 0 : 1;\n      }\n    } else {\n      var range = max - min;\n\n      for (i = offset; i < l; i += dim) {\n        if (!isNaN(arr[i])) {\n          arr[i] = range === 0 ? .5 : (arr[i] - min) / range;\n        }\n      }\n    }\n  }\n\n  return arr;\n}","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/array-normalize/index.js"],"names":["getBounds","require","module","exports","normalize","arr","dim","bounds","length","Error","offset","max","min","i","l","Infinity","range","isNaN"],"mappings":"AAAA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,cAAD,CAAvB;;AAEAC,MAAM,CAACC,OAAP,GAAiBC,SAAjB;;AAEA,SAASA,SAAT,CAAoBC,GAApB,EAAyBC,GAAzB,EAA8BC,MAA9B,EAAsC;AACrC,MAAI,CAACF,GAAD,IAAQA,GAAG,CAACG,MAAJ,IAAc,IAA1B,EAAgC,MAAMC,KAAK,CAAC,6BAAD,CAAX;AAEhC,MAAIH,GAAG,IAAI,IAAX,EAAiBA,GAAG,GAAG,CAAN;AACjB,MAAIC,MAAM,IAAI,IAAd,EAAoBA,MAAM,GAAGP,SAAS,CAACK,GAAD,EAAMC,GAAN,CAAlB;;AAEpB,OAAK,IAAII,MAAM,GAAG,CAAlB,EAAqBA,MAAM,GAAGJ,GAA9B,EAAmCI,MAAM,EAAzC,EAA6C;AAC5C,QAAIC,GAAG,GAAGJ,MAAM,CAACD,GAAG,GAAGI,MAAP,CAAhB;AAAA,QAAgCE,GAAG,GAAGL,MAAM,CAACG,MAAD,CAA5C;AAAA,QAAsDG,CAAC,GAAGH,MAA1D;AAAA,QAAkEI,CAAC,GAAGT,GAAG,CAACG,MAA1E;;AAEA,QAAIG,GAAG,KAAKI,QAAR,IAAoBH,GAAG,KAAK,CAACG,QAAjC,EAA2C;AAC1C,WAAKF,CAAC,GAAGH,MAAT,EAAiBG,CAAC,GAAGC,CAArB,EAAwBD,CAAC,IAAEP,GAA3B,EAAgC;AAC/BD,QAAAA,GAAG,CAACQ,CAAD,CAAH,GAASR,GAAG,CAACQ,CAAD,CAAH,KAAWF,GAAX,GAAiB,CAAjB,GAAqBN,GAAG,CAACQ,CAAD,CAAH,KAAWD,GAAX,GAAiB,CAAjB,GAAqB,EAAnD;AACA;AACD,KAJD,MAKK,IAAID,GAAG,KAAKI,QAAZ,EAAsB;AAC1B,WAAKF,CAAC,GAAGH,MAAT,EAAiBG,CAAC,GAAGC,CAArB,EAAwBD,CAAC,IAAEP,GAA3B,EAAgC;AAC/BD,QAAAA,GAAG,CAACQ,CAAD,CAAH,GAASR,GAAG,CAACQ,CAAD,CAAH,KAAWF,GAAX,GAAiB,CAAjB,GAAqB,CAA9B;AACA;AACD,KAJI,MAKA,IAAIC,GAAG,KAAK,CAACG,QAAb,EAAuB;AAC3B,WAAKF,CAAC,GAAGH,MAAT,EAAiBG,CAAC,GAAGC,CAArB,EAAwBD,CAAC,IAAEP,GAA3B,EAAgC;AAC/BD,QAAAA,GAAG,CAACQ,CAAD,CAAH,GAASR,GAAG,CAACQ,CAAD,CAAH,KAAWD,GAAX,GAAiB,CAAjB,GAAqB,CAA9B;AACA;AACD,KAJI,MAKA;AACJ,UAAII,KAAK,GAAGL,GAAG,GAAGC,GAAlB;;AACA,WAAKC,CAAC,GAAGH,MAAT,EAAiBG,CAAC,GAAGC,CAArB,EAAwBD,CAAC,IAAEP,GAA3B,EAAgC;AAC/B,YAAI,CAACW,KAAK,CAACZ,GAAG,CAACQ,CAAD,CAAJ,CAAV,EAAoB;AACnBR,UAAAA,GAAG,CAACQ,CAAD,CAAH,GAASG,KAAK,KAAK,CAAV,GAAc,EAAd,GAAmB,CAACX,GAAG,CAACQ,CAAD,CAAH,GAASD,GAAV,IAAiBI,KAA7C;AACA;AACD;AACD;AACD;;AAED,SAAOX,GAAP;AACA","sourcesContent":["'use strict'\r\n\r\nvar getBounds = require('array-bounds')\r\n\r\nmodule.exports = normalize;\r\n\r\nfunction normalize (arr, dim, bounds) {\r\n\tif (!arr || arr.length == null) throw Error('Argument should be an array')\r\n\r\n\tif (dim == null) dim = 1\r\n\tif (bounds == null) bounds = getBounds(arr, dim)\r\n\r\n\tfor (var offset = 0; offset < dim; offset++) {\r\n\t\tvar max = bounds[dim + offset], min = bounds[offset], i = offset, l = arr.length;\r\n\r\n\t\tif (max === Infinity && min === -Infinity) {\r\n\t\t\tfor (i = offset; i < l; i+=dim) {\r\n\t\t\t\tarr[i] = arr[i] === max ? 1 : arr[i] === min ? 0 : .5\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (max === Infinity) {\r\n\t\t\tfor (i = offset; i < l; i+=dim) {\r\n\t\t\t\tarr[i] = arr[i] === max ? 1 : 0\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (min === -Infinity) {\r\n\t\t\tfor (i = offset; i < l; i+=dim) {\r\n\t\t\t\tarr[i] = arr[i] === min ? 0 : 1\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tvar range = max - min\r\n\t\t\tfor (i = offset; i < l; i+=dim) {\r\n\t\t\t\tif (!isNaN(arr[i])) {\r\n\t\t\t\t\tarr[i] = range === 0 ? .5 : (arr[i] - min) / range\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn arr;\r\n}\r\n"]},"metadata":{},"sourceType":"script"}