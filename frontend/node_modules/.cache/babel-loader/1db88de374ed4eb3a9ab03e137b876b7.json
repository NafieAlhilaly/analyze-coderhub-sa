{"ast":null,"code":"'use strict';\n\nvar bits = require('bit-twiddle');\n\nvar dup = require('dup');\n\nvar Buffer = require('buffer').Buffer; //Legacy pool support\n\n\nif (!global.__TYPEDARRAY_POOL) {\n  global.__TYPEDARRAY_POOL = {\n    UINT8: dup([32, 0]),\n    UINT16: dup([32, 0]),\n    UINT32: dup([32, 0]),\n    BIGUINT64: dup([32, 0]),\n    INT8: dup([32, 0]),\n    INT16: dup([32, 0]),\n    INT32: dup([32, 0]),\n    BIGINT64: dup([32, 0]),\n    FLOAT: dup([32, 0]),\n    DOUBLE: dup([32, 0]),\n    DATA: dup([32, 0]),\n    UINT8C: dup([32, 0]),\n    BUFFER: dup([32, 0])\n  };\n}\n\nvar hasUint8C = typeof Uint8ClampedArray !== 'undefined';\nvar hasBigUint64 = typeof BigUint64Array !== 'undefined';\nvar hasBigInt64 = typeof BigInt64Array !== 'undefined';\nvar POOL = global.__TYPEDARRAY_POOL; //Upgrade pool\n\nif (!POOL.UINT8C) {\n  POOL.UINT8C = dup([32, 0]);\n}\n\nif (!POOL.BIGUINT64) {\n  POOL.BIGUINT64 = dup([32, 0]);\n}\n\nif (!POOL.BIGINT64) {\n  POOL.BIGINT64 = dup([32, 0]);\n}\n\nif (!POOL.BUFFER) {\n  POOL.BUFFER = dup([32, 0]);\n} //New technique: Only allocate from ArrayBufferView and Buffer\n\n\nvar DATA = POOL.DATA,\n    BUFFER = POOL.BUFFER;\n\nexports.free = function free(array) {\n  if (Buffer.isBuffer(array)) {\n    BUFFER[bits.log2(array.length)].push(array);\n  } else {\n    if (Object.prototype.toString.call(array) !== '[object ArrayBuffer]') {\n      array = array.buffer;\n    }\n\n    if (!array) {\n      return;\n    }\n\n    var n = array.length || array.byteLength;\n    var log_n = bits.log2(n) | 0;\n    DATA[log_n].push(array);\n  }\n};\n\nfunction freeArrayBuffer(buffer) {\n  if (!buffer) {\n    return;\n  }\n\n  var n = buffer.length || buffer.byteLength;\n  var log_n = bits.log2(n);\n  DATA[log_n].push(buffer);\n}\n\nfunction freeTypedArray(array) {\n  freeArrayBuffer(array.buffer);\n}\n\nexports.freeUint8 = exports.freeUint16 = exports.freeUint32 = exports.freeBigUint64 = exports.freeInt8 = exports.freeInt16 = exports.freeInt32 = exports.freeBigInt64 = exports.freeFloat32 = exports.freeFloat = exports.freeFloat64 = exports.freeDouble = exports.freeUint8Clamped = exports.freeDataView = freeTypedArray;\nexports.freeArrayBuffer = freeArrayBuffer;\n\nexports.freeBuffer = function freeBuffer(array) {\n  BUFFER[bits.log2(array.length)].push(array);\n};\n\nexports.malloc = function malloc(n, dtype) {\n  if (dtype === undefined || dtype === 'arraybuffer') {\n    return mallocArrayBuffer(n);\n  } else {\n    switch (dtype) {\n      case 'uint8':\n        return mallocUint8(n);\n\n      case 'uint16':\n        return mallocUint16(n);\n\n      case 'uint32':\n        return mallocUint32(n);\n\n      case 'int8':\n        return mallocInt8(n);\n\n      case 'int16':\n        return mallocInt16(n);\n\n      case 'int32':\n        return mallocInt32(n);\n\n      case 'float':\n      case 'float32':\n        return mallocFloat(n);\n\n      case 'double':\n      case 'float64':\n        return mallocDouble(n);\n\n      case 'uint8_clamped':\n        return mallocUint8Clamped(n);\n\n      case 'bigint64':\n        return mallocBigInt64(n);\n\n      case 'biguint64':\n        return mallocBigUint64(n);\n\n      case 'buffer':\n        return mallocBuffer(n);\n\n      case 'data':\n      case 'dataview':\n        return mallocDataView(n);\n\n      default:\n        return null;\n    }\n  }\n\n  return null;\n};\n\nfunction mallocArrayBuffer(n) {\n  var n = bits.nextPow2(n);\n  var log_n = bits.log2(n);\n  var d = DATA[log_n];\n\n  if (d.length > 0) {\n    return d.pop();\n  }\n\n  return new ArrayBuffer(n);\n}\n\nexports.mallocArrayBuffer = mallocArrayBuffer;\n\nfunction mallocUint8(n) {\n  return new Uint8Array(mallocArrayBuffer(n), 0, n);\n}\n\nexports.mallocUint8 = mallocUint8;\n\nfunction mallocUint16(n) {\n  return new Uint16Array(mallocArrayBuffer(2 * n), 0, n);\n}\n\nexports.mallocUint16 = mallocUint16;\n\nfunction mallocUint32(n) {\n  return new Uint32Array(mallocArrayBuffer(4 * n), 0, n);\n}\n\nexports.mallocUint32 = mallocUint32;\n\nfunction mallocInt8(n) {\n  return new Int8Array(mallocArrayBuffer(n), 0, n);\n}\n\nexports.mallocInt8 = mallocInt8;\n\nfunction mallocInt16(n) {\n  return new Int16Array(mallocArrayBuffer(2 * n), 0, n);\n}\n\nexports.mallocInt16 = mallocInt16;\n\nfunction mallocInt32(n) {\n  return new Int32Array(mallocArrayBuffer(4 * n), 0, n);\n}\n\nexports.mallocInt32 = mallocInt32;\n\nfunction mallocFloat(n) {\n  return new Float32Array(mallocArrayBuffer(4 * n), 0, n);\n}\n\nexports.mallocFloat32 = exports.mallocFloat = mallocFloat;\n\nfunction mallocDouble(n) {\n  return new Float64Array(mallocArrayBuffer(8 * n), 0, n);\n}\n\nexports.mallocFloat64 = exports.mallocDouble = mallocDouble;\n\nfunction mallocUint8Clamped(n) {\n  if (hasUint8C) {\n    return new Uint8ClampedArray(mallocArrayBuffer(n), 0, n);\n  } else {\n    return mallocUint8(n);\n  }\n}\n\nexports.mallocUint8Clamped = mallocUint8Clamped;\n\nfunction mallocBigUint64(n) {\n  if (hasBigUint64) {\n    return new BigUint64Array(mallocArrayBuffer(8 * n), 0, n);\n  } else {\n    return null;\n  }\n}\n\nexports.mallocBigUint64 = mallocBigUint64;\n\nfunction mallocBigInt64(n) {\n  if (hasBigInt64) {\n    return new BigInt64Array(mallocArrayBuffer(8 * n), 0, n);\n  } else {\n    return null;\n  }\n}\n\nexports.mallocBigInt64 = mallocBigInt64;\n\nfunction mallocDataView(n) {\n  return new DataView(mallocArrayBuffer(n), 0, n);\n}\n\nexports.mallocDataView = mallocDataView;\n\nfunction mallocBuffer(n) {\n  n = bits.nextPow2(n);\n  var log_n = bits.log2(n);\n  var cache = BUFFER[log_n];\n\n  if (cache.length > 0) {\n    return cache.pop();\n  }\n\n  return new Buffer(n);\n}\n\nexports.mallocBuffer = mallocBuffer;\n\nexports.clearCache = function clearCache() {\n  for (var i = 0; i < 32; ++i) {\n    POOL.UINT8[i].length = 0;\n    POOL.UINT16[i].length = 0;\n    POOL.UINT32[i].length = 0;\n    POOL.INT8[i].length = 0;\n    POOL.INT16[i].length = 0;\n    POOL.INT32[i].length = 0;\n    POOL.FLOAT[i].length = 0;\n    POOL.DOUBLE[i].length = 0;\n    POOL.BIGUINT64[i].length = 0;\n    POOL.BIGINT64[i].length = 0;\n    POOL.UINT8C[i].length = 0;\n    DATA[i].length = 0;\n    BUFFER[i].length = 0;\n  }\n};","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/typedarray-pool/pool.js"],"names":["bits","require","dup","Buffer","global","__TYPEDARRAY_POOL","UINT8","UINT16","UINT32","BIGUINT64","INT8","INT16","INT32","BIGINT64","FLOAT","DOUBLE","DATA","UINT8C","BUFFER","hasUint8C","Uint8ClampedArray","hasBigUint64","BigUint64Array","hasBigInt64","BigInt64Array","POOL","exports","free","array","isBuffer","log2","length","push","Object","prototype","toString","call","buffer","n","byteLength","log_n","freeArrayBuffer","freeTypedArray","freeUint8","freeUint16","freeUint32","freeBigUint64","freeInt8","freeInt16","freeInt32","freeBigInt64","freeFloat32","freeFloat","freeFloat64","freeDouble","freeUint8Clamped","freeDataView","freeBuffer","malloc","dtype","undefined","mallocArrayBuffer","mallocUint8","mallocUint16","mallocUint32","mallocInt8","mallocInt16","mallocInt32","mallocFloat","mallocDouble","mallocUint8Clamped","mallocBigInt64","mallocBigUint64","mallocBuffer","mallocDataView","nextPow2","d","pop","ArrayBuffer","Uint8Array","Uint16Array","Uint32Array","Int8Array","Int16Array","Int32Array","Float32Array","mallocFloat32","Float64Array","mallocFloat64","DataView","cache","clearCache","i"],"mappings":"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","sourcesContent":["'use strict'\n\nvar bits = require('bit-twiddle')\nvar dup = require('dup')\nvar Buffer = require('buffer').Buffer\n\n//Legacy pool support\nif(!global.__TYPEDARRAY_POOL) {\n  global.__TYPEDARRAY_POOL = {\n      UINT8     : dup([32, 0])\n    , UINT16    : dup([32, 0])\n    , UINT32    : dup([32, 0])\n    , BIGUINT64 : dup([32, 0])\n    , INT8      : dup([32, 0])\n    , INT16     : dup([32, 0])\n    , INT32     : dup([32, 0])\n    , BIGINT64  : dup([32, 0])\n    , FLOAT     : dup([32, 0])\n    , DOUBLE    : dup([32, 0])\n    , DATA      : dup([32, 0])\n    , UINT8C    : dup([32, 0])\n    , BUFFER    : dup([32, 0])\n  }\n}\n\nvar hasUint8C = (typeof Uint8ClampedArray) !== 'undefined'\nvar hasBigUint64 = (typeof BigUint64Array) !== 'undefined'\nvar hasBigInt64 = (typeof BigInt64Array) !== 'undefined'\nvar POOL = global.__TYPEDARRAY_POOL\n\n//Upgrade pool\nif(!POOL.UINT8C) {\n  POOL.UINT8C = dup([32, 0])\n}\nif(!POOL.BIGUINT64) {\n  POOL.BIGUINT64 = dup([32, 0])\n}\nif(!POOL.BIGINT64) {\n  POOL.BIGINT64 = dup([32, 0])\n}\nif(!POOL.BUFFER) {\n  POOL.BUFFER = dup([32, 0])\n}\n\n//New technique: Only allocate from ArrayBufferView and Buffer\nvar DATA    = POOL.DATA\n  , BUFFER  = POOL.BUFFER\n\nexports.free = function free(array) {\n  if(Buffer.isBuffer(array)) {\n    BUFFER[bits.log2(array.length)].push(array)\n  } else {\n    if(Object.prototype.toString.call(array) !== '[object ArrayBuffer]') {\n      array = array.buffer\n    }\n    if(!array) {\n      return\n    }\n    var n = array.length || array.byteLength\n    var log_n = bits.log2(n)|0\n    DATA[log_n].push(array)\n  }\n}\n\nfunction freeArrayBuffer(buffer) {\n  if(!buffer) {\n    return\n  }\n  var n = buffer.length || buffer.byteLength\n  var log_n = bits.log2(n)\n  DATA[log_n].push(buffer)\n}\n\nfunction freeTypedArray(array) {\n  freeArrayBuffer(array.buffer)\n}\n\nexports.freeUint8 =\nexports.freeUint16 =\nexports.freeUint32 =\nexports.freeBigUint64 =\nexports.freeInt8 =\nexports.freeInt16 =\nexports.freeInt32 =\nexports.freeBigInt64 =\nexports.freeFloat32 = \nexports.freeFloat =\nexports.freeFloat64 = \nexports.freeDouble = \nexports.freeUint8Clamped = \nexports.freeDataView = freeTypedArray\n\nexports.freeArrayBuffer = freeArrayBuffer\n\nexports.freeBuffer = function freeBuffer(array) {\n  BUFFER[bits.log2(array.length)].push(array)\n}\n\nexports.malloc = function malloc(n, dtype) {\n  if(dtype === undefined || dtype === 'arraybuffer') {\n    return mallocArrayBuffer(n)\n  } else {\n    switch(dtype) {\n      case 'uint8':\n        return mallocUint8(n)\n      case 'uint16':\n        return mallocUint16(n)\n      case 'uint32':\n        return mallocUint32(n)\n      case 'int8':\n        return mallocInt8(n)\n      case 'int16':\n        return mallocInt16(n)\n      case 'int32':\n        return mallocInt32(n)\n      case 'float':\n      case 'float32':\n        return mallocFloat(n)\n      case 'double':\n      case 'float64':\n        return mallocDouble(n)\n      case 'uint8_clamped':\n        return mallocUint8Clamped(n)\n      case 'bigint64':\n        return mallocBigInt64(n)\n      case 'biguint64':\n        return mallocBigUint64(n)\n      case 'buffer':\n        return mallocBuffer(n)\n      case 'data':\n      case 'dataview':\n        return mallocDataView(n)\n\n      default:\n        return null\n    }\n  }\n  return null\n}\n\nfunction mallocArrayBuffer(n) {\n  var n = bits.nextPow2(n)\n  var log_n = bits.log2(n)\n  var d = DATA[log_n]\n  if(d.length > 0) {\n    return d.pop()\n  }\n  return new ArrayBuffer(n)\n}\nexports.mallocArrayBuffer = mallocArrayBuffer\n\nfunction mallocUint8(n) {\n  return new Uint8Array(mallocArrayBuffer(n), 0, n)\n}\nexports.mallocUint8 = mallocUint8\n\nfunction mallocUint16(n) {\n  return new Uint16Array(mallocArrayBuffer(2*n), 0, n)\n}\nexports.mallocUint16 = mallocUint16\n\nfunction mallocUint32(n) {\n  return new Uint32Array(mallocArrayBuffer(4*n), 0, n)\n}\nexports.mallocUint32 = mallocUint32\n\nfunction mallocInt8(n) {\n  return new Int8Array(mallocArrayBuffer(n), 0, n)\n}\nexports.mallocInt8 = mallocInt8\n\nfunction mallocInt16(n) {\n  return new Int16Array(mallocArrayBuffer(2*n), 0, n)\n}\nexports.mallocInt16 = mallocInt16\n\nfunction mallocInt32(n) {\n  return new Int32Array(mallocArrayBuffer(4*n), 0, n)\n}\nexports.mallocInt32 = mallocInt32\n\nfunction mallocFloat(n) {\n  return new Float32Array(mallocArrayBuffer(4*n), 0, n)\n}\nexports.mallocFloat32 = exports.mallocFloat = mallocFloat\n\nfunction mallocDouble(n) {\n  return new Float64Array(mallocArrayBuffer(8*n), 0, n)\n}\nexports.mallocFloat64 = exports.mallocDouble = mallocDouble\n\nfunction mallocUint8Clamped(n) {\n  if(hasUint8C) {\n    return new Uint8ClampedArray(mallocArrayBuffer(n), 0, n)\n  } else {\n    return mallocUint8(n)\n  }\n}\nexports.mallocUint8Clamped = mallocUint8Clamped\n\nfunction mallocBigUint64(n) {\n  if(hasBigUint64) {\n    return new BigUint64Array(mallocArrayBuffer(8*n), 0, n)\n  } else {\n    return null;\n  }\n}\nexports.mallocBigUint64 = mallocBigUint64\n\nfunction mallocBigInt64(n) {\n  if (hasBigInt64) {\n    return new BigInt64Array(mallocArrayBuffer(8*n), 0, n)\n  } else {\n    return null;\n  }\n}\nexports.mallocBigInt64 = mallocBigInt64\n\nfunction mallocDataView(n) {\n  return new DataView(mallocArrayBuffer(n), 0, n)\n}\nexports.mallocDataView = mallocDataView\n\nfunction mallocBuffer(n) {\n  n = bits.nextPow2(n)\n  var log_n = bits.log2(n)\n  var cache = BUFFER[log_n]\n  if(cache.length > 0) {\n    return cache.pop()\n  }\n  return new Buffer(n)\n}\nexports.mallocBuffer = mallocBuffer\n\nexports.clearCache = function clearCache() {\n  for(var i=0; i<32; ++i) {\n    POOL.UINT8[i].length = 0\n    POOL.UINT16[i].length = 0\n    POOL.UINT32[i].length = 0\n    POOL.INT8[i].length = 0\n    POOL.INT16[i].length = 0\n    POOL.INT32[i].length = 0\n    POOL.FLOAT[i].length = 0\n    POOL.DOUBLE[i].length = 0\n    POOL.BIGUINT64[i].length = 0\n    POOL.BIGINT64[i].length = 0\n    POOL.UINT8C[i].length = 0\n    DATA[i].length = 0\n    BUFFER[i].length = 0\n  }\n}\n"]},"metadata":{},"sourceType":"script"}