{"ast":null,"code":"'use strict';\n\nvar colorScaleAttrs = require('../../components/colorscale/attributes');\n\nvar axisHoverFormat = require('../../plots/cartesian/axis_format_attributes').axisHoverFormat;\n\nvar hovertemplateAttrs = require('../../plots/template_attributes').hovertemplateAttrs;\n\nvar mesh3dAttrs = require('../mesh3d/attributes');\n\nvar baseAttrs = require('../../plots/attributes');\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nvar attrs = {\n  x: {\n    valType: 'data_array',\n    editType: 'calc+clearAxisTypes',\n    description: ['Sets the x coordinates of the vector field', 'and of the displayed cones.'].join(' ')\n  },\n  y: {\n    valType: 'data_array',\n    editType: 'calc+clearAxisTypes',\n    description: ['Sets the y coordinates of the vector field', 'and of the displayed cones.'].join(' ')\n  },\n  z: {\n    valType: 'data_array',\n    editType: 'calc+clearAxisTypes',\n    description: ['Sets the z coordinates of the vector field', 'and of the displayed cones.'].join(' ')\n  },\n  u: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: 'Sets the x components of the vector field.'\n  },\n  v: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: 'Sets the y components of the vector field.'\n  },\n  w: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: 'Sets the z components of the vector field.'\n  },\n  // TODO add way to specify cone positions independently of the vector field\n  // provided, similar to MATLAB's coneplot Cx/Cy/Cz meshgrids,\n  // see https://www.mathworks.com/help/matlab/ref/coneplot.html\n  //\n  // Alternatively, if our goal is only to 'fill in gaps' in the vector data,\n  // we could try to extend the heatmap 'connectgaps' algorithm to 3D.\n  // From AJ: this particular algorithm which amounts to a Poisson equation,\n  // both for interpolation and extrapolation - is the right one to use for\n  // cones too.  It makes a field with zero divergence, which is a good\n  // baseline assumption for vector fields.\n  //\n  // cones: {\n  //     // potential attributes to add:\n  //     //\n  //     // - meshmode: 'cartesian-product', 'pts', 'grid'\n  //     //\n  //     // under `meshmode: 'grid'`\n  //     // - (x|y|z)grid.start\n  //     // - (x|y|z)grid.end\n  //     // - (x|y|z)grid.size\n  //\n  //     x: {\n  //         valType: 'data_array',\n  //         editType: 'calc',\n  //         description: 'Sets the x coordinates of the cones to be displayed.'\n  //     },\n  //     y: {\n  //         valType: 'data_array',\n  //         editType: 'calc',\n  //         description: 'Sets the y coordinates of the cones to be displayed.'\n  //     },\n  //     z: {\n  //         valType: 'data_array',\n  //         editType: 'calc',\n  //         description: 'Sets the z coordinates of the cones to be displayed.'\n  //     },\n  //\n  //     editType: 'calc',\n  //     description: [\n  //         'By setting `cones.x`, `cones.y` and `cones.z` to 1D arrays,',\n  //         'plotly creates a mesh using the cartesian product of those 3 arrays.'\n  //     ].join(' ')\n  // },\n  sizemode: {\n    valType: 'enumerated',\n    values: ['scaled', 'absolute'],\n    editType: 'calc',\n    dflt: 'scaled',\n    description: ['Determines whether `sizeref` is set as a *scaled* (i.e unitless) scalar', '(normalized by the max u/v/w norm in the vector field) or as', '*absolute* value (in the same units as the vector field).'].join(' ')\n  },\n  sizeref: {\n    valType: 'number',\n    editType: 'calc',\n    min: 0,\n    description: ['Adjusts the cone size scaling.', 'The size of the cones is determined by their u/v/w norm multiplied a factor and `sizeref`.', 'This factor (computed internally) corresponds to the minimum \"time\" to travel across', 'two successive x/y/z positions at the average velocity of those two successive positions.', 'All cones in a given trace use the same factor.', 'With `sizemode` set to *scaled*, `sizeref` is unitless, its default value is *0.5*', 'With `sizemode` set to *absolute*, `sizeref` has the same units as the u/v/w vector field,', 'its the default value is half the sample\\'s maximum vector norm.'].join(' ')\n  },\n  anchor: {\n    valType: 'enumerated',\n    editType: 'calc',\n    values: ['tip', 'tail', 'cm', 'center'],\n    dflt: 'cm',\n    description: ['Sets the cones\\' anchor with respect to their x/y/z positions.', 'Note that *cm* denote the cone\\'s center of mass which corresponds to', '1/4 from the tail to tip.'].join(' ')\n  },\n  text: {\n    valType: 'string',\n    dflt: '',\n    arrayOk: true,\n    editType: 'calc',\n    description: ['Sets the text elements associated with the cones.', 'If trace `hoverinfo` contains a *text* flag and *hovertext* is not set,', 'these elements will be seen in the hover labels.'].join(' ')\n  },\n  hovertext: {\n    valType: 'string',\n    dflt: '',\n    arrayOk: true,\n    editType: 'calc',\n    description: 'Same as `text`.'\n  },\n  hovertemplate: hovertemplateAttrs({\n    editType: 'calc'\n  }, {\n    keys: ['norm']\n  }),\n  uhoverformat: axisHoverFormat('u', 1),\n  vhoverformat: axisHoverFormat('v', 1),\n  whoverformat: axisHoverFormat('w', 1),\n  xhoverformat: axisHoverFormat('x'),\n  yhoverformat: axisHoverFormat('y'),\n  zhoverformat: axisHoverFormat('z'),\n  showlegend: extendFlat({}, baseAttrs.showlegend, {\n    dflt: false\n  })\n};\nextendFlat(attrs, colorScaleAttrs('', {\n  colorAttr: 'u/v/w norm',\n  showScaleDflt: true,\n  editTypeOverride: 'calc'\n}));\nvar fromMesh3d = ['opacity', 'lightposition', 'lighting'];\nfromMesh3d.forEach(function (k) {\n  attrs[k] = mesh3dAttrs[k];\n});\nattrs.hoverinfo = extendFlat({}, baseAttrs.hoverinfo, {\n  editType: 'calc',\n  flags: ['x', 'y', 'z', 'u', 'v', 'w', 'norm', 'text', 'name'],\n  dflt: 'x+y+z+norm+text+name'\n});\nattrs.transforms = undefined;\nmodule.exports = attrs;","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/plotly.js/src/traces/cone/attributes.js"],"names":["colorScaleAttrs","require","axisHoverFormat","hovertemplateAttrs","mesh3dAttrs","baseAttrs","extendFlat","attrs","x","valType","editType","description","join","y","z","u","v","w","sizemode","values","dflt","sizeref","min","anchor","text","arrayOk","hovertext","hovertemplate","keys","uhoverformat","vhoverformat","whoverformat","xhoverformat","yhoverformat","zhoverformat","showlegend","colorAttr","showScaleDflt","editTypeOverride","fromMesh3d","forEach","k","hoverinfo","flags","transforms","undefined","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar colorScaleAttrs = require('../../components/colorscale/attributes');\nvar axisHoverFormat = require('../../plots/cartesian/axis_format_attributes').axisHoverFormat;\nvar hovertemplateAttrs = require('../../plots/template_attributes').hovertemplateAttrs;\nvar mesh3dAttrs = require('../mesh3d/attributes');\nvar baseAttrs = require('../../plots/attributes');\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nvar attrs = {\n    x: {\n        valType: 'data_array',\n        editType: 'calc+clearAxisTypes',\n        description: [\n            'Sets the x coordinates of the vector field',\n            'and of the displayed cones.'\n        ].join(' ')\n    },\n    y: {\n        valType: 'data_array',\n        editType: 'calc+clearAxisTypes',\n        description: [\n            'Sets the y coordinates of the vector field',\n            'and of the displayed cones.'\n        ].join(' ')\n    },\n    z: {\n        valType: 'data_array',\n        editType: 'calc+clearAxisTypes',\n        description: [\n            'Sets the z coordinates of the vector field',\n            'and of the displayed cones.'\n        ].join(' ')\n    },\n\n    u: {\n        valType: 'data_array',\n        editType: 'calc',\n        description: 'Sets the x components of the vector field.'\n    },\n    v: {\n        valType: 'data_array',\n        editType: 'calc',\n        description: 'Sets the y components of the vector field.'\n    },\n    w: {\n        valType: 'data_array',\n        editType: 'calc',\n        description: 'Sets the z components of the vector field.'\n    },\n\n    // TODO add way to specify cone positions independently of the vector field\n    // provided, similar to MATLAB's coneplot Cx/Cy/Cz meshgrids,\n    // see https://www.mathworks.com/help/matlab/ref/coneplot.html\n    //\n    // Alternatively, if our goal is only to 'fill in gaps' in the vector data,\n    // we could try to extend the heatmap 'connectgaps' algorithm to 3D.\n    // From AJ: this particular algorithm which amounts to a Poisson equation,\n    // both for interpolation and extrapolation - is the right one to use for\n    // cones too.  It makes a field with zero divergence, which is a good\n    // baseline assumption for vector fields.\n    //\n    // cones: {\n    //     // potential attributes to add:\n    //     //\n    //     // - meshmode: 'cartesian-product', 'pts', 'grid'\n    //     //\n    //     // under `meshmode: 'grid'`\n    //     // - (x|y|z)grid.start\n    //     // - (x|y|z)grid.end\n    //     // - (x|y|z)grid.size\n    //\n    //     x: {\n    //         valType: 'data_array',\n    //         editType: 'calc',\n    //         description: 'Sets the x coordinates of the cones to be displayed.'\n    //     },\n    //     y: {\n    //         valType: 'data_array',\n    //         editType: 'calc',\n    //         description: 'Sets the y coordinates of the cones to be displayed.'\n    //     },\n    //     z: {\n    //         valType: 'data_array',\n    //         editType: 'calc',\n    //         description: 'Sets the z coordinates of the cones to be displayed.'\n    //     },\n    //\n    //     editType: 'calc',\n    //     description: [\n    //         'By setting `cones.x`, `cones.y` and `cones.z` to 1D arrays,',\n    //         'plotly creates a mesh using the cartesian product of those 3 arrays.'\n    //     ].join(' ')\n    // },\n\n    sizemode: {\n        valType: 'enumerated',\n        values: ['scaled', 'absolute'],\n        editType: 'calc',\n        dflt: 'scaled',\n        description: [\n            'Determines whether `sizeref` is set as a *scaled* (i.e unitless) scalar',\n            '(normalized by the max u/v/w norm in the vector field) or as',\n            '*absolute* value (in the same units as the vector field).'\n        ].join(' ')\n    },\n    sizeref: {\n        valType: 'number',\n        editType: 'calc',\n        min: 0,\n        description: [\n            'Adjusts the cone size scaling.',\n            'The size of the cones is determined by their u/v/w norm multiplied a factor and `sizeref`.',\n            'This factor (computed internally) corresponds to the minimum \"time\" to travel across',\n            'two successive x/y/z positions at the average velocity of those two successive positions.',\n            'All cones in a given trace use the same factor.',\n            'With `sizemode` set to *scaled*, `sizeref` is unitless, its default value is *0.5*',\n            'With `sizemode` set to *absolute*, `sizeref` has the same units as the u/v/w vector field,',\n            'its the default value is half the sample\\'s maximum vector norm.'\n        ].join(' ')\n    },\n\n    anchor: {\n        valType: 'enumerated',\n        editType: 'calc',\n        values: ['tip', 'tail', 'cm', 'center'],\n        dflt: 'cm',\n        description: [\n            'Sets the cones\\' anchor with respect to their x/y/z positions.',\n            'Note that *cm* denote the cone\\'s center of mass which corresponds to',\n            '1/4 from the tail to tip.'\n        ].join(' ')\n    },\n\n    text: {\n        valType: 'string',\n        dflt: '',\n        arrayOk: true,\n        editType: 'calc',\n        description: [\n            'Sets the text elements associated with the cones.',\n            'If trace `hoverinfo` contains a *text* flag and *hovertext* is not set,',\n            'these elements will be seen in the hover labels.'\n        ].join(' ')\n    },\n    hovertext: {\n        valType: 'string',\n        dflt: '',\n        arrayOk: true,\n        editType: 'calc',\n        description: 'Same as `text`.'\n    },\n\n    hovertemplate: hovertemplateAttrs({editType: 'calc'}, {keys: ['norm']}),\n    uhoverformat: axisHoverFormat('u', 1),\n    vhoverformat: axisHoverFormat('v', 1),\n    whoverformat: axisHoverFormat('w', 1),\n    xhoverformat: axisHoverFormat('x'),\n    yhoverformat: axisHoverFormat('y'),\n    zhoverformat: axisHoverFormat('z'),\n\n    showlegend: extendFlat({}, baseAttrs.showlegend, {dflt: false})\n};\n\nextendFlat(attrs, colorScaleAttrs('', {\n    colorAttr: 'u/v/w norm',\n    showScaleDflt: true,\n    editTypeOverride: 'calc'\n}));\n\nvar fromMesh3d = ['opacity', 'lightposition', 'lighting'];\n\nfromMesh3d.forEach(function(k) {\n    attrs[k] = mesh3dAttrs[k];\n});\n\nattrs.hoverinfo = extendFlat({}, baseAttrs.hoverinfo, {\n    editType: 'calc',\n    flags: ['x', 'y', 'z', 'u', 'v', 'w', 'norm', 'text', 'name'],\n    dflt: 'x+y+z+norm+text+name'\n});\n\nattrs.transforms = undefined;\n\nmodule.exports = attrs;\n"]},"metadata":{},"sourceType":"script"}