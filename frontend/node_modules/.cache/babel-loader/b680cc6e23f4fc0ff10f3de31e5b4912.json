{"ast":null,"code":"var rootPosition = {\n  left: 0,\n  top: 0\n};\nmodule.exports = mouseEventOffset;\n\nfunction mouseEventOffset(ev, target, out) {\n  target = target || ev.currentTarget || ev.srcElement;\n\n  if (!Array.isArray(out)) {\n    out = [0, 0];\n  }\n\n  var cx = ev.clientX || 0;\n  var cy = ev.clientY || 0;\n  var rect = getBoundingClientOffset(target);\n  out[0] = cx - rect.left;\n  out[1] = cy - rect.top;\n  return out;\n}\n\nfunction getBoundingClientOffset(element) {\n  if (element === window || element === document || element === document.body) {\n    return rootPosition;\n  } else {\n    return element.getBoundingClientRect();\n  }\n}","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/mouse-event-offset/index.js"],"names":["rootPosition","left","top","module","exports","mouseEventOffset","ev","target","out","currentTarget","srcElement","Array","isArray","cx","clientX","cy","clientY","rect","getBoundingClientOffset","element","window","document","body","getBoundingClientRect"],"mappings":"AAAA,IAAIA,YAAY,GAAG;AAAEC,EAAAA,IAAI,EAAE,CAAR;AAAWC,EAAAA,GAAG,EAAE;AAAhB,CAAnB;AAEAC,MAAM,CAACC,OAAP,GAAiBC,gBAAjB;;AACA,SAASA,gBAAT,CAA2BC,EAA3B,EAA+BC,MAA/B,EAAuCC,GAAvC,EAA4C;AAC1CD,EAAAA,MAAM,GAAGA,MAAM,IAAID,EAAE,CAACG,aAAb,IAA8BH,EAAE,CAACI,UAA1C;;AACA,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcJ,GAAd,CAAL,EAAyB;AACvBA,IAAAA,GAAG,GAAG,CAAE,CAAF,EAAK,CAAL,CAAN;AACD;;AACD,MAAIK,EAAE,GAAGP,EAAE,CAACQ,OAAH,IAAc,CAAvB;AACA,MAAIC,EAAE,GAAGT,EAAE,CAACU,OAAH,IAAc,CAAvB;AACA,MAAIC,IAAI,GAAGC,uBAAuB,CAACX,MAAD,CAAlC;AACAC,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASK,EAAE,GAAGI,IAAI,CAAChB,IAAnB;AACAO,EAAAA,GAAG,CAAC,CAAD,CAAH,GAASO,EAAE,GAAGE,IAAI,CAACf,GAAnB;AACA,SAAOM,GAAP;AACD;;AAED,SAASU,uBAAT,CAAkCC,OAAlC,EAA2C;AACzC,MAAIA,OAAO,KAAKC,MAAZ,IACAD,OAAO,KAAKE,QADZ,IAEAF,OAAO,KAAKE,QAAQ,CAACC,IAFzB,EAE+B;AAC7B,WAAOtB,YAAP;AACD,GAJD,MAIO;AACL,WAAOmB,OAAO,CAACI,qBAAR,EAAP;AACD;AACF","sourcesContent":["var rootPosition = { left: 0, top: 0 }\n\nmodule.exports = mouseEventOffset\nfunction mouseEventOffset (ev, target, out) {\n  target = target || ev.currentTarget || ev.srcElement\n  if (!Array.isArray(out)) {\n    out = [ 0, 0 ]\n  }\n  var cx = ev.clientX || 0\n  var cy = ev.clientY || 0\n  var rect = getBoundingClientOffset(target)\n  out[0] = cx - rect.left\n  out[1] = cy - rect.top\n  return out\n}\n\nfunction getBoundingClientOffset (element) {\n  if (element === window ||\n      element === document ||\n      element === document.body) {\n    return rootPosition\n  } else {\n    return element.getBoundingClientRect()\n  }\n}\n"]},"metadata":{},"sourceType":"script"}