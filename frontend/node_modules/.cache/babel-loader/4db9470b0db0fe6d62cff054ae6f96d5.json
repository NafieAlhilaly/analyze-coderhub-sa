{"ast":null,"code":"'use strict';\n\nmodule.exports = textGet;\n\nvar vectorizeText = require('vectorize-text');\n\nvar globals = window || process.global || {};\n\nvar __TEXT_CACHE = globals.__TEXT_CACHE || {};\n\nglobals.__TEXT_CACHE = {};\n\nfunction unwrap(mesh) {\n  var cells = mesh.cells;\n  var positions = mesh.positions;\n  var data = new Float32Array(cells.length * 6);\n  var ptr = 0;\n  var shapeX = 0;\n\n  for (var i = 0; i < cells.length; ++i) {\n    var tri = cells[i];\n\n    for (var j = 0; j < 3; ++j) {\n      var point = positions[tri[j]];\n      data[ptr++] = point[0];\n      data[ptr++] = point[1] + 1.4;\n      shapeX = Math.max(point[0], shapeX);\n    }\n  }\n\n  return {\n    data: data,\n    shape: shapeX\n  };\n}\n\nfunction textGet(font, text, opts) {\n  var opts = opts || {};\n  var fontcache = __TEXT_CACHE[font];\n\n  if (!fontcache) {\n    fontcache = __TEXT_CACHE[font] = {\n      ' ': {\n        data: new Float32Array(0),\n        shape: 0.2\n      }\n    };\n  }\n\n  var mesh = fontcache[text];\n\n  if (!mesh) {\n    if (text.length <= 1 || !/\\d/.test(text)) {\n      mesh = fontcache[text] = unwrap(vectorizeText(text, {\n        triangles: true,\n        font: font,\n        textAlign: opts.textAlign || 'left',\n        textBaseline: 'alphabetic',\n        styletags: {\n          breaklines: true,\n          bolds: true,\n          italics: true,\n          subscripts: true,\n          superscripts: true\n        }\n      }));\n    } else {\n      var parts = text.split(/(\\d|\\s)/);\n      var buffer = new Array(parts.length);\n      var bufferSize = 0;\n      var shapeX = 0;\n\n      for (var i = 0; i < parts.length; ++i) {\n        buffer[i] = textGet(font, parts[i]);\n        bufferSize += buffer[i].data.length;\n        shapeX += buffer[i].shape;\n\n        if (i > 0) {\n          shapeX += 0.02;\n        }\n      }\n\n      var data = new Float32Array(bufferSize);\n      var ptr = 0;\n      var xOffset = -0.5 * shapeX;\n\n      for (var i = 0; i < buffer.length; ++i) {\n        var bdata = buffer[i].data;\n\n        for (var j = 0; j < bdata.length; j += 2) {\n          data[ptr++] = bdata[j] + xOffset;\n          data[ptr++] = bdata[j + 1];\n        }\n\n        xOffset += buffer[i].shape + 0.02;\n      }\n\n      mesh = fontcache[text] = {\n        data: data,\n        shape: shapeX\n      };\n    }\n  }\n\n  return mesh;\n}","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/text-cache/textcache.js"],"names":["module","exports","textGet","vectorizeText","require","globals","window","process","global","__TEXT_CACHE","unwrap","mesh","cells","positions","data","Float32Array","length","ptr","shapeX","i","tri","j","point","Math","max","shape","font","text","opts","fontcache","test","triangles","textAlign","textBaseline","styletags","breaklines","bolds","italics","subscripts","superscripts","parts","split","buffer","Array","bufferSize","xOffset","bdata"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,OAAjB;;AAEA,IAAIC,aAAa,GAAGC,OAAO,CAAC,gBAAD,CAA3B;;AAEA,IAAIC,OAAO,GAAGC,MAAM,IAAIC,OAAO,CAACC,MAAlB,IAA4B,EAA1C;;AACA,IAAIC,YAAY,GAAIJ,OAAO,CAACI,YAAR,IAAwB,EAA5C;;AACAJ,OAAO,CAACI,YAAR,GAAuB,EAAvB;;AAEA,SAASC,MAAT,CAAgBC,IAAhB,EAAsB;AACpB,MAAIC,KAAK,GAAOD,IAAI,CAACC,KAArB;AACA,MAAIC,SAAS,GAAGF,IAAI,CAACE,SAArB;AACA,MAAIC,IAAI,GAAQ,IAAIC,YAAJ,CAAiBH,KAAK,CAACI,MAAN,GAAe,CAAhC,CAAhB;AACA,MAAIC,GAAG,GAAS,CAAhB;AACA,MAAIC,MAAM,GAAM,CAAhB;;AACA,OAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACP,KAAK,CAACI,MAArB,EAA6B,EAAEG,CAA/B,EAAkC;AAChC,QAAIC,GAAG,GAAGR,KAAK,CAACO,CAAD,CAAf;;AACA,SAAI,IAAIE,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAC,CAAf,EAAkB,EAAEA,CAApB,EAAuB;AACrB,UAAIC,KAAK,GAAGT,SAAS,CAACO,GAAG,CAACC,CAAD,CAAJ,CAArB;AACAP,MAAAA,IAAI,CAACG,GAAG,EAAJ,CAAJ,GAAcK,KAAK,CAAC,CAAD,CAAnB;AACAR,MAAAA,IAAI,CAACG,GAAG,EAAJ,CAAJ,GAAcK,KAAK,CAAC,CAAD,CAAL,GAAW,GAAzB;AACAJ,MAAAA,MAAM,GAAQK,IAAI,CAACC,GAAL,CAASF,KAAK,CAAC,CAAD,CAAd,EAAmBJ,MAAnB,CAAd;AACD;AACF;;AACD,SAAO;AACLJ,IAAAA,IAAI,EAAGA,IADF;AAELW,IAAAA,KAAK,EAAEP;AAFF,GAAP;AAID;;AAED,SAAShB,OAAT,CAAiBwB,IAAjB,EAAuBC,IAAvB,EAA6BC,IAA7B,EAAmC;AACjC,MAAIA,IAAI,GAAGA,IAAI,IAAI,EAAnB;AACA,MAAIC,SAAS,GAAGpB,YAAY,CAACiB,IAAD,CAA5B;;AACA,MAAG,CAACG,SAAJ,EAAe;AACbA,IAAAA,SAAS,GAAGpB,YAAY,CAACiB,IAAD,CAAZ,GAAqB;AAC/B,WAAK;AACHZ,QAAAA,IAAI,EAAI,IAAIC,YAAJ,CAAiB,CAAjB,CADL;AAEHU,QAAAA,KAAK,EAAE;AAFJ;AAD0B,KAAjC;AAMD;;AACD,MAAId,IAAI,GAAGkB,SAAS,CAACF,IAAD,CAApB;;AACA,MAAG,CAAChB,IAAJ,EAAU;AACR,QAAGgB,IAAI,CAACX,MAAL,IAAe,CAAf,IAAoB,CAAC,KAAKc,IAAL,CAAUH,IAAV,CAAxB,EAAyC;AACvChB,MAAAA,IAAI,GAAGkB,SAAS,CAACF,IAAD,CAAT,GAAkBjB,MAAM,CAACP,aAAa,CAACwB,IAAD,EAAO;AAClDI,QAAAA,SAAS,EAAM,IADmC;AAElDL,QAAAA,IAAI,EAAWA,IAFmC;AAGlDM,QAAAA,SAAS,EAAMJ,IAAI,CAACI,SAAL,IAAkB,MAHiB;AAIlDC,QAAAA,YAAY,EAAG,YAJmC;AAKlDC,QAAAA,SAAS,EAAE;AACPC,UAAAA,UAAU,EAAE,IADL;AAEFC,UAAAA,KAAK,EAAE,IAFL;AAGJC,UAAAA,OAAO,EAAE,IAHL;AAIPC,UAAAA,UAAU,EAAE,IAJL;AAKTC,UAAAA,YAAY,EAAE;AALL;AALuC,OAAP,CAAd,CAA/B;AAaD,KAdD,MAcO;AACL,UAAIC,KAAK,GAAGb,IAAI,CAACc,KAAL,CAAW,SAAX,CAAZ;AACA,UAAIC,MAAM,GAAG,IAAIC,KAAJ,CAAUH,KAAK,CAACxB,MAAhB,CAAb;AACA,UAAI4B,UAAU,GAAG,CAAjB;AACA,UAAI1B,MAAM,GAAG,CAAb;;AACA,WAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACqB,KAAK,CAACxB,MAArB,EAA6B,EAAEG,CAA/B,EAAkC;AAChCuB,QAAAA,MAAM,CAACvB,CAAD,CAAN,GAAYjB,OAAO,CAACwB,IAAD,EAAOc,KAAK,CAACrB,CAAD,CAAZ,CAAnB;AACAyB,QAAAA,UAAU,IAAIF,MAAM,CAACvB,CAAD,CAAN,CAAUL,IAAV,CAAeE,MAA7B;AACAE,QAAAA,MAAM,IAAIwB,MAAM,CAACvB,CAAD,CAAN,CAAUM,KAApB;;AACA,YAAGN,CAAC,GAAC,CAAL,EAAQ;AACND,UAAAA,MAAM,IAAI,IAAV;AACD;AACF;;AAED,UAAIJ,IAAI,GAAG,IAAIC,YAAJ,CAAiB6B,UAAjB,CAAX;AACA,UAAI3B,GAAG,GAAO,CAAd;AACA,UAAI4B,OAAO,GAAG,CAAC,GAAD,GAAO3B,MAArB;;AACA,WAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACuB,MAAM,CAAC1B,MAAtB,EAA8B,EAAEG,CAAhC,EAAmC;AACjC,YAAI2B,KAAK,GAAGJ,MAAM,CAACvB,CAAD,CAAN,CAAUL,IAAtB;;AACA,aAAI,IAAIO,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACyB,KAAK,CAAC9B,MAArB,EAA6BK,CAAC,IAAE,CAAhC,EAAmC;AACjCP,UAAAA,IAAI,CAACG,GAAG,EAAJ,CAAJ,GAAc6B,KAAK,CAACzB,CAAD,CAAL,GAAWwB,OAAzB;AACA/B,UAAAA,IAAI,CAACG,GAAG,EAAJ,CAAJ,GAAc6B,KAAK,CAACzB,CAAC,GAAC,CAAH,CAAnB;AACD;;AACDwB,QAAAA,OAAO,IAAIH,MAAM,CAACvB,CAAD,CAAN,CAAUM,KAAV,GAAkB,IAA7B;AACD;;AAEDd,MAAAA,IAAI,GAAGkB,SAAS,CAACF,IAAD,CAAT,GAAkB;AACvBb,QAAAA,IAAI,EAAGA,IADgB;AAEvBW,QAAAA,KAAK,EAAEP;AAFgB,OAAzB;AAID;AACF;;AAEA,SAAOP,IAAP;AACF","sourcesContent":["'use strict'\n\nmodule.exports = textGet\n\nvar vectorizeText = require('vectorize-text')\n\nvar globals = window || process.global || {}\nvar __TEXT_CACHE  = globals.__TEXT_CACHE || {}\nglobals.__TEXT_CACHE = {}\n\nfunction unwrap(mesh) {\n  var cells     = mesh.cells\n  var positions = mesh.positions\n  var data      = new Float32Array(cells.length * 6)\n  var ptr       = 0\n  var shapeX    = 0\n  for(var i=0; i<cells.length; ++i) {\n    var tri = cells[i]\n    for(var j=0; j<3; ++j) {\n      var point = positions[tri[j]]\n      data[ptr++] = point[0]\n      data[ptr++] = point[1] + 1.4\n      shapeX      = Math.max(point[0], shapeX)\n    }\n  }\n  return {\n    data:  data,\n    shape: shapeX\n  }\n}\n\nfunction textGet(font, text, opts) {\n  var opts = opts || {}\n  var fontcache = __TEXT_CACHE[font]\n  if(!fontcache) {\n    fontcache = __TEXT_CACHE[font] = {\n      ' ': {\n        data:   new Float32Array(0),\n        shape: 0.2\n      }\n    }\n  }\n  var mesh = fontcache[text]\n  if(!mesh) {\n    if(text.length <= 1 || !/\\d/.test(text)) {\n      mesh = fontcache[text] = unwrap(vectorizeText(text, {\n        triangles:     true,\n        font:          font,\n        textAlign:     opts.textAlign || 'left',\n        textBaseline:  'alphabetic',\n        styletags: {\n            breaklines: true,\n                 bolds: true,\n               italics: true,\n            subscripts: true,\n          superscripts: true\n        }\n      }))\n    } else {\n      var parts = text.split(/(\\d|\\s)/)\n      var buffer = new Array(parts.length)\n      var bufferSize = 0\n      var shapeX = 0\n      for(var i=0; i<parts.length; ++i) {\n        buffer[i] = textGet(font, parts[i])\n        bufferSize += buffer[i].data.length\n        shapeX += buffer[i].shape\n        if(i>0) {\n          shapeX += 0.02\n        }\n      }\n\n      var data = new Float32Array(bufferSize)\n      var ptr     = 0\n      var xOffset = -0.5 * shapeX\n      for(var i=0; i<buffer.length; ++i) {\n        var bdata = buffer[i].data\n        for(var j=0; j<bdata.length; j+=2) {\n          data[ptr++] = bdata[j] + xOffset\n          data[ptr++] = bdata[j+1]\n        }\n        xOffset += buffer[i].shape + 0.02\n      }\n\n      mesh = fontcache[text] = {\n        data:  data,\n        shape: shapeX\n      }\n    }\n  }\n\n   return mesh\n}\n"]},"metadata":{},"sourceType":"script"}