{"ast":null,"code":"'use strict';\n/*\n * Evaluates the derivative of a list of control point arrays. That is, it expects an array or arrays\n * that are expanded relative to the raw data to include the bicubic control points, if applicable. If\n * only linear interpolation is desired, then the data points correspond 1-1 along that axis to the\n * data itself. Since it's catmull-rom splines in either direction note in particular that the\n * derivatives are discontinuous across cell boundaries. That's the reason you need both the *cell*\n * and the *point within the cell*.\n *\n * Also note that the discontinuity of the derivative is in magnitude only. The direction *is*\n * continuous across cell boundaries.\n *\n * For example, to compute the derivative of the xcoordinate halfway between the 7 and 8th i-gridpoints\n * and the 10th and 11th j-gridpoints given bicubic smoothing in both dimensions, you'd write:\n *\n *     var deriv = createIDerivativeEvaluator([x], 1, 1);\n *\n *     var dxdi = deriv([], 7, 10, 0.5, 0.5);\n *     // => [0.12345]\n *\n * Since there'd be a bunch of duplicate computation to compute multiple derivatives, you can double\n * this up by providing more arrays:\n *\n *     var deriv = createIDerivativeEvaluator([x, y], 1, 1);\n *\n *     var dxdi = deriv([], 7, 10, 0.5, 0.5);\n *     // => [0.12345, 0.78910]\n *\n * NB: It's presumed that at this point all data has been sanitized and is valid numerical data arrays\n * of the correct dimension.\n */\n\nmodule.exports = function (arrays, asmoothing, bsmoothing) {\n  if (asmoothing && bsmoothing) {\n    return function (out, i0, j0, u, v) {\n      if (!out) out = [];\n      var f0, f1, f2, f3, ak, k; // Since it's a grid of control points, the actual indices are * 3:\n\n      i0 *= 3;\n      j0 *= 3; // Precompute some numbers:\n\n      var u2 = u * u;\n      var ou = 1 - u;\n      var ou2 = ou * ou;\n      var ouu2 = ou * u * 2;\n      var a = -3 * ou2;\n      var b = 3 * (ou2 - ouu2);\n      var c = 3 * (ouu2 - u2);\n      var d = 3 * u2;\n      var v2 = v * v;\n      var v3 = v2 * v;\n      var ov = 1 - v;\n      var ov2 = ov * ov;\n      var ov3 = ov2 * ov;\n\n      for (k = 0; k < arrays.length; k++) {\n        ak = arrays[k]; // Compute the derivatives in the u-direction:\n\n        f0 = a * ak[j0][i0] + b * ak[j0][i0 + 1] + c * ak[j0][i0 + 2] + d * ak[j0][i0 + 3];\n        f1 = a * ak[j0 + 1][i0] + b * ak[j0 + 1][i0 + 1] + c * ak[j0 + 1][i0 + 2] + d * ak[j0 + 1][i0 + 3];\n        f2 = a * ak[j0 + 2][i0] + b * ak[j0 + 2][i0 + 1] + c * ak[j0 + 2][i0 + 2] + d * ak[j0 + 2][i0 + 3];\n        f3 = a * ak[j0 + 3][i0] + b * ak[j0 + 3][i0 + 1] + c * ak[j0 + 3][i0 + 2] + d * ak[j0 + 3][i0 + 3]; // Now just interpolate in the v-direction since it's all separable:\n\n        out[k] = ov3 * f0 + 3 * (ov2 * v * f1 + ov * v2 * f2) + v3 * f3;\n      }\n\n      return out;\n    };\n  } else if (asmoothing) {\n    // Handle smooth in the a-direction but linear in the b-direction by performing four\n    // linear interpolations followed by one cubic interpolation of the result\n    return function (out, i0, j0, u, v) {\n      if (!out) out = [];\n      var f0, f1, k, ak;\n      i0 *= 3;\n      var u2 = u * u;\n      var ou = 1 - u;\n      var ou2 = ou * ou;\n      var ouu2 = ou * u * 2;\n      var a = -3 * ou2;\n      var b = 3 * (ou2 - ouu2);\n      var c = 3 * (ouu2 - u2);\n      var d = 3 * u2;\n      var ov = 1 - v;\n\n      for (k = 0; k < arrays.length; k++) {\n        ak = arrays[k];\n        f0 = a * ak[j0][i0] + b * ak[j0][i0 + 1] + c * ak[j0][i0 + 2] + d * ak[j0][i0 + 3];\n        f1 = a * ak[j0 + 1][i0] + b * ak[j0 + 1][i0 + 1] + c * ak[j0 + 1][i0 + 2] + d * ak[j0 + 1][i0 + 3];\n        out[k] = ov * f0 + v * f1;\n      }\n\n      return out;\n    };\n  } else if (bsmoothing) {\n    // Same as the above case, except reversed. I've disabled the no-unused vars rule\n    // so that this function is fully interpolation-agnostic. Otherwise it would need\n    // to be called differently in different cases. Which wouldn't be the worst, but\n\n    /* eslint-disable no-unused-vars */\n    return function (out, i0, j0, u, v) {\n      /* eslint-enable no-unused-vars */\n      if (!out) out = [];\n      var f0, f1, f2, f3, k, ak;\n      j0 *= 3;\n      var v2 = v * v;\n      var v3 = v2 * v;\n      var ov = 1 - v;\n      var ov2 = ov * ov;\n      var ov3 = ov2 * ov;\n\n      for (k = 0; k < arrays.length; k++) {\n        ak = arrays[k];\n        f0 = ak[j0][i0 + 1] - ak[j0][i0];\n        f1 = ak[j0 + 1][i0 + 1] - ak[j0 + 1][i0];\n        f2 = ak[j0 + 2][i0 + 1] - ak[j0 + 2][i0];\n        f3 = ak[j0 + 3][i0 + 1] - ak[j0 + 3][i0];\n        out[k] = ov3 * f0 + 3 * (ov2 * v * f1 + ov * v2 * f2) + v3 * f3;\n      }\n\n      return out;\n    };\n  } else {\n    // Finally, both directions are linear:\n\n    /* eslint-disable no-unused-vars */\n    return function (out, i0, j0, u, v) {\n      /* eslint-enable no-unused-vars */\n      if (!out) out = [];\n      var f0, f1, k, ak;\n      var ov = 1 - v;\n\n      for (k = 0; k < arrays.length; k++) {\n        ak = arrays[k];\n        f0 = ak[j0][i0 + 1] - ak[j0][i0];\n        f1 = ak[j0 + 1][i0 + 1] - ak[j0 + 1][i0];\n        out[k] = ov * f0 + v * f1;\n      }\n\n      return out;\n    };\n  }\n};","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/plotly.js/src/traces/carpet/create_i_derivative_evaluator.js"],"names":["module","exports","arrays","asmoothing","bsmoothing","out","i0","j0","u","v","f0","f1","f2","f3","ak","k","u2","ou","ou2","ouu2","a","b","c","d","v2","v3","ov","ov2","ov3","length"],"mappings":"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","sourcesContent":["'use strict';\n\n/*\n * Evaluates the derivative of a list of control point arrays. That is, it expects an array or arrays\n * that are expanded relative to the raw data to include the bicubic control points, if applicable. If\n * only linear interpolation is desired, then the data points correspond 1-1 along that axis to the\n * data itself. Since it's catmull-rom splines in either direction note in particular that the\n * derivatives are discontinuous across cell boundaries. That's the reason you need both the *cell*\n * and the *point within the cell*.\n *\n * Also note that the discontinuity of the derivative is in magnitude only. The direction *is*\n * continuous across cell boundaries.\n *\n * For example, to compute the derivative of the xcoordinate halfway between the 7 and 8th i-gridpoints\n * and the 10th and 11th j-gridpoints given bicubic smoothing in both dimensions, you'd write:\n *\n *     var deriv = createIDerivativeEvaluator([x], 1, 1);\n *\n *     var dxdi = deriv([], 7, 10, 0.5, 0.5);\n *     // => [0.12345]\n *\n * Since there'd be a bunch of duplicate computation to compute multiple derivatives, you can double\n * this up by providing more arrays:\n *\n *     var deriv = createIDerivativeEvaluator([x, y], 1, 1);\n *\n *     var dxdi = deriv([], 7, 10, 0.5, 0.5);\n *     // => [0.12345, 0.78910]\n *\n * NB: It's presumed that at this point all data has been sanitized and is valid numerical data arrays\n * of the correct dimension.\n */\nmodule.exports = function(arrays, asmoothing, bsmoothing) {\n    if(asmoothing && bsmoothing) {\n        return function(out, i0, j0, u, v) {\n            if(!out) out = [];\n            var f0, f1, f2, f3, ak, k;\n\n            // Since it's a grid of control points, the actual indices are * 3:\n            i0 *= 3;\n            j0 *= 3;\n\n            // Precompute some numbers:\n            var u2 = u * u;\n            var ou = 1 - u;\n            var ou2 = ou * ou;\n            var ouu2 = ou * u * 2;\n            var a = -3 * ou2;\n            var b = 3 * (ou2 - ouu2);\n            var c = 3 * (ouu2 - u2);\n            var d = 3 * u2;\n\n            var v2 = v * v;\n            var v3 = v2 * v;\n            var ov = 1 - v;\n            var ov2 = ov * ov;\n            var ov3 = ov2 * ov;\n\n            for(k = 0; k < arrays.length; k++) {\n                ak = arrays[k];\n                // Compute the derivatives in the u-direction:\n                f0 = a * ak[j0 ][i0] + b * ak[j0 ][i0 + 1] + c * ak[j0 ][i0 + 2] + d * ak[j0 ][i0 + 3];\n                f1 = a * ak[j0 + 1][i0] + b * ak[j0 + 1][i0 + 1] + c * ak[j0 + 1][i0 + 2] + d * ak[j0 + 1][i0 + 3];\n                f2 = a * ak[j0 + 2][i0] + b * ak[j0 + 2][i0 + 1] + c * ak[j0 + 2][i0 + 2] + d * ak[j0 + 2][i0 + 3];\n                f3 = a * ak[j0 + 3][i0] + b * ak[j0 + 3][i0 + 1] + c * ak[j0 + 3][i0 + 2] + d * ak[j0 + 3][i0 + 3];\n\n                // Now just interpolate in the v-direction since it's all separable:\n                out[k] = ov3 * f0 + 3 * (ov2 * v * f1 + ov * v2 * f2) + v3 * f3;\n            }\n\n            return out;\n        };\n    } else if(asmoothing) {\n        // Handle smooth in the a-direction but linear in the b-direction by performing four\n        // linear interpolations followed by one cubic interpolation of the result\n        return function(out, i0, j0, u, v) {\n            if(!out) out = [];\n            var f0, f1, k, ak;\n            i0 *= 3;\n            var u2 = u * u;\n            var ou = 1 - u;\n            var ou2 = ou * ou;\n            var ouu2 = ou * u * 2;\n            var a = -3 * ou2;\n            var b = 3 * (ou2 - ouu2);\n            var c = 3 * (ouu2 - u2);\n            var d = 3 * u2;\n            var ov = 1 - v;\n            for(k = 0; k < arrays.length; k++) {\n                ak = arrays[k];\n                f0 = a * ak[j0 ][i0] + b * ak[j0 ][i0 + 1] + c * ak[j0 ][i0 + 2] + d * ak[j0 ][i0 + 3];\n                f1 = a * ak[j0 + 1][i0] + b * ak[j0 + 1][i0 + 1] + c * ak[j0 + 1][i0 + 2] + d * ak[j0 + 1][i0 + 3];\n\n                out[k] = ov * f0 + v * f1;\n            }\n            return out;\n        };\n    } else if(bsmoothing) {\n        // Same as the above case, except reversed. I've disabled the no-unused vars rule\n        // so that this function is fully interpolation-agnostic. Otherwise it would need\n        // to be called differently in different cases. Which wouldn't be the worst, but\n        /* eslint-disable no-unused-vars */\n        return function(out, i0, j0, u, v) {\n        /* eslint-enable no-unused-vars */\n            if(!out) out = [];\n            var f0, f1, f2, f3, k, ak;\n            j0 *= 3;\n            var v2 = v * v;\n            var v3 = v2 * v;\n            var ov = 1 - v;\n            var ov2 = ov * ov;\n            var ov3 = ov2 * ov;\n            for(k = 0; k < arrays.length; k++) {\n                ak = arrays[k];\n                f0 = ak[j0][i0 + 1] - ak[j0][i0];\n                f1 = ak[j0 + 1][i0 + 1] - ak[j0 + 1][i0];\n                f2 = ak[j0 + 2][i0 + 1] - ak[j0 + 2][i0];\n                f3 = ak[j0 + 3][i0 + 1] - ak[j0 + 3][i0];\n\n                out[k] = ov3 * f0 + 3 * (ov2 * v * f1 + ov * v2 * f2) + v3 * f3;\n            }\n            return out;\n        };\n    } else {\n        // Finally, both directions are linear:\n        /* eslint-disable no-unused-vars */\n        return function(out, i0, j0, u, v) {\n        /* eslint-enable no-unused-vars */\n            if(!out) out = [];\n            var f0, f1, k, ak;\n            var ov = 1 - v;\n            for(k = 0; k < arrays.length; k++) {\n                ak = arrays[k];\n                f0 = ak[j0][i0 + 1] - ak[j0][i0];\n                f1 = ak[j0 + 1][i0 + 1] - ak[j0 + 1][i0];\n\n                out[k] = ov * f0 + v * f1;\n            }\n            return out;\n        };\n    }\n};\n"]},"metadata":{},"sourceType":"script"}