{"ast":null,"code":"import arcToCurve from 'svg-arc-to-cubic-bezier';\nexport default function normalize(path) {\n  // init state\n  var prev;\n  var result = [];\n  var bezierX = 0;\n  var bezierY = 0;\n  var startX = 0;\n  var startY = 0;\n  var quadX = null;\n  var quadY = null;\n  var x = 0;\n  var y = 0;\n\n  for (var i = 0, len = path.length; i < len; i++) {\n    var seg = path[i];\n    var command = seg[0];\n\n    switch (command) {\n      case 'M':\n        startX = seg[1];\n        startY = seg[2];\n        break;\n\n      case 'A':\n        var curves = arcToCurve({\n          px: x,\n          py: y,\n          cx: seg[6],\n          cy: seg[7],\n          rx: seg[1],\n          ry: seg[2],\n          xAxisRotation: seg[3],\n          largeArcFlag: seg[4],\n          sweepFlag: seg[5]\n        }); // null-curves\n\n        if (!curves.length) continue;\n\n        for (var j = 0, c; j < curves.length; j++) {\n          c = curves[j];\n          seg = ['C', c.x1, c.y1, c.x2, c.y2, c.x, c.y];\n          if (j < curves.length - 1) result.push(seg);\n        }\n\n        break;\n\n      case 'S':\n        // default control point\n        var cx = x;\n        var cy = y;\n\n        if (prev == 'C' || prev == 'S') {\n          cx += cx - bezierX; // reflect the previous command's control\n\n          cy += cy - bezierY; // point relative to the current point\n        }\n\n        seg = ['C', cx, cy, seg[1], seg[2], seg[3], seg[4]];\n        break;\n\n      case 'T':\n        if (prev == 'Q' || prev == 'T') {\n          quadX = x * 2 - quadX; // as with 'S' reflect previous control point\n\n          quadY = y * 2 - quadY;\n        } else {\n          quadX = x;\n          quadY = y;\n        }\n\n        seg = quadratic(x, y, quadX, quadY, seg[1], seg[2]);\n        break;\n\n      case 'Q':\n        quadX = seg[1];\n        quadY = seg[2];\n        seg = quadratic(x, y, seg[1], seg[2], seg[3], seg[4]);\n        break;\n\n      case 'L':\n        seg = line(x, y, seg[1], seg[2]);\n        break;\n\n      case 'H':\n        seg = line(x, y, seg[1], y);\n        break;\n\n      case 'V':\n        seg = line(x, y, x, seg[1]);\n        break;\n\n      case 'Z':\n        seg = line(x, y, startX, startY);\n        break;\n    } // update state\n\n\n    prev = command;\n    x = seg[seg.length - 2];\n    y = seg[seg.length - 1];\n\n    if (seg.length > 4) {\n      bezierX = seg[seg.length - 4];\n      bezierY = seg[seg.length - 3];\n    } else {\n      bezierX = x;\n      bezierY = y;\n    }\n\n    result.push(seg);\n  }\n\n  return result;\n}\n\nfunction line(x1, y1, x2, y2) {\n  return ['C', x1, y1, x2, y2, x2, y2];\n}\n\nfunction quadratic(x1, y1, cx, cy, x2, y2) {\n  return ['C', x1 / 3 + 2 / 3 * cx, y1 / 3 + 2 / 3 * cy, x2 / 3 + 2 / 3 * cx, y2 / 3 + 2 / 3 * cy, x2, y2];\n}","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/svg-path-bounds/node_modules/normalize-svg-path/index.mjs"],"names":["arcToCurve","normalize","path","prev","result","bezierX","bezierY","startX","startY","quadX","quadY","x","y","i","len","length","seg","command","curves","px","py","cx","cy","rx","ry","xAxisRotation","largeArcFlag","sweepFlag","j","c","x1","y1","x2","y2","push","quadratic","line"],"mappings":"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","sourcesContent":["import arcToCurve from 'svg-arc-to-cubic-bezier'\r\n\r\nexport default function normalize(path){\r\n  // init state\r\n  var prev\r\n  var result = []\r\n  var bezierX = 0\r\n  var bezierY = 0\r\n  var startX = 0\r\n  var startY = 0\r\n  var quadX = null\r\n  var quadY = null\r\n  var x = 0\r\n  var y = 0\r\n\r\n  for (var i = 0, len = path.length; i < len; i++) {\r\n    var seg = path[i]\r\n    var command = seg[0]\r\n\r\n    switch (command) {\r\n      case 'M':\r\n        startX = seg[1]\r\n        startY = seg[2]\r\n        break\r\n      case 'A':\r\n        var curves = arcToCurve({\r\n          px: x,\r\n          py: y,\r\n          cx: seg[6],\r\n          cy:  seg[7],\r\n          rx: seg[1],\r\n          ry: seg[2],\r\n          xAxisRotation: seg[3],\r\n          largeArcFlag: seg[4],\r\n          sweepFlag: seg[5]\r\n        })\r\n\r\n        // null-curves\r\n        if (!curves.length) continue\r\n\r\n        for (var j = 0, c; j < curves.length; j++) {\r\n          c = curves[j]\r\n          seg = ['C', c.x1, c.y1, c.x2, c.y2, c.x, c.y]\r\n          if (j < curves.length - 1) result.push(seg)\r\n        }\r\n\r\n        break\r\n      case 'S':\r\n        // default control point\r\n        var cx = x\r\n        var cy = y\r\n        if (prev == 'C' || prev == 'S') {\r\n          cx += cx - bezierX // reflect the previous command's control\r\n          cy += cy - bezierY // point relative to the current point\r\n        }\r\n        seg = ['C', cx, cy, seg[1], seg[2], seg[3], seg[4]]\r\n        break\r\n      case 'T':\r\n        if (prev == 'Q' || prev == 'T') {\r\n          quadX = x * 2 - quadX // as with 'S' reflect previous control point\r\n          quadY = y * 2 - quadY\r\n        } else {\r\n          quadX = x\r\n          quadY = y\r\n        }\r\n        seg = quadratic(x, y, quadX, quadY, seg[1], seg[2])\r\n        break\r\n      case 'Q':\r\n        quadX = seg[1]\r\n        quadY = seg[2]\r\n        seg = quadratic(x, y, seg[1], seg[2], seg[3], seg[4])\r\n        break\r\n      case 'L':\r\n        seg = line(x, y, seg[1], seg[2])\r\n        break\r\n      case 'H':\r\n        seg = line(x, y, seg[1], y)\r\n        break\r\n      case 'V':\r\n        seg = line(x, y, x, seg[1])\r\n        break\r\n      case 'Z':\r\n        seg = line(x, y, startX, startY)\r\n        break\r\n    }\r\n\r\n    // update state\r\n    prev = command\r\n    x = seg[seg.length - 2]\r\n    y = seg[seg.length - 1]\r\n    if (seg.length > 4) {\r\n      bezierX = seg[seg.length - 4]\r\n      bezierY = seg[seg.length - 3]\r\n    } else {\r\n      bezierX = x\r\n      bezierY = y\r\n    }\r\n    result.push(seg)\r\n  }\r\n\r\n  return result\r\n}\r\n\r\nfunction line(x1, y1, x2, y2){\r\n  return ['C', x1, y1, x2, y2, x2, y2]\r\n}\r\n\r\nfunction quadratic(x1, y1, cx, cy, x2, y2){\r\n  return [\r\n    'C',\r\n    x1/3 + (2/3) * cx,\r\n    y1/3 + (2/3) * cy,\r\n    x2/3 + (2/3) * cx,\r\n    y2/3 + (2/3) * cy,\r\n    x2,\r\n    y2\r\n  ]\r\n}\r\n"]},"metadata":{},"sourceType":"module"}