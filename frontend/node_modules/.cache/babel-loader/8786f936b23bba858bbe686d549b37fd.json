{"ast":null,"code":"'use strict';\n\nmodule.exports = function (arrays, asmoothing, bsmoothing) {\n  if (asmoothing && bsmoothing) {\n    return function (out, i0, j0, u, v) {\n      if (!out) out = [];\n      var f0, f1, f2, f3, ak, k; // Since it's a grid of control points, the actual indices are * 3:\n\n      i0 *= 3;\n      j0 *= 3; // Precompute some numbers:\n\n      var u2 = u * u;\n      var u3 = u2 * u;\n      var ou = 1 - u;\n      var ou2 = ou * ou;\n      var ou3 = ou2 * ou;\n      var v2 = v * v;\n      var ov = 1 - v;\n      var ov2 = ov * ov;\n      var ovv2 = ov * v * 2;\n      var a = -3 * ov2;\n      var b = 3 * (ov2 - ovv2);\n      var c = 3 * (ovv2 - v2);\n      var d = 3 * v2;\n\n      for (k = 0; k < arrays.length; k++) {\n        ak = arrays[k]; // Compute the derivatives in the v-direction:\n\n        f0 = a * ak[j0][i0] + b * ak[j0 + 1][i0] + c * ak[j0 + 2][i0] + d * ak[j0 + 3][i0];\n        f1 = a * ak[j0][i0 + 1] + b * ak[j0 + 1][i0 + 1] + c * ak[j0 + 2][i0 + 1] + d * ak[j0 + 3][i0 + 1];\n        f2 = a * ak[j0][i0 + 2] + b * ak[j0 + 1][i0 + 2] + c * ak[j0 + 2][i0 + 2] + d * ak[j0 + 3][i0 + 2];\n        f3 = a * ak[j0][i0 + 3] + b * ak[j0 + 1][i0 + 3] + c * ak[j0 + 2][i0 + 3] + d * ak[j0 + 3][i0 + 3]; // Now just interpolate in the v-direction since it's all separable:\n\n        out[k] = ou3 * f0 + 3 * (ou2 * u * f1 + ou * u2 * f2) + u3 * f3;\n      }\n\n      return out;\n    };\n  } else if (asmoothing) {\n    // Handle smooth in the a-direction but linear in the b-direction by performing four\n    // linear interpolations followed by one cubic interpolation of the result\n    return function (out, i0, j0, v, u) {\n      if (!out) out = [];\n      var f0, f1, f2, f3, k, ak;\n      i0 *= 3;\n      var u2 = u * u;\n      var u3 = u2 * u;\n      var ou = 1 - u;\n      var ou2 = ou * ou;\n      var ou3 = ou2 * ou;\n\n      for (k = 0; k < arrays.length; k++) {\n        ak = arrays[k];\n        f0 = ak[j0 + 1][i0] - ak[j0][i0];\n        f1 = ak[j0 + 1][i0 + 1] - ak[j0][i0 + 1];\n        f2 = ak[j0 + 1][i0 + 2] - ak[j0][i0 + 2];\n        f3 = ak[j0 + 1][i0 + 3] - ak[j0][i0 + 3];\n        out[k] = ou3 * f0 + 3 * (ou2 * u * f1 + ou * u2 * f2) + u3 * f3; // mathematically equivalent:\n        // f0 = ou3 * ak[j0    ][i0] + 3 * (ou2 * u * ak[j0    ][i0 + 1] + ou * u2 * ak[j0    ][i0 + 2]) + u3 * ak[j0    ][i0 + 3];\n        // f1 = ou3 * ak[j0 + 1][i0] + 3 * (ou2 * u * ak[j0 + 1][i0 + 1] + ou * u2 * ak[j0 + 1][i0 + 2]) + u3 * ak[j0 + 1][i0 + 3];\n        // out[k] = f1 - f0;\n      }\n\n      return out;\n    };\n  } else if (bsmoothing) {\n    // Same as the above case, except reversed:\n\n    /* eslint-disable no-unused-vars */\n    return function (out, i0, j0, u, v) {\n      /* eslint-enable no-unused-vars */\n      if (!out) out = [];\n      var f0, f1, k, ak;\n      j0 *= 3;\n      var ou = 1 - u;\n      var v2 = v * v;\n      var ov = 1 - v;\n      var ov2 = ov * ov;\n      var ovv2 = ov * v * 2;\n      var a = -3 * ov2;\n      var b = 3 * (ov2 - ovv2);\n      var c = 3 * (ovv2 - v2);\n      var d = 3 * v2;\n\n      for (k = 0; k < arrays.length; k++) {\n        ak = arrays[k];\n        f0 = a * ak[j0][i0] + b * ak[j0 + 1][i0] + c * ak[j0 + 2][i0] + d * ak[j0 + 3][i0];\n        f1 = a * ak[j0][i0 + 1] + b * ak[j0 + 1][i0 + 1] + c * ak[j0 + 2][i0 + 1] + d * ak[j0 + 3][i0 + 1];\n        out[k] = ou * f0 + u * f1;\n      }\n\n      return out;\n    };\n  } else {\n    // Finally, both directions are linear:\n\n    /* eslint-disable no-unused-vars */\n    return function (out, i0, j0, v, u) {\n      /* eslint-enable no-unused-vars */\n      if (!out) out = [];\n      var f0, f1, k, ak;\n      var ov = 1 - v;\n\n      for (k = 0; k < arrays.length; k++) {\n        ak = arrays[k];\n        f0 = ak[j0 + 1][i0] - ak[j0][i0];\n        f1 = ak[j0 + 1][i0 + 1] - ak[j0][i0 + 1];\n        out[k] = ov * f0 + v * f1;\n      }\n\n      return out;\n    };\n  }\n};","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/plotly.js/src/traces/carpet/create_j_derivative_evaluator.js"],"names":["module","exports","arrays","asmoothing","bsmoothing","out","i0","j0","u","v","f0","f1","f2","f3","ak","k","u2","u3","ou","ou2","ou3","v2","ov","ov2","ovv2","a","b","c","d","length"],"mappings":"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","sourcesContent":["'use strict';\n\nmodule.exports = function(arrays, asmoothing, bsmoothing) {\n    if(asmoothing && bsmoothing) {\n        return function(out, i0, j0, u, v) {\n            if(!out) out = [];\n            var f0, f1, f2, f3, ak, k;\n\n            // Since it's a grid of control points, the actual indices are * 3:\n            i0 *= 3;\n            j0 *= 3;\n\n            // Precompute some numbers:\n            var u2 = u * u;\n            var u3 = u2 * u;\n            var ou = 1 - u;\n            var ou2 = ou * ou;\n            var ou3 = ou2 * ou;\n\n            var v2 = v * v;\n            var ov = 1 - v;\n            var ov2 = ov * ov;\n            var ovv2 = ov * v * 2;\n            var a = -3 * ov2;\n            var b = 3 * (ov2 - ovv2);\n            var c = 3 * (ovv2 - v2);\n            var d = 3 * v2;\n\n            for(k = 0; k < arrays.length; k++) {\n                ak = arrays[k];\n\n                // Compute the derivatives in the v-direction:\n                f0 = a * ak[j0][i0] + b * ak[j0 + 1][i0] + c * ak[j0 + 2][i0] + d * ak[j0 + 3][i0];\n                f1 = a * ak[j0][i0 + 1] + b * ak[j0 + 1][i0 + 1] + c * ak[j0 + 2][i0 + 1] + d * ak[j0 + 3][i0 + 1];\n                f2 = a * ak[j0][i0 + 2] + b * ak[j0 + 1][i0 + 2] + c * ak[j0 + 2][i0 + 2] + d * ak[j0 + 3][i0 + 2];\n                f3 = a * ak[j0][i0 + 3] + b * ak[j0 + 1][i0 + 3] + c * ak[j0 + 2][i0 + 3] + d * ak[j0 + 3][i0 + 3];\n\n                // Now just interpolate in the v-direction since it's all separable:\n                out[k] = ou3 * f0 + 3 * (ou2 * u * f1 + ou * u2 * f2) + u3 * f3;\n            }\n\n            return out;\n        };\n    } else if(asmoothing) {\n        // Handle smooth in the a-direction but linear in the b-direction by performing four\n        // linear interpolations followed by one cubic interpolation of the result\n        return function(out, i0, j0, v, u) {\n            if(!out) out = [];\n            var f0, f1, f2, f3, k, ak;\n            i0 *= 3;\n            var u2 = u * u;\n            var u3 = u2 * u;\n            var ou = 1 - u;\n            var ou2 = ou * ou;\n            var ou3 = ou2 * ou;\n            for(k = 0; k < arrays.length; k++) {\n                ak = arrays[k];\n\n                f0 = ak[j0 + 1][i0] - ak[j0][i0];\n                f1 = ak[j0 + 1][i0 + 1] - ak[j0][i0 + 1];\n                f2 = ak[j0 + 1][i0 + 2] - ak[j0][i0 + 2];\n                f3 = ak[j0 + 1][i0 + 3] - ak[j0][i0 + 3];\n\n                out[k] = ou3 * f0 + 3 * (ou2 * u * f1 + ou * u2 * f2) + u3 * f3;\n\n                // mathematically equivalent:\n                // f0 = ou3 * ak[j0    ][i0] + 3 * (ou2 * u * ak[j0    ][i0 + 1] + ou * u2 * ak[j0    ][i0 + 2]) + u3 * ak[j0    ][i0 + 3];\n                // f1 = ou3 * ak[j0 + 1][i0] + 3 * (ou2 * u * ak[j0 + 1][i0 + 1] + ou * u2 * ak[j0 + 1][i0 + 2]) + u3 * ak[j0 + 1][i0 + 3];\n                // out[k] = f1 - f0;\n            }\n            return out;\n        };\n    } else if(bsmoothing) {\n        // Same as the above case, except reversed:\n        /* eslint-disable no-unused-vars */\n        return function(out, i0, j0, u, v) {\n        /* eslint-enable no-unused-vars */\n            if(!out) out = [];\n            var f0, f1, k, ak;\n            j0 *= 3;\n            var ou = 1 - u;\n            var v2 = v * v;\n            var ov = 1 - v;\n            var ov2 = ov * ov;\n            var ovv2 = ov * v * 2;\n            var a = -3 * ov2;\n            var b = 3 * (ov2 - ovv2);\n            var c = 3 * (ovv2 - v2);\n            var d = 3 * v2;\n            for(k = 0; k < arrays.length; k++) {\n                ak = arrays[k];\n                f0 = a * ak[j0][i0] + b * ak[j0 + 1][i0] + c * ak[j0 + 2][i0] + d * ak[j0 + 3][i0];\n                f1 = a * ak[j0][i0 + 1] + b * ak[j0 + 1][i0 + 1] + c * ak[j0 + 2][i0 + 1] + d * ak[j0 + 3][i0 + 1];\n\n                out[k] = ou * f0 + u * f1;\n            }\n            return out;\n        };\n    } else {\n        // Finally, both directions are linear:\n        /* eslint-disable no-unused-vars */\n        return function(out, i0, j0, v, u) {\n        /* eslint-enable no-unused-vars */\n            if(!out) out = [];\n            var f0, f1, k, ak;\n            var ov = 1 - v;\n            for(k = 0; k < arrays.length; k++) {\n                ak = arrays[k];\n                f0 = ak[j0 + 1][i0] - ak[j0][i0];\n                f1 = ak[j0 + 1][i0 + 1] - ak[j0][i0 + 1];\n\n                out[k] = ov * f0 + v * f1;\n            }\n            return out;\n        };\n    }\n};\n"]},"metadata":{},"sourceType":"script"}