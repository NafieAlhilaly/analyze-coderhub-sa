{"ast":null,"code":"'use strict';\n\nvar hovertemplateAttrs = require('../../plots/template_attributes').hovertemplateAttrs;\n\nvar texttemplateAttrs = require('../../plots/template_attributes').texttemplateAttrs;\n\nvar scatterAttrs = require('../scatter/attributes');\n\nvar baseAttrs = require('../../plots/attributes');\n\nvar colorAttributes = require('../../components/colorscale/attributes');\n\nvar dash = require('../../components/drawing/attributes').dash;\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\n\nvar scatterMarkerAttrs = scatterAttrs.marker;\nvar scatterLineAttrs = scatterAttrs.line;\nvar scatterMarkerLineAttrs = scatterMarkerAttrs.line;\nmodule.exports = overrideAll({\n  lon: {\n    valType: 'data_array',\n    description: 'Sets the longitude coordinates (in degrees East).'\n  },\n  lat: {\n    valType: 'data_array',\n    description: 'Sets the latitude coordinates (in degrees North).'\n  },\n  locations: {\n    valType: 'data_array',\n    description: ['Sets the coordinates via location IDs or names.', 'Coordinates correspond to the centroid of each location given.', 'See `locationmode` for more info.'].join(' ')\n  },\n  locationmode: {\n    valType: 'enumerated',\n    values: ['ISO-3', 'USA-states', 'country names', 'geojson-id'],\n    dflt: 'ISO-3',\n    description: ['Determines the set of locations used to match entries in `locations`', 'to regions on the map.', 'Values *ISO-3*, *USA-states*, *country names* correspond to features on', 'the base map and value *geojson-id* corresponds to features from a custom', 'GeoJSON linked to the `geojson` attribute.'].join(' ')\n  },\n  geojson: {\n    valType: 'any',\n    editType: 'calc',\n    description: ['Sets optional GeoJSON data associated with this trace.', 'If not given, the features on the base map are used when `locations` is set.', 'It can be set as a valid GeoJSON object or as a URL string.', 'Note that we only accept GeoJSONs of type *FeatureCollection* or *Feature*', 'with geometries of type *Polygon* or *MultiPolygon*.' // TODO add topojson support with additional 'topojsonobject' attr?\n    // https://github.com/topojson/topojson-specification/blob/master/README.md\n    ].join(' ')\n  },\n  featureidkey: {\n    valType: 'string',\n    editType: 'calc',\n    dflt: 'id',\n    description: ['Sets the key in GeoJSON features which is used as id to match the items', 'included in the `locations` array.', 'Only has an effect when `geojson` is set.', 'Support nested property, for example *properties.name*.'].join(' ')\n  },\n  mode: extendFlat({}, scatterAttrs.mode, {\n    dflt: 'markers'\n  }),\n  text: extendFlat({}, scatterAttrs.text, {\n    description: ['Sets text elements associated with each (lon,lat) pair', 'or item in `locations`.', 'If a single string, the same string appears over', 'all the data points.', 'If an array of string, the items are mapped in order to the', 'this trace\\'s (lon,lat) or `locations` coordinates.', 'If trace `hoverinfo` contains a *text* flag and *hovertext* is not set,', 'these elements will be seen in the hover labels.'].join(' ')\n  }),\n  texttemplate: texttemplateAttrs({\n    editType: 'plot'\n  }, {\n    keys: ['lat', 'lon', 'location', 'text']\n  }),\n  hovertext: extendFlat({}, scatterAttrs.hovertext, {\n    description: ['Sets hover text elements associated with each (lon,lat) pair', 'or item in `locations`.', 'If a single string, the same string appears over', 'all the data points.', 'If an array of string, the items are mapped in order to the', 'this trace\\'s (lon,lat) or `locations` coordinates.', 'To be seen, trace `hoverinfo` must contain a *text* flag.'].join(' ')\n  }),\n  textfont: scatterAttrs.textfont,\n  textposition: scatterAttrs.textposition,\n  line: {\n    color: scatterLineAttrs.color,\n    width: scatterLineAttrs.width,\n    dash: dash\n  },\n  connectgaps: scatterAttrs.connectgaps,\n  marker: extendFlat({\n    symbol: scatterMarkerAttrs.symbol,\n    opacity: scatterMarkerAttrs.opacity,\n    size: scatterMarkerAttrs.size,\n    sizeref: scatterMarkerAttrs.sizeref,\n    sizemin: scatterMarkerAttrs.sizemin,\n    sizemode: scatterMarkerAttrs.sizemode,\n    colorbar: scatterMarkerAttrs.colorbar,\n    line: extendFlat({\n      width: scatterMarkerLineAttrs.width\n    }, colorAttributes('marker.line')),\n    gradient: scatterMarkerAttrs.gradient\n  }, colorAttributes('marker')),\n  fill: {\n    valType: 'enumerated',\n    values: ['none', 'toself'],\n    dflt: 'none',\n    description: ['Sets the area to fill with a solid color.', 'Use with `fillcolor` if not *none*.', '*toself* connects the endpoints of the trace (or each segment', 'of the trace if it has gaps) into a closed shape.'].join(' ')\n  },\n  fillcolor: scatterAttrs.fillcolor,\n  selected: scatterAttrs.selected,\n  unselected: scatterAttrs.unselected,\n  hoverinfo: extendFlat({}, baseAttrs.hoverinfo, {\n    flags: ['lon', 'lat', 'location', 'text', 'name']\n  }),\n  hovertemplate: hovertemplateAttrs()\n}, 'calc', 'nested');","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/plotly.js/src/traces/scattergeo/attributes.js"],"names":["hovertemplateAttrs","require","texttemplateAttrs","scatterAttrs","baseAttrs","colorAttributes","dash","extendFlat","overrideAll","scatterMarkerAttrs","marker","scatterLineAttrs","line","scatterMarkerLineAttrs","module","exports","lon","valType","description","lat","locations","join","locationmode","values","dflt","geojson","editType","featureidkey","mode","text","texttemplate","keys","hovertext","textfont","textposition","color","width","connectgaps","symbol","opacity","size","sizeref","sizemin","sizemode","colorbar","gradient","fill","fillcolor","selected","unselected","hoverinfo","flags","hovertemplate"],"mappings":"AAAA;;AAEA,IAAIA,kBAAkB,GAAGC,OAAO,CAAC,iCAAD,CAAP,CAA2CD,kBAApE;;AACA,IAAIE,iBAAiB,GAAGD,OAAO,CAAC,iCAAD,CAAP,CAA2CC,iBAAnE;;AACA,IAAIC,YAAY,GAAGF,OAAO,CAAC,uBAAD,CAA1B;;AACA,IAAIG,SAAS,GAAGH,OAAO,CAAC,wBAAD,CAAvB;;AACA,IAAII,eAAe,GAAGJ,OAAO,CAAC,wCAAD,CAA7B;;AACA,IAAIK,IAAI,GAAGL,OAAO,CAAC,qCAAD,CAAP,CAA+CK,IAA1D;;AAEA,IAAIC,UAAU,GAAGN,OAAO,CAAC,kBAAD,CAAP,CAA4BM,UAA7C;;AACA,IAAIC,WAAW,GAAGP,OAAO,CAAC,2BAAD,CAAP,CAAqCO,WAAvD;;AAEA,IAAIC,kBAAkB,GAAGN,YAAY,CAACO,MAAtC;AACA,IAAIC,gBAAgB,GAAGR,YAAY,CAACS,IAApC;AACA,IAAIC,sBAAsB,GAAGJ,kBAAkB,CAACG,IAAhD;AAEAE,MAAM,CAACC,OAAP,GAAiBP,WAAW,CAAC;AACzBQ,EAAAA,GAAG,EAAE;AACDC,IAAAA,OAAO,EAAE,YADR;AAEDC,IAAAA,WAAW,EAAE;AAFZ,GADoB;AAKzBC,EAAAA,GAAG,EAAE;AACDF,IAAAA,OAAO,EAAE,YADR;AAEDC,IAAAA,WAAW,EAAE;AAFZ,GALoB;AAUzBE,EAAAA,SAAS,EAAE;AACPH,IAAAA,OAAO,EAAE,YADF;AAEPC,IAAAA,WAAW,EAAE,CACT,iDADS,EAET,gEAFS,EAGT,mCAHS,EAIXG,IAJW,CAIN,GAJM;AAFN,GAVc;AAkBzBC,EAAAA,YAAY,EAAE;AACVL,IAAAA,OAAO,EAAE,YADC;AAEVM,IAAAA,MAAM,EAAE,CAAC,OAAD,EAAU,YAAV,EAAwB,eAAxB,EAAyC,YAAzC,CAFE;AAGVC,IAAAA,IAAI,EAAE,OAHI;AAIVN,IAAAA,WAAW,EAAE,CACT,sEADS,EAET,wBAFS,EAGT,yEAHS,EAIT,2EAJS,EAKT,4CALS,EAMXG,IANW,CAMN,GANM;AAJH,GAlBW;AA+BzBI,EAAAA,OAAO,EAAE;AACLR,IAAAA,OAAO,EAAE,KADJ;AAELS,IAAAA,QAAQ,EAAE,MAFL;AAGLR,IAAAA,WAAW,EAAE,CACT,wDADS,EAET,8EAFS,EAIT,6DAJS,EAKT,4EALS,EAMT,sDANS,CAQT;AACA;AATS,MAUXG,IAVW,CAUN,GAVM;AAHR,GA/BgB;AA8CzBM,EAAAA,YAAY,EAAE;AACVV,IAAAA,OAAO,EAAE,QADC;AAEVS,IAAAA,QAAQ,EAAE,MAFA;AAGVF,IAAAA,IAAI,EAAE,IAHI;AAIVN,IAAAA,WAAW,EAAE,CACT,yEADS,EAET,oCAFS,EAGT,2CAHS,EAIT,yDAJS,EAKXG,IALW,CAKN,GALM;AAJH,GA9CW;AA0DzBO,EAAAA,IAAI,EAAErB,UAAU,CAAC,EAAD,EAAKJ,YAAY,CAACyB,IAAlB,EAAwB;AAACJ,IAAAA,IAAI,EAAE;AAAP,GAAxB,CA1DS;AA4DzBK,EAAAA,IAAI,EAAEtB,UAAU,CAAC,EAAD,EAAKJ,YAAY,CAAC0B,IAAlB,EAAwB;AACpCX,IAAAA,WAAW,EAAE,CACT,wDADS,EAET,yBAFS,EAGT,kDAHS,EAIT,sBAJS,EAKT,6DALS,EAMT,qDANS,EAOT,yEAPS,EAQT,kDARS,EASXG,IATW,CASN,GATM;AADuB,GAAxB,CA5DS;AAwEzBS,EAAAA,YAAY,EAAE5B,iBAAiB,CAAC;AAACwB,IAAAA,QAAQ,EAAE;AAAX,GAAD,EAAqB;AAChDK,IAAAA,IAAI,EAAE,CAAC,KAAD,EAAQ,KAAR,EAAe,UAAf,EAA2B,MAA3B;AAD0C,GAArB,CAxEN;AA2EzBC,EAAAA,SAAS,EAAEzB,UAAU,CAAC,EAAD,EAAKJ,YAAY,CAAC6B,SAAlB,EAA6B;AAC9Cd,IAAAA,WAAW,EAAE,CACT,8DADS,EAET,yBAFS,EAGT,kDAHS,EAIT,sBAJS,EAKT,6DALS,EAMT,qDANS,EAOT,2DAPS,EAQXG,IARW,CAQN,GARM;AADiC,GAA7B,CA3EI;AAuFzBY,EAAAA,QAAQ,EAAE9B,YAAY,CAAC8B,QAvFE;AAwFzBC,EAAAA,YAAY,EAAE/B,YAAY,CAAC+B,YAxFF;AA0FzBtB,EAAAA,IAAI,EAAE;AACFuB,IAAAA,KAAK,EAAExB,gBAAgB,CAACwB,KADtB;AAEFC,IAAAA,KAAK,EAAEzB,gBAAgB,CAACyB,KAFtB;AAGF9B,IAAAA,IAAI,EAAEA;AAHJ,GA1FmB;AA+FzB+B,EAAAA,WAAW,EAAElC,YAAY,CAACkC,WA/FD;AAiGzB3B,EAAAA,MAAM,EAAEH,UAAU,CAAC;AACf+B,IAAAA,MAAM,EAAE7B,kBAAkB,CAAC6B,MADZ;AAEfC,IAAAA,OAAO,EAAE9B,kBAAkB,CAAC8B,OAFb;AAGfC,IAAAA,IAAI,EAAE/B,kBAAkB,CAAC+B,IAHV;AAIfC,IAAAA,OAAO,EAAEhC,kBAAkB,CAACgC,OAJb;AAKfC,IAAAA,OAAO,EAAEjC,kBAAkB,CAACiC,OALb;AAMfC,IAAAA,QAAQ,EAAElC,kBAAkB,CAACkC,QANd;AAOfC,IAAAA,QAAQ,EAAEnC,kBAAkB,CAACmC,QAPd;AAQfhC,IAAAA,IAAI,EAAEL,UAAU,CAAC;AACb6B,MAAAA,KAAK,EAAEvB,sBAAsB,CAACuB;AADjB,KAAD,EAGZ/B,eAAe,CAAC,aAAD,CAHH,CARD;AAafwC,IAAAA,QAAQ,EAAEpC,kBAAkB,CAACoC;AAbd,GAAD,EAedxC,eAAe,CAAC,QAAD,CAfD,CAjGO;AAmHzByC,EAAAA,IAAI,EAAE;AACF7B,IAAAA,OAAO,EAAE,YADP;AAEFM,IAAAA,MAAM,EAAE,CAAC,MAAD,EAAS,QAAT,CAFN;AAGFC,IAAAA,IAAI,EAAE,MAHJ;AAIFN,IAAAA,WAAW,EAAE,CACT,2CADS,EAET,qCAFS,EAGT,+DAHS,EAIT,mDAJS,EAKXG,IALW,CAKN,GALM;AAJX,GAnHmB;AA8HzB0B,EAAAA,SAAS,EAAE5C,YAAY,CAAC4C,SA9HC;AAgIzBC,EAAAA,QAAQ,EAAE7C,YAAY,CAAC6C,QAhIE;AAiIzBC,EAAAA,UAAU,EAAE9C,YAAY,CAAC8C,UAjIA;AAmIzBC,EAAAA,SAAS,EAAE3C,UAAU,CAAC,EAAD,EAAKH,SAAS,CAAC8C,SAAf,EAA0B;AAC3CC,IAAAA,KAAK,EAAE,CAAC,KAAD,EAAQ,KAAR,EAAe,UAAf,EAA2B,MAA3B,EAAmC,MAAnC;AADoC,GAA1B,CAnII;AAsIzBC,EAAAA,aAAa,EAAEpD,kBAAkB;AAtIR,CAAD,EAuIzB,MAvIyB,EAuIjB,QAvIiB,CAA5B","sourcesContent":["'use strict';\n\nvar hovertemplateAttrs = require('../../plots/template_attributes').hovertemplateAttrs;\nvar texttemplateAttrs = require('../../plots/template_attributes').texttemplateAttrs;\nvar scatterAttrs = require('../scatter/attributes');\nvar baseAttrs = require('../../plots/attributes');\nvar colorAttributes = require('../../components/colorscale/attributes');\nvar dash = require('../../components/drawing/attributes').dash;\n\nvar extendFlat = require('../../lib/extend').extendFlat;\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\n\nvar scatterMarkerAttrs = scatterAttrs.marker;\nvar scatterLineAttrs = scatterAttrs.line;\nvar scatterMarkerLineAttrs = scatterMarkerAttrs.line;\n\nmodule.exports = overrideAll({\n    lon: {\n        valType: 'data_array',\n        description: 'Sets the longitude coordinates (in degrees East).'\n    },\n    lat: {\n        valType: 'data_array',\n        description: 'Sets the latitude coordinates (in degrees North).'\n    },\n\n    locations: {\n        valType: 'data_array',\n        description: [\n            'Sets the coordinates via location IDs or names.',\n            'Coordinates correspond to the centroid of each location given.',\n            'See `locationmode` for more info.'\n        ].join(' ')\n    },\n    locationmode: {\n        valType: 'enumerated',\n        values: ['ISO-3', 'USA-states', 'country names', 'geojson-id'],\n        dflt: 'ISO-3',\n        description: [\n            'Determines the set of locations used to match entries in `locations`',\n            'to regions on the map.',\n            'Values *ISO-3*, *USA-states*, *country names* correspond to features on',\n            'the base map and value *geojson-id* corresponds to features from a custom',\n            'GeoJSON linked to the `geojson` attribute.'\n        ].join(' ')\n    },\n\n    geojson: {\n        valType: 'any',\n        editType: 'calc',\n        description: [\n            'Sets optional GeoJSON data associated with this trace.',\n            'If not given, the features on the base map are used when `locations` is set.',\n\n            'It can be set as a valid GeoJSON object or as a URL string.',\n            'Note that we only accept GeoJSONs of type *FeatureCollection* or *Feature*',\n            'with geometries of type *Polygon* or *MultiPolygon*.'\n\n            // TODO add topojson support with additional 'topojsonobject' attr?\n            // https://github.com/topojson/topojson-specification/blob/master/README.md\n        ].join(' ')\n    },\n    featureidkey: {\n        valType: 'string',\n        editType: 'calc',\n        dflt: 'id',\n        description: [\n            'Sets the key in GeoJSON features which is used as id to match the items',\n            'included in the `locations` array.',\n            'Only has an effect when `geojson` is set.',\n            'Support nested property, for example *properties.name*.'\n        ].join(' ')\n    },\n\n    mode: extendFlat({}, scatterAttrs.mode, {dflt: 'markers'}),\n\n    text: extendFlat({}, scatterAttrs.text, {\n        description: [\n            'Sets text elements associated with each (lon,lat) pair',\n            'or item in `locations`.',\n            'If a single string, the same string appears over',\n            'all the data points.',\n            'If an array of string, the items are mapped in order to the',\n            'this trace\\'s (lon,lat) or `locations` coordinates.',\n            'If trace `hoverinfo` contains a *text* flag and *hovertext* is not set,',\n            'these elements will be seen in the hover labels.'\n        ].join(' ')\n    }),\n    texttemplate: texttemplateAttrs({editType: 'plot'}, {\n        keys: ['lat', 'lon', 'location', 'text']\n    }),\n    hovertext: extendFlat({}, scatterAttrs.hovertext, {\n        description: [\n            'Sets hover text elements associated with each (lon,lat) pair',\n            'or item in `locations`.',\n            'If a single string, the same string appears over',\n            'all the data points.',\n            'If an array of string, the items are mapped in order to the',\n            'this trace\\'s (lon,lat) or `locations` coordinates.',\n            'To be seen, trace `hoverinfo` must contain a *text* flag.'\n        ].join(' ')\n    }),\n\n    textfont: scatterAttrs.textfont,\n    textposition: scatterAttrs.textposition,\n\n    line: {\n        color: scatterLineAttrs.color,\n        width: scatterLineAttrs.width,\n        dash: dash\n    },\n    connectgaps: scatterAttrs.connectgaps,\n\n    marker: extendFlat({\n        symbol: scatterMarkerAttrs.symbol,\n        opacity: scatterMarkerAttrs.opacity,\n        size: scatterMarkerAttrs.size,\n        sizeref: scatterMarkerAttrs.sizeref,\n        sizemin: scatterMarkerAttrs.sizemin,\n        sizemode: scatterMarkerAttrs.sizemode,\n        colorbar: scatterMarkerAttrs.colorbar,\n        line: extendFlat({\n            width: scatterMarkerLineAttrs.width\n        },\n            colorAttributes('marker.line')\n        ),\n        gradient: scatterMarkerAttrs.gradient\n    },\n        colorAttributes('marker')\n    ),\n\n    fill: {\n        valType: 'enumerated',\n        values: ['none', 'toself'],\n        dflt: 'none',\n        description: [\n            'Sets the area to fill with a solid color.',\n            'Use with `fillcolor` if not *none*.',\n            '*toself* connects the endpoints of the trace (or each segment',\n            'of the trace if it has gaps) into a closed shape.'\n        ].join(' ')\n    },\n    fillcolor: scatterAttrs.fillcolor,\n\n    selected: scatterAttrs.selected,\n    unselected: scatterAttrs.unselected,\n\n    hoverinfo: extendFlat({}, baseAttrs.hoverinfo, {\n        flags: ['lon', 'lat', 'location', 'text', 'name']\n    }),\n    hovertemplate: hovertemplateAttrs(),\n}, 'calc', 'nested');\n"]},"metadata":{},"sourceType":"script"}