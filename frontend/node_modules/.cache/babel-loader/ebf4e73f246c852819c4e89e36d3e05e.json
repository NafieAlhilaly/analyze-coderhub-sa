{"ast":null,"code":"'use strict';\n\nvar Registry = require('../../registry');\n\nvar Lib = require('../../lib');\n\nmodule.exports = function handleSampleDefaults(traceIn, traceOut, coerce, layout) {\n  var x = coerce('x');\n  var y = coerce('y');\n  var xlen = Lib.minRowLength(x);\n  var ylen = Lib.minRowLength(y); // we could try to accept x0 and dx, etc...\n  // but that's a pretty weird use case.\n  // for now require both x and y explicitly specified.\n\n  if (!xlen || !ylen) {\n    traceOut.visible = false;\n    return;\n  }\n\n  traceOut._length = Math.min(xlen, ylen);\n  var handleCalendarDefaults = Registry.getComponentMethod('calendars', 'handleTraceDefaults');\n  handleCalendarDefaults(traceIn, traceOut, ['x', 'y'], layout); // if marker.color is an array, we can use it in aggregation instead of z\n\n  var hasAggregationData = coerce('z') || coerce('marker.color');\n  if (hasAggregationData) coerce('histfunc');\n  coerce('histnorm'); // Note: bin defaults are now handled in Histogram2D.crossTraceDefaults\n  // autobin(x|y) are only included here to appease Plotly.validate\n\n  coerce('autobinx');\n  coerce('autobiny');\n};","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/plotly.js/src/traces/histogram2d/sample_defaults.js"],"names":["Registry","require","Lib","module","exports","handleSampleDefaults","traceIn","traceOut","coerce","layout","x","y","xlen","minRowLength","ylen","visible","_length","Math","min","handleCalendarDefaults","getComponentMethod","hasAggregationData"],"mappings":"AAAA;;AAEA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,gBAAD,CAAtB;;AACA,IAAIC,GAAG,GAAGD,OAAO,CAAC,WAAD,CAAjB;;AAEAE,MAAM,CAACC,OAAP,GAAiB,SAASC,oBAAT,CAA8BC,OAA9B,EAAuCC,QAAvC,EAAiDC,MAAjD,EAAyDC,MAAzD,EAAiE;AAC9E,MAAIC,CAAC,GAAGF,MAAM,CAAC,GAAD,CAAd;AACA,MAAIG,CAAC,GAAGH,MAAM,CAAC,GAAD,CAAd;AACA,MAAII,IAAI,GAAGV,GAAG,CAACW,YAAJ,CAAiBH,CAAjB,CAAX;AACA,MAAII,IAAI,GAAGZ,GAAG,CAACW,YAAJ,CAAiBF,CAAjB,CAAX,CAJ8E,CAM9E;AACA;AACA;;AACA,MAAG,CAACC,IAAD,IAAS,CAACE,IAAb,EAAmB;AACfP,IAAAA,QAAQ,CAACQ,OAAT,GAAmB,KAAnB;AACA;AACH;;AAEDR,EAAAA,QAAQ,CAACS,OAAT,GAAmBC,IAAI,CAACC,GAAL,CAASN,IAAT,EAAeE,IAAf,CAAnB;AAEA,MAAIK,sBAAsB,GAAGnB,QAAQ,CAACoB,kBAAT,CAA4B,WAA5B,EAAyC,qBAAzC,CAA7B;AACAD,EAAAA,sBAAsB,CAACb,OAAD,EAAUC,QAAV,EAAoB,CAAC,GAAD,EAAM,GAAN,CAApB,EAAgCE,MAAhC,CAAtB,CAjB8E,CAmB9E;;AACA,MAAIY,kBAAkB,GAAGb,MAAM,CAAC,GAAD,CAAN,IAAeA,MAAM,CAAC,cAAD,CAA9C;AAEA,MAAGa,kBAAH,EAAuBb,MAAM,CAAC,UAAD,CAAN;AACvBA,EAAAA,MAAM,CAAC,UAAD,CAAN,CAvB8E,CAyB9E;AACA;;AACAA,EAAAA,MAAM,CAAC,UAAD,CAAN;AACAA,EAAAA,MAAM,CAAC,UAAD,CAAN;AACH,CA7BD","sourcesContent":["'use strict';\n\nvar Registry = require('../../registry');\nvar Lib = require('../../lib');\n\nmodule.exports = function handleSampleDefaults(traceIn, traceOut, coerce, layout) {\n    var x = coerce('x');\n    var y = coerce('y');\n    var xlen = Lib.minRowLength(x);\n    var ylen = Lib.minRowLength(y);\n\n    // we could try to accept x0 and dx, etc...\n    // but that's a pretty weird use case.\n    // for now require both x and y explicitly specified.\n    if(!xlen || !ylen) {\n        traceOut.visible = false;\n        return;\n    }\n\n    traceOut._length = Math.min(xlen, ylen);\n\n    var handleCalendarDefaults = Registry.getComponentMethod('calendars', 'handleTraceDefaults');\n    handleCalendarDefaults(traceIn, traceOut, ['x', 'y'], layout);\n\n    // if marker.color is an array, we can use it in aggregation instead of z\n    var hasAggregationData = coerce('z') || coerce('marker.color');\n\n    if(hasAggregationData) coerce('histfunc');\n    coerce('histnorm');\n\n    // Note: bin defaults are now handled in Histogram2D.crossTraceDefaults\n    // autobin(x|y) are only included here to appease Plotly.validate\n    coerce('autobinx');\n    coerce('autobiny');\n};\n"]},"metadata":{},"sourceType":"script"}