{"ast":null,"code":"var lerp = require('gl-vec3/lerp');\n\nvar recompose = require('mat4-recompose');\n\nvar decompose = require('mat4-decompose');\n\nvar determinant = require('gl-mat4/determinant');\n\nvar slerp = require('quat-slerp');\n\nvar state0 = state();\nvar state1 = state();\nvar tmp = state();\nmodule.exports = interpolate;\n\nfunction interpolate(out, start, end, alpha) {\n  if (determinant(start) === 0 || determinant(end) === 0) return false; //decompose the start and end matrices into individual components\n\n  var r0 = decompose(start, state0.translate, state0.scale, state0.skew, state0.perspective, state0.quaternion);\n  var r1 = decompose(end, state1.translate, state1.scale, state1.skew, state1.perspective, state1.quaternion);\n  if (!r0 || !r1) return false; //now lerp/slerp the start and end components into a temporary     lerp(tmptranslate, state0.translate, state1.translate, alpha)\n\n  lerp(tmp.translate, state0.translate, state1.translate, alpha);\n  lerp(tmp.skew, state0.skew, state1.skew, alpha);\n  lerp(tmp.scale, state0.scale, state1.scale, alpha);\n  lerp(tmp.perspective, state0.perspective, state1.perspective, alpha);\n  slerp(tmp.quaternion, state0.quaternion, state1.quaternion, alpha); //and recompose into our 'out' matrix\n\n  recompose(out, tmp.translate, tmp.scale, tmp.skew, tmp.perspective, tmp.quaternion);\n  return true;\n}\n\nfunction state() {\n  return {\n    translate: vec3(),\n    scale: vec3(1),\n    skew: vec3(),\n    perspective: vec4(),\n    quaternion: vec4()\n  };\n}\n\nfunction vec3(n) {\n  return [n || 0, n || 0, n || 0];\n}\n\nfunction vec4() {\n  return [0, 0, 0, 1];\n}","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/mat4-interpolate/index.js"],"names":["lerp","require","recompose","decompose","determinant","slerp","state0","state","state1","tmp","module","exports","interpolate","out","start","end","alpha","r0","translate","scale","skew","perspective","quaternion","r1","vec3","vec4","n"],"mappings":"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","sourcesContent":["var lerp = require('gl-vec3/lerp')\n\nvar recompose = require('mat4-recompose')\nvar decompose = require('mat4-decompose')\nvar determinant = require('gl-mat4/determinant')\nvar slerp = require('quat-slerp')\n\nvar state0 = state()\nvar state1 = state()\nvar tmp = state()\n\nmodule.exports = interpolate\nfunction interpolate(out, start, end, alpha) {\n    if (determinant(start) === 0 || determinant(end) === 0)\n        return false\n\n    //decompose the start and end matrices into individual components\n    var r0 = decompose(start, state0.translate, state0.scale, state0.skew, state0.perspective, state0.quaternion)\n    var r1 = decompose(end, state1.translate, state1.scale, state1.skew, state1.perspective, state1.quaternion)\n    if (!r0 || !r1)\n        return false    \n\n\n    //now lerp/slerp the start and end components into a temporary     lerp(tmptranslate, state0.translate, state1.translate, alpha)\n    lerp(tmp.translate, state0.translate, state1.translate, alpha)\n    lerp(tmp.skew, state0.skew, state1.skew, alpha)\n    lerp(tmp.scale, state0.scale, state1.scale, alpha)\n    lerp(tmp.perspective, state0.perspective, state1.perspective, alpha)\n    slerp(tmp.quaternion, state0.quaternion, state1.quaternion, alpha)\n\n    //and recompose into our 'out' matrix\n    recompose(out, tmp.translate, tmp.scale, tmp.skew, tmp.perspective, tmp.quaternion)\n    return true\n}\n\nfunction state() {\n    return {\n        translate: vec3(),\n        scale: vec3(1),\n        skew: vec3(),\n        perspective: vec4(),\n        quaternion: vec4()\n    }\n}\n\nfunction vec3(n) {\n    return [n||0,n||0,n||0]\n}\n\nfunction vec4() {\n    return [0,0,0,1]\n}"]},"metadata":{},"sourceType":"script"}