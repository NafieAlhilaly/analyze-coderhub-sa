{"ast":null,"code":"'use strict';\n\nvar Lib = require('../../lib');\n\nvar Fx = require('../../components/fx');\n\nvar Registry = require('../../registry');\n\nvar getTraceColor = require('./get_trace_color');\n\nvar Color = require('../../components/color');\n\nvar fillText = Lib.fillText;\n\nmodule.exports = function hoverPoints(pointData, xval, yval, hovermode) {\n  var cd = pointData.cd;\n  var trace = cd[0].trace;\n  var xa = pointData.xa;\n  var ya = pointData.ya;\n  var xpx = xa.c2p(xval);\n  var ypx = ya.c2p(yval);\n  var pt = [xpx, ypx];\n  var hoveron = trace.hoveron || '';\n  var minRad = trace.mode.indexOf('markers') !== -1 ? 3 : 0.5;\n  var xPeriod = !!trace.xperiodalignment;\n  var yPeriod = !!trace.yperiodalignment; // look for points to hover on first, then take fills only if we\n  // didn't find a point\n\n  if (hoveron.indexOf('points') !== -1) {\n    // dx and dy are used in compare modes - here we want to always\n    // prioritize the closest data point, at least as long as markers are\n    // the same size or nonexistent, but still try to prioritize small markers too.\n    var dx = function (di) {\n      if (xPeriod) {\n        var x0 = xa.c2p(di.xStart);\n        var x1 = xa.c2p(di.xEnd);\n        return xpx >= Math.min(x0, x1) && xpx <= Math.max(x0, x1) ? 0 : Infinity;\n      }\n\n      var rad = Math.max(3, di.mrc || 0);\n      var kink = 1 - 1 / rad;\n      var dxRaw = Math.abs(xa.c2p(di.x) - xpx);\n      return dxRaw < rad ? kink * dxRaw / rad : dxRaw - rad + kink;\n    };\n\n    var dy = function (di) {\n      if (yPeriod) {\n        var y0 = ya.c2p(di.yStart);\n        var y1 = ya.c2p(di.yEnd);\n        return ypx >= Math.min(y0, y1) && ypx <= Math.max(y0, y1) ? 0 : Infinity;\n      }\n\n      var rad = Math.max(3, di.mrc || 0);\n      var kink = 1 - 1 / rad;\n      var dyRaw = Math.abs(ya.c2p(di.y) - ypx);\n      return dyRaw < rad ? kink * dyRaw / rad : dyRaw - rad + kink;\n    }; // scatter points: d.mrc is the calculated marker radius\n    // adjust the distance so if you're inside the marker it\n    // always will show up regardless of point size, but\n    // prioritize smaller points\n\n\n    var dxy = function (di) {\n      var rad = Math.max(minRad, di.mrc || 0);\n      var dx = xa.c2p(di.x) - xpx;\n      var dy = ya.c2p(di.y) - ypx;\n      return Math.max(Math.sqrt(dx * dx + dy * dy) - rad, 1 - minRad / rad);\n    };\n\n    var distfn = Fx.getDistanceFunction(hovermode, dx, dy, dxy);\n    Fx.getClosest(cd, distfn, pointData); // skip the rest (for this trace) if we didn't find a close point\n\n    if (pointData.index !== false) {\n      // the closest data point\n      var di = cd[pointData.index];\n      var xc = xa.c2p(di.x, true);\n      var yc = ya.c2p(di.y, true);\n      var rad = di.mrc || 1; // now we're done using the whole `calcdata` array, replace the\n      // index with the original index (in case of inserted point from\n      // stacked area)\n\n      pointData.index = di.i;\n      var orientation = cd[0].t.orientation; // TODO: for scatter and bar, option to show (sub)totals and\n      // raw data? Currently stacked and/or normalized bars just show\n      // the normalized individual sizes, so that's what I'm doing here\n      // for now.\n\n      var sizeVal = orientation && (di.sNorm || di.s);\n      var xLabelVal = orientation === 'h' ? sizeVal : di.orig_x !== undefined ? di.orig_x : di.x;\n      var yLabelVal = orientation === 'v' ? sizeVal : di.orig_y !== undefined ? di.orig_y : di.y;\n      Lib.extendFlat(pointData, {\n        color: getTraceColor(trace, di),\n        x0: xc - rad,\n        x1: xc + rad,\n        xLabelVal: xLabelVal,\n        y0: yc - rad,\n        y1: yc + rad,\n        yLabelVal: yLabelVal,\n        spikeDistance: dxy(di),\n        hovertemplate: trace.hovertemplate\n      });\n      fillText(di, trace, pointData);\n      Registry.getComponentMethod('errorbars', 'hoverInfo')(di, trace, pointData);\n      return [pointData];\n    }\n  } // even if hoveron is 'fills', only use it if we have polygons too\n\n\n  if (hoveron.indexOf('fills') !== -1 && trace._polygons) {\n    var polygons = trace._polygons;\n    var polygonsIn = [];\n    var inside = false;\n    var xmin = Infinity;\n    var xmax = -Infinity;\n    var ymin = Infinity;\n    var ymax = -Infinity;\n    var i, j, polygon, pts, xCross, x0, x1, y0, y1;\n\n    for (i = 0; i < polygons.length; i++) {\n      polygon = polygons[i]; // TODO: this is not going to work right for curved edges, it will\n      // act as though they're straight. That's probably going to need\n      // the elements themselves to capture the events. Worth it?\n\n      if (polygon.contains(pt)) {\n        inside = !inside; // TODO: need better than just the overall bounding box\n\n        polygonsIn.push(polygon);\n        ymin = Math.min(ymin, polygon.ymin);\n        ymax = Math.max(ymax, polygon.ymax);\n      }\n    }\n\n    if (inside) {\n      // constrain ymin/max to the visible plot, so the label goes\n      // at the middle of the piece you can see\n      ymin = Math.max(ymin, 0);\n      ymax = Math.min(ymax, ya._length); // find the overall left-most and right-most points of the\n      // polygon(s) we're inside at their combined vertical midpoint.\n      // This is where we will draw the hover label.\n      // Note that this might not be the vertical midpoint of the\n      // whole trace, if it's disjoint.\n\n      var yAvg = (ymin + ymax) / 2;\n\n      for (i = 0; i < polygonsIn.length; i++) {\n        pts = polygonsIn[i].pts;\n\n        for (j = 1; j < pts.length; j++) {\n          y0 = pts[j - 1][1];\n          y1 = pts[j][1];\n\n          if (y0 > yAvg !== y1 >= yAvg) {\n            x0 = pts[j - 1][0];\n            x1 = pts[j][0];\n\n            if (y1 - y0) {\n              xCross = x0 + (x1 - x0) * (yAvg - y0) / (y1 - y0);\n              xmin = Math.min(xmin, xCross);\n              xmax = Math.max(xmax, xCross);\n            }\n          }\n        }\n      } // constrain xmin/max to the visible plot now too\n\n\n      xmin = Math.max(xmin, 0);\n      xmax = Math.min(xmax, xa._length); // get only fill or line color for the hover color\n\n      var color = Color.defaultLine;\n      if (Color.opacity(trace.fillcolor)) color = trace.fillcolor;else if (Color.opacity((trace.line || {}).color)) {\n        color = trace.line.color;\n      }\n      Lib.extendFlat(pointData, {\n        // never let a 2D override 1D type as closest point\n        // also: no spikeDistance, it's not allowed for fills\n        distance: pointData.maxHoverDistance,\n        x0: xmin,\n        x1: xmax,\n        y0: yAvg,\n        y1: yAvg,\n        color: color,\n        hovertemplate: false\n      });\n      delete pointData.index;\n\n      if (trace.text && !Array.isArray(trace.text)) {\n        pointData.text = String(trace.text);\n      } else pointData.text = trace.name;\n\n      return [pointData];\n    }\n  }\n};","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/plotly.js/src/traces/scatter/hover.js"],"names":["Lib","require","Fx","Registry","getTraceColor","Color","fillText","module","exports","hoverPoints","pointData","xval","yval","hovermode","cd","trace","xa","ya","xpx","c2p","ypx","pt","hoveron","minRad","mode","indexOf","xPeriod","xperiodalignment","yPeriod","yperiodalignment","dx","di","x0","xStart","x1","xEnd","Math","min","max","Infinity","rad","mrc","kink","dxRaw","abs","x","dy","y0","yStart","y1","yEnd","dyRaw","y","dxy","sqrt","distfn","getDistanceFunction","getClosest","index","xc","yc","i","orientation","t","sizeVal","sNorm","s","xLabelVal","orig_x","undefined","yLabelVal","orig_y","extendFlat","color","spikeDistance","hovertemplate","getComponentMethod","_polygons","polygons","polygonsIn","inside","xmin","xmax","ymin","ymax","j","polygon","pts","xCross","length","contains","push","_length","yAvg","defaultLine","opacity","fillcolor","line","distance","maxHoverDistance","text","Array","isArray","String","name"],"mappings":"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","sourcesContent":["'use strict';\n\nvar Lib = require('../../lib');\nvar Fx = require('../../components/fx');\nvar Registry = require('../../registry');\nvar getTraceColor = require('./get_trace_color');\nvar Color = require('../../components/color');\nvar fillText = Lib.fillText;\n\nmodule.exports = function hoverPoints(pointData, xval, yval, hovermode) {\n    var cd = pointData.cd;\n    var trace = cd[0].trace;\n    var xa = pointData.xa;\n    var ya = pointData.ya;\n    var xpx = xa.c2p(xval);\n    var ypx = ya.c2p(yval);\n    var pt = [xpx, ypx];\n    var hoveron = trace.hoveron || '';\n    var minRad = (trace.mode.indexOf('markers') !== -1) ? 3 : 0.5;\n\n    var xPeriod = !!trace.xperiodalignment;\n    var yPeriod = !!trace.yperiodalignment;\n\n    // look for points to hover on first, then take fills only if we\n    // didn't find a point\n\n    if(hoveron.indexOf('points') !== -1) {\n        // dx and dy are used in compare modes - here we want to always\n        // prioritize the closest data point, at least as long as markers are\n        // the same size or nonexistent, but still try to prioritize small markers too.\n        var dx = function(di) {\n            if(xPeriod) {\n                var x0 = xa.c2p(di.xStart);\n                var x1 = xa.c2p(di.xEnd);\n\n                return (\n                    xpx >= Math.min(x0, x1) &&\n                    xpx <= Math.max(x0, x1)\n                ) ? 0 : Infinity;\n            }\n\n            var rad = Math.max(3, di.mrc || 0);\n            var kink = 1 - 1 / rad;\n            var dxRaw = Math.abs(xa.c2p(di.x) - xpx);\n            return (dxRaw < rad) ? (kink * dxRaw / rad) : (dxRaw - rad + kink);\n        };\n        var dy = function(di) {\n            if(yPeriod) {\n                var y0 = ya.c2p(di.yStart);\n                var y1 = ya.c2p(di.yEnd);\n\n                return (\n                    ypx >= Math.min(y0, y1) &&\n                    ypx <= Math.max(y0, y1)\n                ) ? 0 : Infinity;\n            }\n\n            var rad = Math.max(3, di.mrc || 0);\n            var kink = 1 - 1 / rad;\n            var dyRaw = Math.abs(ya.c2p(di.y) - ypx);\n            return (dyRaw < rad) ? (kink * dyRaw / rad) : (dyRaw - rad + kink);\n        };\n\n        // scatter points: d.mrc is the calculated marker radius\n        // adjust the distance so if you're inside the marker it\n        // always will show up regardless of point size, but\n        // prioritize smaller points\n        var dxy = function(di) {\n            var rad = Math.max(minRad, di.mrc || 0);\n            var dx = xa.c2p(di.x) - xpx;\n            var dy = ya.c2p(di.y) - ypx;\n            return Math.max(Math.sqrt(dx * dx + dy * dy) - rad, 1 - minRad / rad);\n        };\n        var distfn = Fx.getDistanceFunction(hovermode, dx, dy, dxy);\n\n        Fx.getClosest(cd, distfn, pointData);\n\n        // skip the rest (for this trace) if we didn't find a close point\n        if(pointData.index !== false) {\n            // the closest data point\n            var di = cd[pointData.index];\n            var xc = xa.c2p(di.x, true);\n            var yc = ya.c2p(di.y, true);\n            var rad = di.mrc || 1;\n\n            // now we're done using the whole `calcdata` array, replace the\n            // index with the original index (in case of inserted point from\n            // stacked area)\n            pointData.index = di.i;\n\n            var orientation = cd[0].t.orientation;\n            // TODO: for scatter and bar, option to show (sub)totals and\n            // raw data? Currently stacked and/or normalized bars just show\n            // the normalized individual sizes, so that's what I'm doing here\n            // for now.\n            var sizeVal = orientation && (di.sNorm || di.s);\n            var xLabelVal = (orientation === 'h') ? sizeVal : di.orig_x !== undefined ? di.orig_x : di.x;\n            var yLabelVal = (orientation === 'v') ? sizeVal : di.orig_y !== undefined ? di.orig_y : di.y;\n\n            Lib.extendFlat(pointData, {\n                color: getTraceColor(trace, di),\n\n                x0: xc - rad,\n                x1: xc + rad,\n                xLabelVal: xLabelVal,\n\n                y0: yc - rad,\n                y1: yc + rad,\n                yLabelVal: yLabelVal,\n\n                spikeDistance: dxy(di),\n                hovertemplate: trace.hovertemplate\n            });\n\n            fillText(di, trace, pointData);\n            Registry.getComponentMethod('errorbars', 'hoverInfo')(di, trace, pointData);\n\n            return [pointData];\n        }\n    }\n\n    // even if hoveron is 'fills', only use it if we have polygons too\n    if(hoveron.indexOf('fills') !== -1 && trace._polygons) {\n        var polygons = trace._polygons;\n        var polygonsIn = [];\n        var inside = false;\n        var xmin = Infinity;\n        var xmax = -Infinity;\n        var ymin = Infinity;\n        var ymax = -Infinity;\n\n        var i, j, polygon, pts, xCross, x0, x1, y0, y1;\n\n        for(i = 0; i < polygons.length; i++) {\n            polygon = polygons[i];\n            // TODO: this is not going to work right for curved edges, it will\n            // act as though they're straight. That's probably going to need\n            // the elements themselves to capture the events. Worth it?\n            if(polygon.contains(pt)) {\n                inside = !inside;\n                // TODO: need better than just the overall bounding box\n                polygonsIn.push(polygon);\n                ymin = Math.min(ymin, polygon.ymin);\n                ymax = Math.max(ymax, polygon.ymax);\n            }\n        }\n\n        if(inside) {\n            // constrain ymin/max to the visible plot, so the label goes\n            // at the middle of the piece you can see\n            ymin = Math.max(ymin, 0);\n            ymax = Math.min(ymax, ya._length);\n\n            // find the overall left-most and right-most points of the\n            // polygon(s) we're inside at their combined vertical midpoint.\n            // This is where we will draw the hover label.\n            // Note that this might not be the vertical midpoint of the\n            // whole trace, if it's disjoint.\n            var yAvg = (ymin + ymax) / 2;\n            for(i = 0; i < polygonsIn.length; i++) {\n                pts = polygonsIn[i].pts;\n                for(j = 1; j < pts.length; j++) {\n                    y0 = pts[j - 1][1];\n                    y1 = pts[j][1];\n                    if((y0 > yAvg) !== (y1 >= yAvg)) {\n                        x0 = pts[j - 1][0];\n                        x1 = pts[j][0];\n                        if(y1 - y0) {\n                            xCross = x0 + (x1 - x0) * (yAvg - y0) / (y1 - y0);\n                            xmin = Math.min(xmin, xCross);\n                            xmax = Math.max(xmax, xCross);\n                        }\n                    }\n                }\n            }\n\n            // constrain xmin/max to the visible plot now too\n            xmin = Math.max(xmin, 0);\n            xmax = Math.min(xmax, xa._length);\n\n            // get only fill or line color for the hover color\n            var color = Color.defaultLine;\n            if(Color.opacity(trace.fillcolor)) color = trace.fillcolor;\n            else if(Color.opacity((trace.line || {}).color)) {\n                color = trace.line.color;\n            }\n\n            Lib.extendFlat(pointData, {\n                // never let a 2D override 1D type as closest point\n                // also: no spikeDistance, it's not allowed for fills\n                distance: pointData.maxHoverDistance,\n                x0: xmin,\n                x1: xmax,\n                y0: yAvg,\n                y1: yAvg,\n                color: color,\n                hovertemplate: false\n            });\n\n            delete pointData.index;\n\n            if(trace.text && !Array.isArray(trace.text)) {\n                pointData.text = String(trace.text);\n            } else pointData.text = trace.name;\n\n            return [pointData];\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}