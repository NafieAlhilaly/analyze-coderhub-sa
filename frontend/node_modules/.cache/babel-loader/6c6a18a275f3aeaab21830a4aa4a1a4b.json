{"ast":null,"code":"'use strict';\n\nvar Lib = require('../../lib');\n\nvar attributes = require('./attributes');\n\nvar Color = require('../../components/color');\n\nvar handleDomainDefaults = require('../../plots/domain').defaults;\n\nvar handleText = require('../bar/defaults').handleText;\n\nvar TEXTPAD = require('../bar/constants').TEXTPAD;\n\nvar Colorscale = require('../../components/colorscale');\n\nvar hasColorscale = Colorscale.hasColorscale;\nvar colorscaleDefaults = Colorscale.handleDefaults;\n\nmodule.exports = function supplyDefaults(traceIn, traceOut, defaultColor, layout) {\n  function coerce(attr, dflt) {\n    return Lib.coerce(traceIn, traceOut, attributes, attr, dflt);\n  }\n\n  var labels = coerce('labels');\n  var parents = coerce('parents');\n\n  if (!labels || !labels.length || !parents || !parents.length) {\n    traceOut.visible = false;\n    return;\n  }\n\n  var vals = coerce('values');\n\n  if (vals && vals.length) {\n    coerce('branchvalues');\n  } else {\n    coerce('count');\n  }\n\n  coerce('level');\n  coerce('maxdepth');\n  var packing = coerce('tiling.packing');\n\n  if (packing === 'squarify') {\n    coerce('tiling.squarifyratio');\n  }\n\n  coerce('tiling.flip');\n  coerce('tiling.pad');\n  var text = coerce('text');\n  coerce('texttemplate');\n  if (!traceOut.texttemplate) coerce('textinfo', Array.isArray(text) ? 'text+label' : 'label');\n  coerce('hovertext');\n  coerce('hovertemplate');\n  var hasPathbar = coerce('pathbar.visible');\n  var textposition = 'auto';\n  handleText(traceIn, traceOut, layout, coerce, textposition, {\n    hasPathbar: hasPathbar,\n    moduleHasSelected: false,\n    moduleHasUnselected: false,\n    moduleHasConstrain: false,\n    moduleHasCliponaxis: false,\n    moduleHasTextangle: false,\n    moduleHasInsideanchor: false\n  });\n  coerce('textposition');\n  var bottomText = traceOut.textposition.indexOf('bottom') !== -1;\n  var lineWidth = coerce('marker.line.width');\n  if (lineWidth) coerce('marker.line.color', layout.paper_bgcolor);\n  var colors = coerce('marker.colors');\n  var withColorscale = traceOut._hasColorscale = hasColorscale(traceIn, 'marker', 'colors') || (traceIn.marker || {}).coloraxis // N.B. special logic to consider \"values\" colorscales\n  ;\n\n  if (withColorscale) {\n    colorscaleDefaults(traceIn, traceOut, layout, coerce, {\n      prefix: 'marker.',\n      cLetter: 'c'\n    });\n  } else {\n    coerce('marker.depthfade', !(colors || []).length);\n  }\n\n  var headerSize = traceOut.textfont.size * 2;\n  coerce('marker.pad.t', bottomText ? headerSize / 4 : headerSize);\n  coerce('marker.pad.l', headerSize / 4);\n  coerce('marker.pad.r', headerSize / 4);\n  coerce('marker.pad.b', bottomText ? headerSize : headerSize / 4);\n  traceOut._hovered = {\n    marker: {\n      line: {\n        width: 2,\n        color: Color.contrast(layout.paper_bgcolor)\n      }\n    }\n  };\n\n  if (hasPathbar) {\n    // This works even for multi-line labels as treemap pathbar trim out line breaks\n    coerce('pathbar.thickness', traceOut.pathbar.textfont.size + 2 * TEXTPAD);\n    coerce('pathbar.side');\n    coerce('pathbar.edgeshape');\n  }\n\n  coerce('sort');\n  coerce('root.color');\n  handleDomainDefaults(traceOut, layout, coerce); // do not support transforms for now\n\n  traceOut._length = null;\n};","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/plotly.js/src/traces/treemap/defaults.js"],"names":["Lib","require","attributes","Color","handleDomainDefaults","defaults","handleText","TEXTPAD","Colorscale","hasColorscale","colorscaleDefaults","handleDefaults","module","exports","supplyDefaults","traceIn","traceOut","defaultColor","layout","coerce","attr","dflt","labels","parents","length","visible","vals","packing","text","texttemplate","Array","isArray","hasPathbar","textposition","moduleHasSelected","moduleHasUnselected","moduleHasConstrain","moduleHasCliponaxis","moduleHasTextangle","moduleHasInsideanchor","bottomText","indexOf","lineWidth","paper_bgcolor","colors","withColorscale","_hasColorscale","marker","coloraxis","prefix","cLetter","headerSize","textfont","size","_hovered","line","width","color","contrast","pathbar","_length"],"mappings":"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","sourcesContent":["'use strict';\n\nvar Lib = require('../../lib');\nvar attributes = require('./attributes');\nvar Color = require('../../components/color');\nvar handleDomainDefaults = require('../../plots/domain').defaults;\nvar handleText = require('../bar/defaults').handleText;\nvar TEXTPAD = require('../bar/constants').TEXTPAD;\n\nvar Colorscale = require('../../components/colorscale');\nvar hasColorscale = Colorscale.hasColorscale;\nvar colorscaleDefaults = Colorscale.handleDefaults;\n\nmodule.exports = function supplyDefaults(traceIn, traceOut, defaultColor, layout) {\n    function coerce(attr, dflt) {\n        return Lib.coerce(traceIn, traceOut, attributes, attr, dflt);\n    }\n\n    var labels = coerce('labels');\n    var parents = coerce('parents');\n\n    if(!labels || !labels.length || !parents || !parents.length) {\n        traceOut.visible = false;\n        return;\n    }\n\n    var vals = coerce('values');\n    if(vals && vals.length) {\n        coerce('branchvalues');\n    } else {\n        coerce('count');\n    }\n\n    coerce('level');\n    coerce('maxdepth');\n\n    var packing = coerce('tiling.packing');\n    if(packing === 'squarify') {\n        coerce('tiling.squarifyratio');\n    }\n\n    coerce('tiling.flip');\n    coerce('tiling.pad');\n\n    var text = coerce('text');\n    coerce('texttemplate');\n    if(!traceOut.texttemplate) coerce('textinfo', Array.isArray(text) ? 'text+label' : 'label');\n\n    coerce('hovertext');\n    coerce('hovertemplate');\n\n    var hasPathbar = coerce('pathbar.visible');\n\n    var textposition = 'auto';\n    handleText(traceIn, traceOut, layout, coerce, textposition, {\n        hasPathbar: hasPathbar,\n        moduleHasSelected: false,\n        moduleHasUnselected: false,\n        moduleHasConstrain: false,\n        moduleHasCliponaxis: false,\n        moduleHasTextangle: false,\n        moduleHasInsideanchor: false\n    });\n    coerce('textposition');\n    var bottomText = traceOut.textposition.indexOf('bottom') !== -1;\n\n    var lineWidth = coerce('marker.line.width');\n    if(lineWidth) coerce('marker.line.color', layout.paper_bgcolor);\n\n    var colors = coerce('marker.colors');\n    var withColorscale = traceOut._hasColorscale = (\n        hasColorscale(traceIn, 'marker', 'colors') ||\n        (traceIn.marker || {}).coloraxis // N.B. special logic to consider \"values\" colorscales\n    );\n    if(withColorscale) {\n        colorscaleDefaults(traceIn, traceOut, layout, coerce, {prefix: 'marker.', cLetter: 'c'});\n    } else {\n        coerce('marker.depthfade', !(colors || []).length);\n    }\n\n    var headerSize = traceOut.textfont.size * 2;\n\n    coerce('marker.pad.t', bottomText ? headerSize / 4 : headerSize);\n    coerce('marker.pad.l', headerSize / 4);\n    coerce('marker.pad.r', headerSize / 4);\n    coerce('marker.pad.b', bottomText ? headerSize : headerSize / 4);\n\n    traceOut._hovered = {\n        marker: {\n            line: {\n                width: 2,\n                color: Color.contrast(layout.paper_bgcolor)\n            }\n        }\n    };\n\n    if(hasPathbar) {\n        // This works even for multi-line labels as treemap pathbar trim out line breaks\n        coerce('pathbar.thickness', traceOut.pathbar.textfont.size + 2 * TEXTPAD);\n\n        coerce('pathbar.side');\n        coerce('pathbar.edgeshape');\n    }\n\n    coerce('sort');\n\n    coerce('root.color');\n\n    handleDomainDefaults(traceOut, layout, coerce);\n\n    // do not support transforms for now\n    traceOut._length = null;\n};\n"]},"metadata":{},"sourceType":"script"}