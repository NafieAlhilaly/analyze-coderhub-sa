{"ast":null,"code":"'use strict';\n\nvar num2bn = require('./num-to-bn');\n\nvar sign = require('./bn-sign');\n\nmodule.exports = rationalize;\n\nfunction rationalize(numer, denom) {\n  var snumer = sign(numer);\n  var sdenom = sign(denom);\n\n  if (snumer === 0) {\n    return [num2bn(0), num2bn(1)];\n  }\n\n  if (sdenom === 0) {\n    return [num2bn(0), num2bn(0)];\n  }\n\n  if (sdenom < 0) {\n    numer = numer.neg();\n    denom = denom.neg();\n  }\n\n  var d = numer.gcd(denom);\n\n  if (d.cmpn(1)) {\n    return [numer.div(d), denom.div(d)];\n  }\n\n  return [numer, denom];\n}","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/big-rat/lib/rationalize.js"],"names":["num2bn","require","sign","module","exports","rationalize","numer","denom","snumer","sdenom","neg","d","gcd","cmpn","div"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,aAAD,CAApB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,WAAD,CAAlB;;AAEAE,MAAM,CAACC,OAAP,GAAiBC,WAAjB;;AAEA,SAASA,WAAT,CAAqBC,KAArB,EAA4BC,KAA5B,EAAmC;AACjC,MAAIC,MAAM,GAAGN,IAAI,CAACI,KAAD,CAAjB;AACA,MAAIG,MAAM,GAAGP,IAAI,CAACK,KAAD,CAAjB;;AACA,MAAGC,MAAM,KAAK,CAAd,EAAiB;AACf,WAAO,CAACR,MAAM,CAAC,CAAD,CAAP,EAAYA,MAAM,CAAC,CAAD,CAAlB,CAAP;AACD;;AACD,MAAGS,MAAM,KAAK,CAAd,EAAiB;AACf,WAAO,CAACT,MAAM,CAAC,CAAD,CAAP,EAAYA,MAAM,CAAC,CAAD,CAAlB,CAAP;AACD;;AACD,MAAGS,MAAM,GAAG,CAAZ,EAAe;AACbH,IAAAA,KAAK,GAAGA,KAAK,CAACI,GAAN,EAAR;AACAH,IAAAA,KAAK,GAAGA,KAAK,CAACG,GAAN,EAAR;AACD;;AACD,MAAIC,CAAC,GAAGL,KAAK,CAACM,GAAN,CAAUL,KAAV,CAAR;;AACA,MAAGI,CAAC,CAACE,IAAF,CAAO,CAAP,CAAH,EAAc;AACZ,WAAO,CAAEP,KAAK,CAACQ,GAAN,CAAUH,CAAV,CAAF,EAAgBJ,KAAK,CAACO,GAAN,CAAUH,CAAV,CAAhB,CAAP;AACD;;AACD,SAAO,CAAEL,KAAF,EAASC,KAAT,CAAP;AACD","sourcesContent":["'use strict'\n\nvar num2bn = require('./num-to-bn')\nvar sign = require('./bn-sign')\n\nmodule.exports = rationalize\n\nfunction rationalize(numer, denom) {\n  var snumer = sign(numer)\n  var sdenom = sign(denom)\n  if(snumer === 0) {\n    return [num2bn(0), num2bn(1)]\n  }\n  if(sdenom === 0) {\n    return [num2bn(0), num2bn(0)]\n  }\n  if(sdenom < 0) {\n    numer = numer.neg()\n    denom = denom.neg()\n  }\n  var d = numer.gcd(denom)\n  if(d.cmpn(1)) {\n    return [ numer.div(d), denom.div(d) ]\n  }\n  return [ numer, denom ]\n}\n"]},"metadata":{},"sourceType":"script"}