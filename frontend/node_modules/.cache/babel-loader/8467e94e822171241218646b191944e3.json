{"ast":null,"code":"'use strict';\n\nmodule.exports = createTextElements;\n\nvar createBuffer = require('gl-buffer');\n\nvar createShader = require('gl-shader');\n\nvar getText = require('text-cache');\n\nvar bsearch = require('binary-search-bounds');\n\nvar shaders = require('./shaders');\n\nfunction TextElements(plot, vbo, shader) {\n  this.plot = plot;\n  this.vbo = vbo;\n  this.shader = shader;\n  this.tickOffset = [[], []];\n  this.tickX = [[], []];\n  this.labelOffset = [0, 0];\n  this.labelCount = [0, 0];\n}\n\nvar proto = TextElements.prototype;\n\nproto.drawTicks = function () {\n  var DATA_AXIS = [0, 0];\n  var SCREEN_OFFSET = [0, 0];\n  var ZERO_2 = [0, 0];\n  return function (axis) {\n    var plot = this.plot;\n    var shader = this.shader;\n    var tickX = this.tickX[axis];\n    var tickOffset = this.tickOffset[axis];\n    var gl = plot.gl;\n    var viewBox = plot.viewBox;\n    var dataBox = plot.dataBox;\n    var screenBox = plot.screenBox;\n    var pixelRatio = plot.pixelRatio;\n    var tickEnable = plot.tickEnable;\n    var tickPad = plot.tickPad;\n    var textColor = plot.tickColor;\n    var textAngle = plot.tickAngle; // todo check if this should be used (now unused)\n    // var tickLength  = plot.tickMarkLength\n\n    var labelEnable = plot.labelEnable;\n    var labelPad = plot.labelPad;\n    var labelColor = plot.labelColor;\n    var labelAngle = plot.labelAngle;\n    var labelOffset = this.labelOffset[axis];\n    var labelCount = this.labelCount[axis];\n    var start = bsearch.lt(tickX, dataBox[axis]);\n    var end = bsearch.le(tickX, dataBox[axis + 2]);\n    DATA_AXIS[0] = DATA_AXIS[1] = 0;\n    DATA_AXIS[axis] = 1;\n    SCREEN_OFFSET[axis] = (viewBox[2 + axis] + viewBox[axis]) / (screenBox[2 + axis] - screenBox[axis]) - 1.0;\n    var screenScale = 2.0 / screenBox[2 + (axis ^ 1)] - screenBox[axis ^ 1];\n    SCREEN_OFFSET[axis ^ 1] = screenScale * viewBox[axis ^ 1] - 1.0;\n\n    if (tickEnable[axis]) {\n      SCREEN_OFFSET[axis ^ 1] -= screenScale * pixelRatio * tickPad[axis];\n\n      if (start < end && tickOffset[end] > tickOffset[start]) {\n        shader.uniforms.dataAxis = DATA_AXIS;\n        shader.uniforms.screenOffset = SCREEN_OFFSET;\n        shader.uniforms.color = textColor[axis];\n        shader.uniforms.angle = textAngle[axis];\n        gl.drawArrays(gl.TRIANGLES, tickOffset[start], tickOffset[end] - tickOffset[start]);\n      }\n    }\n\n    if (labelEnable[axis] && labelCount) {\n      SCREEN_OFFSET[axis ^ 1] -= screenScale * pixelRatio * labelPad[axis];\n      shader.uniforms.dataAxis = ZERO_2;\n      shader.uniforms.screenOffset = SCREEN_OFFSET;\n      shader.uniforms.color = labelColor[axis];\n      shader.uniforms.angle = labelAngle[axis];\n      gl.drawArrays(gl.TRIANGLES, labelOffset, labelCount);\n    }\n\n    SCREEN_OFFSET[axis ^ 1] = screenScale * viewBox[2 + (axis ^ 1)] - 1.0;\n\n    if (tickEnable[axis + 2]) {\n      SCREEN_OFFSET[axis ^ 1] += screenScale * pixelRatio * tickPad[axis + 2];\n\n      if (start < end && tickOffset[end] > tickOffset[start]) {\n        shader.uniforms.dataAxis = DATA_AXIS;\n        shader.uniforms.screenOffset = SCREEN_OFFSET;\n        shader.uniforms.color = textColor[axis + 2];\n        shader.uniforms.angle = textAngle[axis + 2];\n        gl.drawArrays(gl.TRIANGLES, tickOffset[start], tickOffset[end] - tickOffset[start]);\n      }\n    }\n\n    if (labelEnable[axis + 2] && labelCount) {\n      SCREEN_OFFSET[axis ^ 1] += screenScale * pixelRatio * labelPad[axis + 2];\n      shader.uniforms.dataAxis = ZERO_2;\n      shader.uniforms.screenOffset = SCREEN_OFFSET;\n      shader.uniforms.color = labelColor[axis + 2];\n      shader.uniforms.angle = labelAngle[axis + 2];\n      gl.drawArrays(gl.TRIANGLES, labelOffset, labelCount);\n    }\n  };\n}();\n\nproto.drawTitle = function () {\n  var DATA_AXIS = [0, 0];\n  var SCREEN_OFFSET = [0, 0];\n  return function () {\n    var plot = this.plot;\n    var shader = this.shader;\n    var gl = plot.gl;\n    var screenBox = plot.screenBox;\n    var titleCenter = plot.titleCenter;\n    var titleAngle = plot.titleAngle;\n    var titleColor = plot.titleColor;\n    var pixelRatio = plot.pixelRatio;\n\n    if (!this.titleCount) {\n      return;\n    }\n\n    for (var i = 0; i < 2; ++i) {\n      SCREEN_OFFSET[i] = 2.0 * (titleCenter[i] * pixelRatio - screenBox[i]) / (screenBox[2 + i] - screenBox[i]) - 1;\n    }\n\n    shader.bind();\n    shader.uniforms.dataAxis = DATA_AXIS;\n    shader.uniforms.screenOffset = SCREEN_OFFSET;\n    shader.uniforms.angle = titleAngle;\n    shader.uniforms.color = titleColor;\n    gl.drawArrays(gl.TRIANGLES, this.titleOffset, this.titleCount);\n  };\n}();\n\nproto.bind = function () {\n  var DATA_SHIFT = [0, 0];\n  var DATA_SCALE = [0, 0];\n  var TEXT_SCALE = [0, 0];\n  return function () {\n    var plot = this.plot;\n    var shader = this.shader;\n    var bounds = plot._tickBounds;\n    var dataBox = plot.dataBox;\n    var screenBox = plot.screenBox;\n    var viewBox = plot.viewBox;\n    shader.bind(); //Set up coordinate scaling uniforms\n\n    for (var i = 0; i < 2; ++i) {\n      var lo = bounds[i];\n      var hi = bounds[i + 2];\n      var boundScale = hi - lo;\n      var dataCenter = 0.5 * (dataBox[i + 2] + dataBox[i]);\n      var dataWidth = dataBox[i + 2] - dataBox[i];\n      var viewLo = viewBox[i];\n      var viewHi = viewBox[i + 2];\n      var viewScale = viewHi - viewLo;\n      var screenLo = screenBox[i];\n      var screenHi = screenBox[i + 2];\n      var screenScale = screenHi - screenLo;\n      DATA_SCALE[i] = 2.0 * boundScale / dataWidth * viewScale / screenScale;\n      DATA_SHIFT[i] = 2.0 * (lo - dataCenter) / dataWidth * viewScale / screenScale;\n    }\n\n    TEXT_SCALE[1] = 2.0 * plot.pixelRatio / (screenBox[3] - screenBox[1]);\n    TEXT_SCALE[0] = TEXT_SCALE[1] * (screenBox[3] - screenBox[1]) / (screenBox[2] - screenBox[0]);\n    shader.uniforms.dataScale = DATA_SCALE;\n    shader.uniforms.dataShift = DATA_SHIFT;\n    shader.uniforms.textScale = TEXT_SCALE; //Set attributes\n\n    this.vbo.bind();\n    shader.attributes.textCoordinate.pointer();\n  };\n}();\n\nproto.update = function (options) {\n  var vertices = [];\n  var axesTicks = options.ticks;\n  var bounds = options.bounds;\n  var i, j, k, data, scale, dimension;\n\n  for (dimension = 0; dimension < 2; ++dimension) {\n    var offsets = [Math.floor(vertices.length / 3)],\n        tickX = [-Infinity]; //Copy vertices over to buffer\n\n    var ticks = axesTicks[dimension];\n\n    for (i = 0; i < ticks.length; ++i) {\n      var tick = ticks[i];\n      var x = tick.x;\n      var text = tick.text;\n      var font = tick.font || 'sans-serif';\n      scale = tick.fontSize || 12;\n      var coordScale = 1.0 / (bounds[dimension + 2] - bounds[dimension]);\n      var coordShift = bounds[dimension];\n      var rows = text.split('\\n');\n\n      for (var r = 0; r < rows.length; r++) {\n        data = getText(font, rows[r]).data;\n\n        for (j = 0; j < data.length; j += 2) {\n          vertices.push(data[j] * scale, -data[j + 1] * scale - r * scale * 1.2, (x - coordShift) * coordScale);\n        }\n      }\n\n      offsets.push(Math.floor(vertices.length / 3));\n      tickX.push(x);\n    }\n\n    this.tickOffset[dimension] = offsets;\n    this.tickX[dimension] = tickX;\n  } //Add labels\n\n\n  for (dimension = 0; dimension < 2; ++dimension) {\n    this.labelOffset[dimension] = Math.floor(vertices.length / 3);\n    data = getText(options.labelFont[dimension], options.labels[dimension], {\n      textAlign: 'center'\n    }).data;\n    scale = options.labelSize[dimension];\n\n    for (i = 0; i < data.length; i += 2) {\n      vertices.push(data[i] * scale, -data[i + 1] * scale, 0);\n    }\n\n    this.labelCount[dimension] = Math.floor(vertices.length / 3) - this.labelOffset[dimension];\n  } //Add title\n\n\n  this.titleOffset = Math.floor(vertices.length / 3);\n  data = getText(options.titleFont, options.title).data;\n  scale = options.titleSize;\n\n  for (i = 0; i < data.length; i += 2) {\n    vertices.push(data[i] * scale, -data[i + 1] * scale, 0);\n  }\n\n  this.titleCount = Math.floor(vertices.length / 3) - this.titleOffset; //Upload new vertices\n\n  this.vbo.update(vertices);\n};\n\nproto.dispose = function () {\n  this.vbo.dispose();\n  this.shader.dispose();\n};\n\nfunction createTextElements(plot) {\n  var gl = plot.gl;\n  var vbo = createBuffer(gl);\n  var shader = createShader(gl, shaders.textVert, shaders.textFrag);\n  var text = new TextElements(plot, vbo, shader);\n  return text;\n}","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/gl-plot2d/lib/text.js"],"names":["module","exports","createTextElements","createBuffer","require","createShader","getText","bsearch","shaders","TextElements","plot","vbo","shader","tickOffset","tickX","labelOffset","labelCount","proto","prototype","drawTicks","DATA_AXIS","SCREEN_OFFSET","ZERO_2","axis","gl","viewBox","dataBox","screenBox","pixelRatio","tickEnable","tickPad","textColor","tickColor","textAngle","tickAngle","labelEnable","labelPad","labelColor","labelAngle","start","lt","end","le","screenScale","uniforms","dataAxis","screenOffset","color","angle","drawArrays","TRIANGLES","drawTitle","titleCenter","titleAngle","titleColor","titleCount","i","bind","titleOffset","DATA_SHIFT","DATA_SCALE","TEXT_SCALE","bounds","_tickBounds","lo","hi","boundScale","dataCenter","dataWidth","viewLo","viewHi","viewScale","screenLo","screenHi","dataScale","dataShift","textScale","attributes","textCoordinate","pointer","update","options","vertices","axesTicks","ticks","j","k","data","scale","dimension","offsets","Math","floor","length","Infinity","tick","x","text","font","fontSize","coordScale","coordShift","rows","split","r","push","labelFont","labels","textAlign","labelSize","titleFont","title","titleSize","dispose","textVert","textFrag"],"mappings":"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","sourcesContent":["'use strict'\n\nmodule.exports = createTextElements\n\nvar createBuffer = require('gl-buffer')\nvar createShader = require('gl-shader')\nvar getText      = require('text-cache')\nvar bsearch      = require('binary-search-bounds')\nvar shaders      = require('./shaders')\n\nfunction TextElements(plot, vbo, shader) {\n  this.plot         = plot\n  this.vbo          = vbo\n  this.shader       = shader\n  this.tickOffset   = [[],[]]\n  this.tickX        = [[],[]]\n  this.labelOffset  = [0,0]\n  this.labelCount   = [0,0]\n}\n\nvar proto = TextElements.prototype\n\nproto.drawTicks = (function() {\n  var DATA_AXIS = [0,0]\n  var SCREEN_OFFSET = [0,0]\n  var ZERO_2 = [0,0]\n\n  return function(axis) {\n    var plot        = this.plot\n    var shader      = this.shader\n    var tickX       = this.tickX[axis]\n    var tickOffset  = this.tickOffset[axis]\n    var gl          = plot.gl\n    var viewBox     = plot.viewBox\n    var dataBox     = plot.dataBox\n    var screenBox   = plot.screenBox\n    var pixelRatio  = plot.pixelRatio\n    var tickEnable  = plot.tickEnable\n    var tickPad     = plot.tickPad\n    var textColor   = plot.tickColor\n    var textAngle   = plot.tickAngle\n    // todo check if this should be used (now unused)\n    // var tickLength  = plot.tickMarkLength\n\n    var labelEnable = plot.labelEnable\n    var labelPad    = plot.labelPad\n    var labelColor  = plot.labelColor\n    var labelAngle  = plot.labelAngle\n    var labelOffset = this.labelOffset[axis]\n    var labelCount  = this.labelCount[axis]\n\n    var start = bsearch.lt(tickX, dataBox[axis])\n    var end   = bsearch.le(tickX, dataBox[axis+2])\n\n    DATA_AXIS[0]    = DATA_AXIS[1] = 0\n    DATA_AXIS[axis] = 1\n\n    SCREEN_OFFSET[axis] = (viewBox[2+axis] + viewBox[axis]) / (screenBox[2+axis] - screenBox[axis]) - 1.0\n\n    var screenScale = 2.0 / screenBox[2+(axis^1)] - screenBox[axis^1]\n\n    SCREEN_OFFSET[axis^1] = screenScale * viewBox[axis^1] - 1.0\n    if(tickEnable[axis]) {\n      SCREEN_OFFSET[axis^1] -= screenScale * pixelRatio * tickPad[axis]\n      if(start < end && tickOffset[end] > tickOffset[start]) {\n        shader.uniforms.dataAxis     = DATA_AXIS\n        shader.uniforms.screenOffset = SCREEN_OFFSET\n        shader.uniforms.color        = textColor[axis]\n        shader.uniforms.angle        = textAngle[axis]\n        gl.drawArrays(\n          gl.TRIANGLES,\n          tickOffset[start],\n          tickOffset[end] - tickOffset[start])\n      }\n    }\n    if(labelEnable[axis] && labelCount) {\n      SCREEN_OFFSET[axis^1] -= screenScale * pixelRatio * labelPad[axis]\n      shader.uniforms.dataAxis     = ZERO_2\n      shader.uniforms.screenOffset = SCREEN_OFFSET\n      shader.uniforms.color        = labelColor[axis]\n      shader.uniforms.angle        = labelAngle[axis]\n      gl.drawArrays(\n        gl.TRIANGLES,\n        labelOffset,\n        labelCount)\n    }\n\n    SCREEN_OFFSET[axis^1] = screenScale * viewBox[2+(axis^1)] - 1.0\n    if(tickEnable[axis+2]) {\n      SCREEN_OFFSET[axis^1] += screenScale * pixelRatio * tickPad[axis+2]\n      if(start < end && tickOffset[end] > tickOffset[start]) {\n        shader.uniforms.dataAxis     = DATA_AXIS\n        shader.uniforms.screenOffset = SCREEN_OFFSET\n        shader.uniforms.color        = textColor[axis+2]\n        shader.uniforms.angle        = textAngle[axis+2]\n        gl.drawArrays(\n          gl.TRIANGLES,\n          tickOffset[start],\n          tickOffset[end] - tickOffset[start])\n      }\n    }\n    if(labelEnable[axis+2] && labelCount) {\n      SCREEN_OFFSET[axis^1] += screenScale * pixelRatio * labelPad[axis+2]\n      shader.uniforms.dataAxis     = ZERO_2\n      shader.uniforms.screenOffset = SCREEN_OFFSET\n      shader.uniforms.color        = labelColor[axis+2]\n      shader.uniforms.angle        = labelAngle[axis+2]\n      gl.drawArrays(\n        gl.TRIANGLES,\n        labelOffset,\n        labelCount)\n    }\n\n  }\n})()\n\nproto.drawTitle = (function() {\n  var DATA_AXIS = [0,0]\n  var SCREEN_OFFSET = [0,0]\n\n  return function() {\n    var plot        = this.plot\n    var shader      = this.shader\n    var gl          = plot.gl\n    var screenBox   = plot.screenBox\n    var titleCenter = plot.titleCenter\n    var titleAngle  = plot.titleAngle\n    var titleColor  = plot.titleColor\n    var pixelRatio  = plot.pixelRatio\n\n    if(!this.titleCount) {\n      return\n    }\n\n    for(var i=0; i<2; ++i) {\n      SCREEN_OFFSET[i] = 2.0 * (titleCenter[i]*pixelRatio - screenBox[i]) /\n        (screenBox[2+i] - screenBox[i]) - 1\n    }\n\n    shader.bind()\n    shader.uniforms.dataAxis      = DATA_AXIS\n    shader.uniforms.screenOffset  = SCREEN_OFFSET\n    shader.uniforms.angle         = titleAngle\n    shader.uniforms.color         = titleColor\n\n    gl.drawArrays(gl.TRIANGLES, this.titleOffset, this.titleCount)\n  }\n})()\n\nproto.bind = (function() {\n  var DATA_SHIFT = [0,0]\n  var DATA_SCALE = [0,0]\n  var TEXT_SCALE = [0,0]\n\n  return function() {\n    var plot      = this.plot\n    var shader    = this.shader\n    var bounds    = plot._tickBounds\n    var dataBox   = plot.dataBox\n    var screenBox = plot.screenBox\n    var viewBox   = plot.viewBox\n\n    shader.bind()\n\n    //Set up coordinate scaling uniforms\n    for(var i=0; i<2; ++i) {\n\n      var lo = bounds[i]\n      var hi = bounds[i+2]\n      var boundScale = hi - lo\n      var dataCenter  = 0.5 * (dataBox[i+2] + dataBox[i])\n      var dataWidth   = (dataBox[i+2] - dataBox[i])\n\n      var viewLo = viewBox[i]\n      var viewHi = viewBox[i+2]\n      var viewScale = viewHi - viewLo\n      var screenLo = screenBox[i]\n      var screenHi = screenBox[i+2]\n      var screenScale = screenHi - screenLo\n\n      DATA_SCALE[i] = 2.0 * boundScale / dataWidth * viewScale / screenScale\n      DATA_SHIFT[i] = 2.0 * (lo - dataCenter) / dataWidth * viewScale / screenScale\n    }\n\n    TEXT_SCALE[1] = 2.0 * plot.pixelRatio / (screenBox[3] - screenBox[1])\n    TEXT_SCALE[0] = TEXT_SCALE[1] * (screenBox[3] - screenBox[1]) / (screenBox[2] - screenBox[0])\n\n    shader.uniforms.dataScale = DATA_SCALE\n    shader.uniforms.dataShift = DATA_SHIFT\n    shader.uniforms.textScale = TEXT_SCALE\n\n    //Set attributes\n    this.vbo.bind()\n    shader.attributes.textCoordinate.pointer()\n  }\n})()\n\nproto.update = function(options) {\n  var vertices  = []\n  var axesTicks = options.ticks\n  var bounds    = options.bounds\n  var i, j, k, data, scale, dimension\n\n  for(dimension=0; dimension<2; ++dimension) {\n    var offsets = [Math.floor(vertices.length/3)], tickX = [-Infinity]\n\n    //Copy vertices over to buffer\n    var ticks = axesTicks[dimension]\n    for(i=0; i<ticks.length; ++i) {\n      var tick  = ticks[i]\n      var x     = tick.x\n      var text  = tick.text\n      var font  = tick.font || 'sans-serif'\n      scale = (tick.fontSize || 12)\n\n      var coordScale = 1.0 / (bounds[dimension+2] - bounds[dimension])\n      var coordShift = bounds[dimension]\n\n      var rows = text.split('\\n')\n      for(var r = 0; r < rows.length; r++) {\n        data = getText(font, rows[r]).data\n        for (j = 0; j < data.length; j += 2) {\n          vertices.push(\n              data[j] * scale,\n              -data[j + 1] * scale - r * scale * 1.2,\n              (x - coordShift) * coordScale)\n        }\n      }\n\n      offsets.push(Math.floor(vertices.length/3))\n      tickX.push(x)\n    }\n\n    this.tickOffset[dimension] = offsets\n    this.tickX[dimension] = tickX\n  }\n\n  //Add labels\n  for(dimension=0; dimension<2; ++dimension) {\n    this.labelOffset[dimension] = Math.floor(vertices.length/3)\n\n    data  = getText(options.labelFont[dimension], options.labels[dimension], { textAlign: 'center' }).data\n    scale = options.labelSize[dimension]\n    for(i=0; i<data.length; i+=2) {\n      vertices.push(data[i]*scale, -data[i+1]*scale, 0)\n    }\n\n    this.labelCount[dimension] =\n      Math.floor(vertices.length/3) - this.labelOffset[dimension]\n  }\n\n  //Add title\n  this.titleOffset = Math.floor(vertices.length/3)\n  data = getText(options.titleFont, options.title).data\n  scale = options.titleSize\n  for(i=0; i<data.length; i+=2) {\n    vertices.push(data[i]*scale, -data[i+1]*scale, 0)\n  }\n  this.titleCount = Math.floor(vertices.length/3) - this.titleOffset\n\n  //Upload new vertices\n  this.vbo.update(vertices)\n}\n\nproto.dispose = function() {\n  this.vbo.dispose()\n  this.shader.dispose()\n}\n\nfunction createTextElements(plot) {\n  var gl = plot.gl\n  var vbo = createBuffer(gl)\n  var shader = createShader(gl, shaders.textVert, shaders.textFrag)\n  var text = new TextElements(plot, vbo, shader)\n  return text\n}\n"]},"metadata":{},"sourceType":"script"}