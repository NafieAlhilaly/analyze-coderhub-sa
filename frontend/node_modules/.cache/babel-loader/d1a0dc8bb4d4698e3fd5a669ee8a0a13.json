{"ast":null,"code":"\"use strict\";\n\nvar safeToString = require(\"./safe-to-string\");\n\nvar reNewLine = /[\\n\\r\\u2028\\u2029]/g;\n\nmodule.exports = function (value) {\n  var string = safeToString(value);\n  if (string === null) return \"<Non-coercible to string value>\"; // Trim if too long\n\n  if (string.length > 100) string = string.slice(0, 99) + \"…\"; // Replace eventual new lines\n\n  string = string.replace(reNewLine, function (char) {\n    switch (char) {\n      case \"\\n\":\n        return \"\\\\n\";\n\n      case \"\\r\":\n        return \"\\\\r\";\n\n      case \"\\u2028\":\n        return \"\\\\u2028\";\n\n      case \"\\u2029\":\n        return \"\\\\u2029\";\n\n      /* istanbul ignore next */\n\n      default:\n        throw new Error(\"Unexpected character\");\n    }\n  });\n  return string;\n};","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/type/lib/to-short-string.js"],"names":["safeToString","require","reNewLine","module","exports","value","string","length","slice","replace","char","Error"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,kBAAD,CAA1B;;AAEA,IAAIC,SAAS,GAAG,qBAAhB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,UAAUC,KAAV,EAAiB;AACjC,MAAIC,MAAM,GAAGN,YAAY,CAACK,KAAD,CAAzB;AACA,MAAIC,MAAM,KAAK,IAAf,EAAqB,OAAO,iCAAP,CAFY,CAGjC;;AACA,MAAIA,MAAM,CAACC,MAAP,GAAgB,GAApB,EAAyBD,MAAM,GAAGA,MAAM,CAACE,KAAP,CAAa,CAAb,EAAgB,EAAhB,IAAsB,GAA/B,CAJQ,CAKjC;;AACAF,EAAAA,MAAM,GAAGA,MAAM,CAACG,OAAP,CAAeP,SAAf,EAA0B,UAAUQ,IAAV,EAAgB;AAClD,YAAQA,IAAR;AACC,WAAK,IAAL;AACC,eAAO,KAAP;;AACD,WAAK,IAAL;AACC,eAAO,KAAP;;AACD,WAAK,QAAL;AACC,eAAO,SAAP;;AACD,WAAK,QAAL;AACC,eAAO,SAAP;;AACD;;AACA;AACC,cAAM,IAAIC,KAAJ,CAAU,sBAAV,CAAN;AAXF;AAaA,GAdQ,CAAT;AAeA,SAAOL,MAAP;AACA,CAtBD","sourcesContent":["\"use strict\";\n\nvar safeToString = require(\"./safe-to-string\");\n\nvar reNewLine = /[\\n\\r\\u2028\\u2029]/g;\n\nmodule.exports = function (value) {\n\tvar string = safeToString(value);\n\tif (string === null) return \"<Non-coercible to string value>\";\n\t// Trim if too long\n\tif (string.length > 100) string = string.slice(0, 99) + \"…\";\n\t// Replace eventual new lines\n\tstring = string.replace(reNewLine, function (char) {\n\t\tswitch (char) {\n\t\t\tcase \"\\n\":\n\t\t\t\treturn \"\\\\n\";\n\t\t\tcase \"\\r\":\n\t\t\t\treturn \"\\\\r\";\n\t\t\tcase \"\\u2028\":\n\t\t\t\treturn \"\\\\u2028\";\n\t\t\tcase \"\\u2029\":\n\t\t\t\treturn \"\\\\u2029\";\n\t\t\t/* istanbul ignore next */\n\t\t\tdefault:\n\t\t\t\tthrow new Error(\"Unexpected character\");\n\t\t}\n\t});\n\treturn string;\n};\n"]},"metadata":{},"sourceType":"script"}