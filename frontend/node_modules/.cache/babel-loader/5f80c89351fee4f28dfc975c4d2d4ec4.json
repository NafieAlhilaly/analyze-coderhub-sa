{"ast":null,"code":"'use strict';\n\nvar d3 = require('@plotly/d3');\n\nvar helpers = require('../sunburst/helpers');\n\nvar uniformText = require('../bar/uniform_text');\n\nvar clearMinTextSize = uniformText.clearMinTextSize;\n\nvar resizeText = require('../bar/style').resizeText;\n\nvar plotOne = require('./plot_one');\n\nmodule.exports = function _plot(gd, cdmodule, transitionOpts, makeOnCompleteCallback, opts) {\n  var type = opts.type;\n  var drawDescendants = opts.drawDescendants;\n  var fullLayout = gd._fullLayout;\n  var layer = fullLayout['_' + type + 'layer'];\n  var join, onComplete; // If transition config is provided, then it is only a partial replot and traces not\n  // updated are removed.\n\n  var isFullReplot = !transitionOpts;\n  clearMinTextSize(type, fullLayout);\n  join = layer.selectAll('g.trace.' + type).data(cdmodule, function (cd) {\n    return cd[0].trace.uid;\n  });\n  join.enter().append('g').classed('trace', true).classed(type, true);\n  join.order();\n\n  if (!fullLayout.uniformtext.mode && helpers.hasTransition(transitionOpts)) {\n    if (makeOnCompleteCallback) {\n      // If it was passed a callback to register completion, make a callback. If\n      // this is created, then it must be executed on completion, otherwise the\n      // pos-transition redraw will not execute:\n      onComplete = makeOnCompleteCallback();\n    }\n\n    var transition = d3.transition().duration(transitionOpts.duration).ease(transitionOpts.easing).each('end', function () {\n      onComplete && onComplete();\n    }).each('interrupt', function () {\n      onComplete && onComplete();\n    });\n    transition.each(function () {\n      // Must run the selection again since otherwise enters/updates get grouped together\n      // and these get executed out of order. Except we need them in order!\n      layer.selectAll('g.trace').each(function (cd) {\n        plotOne(gd, cd, this, transitionOpts, drawDescendants);\n      });\n    });\n  } else {\n    join.each(function (cd) {\n      plotOne(gd, cd, this, transitionOpts, drawDescendants);\n    });\n\n    if (fullLayout.uniformtext.mode) {\n      resizeText(gd, layer.selectAll('.trace'), type);\n    }\n  }\n\n  if (isFullReplot) {\n    join.exit().remove();\n  }\n};","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/plotly.js/src/traces/treemap/draw.js"],"names":["d3","require","helpers","uniformText","clearMinTextSize","resizeText","plotOne","module","exports","_plot","gd","cdmodule","transitionOpts","makeOnCompleteCallback","opts","type","drawDescendants","fullLayout","_fullLayout","layer","join","onComplete","isFullReplot","selectAll","data","cd","trace","uid","enter","append","classed","order","uniformtext","mode","hasTransition","transition","duration","ease","easing","each","exit","remove"],"mappings":"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","sourcesContent":["'use strict';\n\nvar d3 = require('@plotly/d3');\n\nvar helpers = require('../sunburst/helpers');\nvar uniformText = require('../bar/uniform_text');\nvar clearMinTextSize = uniformText.clearMinTextSize;\nvar resizeText = require('../bar/style').resizeText;\n\nvar plotOne = require('./plot_one');\n\nmodule.exports = function _plot(gd, cdmodule, transitionOpts, makeOnCompleteCallback, opts) {\n    var type = opts.type;\n    var drawDescendants = opts.drawDescendants;\n\n    var fullLayout = gd._fullLayout;\n    var layer = fullLayout['_' + type + 'layer'];\n    var join, onComplete;\n\n    // If transition config is provided, then it is only a partial replot and traces not\n    // updated are removed.\n    var isFullReplot = !transitionOpts;\n\n    clearMinTextSize(type, fullLayout);\n\n    join = layer.selectAll('g.trace.' + type)\n        .data(cdmodule, function(cd) { return cd[0].trace.uid; });\n\n    join.enter().append('g')\n        .classed('trace', true)\n        .classed(type, true);\n\n    join.order();\n\n    if(!fullLayout.uniformtext.mode && helpers.hasTransition(transitionOpts)) {\n        if(makeOnCompleteCallback) {\n            // If it was passed a callback to register completion, make a callback. If\n            // this is created, then it must be executed on completion, otherwise the\n            // pos-transition redraw will not execute:\n            onComplete = makeOnCompleteCallback();\n        }\n\n        var transition = d3.transition()\n            .duration(transitionOpts.duration)\n            .ease(transitionOpts.easing)\n            .each('end', function() { onComplete && onComplete(); })\n            .each('interrupt', function() { onComplete && onComplete(); });\n\n        transition.each(function() {\n            // Must run the selection again since otherwise enters/updates get grouped together\n            // and these get executed out of order. Except we need them in order!\n            layer.selectAll('g.trace').each(function(cd) {\n                plotOne(gd, cd, this, transitionOpts, drawDescendants);\n            });\n        });\n    } else {\n        join.each(function(cd) {\n            plotOne(gd, cd, this, transitionOpts, drawDescendants);\n        });\n\n        if(fullLayout.uniformtext.mode) {\n            resizeText(gd, layer.selectAll('.trace'), type);\n        }\n    }\n\n    if(isFullReplot) {\n        join.exit().remove();\n    }\n};\n"]},"metadata":{},"sourceType":"script"}