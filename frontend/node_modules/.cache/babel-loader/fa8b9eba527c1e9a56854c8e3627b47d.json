{"ast":null,"code":"'use strict';\n\nvar d3 = require('@plotly/d3');\n\nvar Lib = require('../../lib');\n\nvar numberFormat = Lib.numberFormat;\n\nvar tinycolor = require('tinycolor2');\n\nvar supportsPassive = require('has-passive-events');\n\nvar Registry = require('../../registry');\n\nvar strTranslate = Lib.strTranslate;\n\nvar svgTextUtils = require('../../lib/svg_text_utils');\n\nvar Color = require('../../components/color');\n\nvar Drawing = require('../../components/drawing');\n\nvar Fx = require('../../components/fx');\n\nvar Axes = require('./axes');\n\nvar setCursor = require('../../lib/setcursor');\n\nvar dragElement = require('../../components/dragelement');\n\nvar helpers = require('../../components/dragelement/helpers');\n\nvar selectingOrDrawing = helpers.selectingOrDrawing;\nvar freeMode = helpers.freeMode;\n\nvar FROM_TL = require('../../constants/alignment').FROM_TL;\n\nvar clearGlCanvases = require('../../lib/clear_gl_canvases');\n\nvar redrawReglTraces = require('../../plot_api/subroutines').redrawReglTraces;\n\nvar Plots = require('../plots');\n\nvar getFromId = require('./axis_ids').getFromId;\n\nvar prepSelect = require('./select').prepSelect;\n\nvar clearSelect = require('./select').clearSelect;\n\nvar selectOnClick = require('./select').selectOnClick;\n\nvar scaleZoom = require('./scale_zoom');\n\nvar constants = require('./constants');\n\nvar MINDRAG = constants.MINDRAG;\nvar MINZOOM = constants.MINZOOM; // flag for showing \"doubleclick to zoom out\" only at the beginning\n\nvar SHOWZOOMOUTTIP = true; // dragBox: create an element to drag one or more axis ends\n// inputs:\n//      plotinfo - which subplot are we making dragboxes on?\n//      x,y,w,h - left, top, width, height of the box\n//      ns - how does this drag the vertical axis?\n//          'n' - top only\n//          's' - bottom only\n//          'ns' - top and bottom together, difference unchanged\n//      ew - same for horizontal axis\n\nfunction makeDragBox(gd, plotinfo, x, y, w, h, ns, ew) {\n  // mouseDown stores ms of first mousedown event in the last\n  // `gd._context.doubleClickDelay` ms on the drag bars\n  // numClicks stores how many mousedowns have been seen\n  // within `gd._context.doubleClickDelay` so we can check for click or doubleclick events\n  // dragged stores whether a drag has occurred, so we don't have to\n  // redraw unnecessarily, ie if no move bigger than MINDRAG or MINZOOM px\n  var zoomlayer = gd._fullLayout._zoomlayer;\n  var isMainDrag = ns + ew === 'nsew';\n  var singleEnd = (ns + ew).length === 1; // main subplot x and y (i.e. found in plotinfo - the main ones)\n\n  var xa0, ya0; // {ax._id: ax} hash objects\n\n  var xaHash, yaHash; // xaHash/yaHash values (arrays)\n\n  var xaxes, yaxes; // main axis offsets\n\n  var xs, ys; // main axis lengths\n\n  var pw, ph; // contains keys 'xaHash', 'yaHash', 'xaxes', and 'yaxes'\n  // which are the x/y {ax._id: ax} hash objects and their values\n  // for linked axis relative to this subplot\n\n  var links; // similar to `links` but for matching axes\n\n  var matches; // set to ew/ns val when active, set to '' when inactive\n\n  var xActive, yActive; // are all axes in this subplot are fixed?\n\n  var allFixedRanges; // do we need to edit x/y ranges?\n\n  var editX, editY; // graph-wide optimization flags\n\n  var hasScatterGl, hasSplom, hasSVG; // collected changes to be made to the plot by relayout at the end\n\n  var updates; // scaling factors from css transform\n\n  var scaleX;\n  var scaleY;\n\n  function recomputeAxisLists() {\n    xa0 = plotinfo.xaxis;\n    ya0 = plotinfo.yaxis;\n    pw = xa0._length;\n    ph = ya0._length;\n    xs = xa0._offset;\n    ys = ya0._offset;\n    xaHash = {};\n    xaHash[xa0._id] = xa0;\n    yaHash = {};\n    yaHash[ya0._id] = ya0; // if we're dragging two axes at once, also drag overlays\n\n    if (ns && ew) {\n      var overlays = plotinfo.overlays;\n\n      for (var i = 0; i < overlays.length; i++) {\n        var xa = overlays[i].xaxis;\n        xaHash[xa._id] = xa;\n        var ya = overlays[i].yaxis;\n        yaHash[ya._id] = ya;\n      }\n    }\n\n    xaxes = hashValues(xaHash);\n    yaxes = hashValues(yaHash);\n    xActive = isDirectionActive(xaxes, ew);\n    yActive = isDirectionActive(yaxes, ns);\n    allFixedRanges = !yActive && !xActive;\n    matches = calcLinks(gd, gd._fullLayout._axisMatchGroups, xaHash, yaHash);\n    links = calcLinks(gd, gd._fullLayout._axisConstraintGroups, xaHash, yaHash, matches);\n    var spConstrained = links.isSubplotConstrained || matches.isSubplotConstrained;\n    editX = ew || spConstrained;\n    editY = ns || spConstrained;\n    var fullLayout = gd._fullLayout;\n    hasScatterGl = fullLayout._has('scattergl');\n    hasSplom = fullLayout._has('splom');\n    hasSVG = fullLayout._has('svg');\n  }\n\n  recomputeAxisLists();\n  var cursor = getDragCursor(yActive + xActive, gd._fullLayout.dragmode, isMainDrag);\n  var dragger = makeRectDragger(plotinfo, ns + ew + 'drag', cursor, x, y, w, h); // still need to make the element if the axes are disabled\n  // but nuke its events (except for maindrag which needs them for hover)\n  // and stop there\n\n  if (allFixedRanges && !isMainDrag) {\n    dragger.onmousedown = null;\n    dragger.style.pointerEvents = 'none';\n    return dragger;\n  }\n\n  var dragOptions = {\n    element: dragger,\n    gd: gd,\n    plotinfo: plotinfo\n  };\n\n  dragOptions.prepFn = function (e, startX, startY) {\n    var dragModePrev = dragOptions.dragmode;\n    var dragModeNow = gd._fullLayout.dragmode;\n\n    if (dragModeNow !== dragModePrev) {\n      dragOptions.dragmode = dragModeNow;\n    }\n\n    recomputeAxisLists();\n    scaleX = gd._fullLayout._invScaleX;\n    scaleY = gd._fullLayout._invScaleY;\n\n    if (!allFixedRanges) {\n      if (isMainDrag) {\n        // main dragger handles all drag modes, and changes\n        // to pan (or to zoom if it already is pan) on shift\n        if (e.shiftKey) {\n          if (dragModeNow === 'pan') dragModeNow = 'zoom';else if (!selectingOrDrawing(dragModeNow)) dragModeNow = 'pan';\n        } else if (e.ctrlKey) {\n          dragModeNow = 'pan';\n        }\n      } else {\n        // all other draggers just pan\n        dragModeNow = 'pan';\n      }\n    }\n\n    if (freeMode(dragModeNow)) dragOptions.minDrag = 1;else dragOptions.minDrag = undefined;\n\n    if (selectingOrDrawing(dragModeNow)) {\n      dragOptions.xaxes = xaxes;\n      dragOptions.yaxes = yaxes; // this attaches moveFn, clickFn, doneFn on dragOptions\n\n      prepSelect(e, startX, startY, dragOptions, dragModeNow);\n    } else {\n      dragOptions.clickFn = clickFn;\n\n      if (selectingOrDrawing(dragModePrev)) {\n        // TODO Fix potential bug\n        // Note: clearing / resetting selection state only happens, when user\n        // triggers at least one interaction in pan/zoom mode. Otherwise, the\n        // select/lasso outlines are deleted (in plots.js.cleanPlot) but the selection\n        // cache isn't cleared. So when the user switches back to select/lasso and\n        // 'adds to a selection' with Shift, the \"old\", seemingly removed outlines\n        // are redrawn again because the selection cache still holds their coordinates.\n        // However, this isn't easily solved, since plots.js would need\n        // to have a reference to the dragOptions object (which holds the\n        // selection cache).\n        clearAndResetSelect();\n      }\n\n      if (!allFixedRanges) {\n        if (dragModeNow === 'zoom') {\n          dragOptions.moveFn = zoomMove;\n          dragOptions.doneFn = zoomDone; // zoomMove takes care of the threshold, but we need to\n          // minimize this so that constrained zoom boxes will flip\n          // orientation at the right place\n\n          dragOptions.minDrag = 1;\n          zoomPrep(e, startX, startY);\n        } else if (dragModeNow === 'pan') {\n          dragOptions.moveFn = plotDrag;\n          dragOptions.doneFn = dragTail;\n        }\n      }\n    }\n\n    gd._fullLayout._redrag = function () {\n      var dragDataNow = gd._dragdata;\n\n      if (dragDataNow && dragDataNow.element === dragger) {\n        var dragModeNow = gd._fullLayout.dragmode;\n\n        if (!selectingOrDrawing(dragModeNow)) {\n          recomputeAxisLists();\n          updateSubplots([0, 0, pw, ph]);\n          dragOptions.moveFn(dragDataNow.dx, dragDataNow.dy);\n        } // TODO should we try to \"re-select\" under select/lasso modes?\n        // probably best to wait for https://github.com/plotly/plotly.js/issues/1851\n\n      }\n    };\n  };\n\n  function clearAndResetSelect() {\n    // clear selection polygon cache (if any)\n    dragOptions.plotinfo.selection = false; // clear selection outlines\n\n    clearSelect(gd);\n  }\n\n  function clickFn(numClicks, evt) {\n    var gd = dragOptions.gd;\n\n    if (gd._fullLayout._activeShapeIndex >= 0) {\n      gd._fullLayout._deactivateShape(gd);\n\n      return;\n    }\n\n    var clickmode = gd._fullLayout.clickmode;\n    removeZoombox(gd);\n    if (numClicks === 2 && !singleEnd) doubleClick();\n\n    if (isMainDrag) {\n      if (clickmode.indexOf('select') > -1) {\n        selectOnClick(evt, gd, xaxes, yaxes, plotinfo.id, dragOptions);\n      }\n\n      if (clickmode.indexOf('event') > -1) {\n        Fx.click(gd, evt, plotinfo.id);\n      }\n    } else if (numClicks === 1 && singleEnd) {\n      var ax = ns ? ya0 : xa0;\n      var end = ns === 's' || ew === 'w' ? 0 : 1;\n      var attrStr = ax._name + '.range[' + end + ']';\n      var initialText = getEndText(ax, end);\n      var hAlign = 'left';\n      var vAlign = 'middle';\n      if (ax.fixedrange) return;\n\n      if (ns) {\n        vAlign = ns === 'n' ? 'top' : 'bottom';\n        if (ax.side === 'right') hAlign = 'right';\n      } else if (ew === 'e') hAlign = 'right';\n\n      if (gd._context.showAxisRangeEntryBoxes) {\n        d3.select(dragger).call(svgTextUtils.makeEditable, {\n          gd: gd,\n          immediate: true,\n          background: gd._fullLayout.paper_bgcolor,\n          text: String(initialText),\n          fill: ax.tickfont ? ax.tickfont.color : '#444',\n          horizontalAlign: hAlign,\n          verticalAlign: vAlign\n        }).on('edit', function (text) {\n          var v = ax.d2r(text);\n\n          if (v !== undefined) {\n            Registry.call('_guiRelayout', gd, attrStr, v);\n          }\n        });\n      }\n    }\n  }\n\n  dragElement.init(dragOptions); // x/y px position at start of drag\n\n  var x0, y0; // bbox object of the zoombox\n\n  var box; // luminance of bg behind zoombox\n\n  var lum; // zoombox path outline\n\n  var path0; // is zoombox dimmed (during drag)\n\n  var dimmed; // 'x'-only, 'y' or 'xy' zooming\n\n  var zoomMode; // zoombox d3 selection\n\n  var zb; // zoombox corner d3 selection\n\n  var corners; // zoom takes over minDrag, so it also has to take over gd._dragged\n\n  var zoomDragged;\n\n  function zoomPrep(e, startX, startY) {\n    var dragBBox = dragger.getBoundingClientRect();\n    x0 = startX - dragBBox.left;\n    y0 = startY - dragBBox.top;\n\n    gd._fullLayout._calcInverseTransform(gd);\n\n    var transformedCoords = Lib.apply3DTransform(gd._fullLayout._invTransform)(x0, y0);\n    x0 = transformedCoords[0];\n    y0 = transformedCoords[1];\n    box = {\n      l: x0,\n      r: x0,\n      w: 0,\n      t: y0,\n      b: y0,\n      h: 0\n    };\n    lum = gd._hmpixcount ? gd._hmlumcount / gd._hmpixcount : tinycolor(gd._fullLayout.plot_bgcolor).getLuminance();\n    path0 = 'M0,0H' + pw + 'V' + ph + 'H0V0';\n    dimmed = false;\n    zoomMode = 'xy';\n    zoomDragged = false;\n    zb = makeZoombox(zoomlayer, lum, xs, ys, path0);\n    corners = makeCorners(zoomlayer, xs, ys);\n  }\n\n  function zoomMove(dx0, dy0) {\n    if (gd._transitioningWithDuration) {\n      return false;\n    }\n\n    var x1 = Math.max(0, Math.min(pw, scaleX * dx0 + x0));\n    var y1 = Math.max(0, Math.min(ph, scaleY * dy0 + y0));\n    var dx = Math.abs(x1 - x0);\n    var dy = Math.abs(y1 - y0);\n    box.l = Math.min(x0, x1);\n    box.r = Math.max(x0, x1);\n    box.t = Math.min(y0, y1);\n    box.b = Math.max(y0, y1);\n\n    function noZoom() {\n      zoomMode = '';\n      box.r = box.l;\n      box.t = box.b;\n      corners.attr('d', 'M0,0Z');\n    }\n\n    if (links.isSubplotConstrained) {\n      if (dx > MINZOOM || dy > MINZOOM) {\n        zoomMode = 'xy';\n\n        if (dx / pw > dy / ph) {\n          dy = dx * ph / pw;\n          if (y0 > y1) box.t = y0 - dy;else box.b = y0 + dy;\n        } else {\n          dx = dy * pw / ph;\n          if (x0 > x1) box.l = x0 - dx;else box.r = x0 + dx;\n        }\n\n        corners.attr('d', xyCorners(box));\n      } else {\n        noZoom();\n      }\n    } else if (matches.isSubplotConstrained) {\n      if (dx > MINZOOM || dy > MINZOOM) {\n        zoomMode = 'xy';\n        var r0 = Math.min(box.l / pw, (ph - box.b) / ph);\n        var r1 = Math.max(box.r / pw, (ph - box.t) / ph);\n        box.l = r0 * pw;\n        box.r = r1 * pw;\n        box.b = (1 - r0) * ph;\n        box.t = (1 - r1) * ph;\n        corners.attr('d', xyCorners(box));\n      } else {\n        noZoom();\n      }\n    } else if (!yActive || dy < Math.min(Math.max(dx * 0.6, MINDRAG), MINZOOM)) {\n      // look for small drags in one direction or the other,\n      // and only drag the other axis\n      if (dx < MINDRAG || !xActive) {\n        noZoom();\n      } else {\n        box.t = 0;\n        box.b = ph;\n        zoomMode = 'x';\n        corners.attr('d', xCorners(box, y0));\n      }\n    } else if (!xActive || dx < Math.min(dy * 0.6, MINZOOM)) {\n      box.l = 0;\n      box.r = pw;\n      zoomMode = 'y';\n      corners.attr('d', yCorners(box, x0));\n    } else {\n      zoomMode = 'xy';\n      corners.attr('d', xyCorners(box));\n    }\n\n    box.w = box.r - box.l;\n    box.h = box.b - box.t;\n    if (zoomMode) zoomDragged = true;\n    gd._dragged = zoomDragged;\n    updateZoombox(zb, corners, box, path0, dimmed, lum);\n    computeZoomUpdates();\n    gd.emit('plotly_relayouting', updates);\n    dimmed = true;\n  }\n\n  function computeZoomUpdates() {\n    updates = {}; // TODO: edit linked axes in zoomAxRanges and in dragTail\n\n    if (zoomMode === 'xy' || zoomMode === 'x') {\n      zoomAxRanges(xaxes, box.l / pw, box.r / pw, updates, links.xaxes);\n      updateMatchedAxRange('x', updates);\n    }\n\n    if (zoomMode === 'xy' || zoomMode === 'y') {\n      zoomAxRanges(yaxes, (ph - box.b) / ph, (ph - box.t) / ph, updates, links.yaxes);\n      updateMatchedAxRange('y', updates);\n    }\n  }\n\n  function zoomDone() {\n    computeZoomUpdates();\n    removeZoombox(gd);\n    dragTail();\n    showDoubleClickNotifier(gd);\n  } // scroll zoom, on all draggers except corners\n\n\n  var scrollViewBox = [0, 0, pw, ph]; // wait a little after scrolling before redrawing\n\n  var redrawTimer = null;\n  var REDRAWDELAY = constants.REDRAWDELAY;\n  var mainplot = plotinfo.mainplot ? gd._fullLayout._plots[plotinfo.mainplot] : plotinfo;\n\n  function zoomWheel(e) {\n    // deactivate mousewheel scrolling on embedded graphs\n    // devs can override this with layout._enablescrollzoom,\n    // but _ ensures this setting won't leave their page\n    if (!gd._context._scrollZoom.cartesian && !gd._fullLayout._enablescrollzoom) {\n      return;\n    }\n\n    clearAndResetSelect(); // If a transition is in progress, then disable any behavior:\n\n    if (gd._transitioningWithDuration) {\n      e.preventDefault();\n      e.stopPropagation();\n      return;\n    }\n\n    recomputeAxisLists();\n    clearTimeout(redrawTimer);\n    var wheelDelta = -e.deltaY;\n    if (!isFinite(wheelDelta)) wheelDelta = e.wheelDelta / 10;\n\n    if (!isFinite(wheelDelta)) {\n      Lib.log('Did not find wheel motion attributes: ', e);\n      return;\n    }\n\n    var zoom = Math.exp(-Math.min(Math.max(wheelDelta, -20), 20) / 200);\n    var gbb = mainplot.draglayer.select('.nsewdrag').node().getBoundingClientRect();\n    var xfrac = (e.clientX - gbb.left) / gbb.width;\n    var yfrac = (gbb.bottom - e.clientY) / gbb.height;\n    var i;\n\n    function zoomWheelOneAxis(ax, centerFraction, zoom) {\n      if (ax.fixedrange) return;\n      var axRange = Lib.simpleMap(ax.range, ax.r2l);\n      var v0 = axRange[0] + (axRange[1] - axRange[0]) * centerFraction;\n\n      function doZoom(v) {\n        return ax.l2r(v0 + (v - v0) * zoom);\n      }\n\n      ax.range = axRange.map(doZoom);\n    }\n\n    if (editX) {\n      // if we're only zooming this axis because of constraints,\n      // zoom it about the center\n      if (!ew) xfrac = 0.5;\n\n      for (i = 0; i < xaxes.length; i++) {\n        zoomWheelOneAxis(xaxes[i], xfrac, zoom);\n      }\n\n      updateMatchedAxRange('x');\n      scrollViewBox[2] *= zoom;\n      scrollViewBox[0] += scrollViewBox[2] * xfrac * (1 / zoom - 1);\n    }\n\n    if (editY) {\n      if (!ns) yfrac = 0.5;\n\n      for (i = 0; i < yaxes.length; i++) {\n        zoomWheelOneAxis(yaxes[i], yfrac, zoom);\n      }\n\n      updateMatchedAxRange('y');\n      scrollViewBox[3] *= zoom;\n      scrollViewBox[1] += scrollViewBox[3] * (1 - yfrac) * (1 / zoom - 1);\n    } // viewbox redraw at first\n\n\n    updateSubplots(scrollViewBox);\n    ticksAndAnnotations();\n    gd.emit('plotly_relayouting', updates); // then replot after a delay to make sure\n    // no more scrolling is coming\n\n    redrawTimer = setTimeout(function () {\n      if (!gd._fullLayout) return;\n      scrollViewBox = [0, 0, pw, ph];\n      dragTail();\n    }, REDRAWDELAY);\n    e.preventDefault();\n    return;\n  } // everything but the corners gets wheel zoom\n\n\n  if (ns.length * ew.length !== 1) {\n    attachWheelEventHandler(dragger, zoomWheel);\n  } // plotDrag: move the plot in response to a drag\n\n\n  function plotDrag(dx, dy) {\n    dx = dx * scaleX;\n    dy = dy * scaleY; // If a transition is in progress, then disable any behavior:\n\n    if (gd._transitioningWithDuration) {\n      return;\n    } // prevent axis drawing from monkeying with margins until we're done\n\n\n    gd._fullLayout._replotting = true;\n\n    if (xActive === 'ew' || yActive === 'ns') {\n      var spDx = xActive ? -dx : 0;\n      var spDy = yActive ? -dy : 0;\n\n      if (matches.isSubplotConstrained) {\n        if (xActive && yActive) {\n          var frac = (dx / pw - dy / ph) / 2;\n          dx = frac * pw;\n          dy = -frac * ph;\n          spDx = -dx;\n          spDy = -dy;\n        }\n\n        if (yActive) {\n          spDx = -spDy * pw / ph;\n        } else {\n          spDy = -spDx * ph / pw;\n        }\n      }\n\n      if (xActive) {\n        dragAxList(xaxes, dx);\n        updateMatchedAxRange('x');\n      }\n\n      if (yActive) {\n        dragAxList(yaxes, dy);\n        updateMatchedAxRange('y');\n      }\n\n      updateSubplots([spDx, spDy, pw, ph]);\n      ticksAndAnnotations();\n      gd.emit('plotly_relayouting', updates);\n      return;\n    } // dz: set a new value for one end (0 or 1) of an axis array axArray,\n    // and return a pixel shift for that end for the viewbox\n    // based on pixel drag distance d\n    // TODO: this makes (generally non-fatal) errors when you get\n    // near floating point limits\n\n\n    function dz(axArray, end, d) {\n      var otherEnd = 1 - end;\n      var movedAx;\n      var newLinearizedEnd;\n\n      for (var i = 0; i < axArray.length; i++) {\n        var axi = axArray[i];\n        if (axi.fixedrange) continue;\n        movedAx = axi;\n        newLinearizedEnd = axi._rl[otherEnd] + (axi._rl[end] - axi._rl[otherEnd]) / dZoom(d / axi._length);\n        var newEnd = axi.l2r(newLinearizedEnd); // if l2r comes back false or undefined, it means we've dragged off\n        // the end of valid ranges - so stop.\n\n        if (newEnd !== false && newEnd !== undefined) axi.range[end] = newEnd;\n      }\n\n      return movedAx._length * (movedAx._rl[end] - newLinearizedEnd) / (movedAx._rl[end] - movedAx._rl[otherEnd]);\n    }\n\n    var dxySign = xActive === 'w' === (yActive === 'n') ? 1 : -1;\n\n    if (xActive && yActive && (links.isSubplotConstrained || matches.isSubplotConstrained)) {\n      // dragging a corner of a constrained subplot:\n      // respect the fixed corner, but harmonize dx and dy\n      var dxyFraction = (dx / pw + dxySign * dy / ph) / 2;\n      dx = dxyFraction * pw;\n      dy = dxySign * dxyFraction * ph;\n    }\n\n    var xStart, yStart;\n    if (xActive === 'w') dx = dz(xaxes, 0, dx);else if (xActive === 'e') dx = dz(xaxes, 1, -dx);else if (!xActive) dx = 0;\n    if (yActive === 'n') dy = dz(yaxes, 1, dy);else if (yActive === 's') dy = dz(yaxes, 0, -dy);else if (!yActive) dy = 0;\n    xStart = xActive === 'w' ? dx : 0;\n    yStart = yActive === 'n' ? dy : 0;\n\n    if (links.isSubplotConstrained && !matches.isSubplotConstrained || matches.isSubplotConstrained && xActive && yActive && dxySign > 0) {\n      var i;\n\n      if (matches.isSubplotConstrained || !xActive && yActive.length === 1) {\n        // dragging one end of the y axis of a constrained subplot\n        // scale the other axis the same about its middle\n        for (i = 0; i < xaxes.length; i++) {\n          xaxes[i].range = xaxes[i]._r.slice();\n          scaleZoom(xaxes[i], 1 - dy / ph);\n        }\n\n        dx = dy * pw / ph;\n        xStart = dx / 2;\n      }\n\n      if (matches.isSubplotConstrained || !yActive && xActive.length === 1) {\n        for (i = 0; i < yaxes.length; i++) {\n          yaxes[i].range = yaxes[i]._r.slice();\n          scaleZoom(yaxes[i], 1 - dx / pw);\n        }\n\n        dy = dx * ph / pw;\n        yStart = dy / 2;\n      }\n    }\n\n    if (!matches.isSubplotConstrained || !yActive) {\n      updateMatchedAxRange('x');\n    }\n\n    if (!matches.isSubplotConstrained || !xActive) {\n      updateMatchedAxRange('y');\n    }\n\n    var xSize = pw - dx;\n    var ySize = ph - dy;\n\n    if (matches.isSubplotConstrained && !(xActive && yActive)) {\n      if (xActive) {\n        yStart = xStart ? 0 : dx * ph / pw;\n        ySize = xSize * ph / pw;\n      } else {\n        xStart = yStart ? 0 : dy * pw / ph;\n        xSize = ySize * pw / ph;\n      }\n    }\n\n    updateSubplots([xStart, yStart, xSize, ySize]);\n    ticksAndAnnotations();\n    gd.emit('plotly_relayouting', updates);\n  }\n\n  function updateMatchedAxRange(axLetter, out) {\n    var matchedAxes = matches.isSubplotConstrained ? {\n      x: yaxes,\n      y: xaxes\n    }[axLetter] : matches[axLetter + 'axes'];\n    var constrainedAxes = matches.isSubplotConstrained ? {\n      x: xaxes,\n      y: yaxes\n    }[axLetter] : [];\n\n    for (var i = 0; i < matchedAxes.length; i++) {\n      var ax = matchedAxes[i];\n      var axId = ax._id;\n      var axId2 = matches.xLinks[axId] || matches.yLinks[axId];\n      var ax2 = constrainedAxes[0] || xaHash[axId2] || yaHash[axId2];\n\n      if (ax2) {\n        if (out) {\n          // zoombox case - don't mutate 'range', just add keys in 'updates'\n          out[ax._name + '.range[0]'] = out[ax2._name + '.range[0]'];\n          out[ax._name + '.range[1]'] = out[ax2._name + '.range[1]'];\n        } else {\n          ax.range = ax2.range.slice();\n        }\n      }\n    }\n  } // Draw ticks and annotations (and other components) when ranges change.\n  // Also records the ranges that have changed for use by update at the end.\n\n\n  function ticksAndAnnotations() {\n    var activeAxIds = [];\n    var i;\n\n    function pushActiveAxIds(axList) {\n      for (i = 0; i < axList.length; i++) {\n        if (!axList[i].fixedrange) activeAxIds.push(axList[i]._id);\n      }\n    }\n\n    if (editX) {\n      pushActiveAxIds(xaxes);\n      pushActiveAxIds(links.xaxes);\n      pushActiveAxIds(matches.xaxes);\n    }\n\n    if (editY) {\n      pushActiveAxIds(yaxes);\n      pushActiveAxIds(links.yaxes);\n      pushActiveAxIds(matches.yaxes);\n    }\n\n    updates = {};\n\n    for (i = 0; i < activeAxIds.length; i++) {\n      var axId = activeAxIds[i];\n      var ax = getFromId(gd, axId);\n      Axes.drawOne(gd, ax, {\n        skipTitle: true\n      });\n      updates[ax._name + '.range[0]'] = ax.range[0];\n      updates[ax._name + '.range[1]'] = ax.range[1];\n    }\n\n    Axes.redrawComponents(gd, activeAxIds);\n  }\n\n  function doubleClick() {\n    if (gd._transitioningWithDuration) return;\n    var doubleClickConfig = gd._context.doubleClick;\n    var axList = [];\n    if (xActive) axList = axList.concat(xaxes);\n    if (yActive) axList = axList.concat(yaxes);\n    if (matches.xaxes) axList = axList.concat(matches.xaxes);\n    if (matches.yaxes) axList = axList.concat(matches.yaxes);\n    var attrs = {};\n    var ax, i, rangeInitial; // For reset+autosize mode:\n    // If *any* of the main axes is not at its initial range\n    // (or autoranged, if we have no initial range, to match the logic in\n    // doubleClickConfig === 'reset' below), we reset.\n    // If they are *all* at their initial ranges, then we autosize.\n\n    if (doubleClickConfig === 'reset+autosize') {\n      doubleClickConfig = 'autosize';\n\n      for (i = 0; i < axList.length; i++) {\n        ax = axList[i];\n\n        if (ax._rangeInitial && (ax.range[0] !== ax._rangeInitial[0] || ax.range[1] !== ax._rangeInitial[1]) || !ax._rangeInitial && !ax.autorange) {\n          doubleClickConfig = 'reset';\n          break;\n        }\n      }\n    }\n\n    if (doubleClickConfig === 'autosize') {\n      // don't set the linked axes here, so relayout marks them as shrinkable\n      // and we autosize just to the requested axis/axes\n      for (i = 0; i < axList.length; i++) {\n        ax = axList[i];\n        if (!ax.fixedrange) attrs[ax._name + '.autorange'] = true;\n      }\n    } else if (doubleClickConfig === 'reset') {\n      // when we're resetting, reset all linked axes too, so we get back\n      // to the fully-auto-with-constraints situation\n      if (xActive || links.isSubplotConstrained) axList = axList.concat(links.xaxes);\n      if (yActive && !links.isSubplotConstrained) axList = axList.concat(links.yaxes);\n\n      if (links.isSubplotConstrained) {\n        if (!xActive) axList = axList.concat(xaxes);else if (!yActive) axList = axList.concat(yaxes);\n      }\n\n      for (i = 0; i < axList.length; i++) {\n        ax = axList[i];\n\n        if (!ax.fixedrange) {\n          if (!ax._rangeInitial) {\n            attrs[ax._name + '.autorange'] = true;\n          } else {\n            rangeInitial = ax._rangeInitial;\n            attrs[ax._name + '.range[0]'] = rangeInitial[0];\n            attrs[ax._name + '.range[1]'] = rangeInitial[1];\n          }\n        }\n      }\n    }\n\n    gd.emit('plotly_doubleclick', null);\n    Registry.call('_guiRelayout', gd, attrs);\n  } // dragTail - finish a drag event with a redraw\n\n\n  function dragTail() {\n    // put the subplot viewboxes back to default (Because we're going to)\n    // be repositioning the data in the relayout. But DON'T call\n    // ticksAndAnnotations again - it's unnecessary and would overwrite `updates`\n    updateSubplots([0, 0, pw, ph]); // since we may have been redrawing some things during the drag, we may have\n    // accumulated MathJax promises - wait for them before we relayout.\n\n    Lib.syncOrAsync([Plots.previousPromises, function () {\n      gd._fullLayout._replotting = false;\n      Registry.call('_guiRelayout', gd, updates);\n    }], gd);\n  } // updateSubplots - find all plot viewboxes that should be\n  // affected by this drag, and update them. look for all plots\n  // sharing an affected axis (including the one being dragged),\n  // includes also scattergl and splom logic.\n\n\n  function updateSubplots(viewBox) {\n    var fullLayout = gd._fullLayout;\n    var plotinfos = fullLayout._plots;\n    var subplots = fullLayout._subplots.cartesian;\n    var i, sp, xa, ya;\n\n    if (hasSplom) {\n      Registry.subplotsRegistry.splom.drag(gd);\n    }\n\n    if (hasScatterGl) {\n      for (i = 0; i < subplots.length; i++) {\n        sp = plotinfos[subplots[i]];\n        xa = sp.xaxis;\n        ya = sp.yaxis;\n\n        if (sp._scene) {\n          var xrng = Lib.simpleMap(xa.range, xa.r2l);\n          var yrng = Lib.simpleMap(ya.range, ya.r2l);\n\n          sp._scene.update({\n            range: [xrng[0], yrng[0], xrng[1], yrng[1]]\n          });\n        }\n      }\n    }\n\n    if (hasSplom || hasScatterGl) {\n      clearGlCanvases(gd);\n      redrawReglTraces(gd);\n    }\n\n    if (hasSVG) {\n      var xScaleFactor = viewBox[2] / xa0._length;\n      var yScaleFactor = viewBox[3] / ya0._length;\n\n      for (i = 0; i < subplots.length; i++) {\n        sp = plotinfos[subplots[i]];\n        xa = sp.xaxis;\n        ya = sp.yaxis;\n        var editX2 = (editX || matches.isSubplotConstrained) && !xa.fixedrange && xaHash[xa._id];\n        var editY2 = (editY || matches.isSubplotConstrained) && !ya.fixedrange && yaHash[ya._id];\n        var xScaleFactor2, yScaleFactor2;\n        var clipDx, clipDy;\n\n        if (editX2) {\n          xScaleFactor2 = xScaleFactor;\n          clipDx = ew || matches.isSubplotConstrained ? viewBox[0] : getShift(xa, xScaleFactor2);\n        } else if (matches.xaHash[xa._id]) {\n          xScaleFactor2 = xScaleFactor;\n          clipDx = viewBox[0] * xa._length / xa0._length;\n        } else if (matches.yaHash[xa._id]) {\n          xScaleFactor2 = yScaleFactor;\n          clipDx = yActive === 'ns' ? -viewBox[1] * xa._length / ya0._length : getShift(xa, xScaleFactor2, {\n            n: 'top',\n            s: 'bottom'\n          }[yActive]);\n        } else {\n          xScaleFactor2 = getLinkedScaleFactor(xa, xScaleFactor, yScaleFactor);\n          clipDx = scaleAndGetShift(xa, xScaleFactor2);\n        }\n\n        if (editY2) {\n          yScaleFactor2 = yScaleFactor;\n          clipDy = ns || matches.isSubplotConstrained ? viewBox[1] : getShift(ya, yScaleFactor2);\n        } else if (matches.yaHash[ya._id]) {\n          yScaleFactor2 = yScaleFactor;\n          clipDy = viewBox[1] * ya._length / ya0._length;\n        } else if (matches.xaHash[ya._id]) {\n          yScaleFactor2 = xScaleFactor;\n          clipDy = xActive === 'ew' ? -viewBox[0] * ya._length / xa0._length : getShift(ya, yScaleFactor2, {\n            e: 'right',\n            w: 'left'\n          }[xActive]);\n        } else {\n          yScaleFactor2 = getLinkedScaleFactor(ya, xScaleFactor, yScaleFactor);\n          clipDy = scaleAndGetShift(ya, yScaleFactor2);\n        } // don't scale at all if neither axis is scalable here\n\n\n        if (!xScaleFactor2 && !yScaleFactor2) {\n          continue;\n        } // but if only one is, reset the other axis scaling\n\n\n        if (!xScaleFactor2) xScaleFactor2 = 1;\n        if (!yScaleFactor2) yScaleFactor2 = 1;\n        var plotDx = xa._offset - clipDx / xScaleFactor2;\n        var plotDy = ya._offset - clipDy / yScaleFactor2; // TODO could be more efficient here:\n        // setTranslate and setScale do a lot of extra work\n        // when working independently, should perhaps combine\n        // them into a single routine.\n\n        sp.clipRect.call(Drawing.setTranslate, clipDx, clipDy).call(Drawing.setScale, xScaleFactor2, yScaleFactor2);\n        sp.plot.call(Drawing.setTranslate, plotDx, plotDy).call(Drawing.setScale, 1 / xScaleFactor2, 1 / yScaleFactor2); // apply an inverse scale to individual points to counteract\n        // the scale of the trace group.\n        // apply only when scale changes, as adjusting the scale of\n        // all the points can be expansive.\n\n        if (xScaleFactor2 !== sp.xScaleFactor || yScaleFactor2 !== sp.yScaleFactor) {\n          Drawing.setPointGroupScale(sp.zoomScalePts, xScaleFactor2, yScaleFactor2);\n          Drawing.setTextPointsScale(sp.zoomScaleTxt, xScaleFactor2, yScaleFactor2);\n        }\n\n        Drawing.hideOutsideRangePoints(sp.clipOnAxisFalseTraces, sp); // update x/y scaleFactor stash\n\n        sp.xScaleFactor = xScaleFactor2;\n        sp.yScaleFactor = yScaleFactor2;\n      }\n    }\n  } // Find the appropriate scaling for this axis, if it's linked to the\n  // dragged axes by constraints. 0 is special, it means this axis shouldn't\n  // ever be scaled (will be converted to 1 if the other axis is scaled)\n\n\n  function getLinkedScaleFactor(ax, xScaleFactor, yScaleFactor) {\n    if (ax.fixedrange) return 0;\n\n    if (editX && links.xaHash[ax._id]) {\n      return xScaleFactor;\n    }\n\n    if (editY && (links.isSubplotConstrained ? links.xaHash : links.yaHash)[ax._id]) {\n      return yScaleFactor;\n    }\n\n    return 0;\n  }\n\n  function scaleAndGetShift(ax, scaleFactor) {\n    if (scaleFactor) {\n      ax.range = ax._r.slice();\n      scaleZoom(ax, scaleFactor);\n      return getShift(ax, scaleFactor);\n    }\n\n    return 0;\n  }\n\n  function getShift(ax, scaleFactor, from) {\n    return ax._length * (1 - scaleFactor) * FROM_TL[from || ax.constraintoward || 'middle'];\n  }\n\n  return dragger;\n}\n\nfunction makeDragger(plotinfo, nodeName, dragClass, cursor) {\n  var dragger3 = Lib.ensureSingle(plotinfo.draglayer, nodeName, dragClass, function (s) {\n    s.classed('drag', true).style({\n      fill: 'transparent',\n      'stroke-width': 0\n    }).attr('data-subplot', plotinfo.id);\n  });\n  dragger3.call(setCursor, cursor);\n  return dragger3.node();\n}\n\nfunction makeRectDragger(plotinfo, dragClass, cursor, x, y, w, h) {\n  var dragger = makeDragger(plotinfo, 'rect', dragClass, cursor);\n  d3.select(dragger).call(Drawing.setRect, x, y, w, h);\n  return dragger;\n}\n\nfunction isDirectionActive(axList, activeVal) {\n  for (var i = 0; i < axList.length; i++) {\n    if (!axList[i].fixedrange) return activeVal;\n  }\n\n  return '';\n}\n\nfunction getEndText(ax, end) {\n  var initialVal = ax.range[end];\n  var diff = Math.abs(initialVal - ax.range[1 - end]);\n  var dig; // TODO: this should basically be ax.r2d but we're doing extra\n  // rounding here... can we clean up at all?\n\n  if (ax.type === 'date') {\n    return initialVal;\n  } else if (ax.type === 'log') {\n    dig = Math.ceil(Math.max(0, -Math.log(diff) / Math.LN10)) + 3;\n    return numberFormat('.' + dig + 'g')(Math.pow(10, initialVal));\n  } else {\n    // linear numeric (or category... but just show numbers here)\n    dig = Math.floor(Math.log(Math.abs(initialVal)) / Math.LN10) - Math.floor(Math.log(diff) / Math.LN10) + 4;\n    return numberFormat('.' + String(dig) + 'g')(initialVal);\n  }\n}\n\nfunction zoomAxRanges(axList, r0Fraction, r1Fraction, updates, linkedAxes) {\n  for (var i = 0; i < axList.length; i++) {\n    var axi = axList[i];\n    if (axi.fixedrange) continue;\n\n    if (axi.rangebreaks) {\n      var isY = axi._id.charAt(0) === 'y';\n      var r0F = isY ? 1 - r0Fraction : r0Fraction;\n      var r1F = isY ? 1 - r1Fraction : r1Fraction;\n      updates[axi._name + '.range[0]'] = axi.l2r(axi.p2l(r0F * axi._length));\n      updates[axi._name + '.range[1]'] = axi.l2r(axi.p2l(r1F * axi._length));\n    } else {\n      var axRangeLinear0 = axi._rl[0];\n      var axRangeLinearSpan = axi._rl[1] - axRangeLinear0;\n      updates[axi._name + '.range[0]'] = axi.l2r(axRangeLinear0 + axRangeLinearSpan * r0Fraction);\n      updates[axi._name + '.range[1]'] = axi.l2r(axRangeLinear0 + axRangeLinearSpan * r1Fraction);\n    }\n  } // zoom linked axes about their centers\n\n\n  if (linkedAxes && linkedAxes.length) {\n    var linkedR0Fraction = (r0Fraction + (1 - r1Fraction)) / 2;\n    zoomAxRanges(linkedAxes, linkedR0Fraction, 1 - linkedR0Fraction, updates, []);\n  }\n}\n\nfunction dragAxList(axList, pix) {\n  for (var i = 0; i < axList.length; i++) {\n    var axi = axList[i];\n\n    if (!axi.fixedrange) {\n      if (axi.rangebreaks) {\n        var p0 = 0;\n        var p1 = axi._length;\n        var d0 = axi.p2l(p0 + pix) - axi.p2l(p0);\n        var d1 = axi.p2l(p1 + pix) - axi.p2l(p1);\n        var delta = (d0 + d1) / 2;\n        axi.range = [axi.l2r(axi._rl[0] - delta), axi.l2r(axi._rl[1] - delta)];\n      } else {\n        axi.range = [axi.l2r(axi._rl[0] - pix / axi._m), axi.l2r(axi._rl[1] - pix / axi._m)];\n      }\n    }\n  }\n} // common transform for dragging one end of an axis\n// d>0 is compressing scale (cursor is over the plot,\n//  the axis end should move with the cursor)\n// d<0 is expanding (cursor is off the plot, axis end moves\n//  nonlinearly so you can expand far)\n\n\nfunction dZoom(d) {\n  return 1 - (d >= 0 ? Math.min(d, 0.9) : 1 / (1 / Math.max(d, -0.3) + 3.222));\n}\n\nfunction getDragCursor(nsew, dragmode, isMainDrag) {\n  if (!nsew) return 'pointer';\n\n  if (nsew === 'nsew') {\n    // in this case here, clear cursor and\n    // use the cursor style set on <g .draglayer>\n    if (isMainDrag) return '';\n    if (dragmode === 'pan') return 'move';\n    return 'crosshair';\n  }\n\n  return nsew.toLowerCase() + '-resize';\n}\n\nfunction makeZoombox(zoomlayer, lum, xs, ys, path0) {\n  return zoomlayer.append('path').attr('class', 'zoombox').style({\n    'fill': lum > 0.2 ? 'rgba(0,0,0,0)' : 'rgba(255,255,255,0)',\n    'stroke-width': 0\n  }).attr('transform', strTranslate(xs, ys)).attr('d', path0 + 'Z');\n}\n\nfunction makeCorners(zoomlayer, xs, ys) {\n  return zoomlayer.append('path').attr('class', 'zoombox-corners').style({\n    fill: Color.background,\n    stroke: Color.defaultLine,\n    'stroke-width': 1,\n    opacity: 0\n  }).attr('transform', strTranslate(xs, ys)).attr('d', 'M0,0Z');\n}\n\nfunction updateZoombox(zb, corners, box, path0, dimmed, lum) {\n  zb.attr('d', path0 + 'M' + box.l + ',' + box.t + 'v' + box.h + 'h' + box.w + 'v-' + box.h + 'h-' + box.w + 'Z');\n  transitionZoombox(zb, corners, dimmed, lum);\n}\n\nfunction transitionZoombox(zb, corners, dimmed, lum) {\n  if (!dimmed) {\n    zb.transition().style('fill', lum > 0.2 ? 'rgba(0,0,0,0.4)' : 'rgba(255,255,255,0.3)').duration(200);\n    corners.transition().style('opacity', 1).duration(200);\n  }\n}\n\nfunction removeZoombox(gd) {\n  d3.select(gd).selectAll('.zoombox,.js-zoombox-backdrop,.js-zoombox-menu,.zoombox-corners').remove();\n}\n\nfunction showDoubleClickNotifier(gd) {\n  if (SHOWZOOMOUTTIP && gd.data && gd._context.showTips) {\n    Lib.notifier(Lib._(gd, 'Double-click to zoom back out'), 'long');\n    SHOWZOOMOUTTIP = false;\n  }\n}\n\nfunction xCorners(box, y0) {\n  return 'M' + (box.l - 0.5) + ',' + (y0 - MINZOOM - 0.5) + 'h-3v' + (2 * MINZOOM + 1) + 'h3ZM' + (box.r + 0.5) + ',' + (y0 - MINZOOM - 0.5) + 'h3v' + (2 * MINZOOM + 1) + 'h-3Z';\n}\n\nfunction yCorners(box, x0) {\n  return 'M' + (x0 - MINZOOM - 0.5) + ',' + (box.t - 0.5) + 'v-3h' + (2 * MINZOOM + 1) + 'v3ZM' + (x0 - MINZOOM - 0.5) + ',' + (box.b + 0.5) + 'v3h' + (2 * MINZOOM + 1) + 'v-3Z';\n}\n\nfunction xyCorners(box) {\n  var clen = Math.floor(Math.min(box.b - box.t, box.r - box.l, MINZOOM) / 2);\n  return 'M' + (box.l - 3.5) + ',' + (box.t - 0.5 + clen) + 'h3v' + -clen + 'h' + clen + 'v-3h-' + (clen + 3) + 'ZM' + (box.r + 3.5) + ',' + (box.t - 0.5 + clen) + 'h-3v' + -clen + 'h' + -clen + 'v-3h' + (clen + 3) + 'ZM' + (box.r + 3.5) + ',' + (box.b + 0.5 - clen) + 'h-3v' + clen + 'h' + -clen + 'v3h' + (clen + 3) + 'ZM' + (box.l - 3.5) + ',' + (box.b + 0.5 - clen) + 'h3v' + clen + 'h' + clen + 'v3h-' + (clen + 3) + 'Z';\n}\n\nfunction calcLinks(gd, groups, xaHash, yaHash, exclude) {\n  var isSubplotConstrained = false;\n  var xLinks = {};\n  var yLinks = {};\n  var xID, yID, xLinkID, yLinkID;\n  var xExclude = (exclude || {}).xaHash;\n  var yExclude = (exclude || {}).yaHash;\n\n  for (var i = 0; i < groups.length; i++) {\n    var group = groups[i]; // check if any of the x axes we're dragging is in this constraint group\n\n    for (xID in xaHash) {\n      if (group[xID]) {\n        // put the rest of these axes into xLinks, if we're not already\n        // dragging them, so we know to scale these axes automatically too\n        // to match the changes in the dragged x axes\n        for (xLinkID in group) {\n          if (!(exclude && (xExclude[xLinkID] || yExclude[xLinkID])) && !(xLinkID.charAt(0) === 'x' ? xaHash : yaHash)[xLinkID]) {\n            xLinks[xLinkID] = xID;\n          }\n        } // check if the x and y axes of THIS drag are linked\n\n\n        for (yID in yaHash) {\n          if (!(exclude && (xExclude[yID] || yExclude[yID])) && group[yID]) {\n            isSubplotConstrained = true;\n          }\n        }\n      }\n    } // now check if any of the y axes we're dragging is in this constraint group\n    // only look for outside links, as we've already checked for links within the dragger\n\n\n    for (yID in yaHash) {\n      if (group[yID]) {\n        for (yLinkID in group) {\n          if (!(exclude && (xExclude[yLinkID] || yExclude[yLinkID])) && !(yLinkID.charAt(0) === 'x' ? xaHash : yaHash)[yLinkID]) {\n            yLinks[yLinkID] = yID;\n          }\n        }\n      }\n    }\n  }\n\n  if (isSubplotConstrained) {\n    // merge xLinks and yLinks if the subplot is constrained,\n    // since we'll always apply both anyway and the two will contain\n    // duplicates\n    Lib.extendFlat(xLinks, yLinks);\n    yLinks = {};\n  }\n\n  var xaHashLinked = {};\n  var xaxesLinked = [];\n\n  for (xLinkID in xLinks) {\n    var xa = getFromId(gd, xLinkID);\n    xaxesLinked.push(xa);\n    xaHashLinked[xa._id] = xa;\n  }\n\n  var yaHashLinked = {};\n  var yaxesLinked = [];\n\n  for (yLinkID in yLinks) {\n    var ya = getFromId(gd, yLinkID);\n    yaxesLinked.push(ya);\n    yaHashLinked[ya._id] = ya;\n  }\n\n  return {\n    xaHash: xaHashLinked,\n    yaHash: yaHashLinked,\n    xaxes: xaxesLinked,\n    yaxes: yaxesLinked,\n    xLinks: xLinks,\n    yLinks: yLinks,\n    isSubplotConstrained: isSubplotConstrained\n  };\n} // still seems to be some confusion about onwheel vs onmousewheel...\n\n\nfunction attachWheelEventHandler(element, handler) {\n  if (!supportsPassive) {\n    if (element.onwheel !== undefined) element.onwheel = handler;else if (element.onmousewheel !== undefined) element.onmousewheel = handler;else if (!element.isAddedWheelEvent) {\n      element.isAddedWheelEvent = true;\n      element.addEventListener('wheel', handler, {\n        passive: false\n      });\n    }\n  } else {\n    var wheelEventName = element.onwheel !== undefined ? 'wheel' : 'mousewheel';\n\n    if (element._onwheel) {\n      element.removeEventListener(wheelEventName, element._onwheel);\n    }\n\n    element._onwheel = handler;\n    element.addEventListener(wheelEventName, handler, {\n      passive: false\n    });\n  }\n}\n\nfunction hashValues(hash) {\n  var out = [];\n\n  for (var k in hash) out.push(hash[k]);\n\n  return out;\n}\n\nmodule.exports = {\n  makeDragBox: makeDragBox,\n  makeDragger: makeDragger,\n  makeRectDragger: makeRectDragger,\n  makeZoombox: makeZoombox,\n  makeCorners: makeCorners,\n  updateZoombox: updateZoombox,\n  xyCorners: xyCorners,\n  transitionZoombox: transitionZoombox,\n  removeZoombox: removeZoombox,\n  showDoubleClickNotifier: showDoubleClickNotifier,\n  attachWheelEventHandler: attachWheelEventHandler\n};","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/plotly.js/src/plots/cartesian/dragbox.js"],"names":["d3","require","Lib","numberFormat","tinycolor","supportsPassive","Registry","strTranslate","svgTextUtils","Color","Drawing","Fx","Axes","setCursor","dragElement","helpers","selectingOrDrawing","freeMode","FROM_TL","clearGlCanvases","redrawReglTraces","Plots","getFromId","prepSelect","clearSelect","selectOnClick","scaleZoom","constants","MINDRAG","MINZOOM","SHOWZOOMOUTTIP","makeDragBox","gd","plotinfo","x","y","w","h","ns","ew","zoomlayer","_fullLayout","_zoomlayer","isMainDrag","singleEnd","length","xa0","ya0","xaHash","yaHash","xaxes","yaxes","xs","ys","pw","ph","links","matches","xActive","yActive","allFixedRanges","editX","editY","hasScatterGl","hasSplom","hasSVG","updates","scaleX","scaleY","recomputeAxisLists","xaxis","yaxis","_length","_offset","_id","overlays","i","xa","ya","hashValues","isDirectionActive","calcLinks","_axisMatchGroups","_axisConstraintGroups","spConstrained","isSubplotConstrained","fullLayout","_has","cursor","getDragCursor","dragmode","dragger","makeRectDragger","onmousedown","style","pointerEvents","dragOptions","element","prepFn","e","startX","startY","dragModePrev","dragModeNow","_invScaleX","_invScaleY","shiftKey","ctrlKey","minDrag","undefined","clickFn","clearAndResetSelect","moveFn","zoomMove","doneFn","zoomDone","zoomPrep","plotDrag","dragTail","_redrag","dragDataNow","_dragdata","updateSubplots","dx","dy","selection","numClicks","evt","_activeShapeIndex","_deactivateShape","clickmode","removeZoombox","doubleClick","indexOf","id","click","ax","end","attrStr","_name","initialText","getEndText","hAlign","vAlign","fixedrange","side","_context","showAxisRangeEntryBoxes","select","call","makeEditable","immediate","background","paper_bgcolor","text","String","fill","tickfont","color","horizontalAlign","verticalAlign","on","v","d2r","init","x0","y0","box","lum","path0","dimmed","zoomMode","zb","corners","zoomDragged","dragBBox","getBoundingClientRect","left","top","_calcInverseTransform","transformedCoords","apply3DTransform","_invTransform","l","r","t","b","_hmpixcount","_hmlumcount","plot_bgcolor","getLuminance","makeZoombox","makeCorners","dx0","dy0","_transitioningWithDuration","x1","Math","max","min","y1","abs","noZoom","attr","xyCorners","r0","r1","xCorners","yCorners","_dragged","updateZoombox","computeZoomUpdates","emit","zoomAxRanges","updateMatchedAxRange","showDoubleClickNotifier","scrollViewBox","redrawTimer","REDRAWDELAY","mainplot","_plots","zoomWheel","_scrollZoom","cartesian","_enablescrollzoom","preventDefault","stopPropagation","clearTimeout","wheelDelta","deltaY","isFinite","log","zoom","exp","gbb","draglayer","node","xfrac","clientX","width","yfrac","bottom","clientY","height","zoomWheelOneAxis","centerFraction","axRange","simpleMap","range","r2l","v0","doZoom","l2r","map","ticksAndAnnotations","setTimeout","attachWheelEventHandler","_replotting","spDx","spDy","frac","dragAxList","dz","axArray","d","otherEnd","movedAx","newLinearizedEnd","axi","_rl","dZoom","newEnd","dxySign","dxyFraction","xStart","yStart","_r","slice","xSize","ySize","axLetter","out","matchedAxes","constrainedAxes","axId","axId2","xLinks","yLinks","ax2","activeAxIds","pushActiveAxIds","axList","push","drawOne","skipTitle","redrawComponents","doubleClickConfig","concat","attrs","rangeInitial","_rangeInitial","autorange","syncOrAsync","previousPromises","viewBox","plotinfos","subplots","_subplots","sp","subplotsRegistry","splom","drag","_scene","xrng","yrng","update","xScaleFactor","yScaleFactor","editX2","editY2","xScaleFactor2","yScaleFactor2","clipDx","clipDy","getShift","n","s","getLinkedScaleFactor","scaleAndGetShift","plotDx","plotDy","clipRect","setTranslate","setScale","plot","setPointGroupScale","zoomScalePts","setTextPointsScale","zoomScaleTxt","hideOutsideRangePoints","clipOnAxisFalseTraces","scaleFactor","from","constraintoward","makeDragger","nodeName","dragClass","dragger3","ensureSingle","classed","setRect","activeVal","initialVal","diff","dig","type","ceil","LN10","pow","floor","r0Fraction","r1Fraction","linkedAxes","rangebreaks","isY","charAt","r0F","r1F","p2l","axRangeLinear0","axRangeLinearSpan","linkedR0Fraction","pix","p0","p1","d0","d1","delta","_m","nsew","toLowerCase","append","stroke","defaultLine","opacity","transitionZoombox","transition","duration","selectAll","remove","data","showTips","notifier","_","clen","groups","exclude","xID","yID","xLinkID","yLinkID","xExclude","yExclude","group","extendFlat","xaHashLinked","xaxesLinked","yaHashLinked","yaxesLinked","handler","onwheel","onmousewheel","isAddedWheelEvent","addEventListener","passive","wheelEventName","_onwheel","removeEventListener","hash","k","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar d3 = require('@plotly/d3');\nvar Lib = require('../../lib');\nvar numberFormat = Lib.numberFormat;\nvar tinycolor = require('tinycolor2');\nvar supportsPassive = require('has-passive-events');\n\nvar Registry = require('../../registry');\nvar strTranslate = Lib.strTranslate;\nvar svgTextUtils = require('../../lib/svg_text_utils');\nvar Color = require('../../components/color');\nvar Drawing = require('../../components/drawing');\nvar Fx = require('../../components/fx');\nvar Axes = require('./axes');\nvar setCursor = require('../../lib/setcursor');\nvar dragElement = require('../../components/dragelement');\nvar helpers = require('../../components/dragelement/helpers');\nvar selectingOrDrawing = helpers.selectingOrDrawing;\nvar freeMode = helpers.freeMode;\n\nvar FROM_TL = require('../../constants/alignment').FROM_TL;\nvar clearGlCanvases = require('../../lib/clear_gl_canvases');\nvar redrawReglTraces = require('../../plot_api/subroutines').redrawReglTraces;\n\nvar Plots = require('../plots');\n\nvar getFromId = require('./axis_ids').getFromId;\nvar prepSelect = require('./select').prepSelect;\nvar clearSelect = require('./select').clearSelect;\nvar selectOnClick = require('./select').selectOnClick;\nvar scaleZoom = require('./scale_zoom');\n\nvar constants = require('./constants');\nvar MINDRAG = constants.MINDRAG;\nvar MINZOOM = constants.MINZOOM;\n\n// flag for showing \"doubleclick to zoom out\" only at the beginning\nvar SHOWZOOMOUTTIP = true;\n\n// dragBox: create an element to drag one or more axis ends\n// inputs:\n//      plotinfo - which subplot are we making dragboxes on?\n//      x,y,w,h - left, top, width, height of the box\n//      ns - how does this drag the vertical axis?\n//          'n' - top only\n//          's' - bottom only\n//          'ns' - top and bottom together, difference unchanged\n//      ew - same for horizontal axis\nfunction makeDragBox(gd, plotinfo, x, y, w, h, ns, ew) {\n    // mouseDown stores ms of first mousedown event in the last\n    // `gd._context.doubleClickDelay` ms on the drag bars\n    // numClicks stores how many mousedowns have been seen\n    // within `gd._context.doubleClickDelay` so we can check for click or doubleclick events\n    // dragged stores whether a drag has occurred, so we don't have to\n    // redraw unnecessarily, ie if no move bigger than MINDRAG or MINZOOM px\n    var zoomlayer = gd._fullLayout._zoomlayer;\n    var isMainDrag = (ns + ew === 'nsew');\n    var singleEnd = (ns + ew).length === 1;\n\n    // main subplot x and y (i.e. found in plotinfo - the main ones)\n    var xa0, ya0;\n    // {ax._id: ax} hash objects\n    var xaHash, yaHash;\n    // xaHash/yaHash values (arrays)\n    var xaxes, yaxes;\n    // main axis offsets\n    var xs, ys;\n    // main axis lengths\n    var pw, ph;\n    // contains keys 'xaHash', 'yaHash', 'xaxes', and 'yaxes'\n    // which are the x/y {ax._id: ax} hash objects and their values\n    // for linked axis relative to this subplot\n    var links;\n    // similar to `links` but for matching axes\n    var matches;\n    // set to ew/ns val when active, set to '' when inactive\n    var xActive, yActive;\n    // are all axes in this subplot are fixed?\n    var allFixedRanges;\n    // do we need to edit x/y ranges?\n    var editX, editY;\n    // graph-wide optimization flags\n    var hasScatterGl, hasSplom, hasSVG;\n    // collected changes to be made to the plot by relayout at the end\n    var updates;\n    // scaling factors from css transform\n    var scaleX;\n    var scaleY;\n\n    function recomputeAxisLists() {\n        xa0 = plotinfo.xaxis;\n        ya0 = plotinfo.yaxis;\n        pw = xa0._length;\n        ph = ya0._length;\n        xs = xa0._offset;\n        ys = ya0._offset;\n\n        xaHash = {};\n        xaHash[xa0._id] = xa0;\n        yaHash = {};\n        yaHash[ya0._id] = ya0;\n\n        // if we're dragging two axes at once, also drag overlays\n        if(ns && ew) {\n            var overlays = plotinfo.overlays;\n            for(var i = 0; i < overlays.length; i++) {\n                var xa = overlays[i].xaxis;\n                xaHash[xa._id] = xa;\n                var ya = overlays[i].yaxis;\n                yaHash[ya._id] = ya;\n            }\n        }\n\n        xaxes = hashValues(xaHash);\n        yaxes = hashValues(yaHash);\n        xActive = isDirectionActive(xaxes, ew);\n        yActive = isDirectionActive(yaxes, ns);\n        allFixedRanges = !yActive && !xActive;\n\n        matches = calcLinks(gd, gd._fullLayout._axisMatchGroups, xaHash, yaHash);\n        links = calcLinks(gd, gd._fullLayout._axisConstraintGroups, xaHash, yaHash, matches);\n        var spConstrained = links.isSubplotConstrained || matches.isSubplotConstrained;\n        editX = ew || spConstrained;\n        editY = ns || spConstrained;\n\n        var fullLayout = gd._fullLayout;\n        hasScatterGl = fullLayout._has('scattergl');\n        hasSplom = fullLayout._has('splom');\n        hasSVG = fullLayout._has('svg');\n    }\n\n    recomputeAxisLists();\n\n    var cursor = getDragCursor(yActive + xActive, gd._fullLayout.dragmode, isMainDrag);\n    var dragger = makeRectDragger(plotinfo, ns + ew + 'drag', cursor, x, y, w, h);\n\n    // still need to make the element if the axes are disabled\n    // but nuke its events (except for maindrag which needs them for hover)\n    // and stop there\n    if(allFixedRanges && !isMainDrag) {\n        dragger.onmousedown = null;\n        dragger.style.pointerEvents = 'none';\n        return dragger;\n    }\n\n    var dragOptions = {\n        element: dragger,\n        gd: gd,\n        plotinfo: plotinfo\n    };\n\n    dragOptions.prepFn = function(e, startX, startY) {\n        var dragModePrev = dragOptions.dragmode;\n        var dragModeNow = gd._fullLayout.dragmode;\n        if(dragModeNow !== dragModePrev) {\n            dragOptions.dragmode = dragModeNow;\n        }\n\n        recomputeAxisLists();\n\n        scaleX = gd._fullLayout._invScaleX;\n        scaleY = gd._fullLayout._invScaleY;\n\n        if(!allFixedRanges) {\n            if(isMainDrag) {\n                // main dragger handles all drag modes, and changes\n                // to pan (or to zoom if it already is pan) on shift\n                if(e.shiftKey) {\n                    if(dragModeNow === 'pan') dragModeNow = 'zoom';\n                    else if(!selectingOrDrawing(dragModeNow)) dragModeNow = 'pan';\n                } else if(e.ctrlKey) {\n                    dragModeNow = 'pan';\n                }\n            } else {\n                // all other draggers just pan\n                dragModeNow = 'pan';\n            }\n        }\n\n        if(freeMode(dragModeNow)) dragOptions.minDrag = 1;\n        else dragOptions.minDrag = undefined;\n\n        if(selectingOrDrawing(dragModeNow)) {\n            dragOptions.xaxes = xaxes;\n            dragOptions.yaxes = yaxes;\n            // this attaches moveFn, clickFn, doneFn on dragOptions\n            prepSelect(e, startX, startY, dragOptions, dragModeNow);\n        } else {\n            dragOptions.clickFn = clickFn;\n            if(selectingOrDrawing(dragModePrev)) {\n                // TODO Fix potential bug\n                // Note: clearing / resetting selection state only happens, when user\n                // triggers at least one interaction in pan/zoom mode. Otherwise, the\n                // select/lasso outlines are deleted (in plots.js.cleanPlot) but the selection\n                // cache isn't cleared. So when the user switches back to select/lasso and\n                // 'adds to a selection' with Shift, the \"old\", seemingly removed outlines\n                // are redrawn again because the selection cache still holds their coordinates.\n                // However, this isn't easily solved, since plots.js would need\n                // to have a reference to the dragOptions object (which holds the\n                // selection cache).\n                clearAndResetSelect();\n            }\n\n            if(!allFixedRanges) {\n                if(dragModeNow === 'zoom') {\n                    dragOptions.moveFn = zoomMove;\n                    dragOptions.doneFn = zoomDone;\n\n                    // zoomMove takes care of the threshold, but we need to\n                    // minimize this so that constrained zoom boxes will flip\n                    // orientation at the right place\n                    dragOptions.minDrag = 1;\n\n                    zoomPrep(e, startX, startY);\n                } else if(dragModeNow === 'pan') {\n                    dragOptions.moveFn = plotDrag;\n                    dragOptions.doneFn = dragTail;\n                }\n            }\n        }\n\n        gd._fullLayout._redrag = function() {\n            var dragDataNow = gd._dragdata;\n\n            if(dragDataNow && dragDataNow.element === dragger) {\n                var dragModeNow = gd._fullLayout.dragmode;\n\n                if(!selectingOrDrawing(dragModeNow)) {\n                    recomputeAxisLists();\n                    updateSubplots([0, 0, pw, ph]);\n                    dragOptions.moveFn(dragDataNow.dx, dragDataNow.dy);\n                }\n\n                // TODO should we try to \"re-select\" under select/lasso modes?\n                // probably best to wait for https://github.com/plotly/plotly.js/issues/1851\n            }\n        };\n    };\n\n    function clearAndResetSelect() {\n        // clear selection polygon cache (if any)\n        dragOptions.plotinfo.selection = false;\n        // clear selection outlines\n        clearSelect(gd);\n    }\n\n    function clickFn(numClicks, evt) {\n        var gd = dragOptions.gd;\n        if(gd._fullLayout._activeShapeIndex >= 0) {\n            gd._fullLayout._deactivateShape(gd);\n            return;\n        }\n\n        var clickmode = gd._fullLayout.clickmode;\n\n        removeZoombox(gd);\n\n        if(numClicks === 2 && !singleEnd) doubleClick();\n\n        if(isMainDrag) {\n            if(clickmode.indexOf('select') > -1) {\n                selectOnClick(evt, gd, xaxes, yaxes, plotinfo.id, dragOptions);\n            }\n\n            if(clickmode.indexOf('event') > -1) {\n                Fx.click(gd, evt, plotinfo.id);\n            }\n        } else if(numClicks === 1 && singleEnd) {\n            var ax = ns ? ya0 : xa0;\n            var end = (ns === 's' || ew === 'w') ? 0 : 1;\n            var attrStr = ax._name + '.range[' + end + ']';\n            var initialText = getEndText(ax, end);\n            var hAlign = 'left';\n            var vAlign = 'middle';\n\n            if(ax.fixedrange) return;\n\n            if(ns) {\n                vAlign = (ns === 'n') ? 'top' : 'bottom';\n                if(ax.side === 'right') hAlign = 'right';\n            } else if(ew === 'e') hAlign = 'right';\n\n            if(gd._context.showAxisRangeEntryBoxes) {\n                d3.select(dragger)\n                    .call(svgTextUtils.makeEditable, {\n                        gd: gd,\n                        immediate: true,\n                        background: gd._fullLayout.paper_bgcolor,\n                        text: String(initialText),\n                        fill: ax.tickfont ? ax.tickfont.color : '#444',\n                        horizontalAlign: hAlign,\n                        verticalAlign: vAlign\n                    })\n                    .on('edit', function(text) {\n                        var v = ax.d2r(text);\n                        if(v !== undefined) {\n                            Registry.call('_guiRelayout', gd, attrStr, v);\n                        }\n                    });\n            }\n        }\n    }\n\n    dragElement.init(dragOptions);\n\n    // x/y px position at start of drag\n    var x0, y0;\n    // bbox object of the zoombox\n    var box;\n    // luminance of bg behind zoombox\n    var lum;\n    // zoombox path outline\n    var path0;\n    // is zoombox dimmed (during drag)\n    var dimmed;\n    // 'x'-only, 'y' or 'xy' zooming\n    var zoomMode;\n    // zoombox d3 selection\n    var zb;\n    // zoombox corner d3 selection\n    var corners;\n    // zoom takes over minDrag, so it also has to take over gd._dragged\n    var zoomDragged;\n\n    function zoomPrep(e, startX, startY) {\n        var dragBBox = dragger.getBoundingClientRect();\n        x0 = startX - dragBBox.left;\n        y0 = startY - dragBBox.top;\n\n        gd._fullLayout._calcInverseTransform(gd);\n        var transformedCoords = Lib.apply3DTransform(gd._fullLayout._invTransform)(x0, y0);\n        x0 = transformedCoords[0];\n        y0 = transformedCoords[1];\n\n        box = {l: x0, r: x0, w: 0, t: y0, b: y0, h: 0};\n        lum = gd._hmpixcount ?\n            (gd._hmlumcount / gd._hmpixcount) :\n            tinycolor(gd._fullLayout.plot_bgcolor).getLuminance();\n        path0 = 'M0,0H' + pw + 'V' + ph + 'H0V0';\n        dimmed = false;\n        zoomMode = 'xy';\n        zoomDragged = false;\n        zb = makeZoombox(zoomlayer, lum, xs, ys, path0);\n        corners = makeCorners(zoomlayer, xs, ys);\n    }\n\n    function zoomMove(dx0, dy0) {\n        if(gd._transitioningWithDuration) {\n            return false;\n        }\n\n        var x1 = Math.max(0, Math.min(pw, scaleX * dx0 + x0));\n        var y1 = Math.max(0, Math.min(ph, scaleY * dy0 + y0));\n        var dx = Math.abs(x1 - x0);\n        var dy = Math.abs(y1 - y0);\n\n        box.l = Math.min(x0, x1);\n        box.r = Math.max(x0, x1);\n        box.t = Math.min(y0, y1);\n        box.b = Math.max(y0, y1);\n\n        function noZoom() {\n            zoomMode = '';\n            box.r = box.l;\n            box.t = box.b;\n            corners.attr('d', 'M0,0Z');\n        }\n\n        if(links.isSubplotConstrained) {\n            if(dx > MINZOOM || dy > MINZOOM) {\n                zoomMode = 'xy';\n                if(dx / pw > dy / ph) {\n                    dy = dx * ph / pw;\n                    if(y0 > y1) box.t = y0 - dy;\n                    else box.b = y0 + dy;\n                } else {\n                    dx = dy * pw / ph;\n                    if(x0 > x1) box.l = x0 - dx;\n                    else box.r = x0 + dx;\n                }\n                corners.attr('d', xyCorners(box));\n            } else {\n                noZoom();\n            }\n        } else if(matches.isSubplotConstrained) {\n            if(dx > MINZOOM || dy > MINZOOM) {\n                zoomMode = 'xy';\n\n                var r0 = Math.min(box.l / pw, (ph - box.b) / ph);\n                var r1 = Math.max(box.r / pw, (ph - box.t) / ph);\n\n                box.l = r0 * pw;\n                box.r = r1 * pw;\n                box.b = (1 - r0) * ph;\n                box.t = (1 - r1) * ph;\n                corners.attr('d', xyCorners(box));\n            } else {\n                noZoom();\n            }\n        } else if(!yActive || dy < Math.min(Math.max(dx * 0.6, MINDRAG), MINZOOM)) {\n            // look for small drags in one direction or the other,\n            // and only drag the other axis\n\n            if(dx < MINDRAG || !xActive) {\n                noZoom();\n            } else {\n                box.t = 0;\n                box.b = ph;\n                zoomMode = 'x';\n                corners.attr('d', xCorners(box, y0));\n            }\n        } else if(!xActive || dx < Math.min(dy * 0.6, MINZOOM)) {\n            box.l = 0;\n            box.r = pw;\n            zoomMode = 'y';\n            corners.attr('d', yCorners(box, x0));\n        } else {\n            zoomMode = 'xy';\n            corners.attr('d', xyCorners(box));\n        }\n        box.w = box.r - box.l;\n        box.h = box.b - box.t;\n\n        if(zoomMode) zoomDragged = true;\n        gd._dragged = zoomDragged;\n\n        updateZoombox(zb, corners, box, path0, dimmed, lum);\n        computeZoomUpdates();\n        gd.emit('plotly_relayouting', updates);\n        dimmed = true;\n    }\n\n    function computeZoomUpdates() {\n        updates = {};\n\n        // TODO: edit linked axes in zoomAxRanges and in dragTail\n        if(zoomMode === 'xy' || zoomMode === 'x') {\n            zoomAxRanges(xaxes, box.l / pw, box.r / pw, updates, links.xaxes);\n            updateMatchedAxRange('x', updates);\n        }\n        if(zoomMode === 'xy' || zoomMode === 'y') {\n            zoomAxRanges(yaxes, (ph - box.b) / ph, (ph - box.t) / ph, updates, links.yaxes);\n            updateMatchedAxRange('y', updates);\n        }\n    }\n\n    function zoomDone() {\n        computeZoomUpdates();\n        removeZoombox(gd);\n        dragTail();\n        showDoubleClickNotifier(gd);\n    }\n\n    // scroll zoom, on all draggers except corners\n    var scrollViewBox = [0, 0, pw, ph];\n    // wait a little after scrolling before redrawing\n    var redrawTimer = null;\n    var REDRAWDELAY = constants.REDRAWDELAY;\n    var mainplot = plotinfo.mainplot ? gd._fullLayout._plots[plotinfo.mainplot] : plotinfo;\n\n    function zoomWheel(e) {\n        // deactivate mousewheel scrolling on embedded graphs\n        // devs can override this with layout._enablescrollzoom,\n        // but _ ensures this setting won't leave their page\n        if(!gd._context._scrollZoom.cartesian && !gd._fullLayout._enablescrollzoom) {\n            return;\n        }\n\n        clearAndResetSelect();\n\n        // If a transition is in progress, then disable any behavior:\n        if(gd._transitioningWithDuration) {\n            e.preventDefault();\n            e.stopPropagation();\n            return;\n        }\n\n        recomputeAxisLists();\n\n        clearTimeout(redrawTimer);\n\n        var wheelDelta = -e.deltaY;\n        if(!isFinite(wheelDelta)) wheelDelta = e.wheelDelta / 10;\n        if(!isFinite(wheelDelta)) {\n            Lib.log('Did not find wheel motion attributes: ', e);\n            return;\n        }\n\n        var zoom = Math.exp(-Math.min(Math.max(wheelDelta, -20), 20) / 200);\n        var gbb = mainplot.draglayer.select('.nsewdrag').node().getBoundingClientRect();\n        var xfrac = (e.clientX - gbb.left) / gbb.width;\n        var yfrac = (gbb.bottom - e.clientY) / gbb.height;\n        var i;\n\n        function zoomWheelOneAxis(ax, centerFraction, zoom) {\n            if(ax.fixedrange) return;\n\n            var axRange = Lib.simpleMap(ax.range, ax.r2l);\n            var v0 = axRange[0] + (axRange[1] - axRange[0]) * centerFraction;\n            function doZoom(v) { return ax.l2r(v0 + (v - v0) * zoom); }\n            ax.range = axRange.map(doZoom);\n        }\n\n        if(editX) {\n            // if we're only zooming this axis because of constraints,\n            // zoom it about the center\n            if(!ew) xfrac = 0.5;\n\n            for(i = 0; i < xaxes.length; i++) {\n                zoomWheelOneAxis(xaxes[i], xfrac, zoom);\n            }\n            updateMatchedAxRange('x');\n\n            scrollViewBox[2] *= zoom;\n            scrollViewBox[0] += scrollViewBox[2] * xfrac * (1 / zoom - 1);\n        }\n        if(editY) {\n            if(!ns) yfrac = 0.5;\n\n            for(i = 0; i < yaxes.length; i++) {\n                zoomWheelOneAxis(yaxes[i], yfrac, zoom);\n            }\n            updateMatchedAxRange('y');\n\n            scrollViewBox[3] *= zoom;\n            scrollViewBox[1] += scrollViewBox[3] * (1 - yfrac) * (1 / zoom - 1);\n        }\n\n        // viewbox redraw at first\n        updateSubplots(scrollViewBox);\n        ticksAndAnnotations();\n\n        gd.emit('plotly_relayouting', updates);\n\n        // then replot after a delay to make sure\n        // no more scrolling is coming\n        redrawTimer = setTimeout(function() {\n            if(!gd._fullLayout) return;\n            scrollViewBox = [0, 0, pw, ph];\n            dragTail();\n        }, REDRAWDELAY);\n\n        e.preventDefault();\n        return;\n    }\n\n    // everything but the corners gets wheel zoom\n    if(ns.length * ew.length !== 1) {\n        attachWheelEventHandler(dragger, zoomWheel);\n    }\n\n    // plotDrag: move the plot in response to a drag\n    function plotDrag(dx, dy) {\n        dx = dx * scaleX;\n        dy = dy * scaleY;\n        // If a transition is in progress, then disable any behavior:\n        if(gd._transitioningWithDuration) {\n            return;\n        }\n\n        // prevent axis drawing from monkeying with margins until we're done\n        gd._fullLayout._replotting = true;\n\n        if(xActive === 'ew' || yActive === 'ns') {\n            var spDx = xActive ? -dx : 0;\n            var spDy = yActive ? -dy : 0;\n            if(matches.isSubplotConstrained) {\n                if(xActive && yActive) {\n                    var frac = (dx / pw - dy / ph) / 2;\n                    dx = frac * pw;\n                    dy = -frac * ph;\n                    spDx = -dx;\n                    spDy = -dy;\n                }\n                if(yActive) {\n                    spDx = -spDy * pw / ph;\n                } else {\n                    spDy = -spDx * ph / pw;\n                }\n            }\n            if(xActive) {\n                dragAxList(xaxes, dx);\n                updateMatchedAxRange('x');\n            }\n            if(yActive) {\n                dragAxList(yaxes, dy);\n                updateMatchedAxRange('y');\n            }\n            updateSubplots([spDx, spDy, pw, ph]);\n            ticksAndAnnotations();\n            gd.emit('plotly_relayouting', updates);\n            return;\n        }\n\n        // dz: set a new value for one end (0 or 1) of an axis array axArray,\n        // and return a pixel shift for that end for the viewbox\n        // based on pixel drag distance d\n        // TODO: this makes (generally non-fatal) errors when you get\n        // near floating point limits\n        function dz(axArray, end, d) {\n            var otherEnd = 1 - end;\n            var movedAx;\n            var newLinearizedEnd;\n            for(var i = 0; i < axArray.length; i++) {\n                var axi = axArray[i];\n                if(axi.fixedrange) continue;\n                movedAx = axi;\n                newLinearizedEnd = axi._rl[otherEnd] +\n                    (axi._rl[end] - axi._rl[otherEnd]) / dZoom(d / axi._length);\n                var newEnd = axi.l2r(newLinearizedEnd);\n\n                // if l2r comes back false or undefined, it means we've dragged off\n                // the end of valid ranges - so stop.\n                if(newEnd !== false && newEnd !== undefined) axi.range[end] = newEnd;\n            }\n            return movedAx._length * (movedAx._rl[end] - newLinearizedEnd) /\n                (movedAx._rl[end] - movedAx._rl[otherEnd]);\n        }\n\n        var dxySign = ((xActive === 'w') === (yActive === 'n')) ? 1 : -1;\n        if(xActive && yActive && (links.isSubplotConstrained || matches.isSubplotConstrained)) {\n            // dragging a corner of a constrained subplot:\n            // respect the fixed corner, but harmonize dx and dy\n            var dxyFraction = (dx / pw + dxySign * dy / ph) / 2;\n            dx = dxyFraction * pw;\n            dy = dxySign * dxyFraction * ph;\n        }\n\n        var xStart, yStart;\n\n        if(xActive === 'w') dx = dz(xaxes, 0, dx);\n        else if(xActive === 'e') dx = dz(xaxes, 1, -dx);\n        else if(!xActive) dx = 0;\n\n        if(yActive === 'n') dy = dz(yaxes, 1, dy);\n        else if(yActive === 's') dy = dz(yaxes, 0, -dy);\n        else if(!yActive) dy = 0;\n\n        xStart = (xActive === 'w') ? dx : 0;\n        yStart = (yActive === 'n') ? dy : 0;\n\n        if(\n            (links.isSubplotConstrained && !matches.isSubplotConstrained) ||\n            // NW or SE on matching axes - create a symmetric zoom\n            (matches.isSubplotConstrained && xActive && yActive && dxySign > 0)\n        ) {\n            var i;\n            if(matches.isSubplotConstrained || (!xActive && yActive.length === 1)) {\n                // dragging one end of the y axis of a constrained subplot\n                // scale the other axis the same about its middle\n                for(i = 0; i < xaxes.length; i++) {\n                    xaxes[i].range = xaxes[i]._r.slice();\n                    scaleZoom(xaxes[i], 1 - dy / ph);\n                }\n                dx = dy * pw / ph;\n                xStart = dx / 2;\n            }\n            if(matches.isSubplotConstrained || (!yActive && xActive.length === 1)) {\n                for(i = 0; i < yaxes.length; i++) {\n                    yaxes[i].range = yaxes[i]._r.slice();\n                    scaleZoom(yaxes[i], 1 - dx / pw);\n                }\n                dy = dx * ph / pw;\n                yStart = dy / 2;\n            }\n        }\n\n        if(!matches.isSubplotConstrained || !yActive) {\n            updateMatchedAxRange('x');\n        }\n        if(!matches.isSubplotConstrained || !xActive) {\n            updateMatchedAxRange('y');\n        }\n        var xSize = pw - dx;\n        var ySize = ph - dy;\n        if(matches.isSubplotConstrained && !(xActive && yActive)) {\n            if(xActive) {\n                yStart = xStart ? 0 : (dx * ph / pw);\n                ySize = xSize * ph / pw;\n            } else {\n                xStart = yStart ? 0 : (dy * pw / ph);\n                xSize = ySize * pw / ph;\n            }\n        }\n        updateSubplots([xStart, yStart, xSize, ySize]);\n        ticksAndAnnotations();\n        gd.emit('plotly_relayouting', updates);\n    }\n\n    function updateMatchedAxRange(axLetter, out) {\n        var matchedAxes = matches.isSubplotConstrained ?\n            {x: yaxes, y: xaxes}[axLetter] :\n            matches[axLetter + 'axes'];\n\n        var constrainedAxes = matches.isSubplotConstrained ?\n            {x: xaxes, y: yaxes}[axLetter] :\n            [];\n\n        for(var i = 0; i < matchedAxes.length; i++) {\n            var ax = matchedAxes[i];\n            var axId = ax._id;\n            var axId2 = matches.xLinks[axId] || matches.yLinks[axId];\n            var ax2 = constrainedAxes[0] || xaHash[axId2] || yaHash[axId2];\n\n            if(ax2) {\n                if(out) {\n                    // zoombox case - don't mutate 'range', just add keys in 'updates'\n                    out[ax._name + '.range[0]'] = out[ax2._name + '.range[0]'];\n                    out[ax._name + '.range[1]'] = out[ax2._name + '.range[1]'];\n                } else {\n                    ax.range = ax2.range.slice();\n                }\n            }\n        }\n    }\n\n    // Draw ticks and annotations (and other components) when ranges change.\n    // Also records the ranges that have changed for use by update at the end.\n    function ticksAndAnnotations() {\n        var activeAxIds = [];\n        var i;\n\n        function pushActiveAxIds(axList) {\n            for(i = 0; i < axList.length; i++) {\n                if(!axList[i].fixedrange) activeAxIds.push(axList[i]._id);\n            }\n        }\n\n        if(editX) {\n            pushActiveAxIds(xaxes);\n            pushActiveAxIds(links.xaxes);\n            pushActiveAxIds(matches.xaxes);\n        }\n        if(editY) {\n            pushActiveAxIds(yaxes);\n            pushActiveAxIds(links.yaxes);\n            pushActiveAxIds(matches.yaxes);\n        }\n\n        updates = {};\n        for(i = 0; i < activeAxIds.length; i++) {\n            var axId = activeAxIds[i];\n            var ax = getFromId(gd, axId);\n            Axes.drawOne(gd, ax, {skipTitle: true});\n            updates[ax._name + '.range[0]'] = ax.range[0];\n            updates[ax._name + '.range[1]'] = ax.range[1];\n        }\n\n        Axes.redrawComponents(gd, activeAxIds);\n    }\n\n    function doubleClick() {\n        if(gd._transitioningWithDuration) return;\n\n        var doubleClickConfig = gd._context.doubleClick;\n\n        var axList = [];\n        if(xActive) axList = axList.concat(xaxes);\n        if(yActive) axList = axList.concat(yaxes);\n        if(matches.xaxes) axList = axList.concat(matches.xaxes);\n        if(matches.yaxes) axList = axList.concat(matches.yaxes);\n\n        var attrs = {};\n        var ax, i, rangeInitial;\n\n        // For reset+autosize mode:\n        // If *any* of the main axes is not at its initial range\n        // (or autoranged, if we have no initial range, to match the logic in\n        // doubleClickConfig === 'reset' below), we reset.\n        // If they are *all* at their initial ranges, then we autosize.\n        if(doubleClickConfig === 'reset+autosize') {\n            doubleClickConfig = 'autosize';\n\n            for(i = 0; i < axList.length; i++) {\n                ax = axList[i];\n                if((ax._rangeInitial && (\n                        ax.range[0] !== ax._rangeInitial[0] ||\n                        ax.range[1] !== ax._rangeInitial[1]\n                    )) ||\n                    (!ax._rangeInitial && !ax.autorange)\n                ) {\n                    doubleClickConfig = 'reset';\n                    break;\n                }\n            }\n        }\n\n        if(doubleClickConfig === 'autosize') {\n            // don't set the linked axes here, so relayout marks them as shrinkable\n            // and we autosize just to the requested axis/axes\n            for(i = 0; i < axList.length; i++) {\n                ax = axList[i];\n                if(!ax.fixedrange) attrs[ax._name + '.autorange'] = true;\n            }\n        } else if(doubleClickConfig === 'reset') {\n            // when we're resetting, reset all linked axes too, so we get back\n            // to the fully-auto-with-constraints situation\n            if(xActive || links.isSubplotConstrained) axList = axList.concat(links.xaxes);\n            if(yActive && !links.isSubplotConstrained) axList = axList.concat(links.yaxes);\n\n            if(links.isSubplotConstrained) {\n                if(!xActive) axList = axList.concat(xaxes);\n                else if(!yActive) axList = axList.concat(yaxes);\n            }\n\n            for(i = 0; i < axList.length; i++) {\n                ax = axList[i];\n\n                if(!ax.fixedrange) {\n                    if(!ax._rangeInitial) {\n                        attrs[ax._name + '.autorange'] = true;\n                    } else {\n                        rangeInitial = ax._rangeInitial;\n                        attrs[ax._name + '.range[0]'] = rangeInitial[0];\n                        attrs[ax._name + '.range[1]'] = rangeInitial[1];\n                    }\n                }\n            }\n        }\n\n        gd.emit('plotly_doubleclick', null);\n        Registry.call('_guiRelayout', gd, attrs);\n    }\n\n    // dragTail - finish a drag event with a redraw\n    function dragTail() {\n        // put the subplot viewboxes back to default (Because we're going to)\n        // be repositioning the data in the relayout. But DON'T call\n        // ticksAndAnnotations again - it's unnecessary and would overwrite `updates`\n        updateSubplots([0, 0, pw, ph]);\n\n        // since we may have been redrawing some things during the drag, we may have\n        // accumulated MathJax promises - wait for them before we relayout.\n        Lib.syncOrAsync([\n            Plots.previousPromises,\n            function() {\n                gd._fullLayout._replotting = false;\n                Registry.call('_guiRelayout', gd, updates);\n            }\n        ], gd);\n    }\n\n    // updateSubplots - find all plot viewboxes that should be\n    // affected by this drag, and update them. look for all plots\n    // sharing an affected axis (including the one being dragged),\n    // includes also scattergl and splom logic.\n    function updateSubplots(viewBox) {\n        var fullLayout = gd._fullLayout;\n        var plotinfos = fullLayout._plots;\n        var subplots = fullLayout._subplots.cartesian;\n        var i, sp, xa, ya;\n\n        if(hasSplom) {\n            Registry.subplotsRegistry.splom.drag(gd);\n        }\n\n        if(hasScatterGl) {\n            for(i = 0; i < subplots.length; i++) {\n                sp = plotinfos[subplots[i]];\n                xa = sp.xaxis;\n                ya = sp.yaxis;\n\n                if(sp._scene) {\n                    var xrng = Lib.simpleMap(xa.range, xa.r2l);\n                    var yrng = Lib.simpleMap(ya.range, ya.r2l);\n                    sp._scene.update({range: [xrng[0], yrng[0], xrng[1], yrng[1]]});\n                }\n            }\n        }\n\n        if(hasSplom || hasScatterGl) {\n            clearGlCanvases(gd);\n            redrawReglTraces(gd);\n        }\n\n        if(hasSVG) {\n            var xScaleFactor = viewBox[2] / xa0._length;\n            var yScaleFactor = viewBox[3] / ya0._length;\n\n            for(i = 0; i < subplots.length; i++) {\n                sp = plotinfos[subplots[i]];\n                xa = sp.xaxis;\n                ya = sp.yaxis;\n\n                var editX2 = (editX || matches.isSubplotConstrained) && !xa.fixedrange && xaHash[xa._id];\n                var editY2 = (editY || matches.isSubplotConstrained) && !ya.fixedrange && yaHash[ya._id];\n\n                var xScaleFactor2, yScaleFactor2;\n                var clipDx, clipDy;\n\n                if(editX2) {\n                    xScaleFactor2 = xScaleFactor;\n                    clipDx = ew || matches.isSubplotConstrained ? viewBox[0] : getShift(xa, xScaleFactor2);\n                } else if(matches.xaHash[xa._id]) {\n                    xScaleFactor2 = xScaleFactor;\n                    clipDx = viewBox[0] * xa._length / xa0._length;\n                } else if(matches.yaHash[xa._id]) {\n                    xScaleFactor2 = yScaleFactor;\n                    clipDx = yActive === 'ns' ?\n                        -viewBox[1] * xa._length / ya0._length :\n                        getShift(xa, xScaleFactor2, {n: 'top', s: 'bottom'}[yActive]);\n                } else {\n                    xScaleFactor2 = getLinkedScaleFactor(xa, xScaleFactor, yScaleFactor);\n                    clipDx = scaleAndGetShift(xa, xScaleFactor2);\n                }\n\n                if(editY2) {\n                    yScaleFactor2 = yScaleFactor;\n                    clipDy = ns || matches.isSubplotConstrained ? viewBox[1] : getShift(ya, yScaleFactor2);\n                } else if(matches.yaHash[ya._id]) {\n                    yScaleFactor2 = yScaleFactor;\n                    clipDy = viewBox[1] * ya._length / ya0._length;\n                } else if(matches.xaHash[ya._id]) {\n                    yScaleFactor2 = xScaleFactor;\n                    clipDy = xActive === 'ew' ?\n                        -viewBox[0] * ya._length / xa0._length :\n                        getShift(ya, yScaleFactor2, {e: 'right', w: 'left'}[xActive]);\n                } else {\n                    yScaleFactor2 = getLinkedScaleFactor(ya, xScaleFactor, yScaleFactor);\n                    clipDy = scaleAndGetShift(ya, yScaleFactor2);\n                }\n\n                // don't scale at all if neither axis is scalable here\n                if(!xScaleFactor2 && !yScaleFactor2) {\n                    continue;\n                }\n\n                // but if only one is, reset the other axis scaling\n                if(!xScaleFactor2) xScaleFactor2 = 1;\n                if(!yScaleFactor2) yScaleFactor2 = 1;\n\n                var plotDx = xa._offset - clipDx / xScaleFactor2;\n                var plotDy = ya._offset - clipDy / yScaleFactor2;\n\n                // TODO could be more efficient here:\n                // setTranslate and setScale do a lot of extra work\n                // when working independently, should perhaps combine\n                // them into a single routine.\n                sp.clipRect\n                    .call(Drawing.setTranslate, clipDx, clipDy)\n                    .call(Drawing.setScale, xScaleFactor2, yScaleFactor2);\n\n                sp.plot\n                    .call(Drawing.setTranslate, plotDx, plotDy)\n                    .call(Drawing.setScale, 1 / xScaleFactor2, 1 / yScaleFactor2);\n\n                // apply an inverse scale to individual points to counteract\n                // the scale of the trace group.\n                // apply only when scale changes, as adjusting the scale of\n                // all the points can be expansive.\n                if(xScaleFactor2 !== sp.xScaleFactor || yScaleFactor2 !== sp.yScaleFactor) {\n                    Drawing.setPointGroupScale(sp.zoomScalePts, xScaleFactor2, yScaleFactor2);\n                    Drawing.setTextPointsScale(sp.zoomScaleTxt, xScaleFactor2, yScaleFactor2);\n                }\n\n                Drawing.hideOutsideRangePoints(sp.clipOnAxisFalseTraces, sp);\n\n                // update x/y scaleFactor stash\n                sp.xScaleFactor = xScaleFactor2;\n                sp.yScaleFactor = yScaleFactor2;\n            }\n        }\n    }\n\n    // Find the appropriate scaling for this axis, if it's linked to the\n    // dragged axes by constraints. 0 is special, it means this axis shouldn't\n    // ever be scaled (will be converted to 1 if the other axis is scaled)\n    function getLinkedScaleFactor(ax, xScaleFactor, yScaleFactor) {\n        if(ax.fixedrange) return 0;\n\n        if(editX && links.xaHash[ax._id]) {\n            return xScaleFactor;\n        }\n        if(editY && (links.isSubplotConstrained ? links.xaHash : links.yaHash)[ax._id]) {\n            return yScaleFactor;\n        }\n        return 0;\n    }\n\n    function scaleAndGetShift(ax, scaleFactor) {\n        if(scaleFactor) {\n            ax.range = ax._r.slice();\n            scaleZoom(ax, scaleFactor);\n            return getShift(ax, scaleFactor);\n        }\n        return 0;\n    }\n\n    function getShift(ax, scaleFactor, from) {\n        return ax._length * (1 - scaleFactor) * FROM_TL[from || ax.constraintoward || 'middle'];\n    }\n\n    return dragger;\n}\n\nfunction makeDragger(plotinfo, nodeName, dragClass, cursor) {\n    var dragger3 = Lib.ensureSingle(plotinfo.draglayer, nodeName, dragClass, function(s) {\n        s.classed('drag', true)\n            .style({fill: 'transparent', 'stroke-width': 0})\n            .attr('data-subplot', plotinfo.id);\n    });\n\n    dragger3.call(setCursor, cursor);\n\n    return dragger3.node();\n}\n\nfunction makeRectDragger(plotinfo, dragClass, cursor, x, y, w, h) {\n    var dragger = makeDragger(plotinfo, 'rect', dragClass, cursor);\n    d3.select(dragger).call(Drawing.setRect, x, y, w, h);\n    return dragger;\n}\n\nfunction isDirectionActive(axList, activeVal) {\n    for(var i = 0; i < axList.length; i++) {\n        if(!axList[i].fixedrange) return activeVal;\n    }\n    return '';\n}\n\nfunction getEndText(ax, end) {\n    var initialVal = ax.range[end];\n    var diff = Math.abs(initialVal - ax.range[1 - end]);\n    var dig;\n\n    // TODO: this should basically be ax.r2d but we're doing extra\n    // rounding here... can we clean up at all?\n    if(ax.type === 'date') {\n        return initialVal;\n    } else if(ax.type === 'log') {\n        dig = Math.ceil(Math.max(0, -Math.log(diff) / Math.LN10)) + 3;\n        return numberFormat('.' + dig + 'g')(Math.pow(10, initialVal));\n    } else { // linear numeric (or category... but just show numbers here)\n        dig = Math.floor(Math.log(Math.abs(initialVal)) / Math.LN10) -\n            Math.floor(Math.log(diff) / Math.LN10) + 4;\n        return numberFormat('.' + String(dig) + 'g')(initialVal);\n    }\n}\n\nfunction zoomAxRanges(axList, r0Fraction, r1Fraction, updates, linkedAxes) {\n    for(var i = 0; i < axList.length; i++) {\n        var axi = axList[i];\n        if(axi.fixedrange) continue;\n\n        if(axi.rangebreaks) {\n            var isY = axi._id.charAt(0) === 'y';\n            var r0F = isY ? (1 - r0Fraction) : r0Fraction;\n            var r1F = isY ? (1 - r1Fraction) : r1Fraction;\n\n            updates[axi._name + '.range[0]'] = axi.l2r(axi.p2l(r0F * axi._length));\n            updates[axi._name + '.range[1]'] = axi.l2r(axi.p2l(r1F * axi._length));\n        } else {\n            var axRangeLinear0 = axi._rl[0];\n            var axRangeLinearSpan = axi._rl[1] - axRangeLinear0;\n            updates[axi._name + '.range[0]'] = axi.l2r(axRangeLinear0 + axRangeLinearSpan * r0Fraction);\n            updates[axi._name + '.range[1]'] = axi.l2r(axRangeLinear0 + axRangeLinearSpan * r1Fraction);\n        }\n    }\n\n    // zoom linked axes about their centers\n    if(linkedAxes && linkedAxes.length) {\n        var linkedR0Fraction = (r0Fraction + (1 - r1Fraction)) / 2;\n        zoomAxRanges(linkedAxes, linkedR0Fraction, 1 - linkedR0Fraction, updates, []);\n    }\n}\n\nfunction dragAxList(axList, pix) {\n    for(var i = 0; i < axList.length; i++) {\n        var axi = axList[i];\n        if(!axi.fixedrange) {\n            if(axi.rangebreaks) {\n                var p0 = 0;\n                var p1 = axi._length;\n                var d0 = axi.p2l(p0 + pix) - axi.p2l(p0);\n                var d1 = axi.p2l(p1 + pix) - axi.p2l(p1);\n                var delta = (d0 + d1) / 2;\n\n                axi.range = [\n                    axi.l2r(axi._rl[0] - delta),\n                    axi.l2r(axi._rl[1] - delta)\n                ];\n            } else {\n                axi.range = [\n                    axi.l2r(axi._rl[0] - pix / axi._m),\n                    axi.l2r(axi._rl[1] - pix / axi._m)\n                ];\n            }\n        }\n    }\n}\n\n// common transform for dragging one end of an axis\n// d>0 is compressing scale (cursor is over the plot,\n//  the axis end should move with the cursor)\n// d<0 is expanding (cursor is off the plot, axis end moves\n//  nonlinearly so you can expand far)\nfunction dZoom(d) {\n    return 1 - ((d >= 0) ? Math.min(d, 0.9) :\n        1 / (1 / Math.max(d, -0.3) + 3.222));\n}\n\nfunction getDragCursor(nsew, dragmode, isMainDrag) {\n    if(!nsew) return 'pointer';\n    if(nsew === 'nsew') {\n        // in this case here, clear cursor and\n        // use the cursor style set on <g .draglayer>\n        if(isMainDrag) return '';\n        if(dragmode === 'pan') return 'move';\n        return 'crosshair';\n    }\n    return nsew.toLowerCase() + '-resize';\n}\n\nfunction makeZoombox(zoomlayer, lum, xs, ys, path0) {\n    return zoomlayer.append('path')\n        .attr('class', 'zoombox')\n        .style({\n            'fill': lum > 0.2 ? 'rgba(0,0,0,0)' : 'rgba(255,255,255,0)',\n            'stroke-width': 0\n        })\n        .attr('transform', strTranslate(xs, ys))\n        .attr('d', path0 + 'Z');\n}\n\nfunction makeCorners(zoomlayer, xs, ys) {\n    return zoomlayer.append('path')\n        .attr('class', 'zoombox-corners')\n        .style({\n            fill: Color.background,\n            stroke: Color.defaultLine,\n            'stroke-width': 1,\n            opacity: 0\n        })\n        .attr('transform', strTranslate(xs, ys))\n        .attr('d', 'M0,0Z');\n}\n\nfunction updateZoombox(zb, corners, box, path0, dimmed, lum) {\n    zb.attr('d',\n        path0 + 'M' + (box.l) + ',' + (box.t) + 'v' + (box.h) +\n        'h' + (box.w) + 'v-' + (box.h) + 'h-' + (box.w) + 'Z');\n    transitionZoombox(zb, corners, dimmed, lum);\n}\n\nfunction transitionZoombox(zb, corners, dimmed, lum) {\n    if(!dimmed) {\n        zb.transition()\n            .style('fill', lum > 0.2 ? 'rgba(0,0,0,0.4)' :\n                'rgba(255,255,255,0.3)')\n            .duration(200);\n        corners.transition()\n            .style('opacity', 1)\n            .duration(200);\n    }\n}\n\nfunction removeZoombox(gd) {\n    d3.select(gd)\n        .selectAll('.zoombox,.js-zoombox-backdrop,.js-zoombox-menu,.zoombox-corners')\n        .remove();\n}\n\nfunction showDoubleClickNotifier(gd) {\n    if(SHOWZOOMOUTTIP && gd.data && gd._context.showTips) {\n        Lib.notifier(Lib._(gd, 'Double-click to zoom back out'), 'long');\n        SHOWZOOMOUTTIP = false;\n    }\n}\n\nfunction xCorners(box, y0) {\n    return 'M' +\n        (box.l - 0.5) + ',' + (y0 - MINZOOM - 0.5) +\n        'h-3v' + (2 * MINZOOM + 1) + 'h3ZM' +\n        (box.r + 0.5) + ',' + (y0 - MINZOOM - 0.5) +\n        'h3v' + (2 * MINZOOM + 1) + 'h-3Z';\n}\n\nfunction yCorners(box, x0) {\n    return 'M' +\n        (x0 - MINZOOM - 0.5) + ',' + (box.t - 0.5) +\n        'v-3h' + (2 * MINZOOM + 1) + 'v3ZM' +\n        (x0 - MINZOOM - 0.5) + ',' + (box.b + 0.5) +\n        'v3h' + (2 * MINZOOM + 1) + 'v-3Z';\n}\n\nfunction xyCorners(box) {\n    var clen = Math.floor(Math.min(box.b - box.t, box.r - box.l, MINZOOM) / 2);\n    return 'M' +\n        (box.l - 3.5) + ',' + (box.t - 0.5 + clen) + 'h3v' + (-clen) +\n            'h' + clen + 'v-3h-' + (clen + 3) + 'ZM' +\n        (box.r + 3.5) + ',' + (box.t - 0.5 + clen) + 'h-3v' + (-clen) +\n            'h' + (-clen) + 'v-3h' + (clen + 3) + 'ZM' +\n        (box.r + 3.5) + ',' + (box.b + 0.5 - clen) + 'h-3v' + clen +\n            'h' + (-clen) + 'v3h' + (clen + 3) + 'ZM' +\n        (box.l - 3.5) + ',' + (box.b + 0.5 - clen) + 'h3v' + clen +\n            'h' + clen + 'v3h-' + (clen + 3) + 'Z';\n}\n\nfunction calcLinks(gd, groups, xaHash, yaHash, exclude) {\n    var isSubplotConstrained = false;\n    var xLinks = {};\n    var yLinks = {};\n    var xID, yID, xLinkID, yLinkID;\n    var xExclude = (exclude || {}).xaHash;\n    var yExclude = (exclude || {}).yaHash;\n\n    for(var i = 0; i < groups.length; i++) {\n        var group = groups[i];\n        // check if any of the x axes we're dragging is in this constraint group\n        for(xID in xaHash) {\n            if(group[xID]) {\n                // put the rest of these axes into xLinks, if we're not already\n                // dragging them, so we know to scale these axes automatically too\n                // to match the changes in the dragged x axes\n                for(xLinkID in group) {\n                    if(\n                        !(exclude && (xExclude[xLinkID] || yExclude[xLinkID])) &&\n                        !(xLinkID.charAt(0) === 'x' ? xaHash : yaHash)[xLinkID]\n                    ) {\n                        xLinks[xLinkID] = xID;\n                    }\n                }\n\n                // check if the x and y axes of THIS drag are linked\n                for(yID in yaHash) {\n                    if(\n                        !(exclude && (xExclude[yID] || yExclude[yID])) &&\n                        group[yID]\n                    ) {\n                        isSubplotConstrained = true;\n                    }\n                }\n            }\n        }\n\n        // now check if any of the y axes we're dragging is in this constraint group\n        // only look for outside links, as we've already checked for links within the dragger\n        for(yID in yaHash) {\n            if(group[yID]) {\n                for(yLinkID in group) {\n                    if(\n                        !(exclude && (xExclude[yLinkID] || yExclude[yLinkID])) &&\n                        !(yLinkID.charAt(0) === 'x' ? xaHash : yaHash)[yLinkID]\n                    ) {\n                        yLinks[yLinkID] = yID;\n                    }\n                }\n            }\n        }\n    }\n\n    if(isSubplotConstrained) {\n        // merge xLinks and yLinks if the subplot is constrained,\n        // since we'll always apply both anyway and the two will contain\n        // duplicates\n        Lib.extendFlat(xLinks, yLinks);\n        yLinks = {};\n    }\n\n    var xaHashLinked = {};\n    var xaxesLinked = [];\n    for(xLinkID in xLinks) {\n        var xa = getFromId(gd, xLinkID);\n        xaxesLinked.push(xa);\n        xaHashLinked[xa._id] = xa;\n    }\n\n    var yaHashLinked = {};\n    var yaxesLinked = [];\n    for(yLinkID in yLinks) {\n        var ya = getFromId(gd, yLinkID);\n        yaxesLinked.push(ya);\n        yaHashLinked[ya._id] = ya;\n    }\n\n    return {\n        xaHash: xaHashLinked,\n        yaHash: yaHashLinked,\n        xaxes: xaxesLinked,\n        yaxes: yaxesLinked,\n        xLinks: xLinks,\n        yLinks: yLinks,\n        isSubplotConstrained: isSubplotConstrained\n    };\n}\n\n// still seems to be some confusion about onwheel vs onmousewheel...\nfunction attachWheelEventHandler(element, handler) {\n    if(!supportsPassive) {\n        if(element.onwheel !== undefined) element.onwheel = handler;\n        else if(element.onmousewheel !== undefined) element.onmousewheel = handler;\n        else if(!element.isAddedWheelEvent) {\n            element.isAddedWheelEvent = true;\n            element.addEventListener('wheel', handler, {passive: false});\n        }\n    } else {\n        var wheelEventName = element.onwheel !== undefined ? 'wheel' : 'mousewheel';\n\n        if(element._onwheel) {\n            element.removeEventListener(wheelEventName, element._onwheel);\n        }\n        element._onwheel = handler;\n\n        element.addEventListener(wheelEventName, handler, {passive: false});\n    }\n}\n\nfunction hashValues(hash) {\n    var out = [];\n    for(var k in hash) out.push(hash[k]);\n    return out;\n}\n\nmodule.exports = {\n    makeDragBox: makeDragBox,\n\n    makeDragger: makeDragger,\n    makeRectDragger: makeRectDragger,\n    makeZoombox: makeZoombox,\n    makeCorners: makeCorners,\n\n    updateZoombox: updateZoombox,\n    xyCorners: xyCorners,\n    transitionZoombox: transitionZoombox,\n    removeZoombox: removeZoombox,\n    showDoubleClickNotifier: showDoubleClickNotifier,\n\n    attachWheelEventHandler: attachWheelEventHandler\n};\n"]},"metadata":{},"sourceType":"script"}