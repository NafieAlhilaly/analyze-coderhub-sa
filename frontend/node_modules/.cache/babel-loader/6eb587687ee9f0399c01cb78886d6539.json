{"ast":null,"code":"'use strict';\n\nvar Lib = require('../lib');\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar helpers = require('./helpers');\n\nfunction svgToImg(opts) {\n  var ev = opts.emitter || new EventEmitter();\n  var promise = new Promise(function (resolve, reject) {\n    var Image = window.Image;\n    var svg = opts.svg;\n    var format = opts.format || 'png'; // IE only support svg\n\n    if (Lib.isIE() && format !== 'svg') {\n      var ieSvgError = new Error(helpers.MSG_IE_BAD_FORMAT);\n      reject(ieSvgError); // eventually remove the ev\n      //  in favor of promises\n\n      if (!opts.promise) {\n        return ev.emit('error', ieSvgError);\n      } else {\n        return promise;\n      }\n    }\n\n    var canvas = opts.canvas;\n    var scale = opts.scale || 1;\n    var w0 = opts.width || 300;\n    var h0 = opts.height || 150;\n    var w1 = scale * w0;\n    var h1 = scale * h0;\n    var ctx = canvas.getContext('2d');\n    var img = new Image();\n    var svgBlob, url;\n\n    if (format === 'svg' || Lib.isSafari()) {\n      url = helpers.encodeSVG(svg);\n    } else {\n      svgBlob = helpers.createBlob(svg, 'svg');\n      url = helpers.createObjectURL(svgBlob);\n    }\n\n    canvas.width = w1;\n    canvas.height = h1;\n\n    img.onload = function () {\n      var imgData;\n      svgBlob = null;\n      helpers.revokeObjectURL(url); // don't need to draw to canvas if svg\n      //  save some time and also avoid failure on IE\n\n      if (format !== 'svg') {\n        ctx.drawImage(img, 0, 0, w1, h1);\n      }\n\n      switch (format) {\n        case 'jpeg':\n          imgData = canvas.toDataURL('image/jpeg');\n          break;\n\n        case 'png':\n          imgData = canvas.toDataURL('image/png');\n          break;\n\n        case 'webp':\n          imgData = canvas.toDataURL('image/webp');\n          break;\n\n        case 'svg':\n          imgData = url;\n          break;\n\n        default:\n          var errorMsg = 'Image format is not jpeg, png, svg or webp.';\n          reject(new Error(errorMsg)); // eventually remove the ev\n          //  in favor of promises\n\n          if (!opts.promise) {\n            return ev.emit('error', errorMsg);\n          }\n\n      }\n\n      resolve(imgData); // eventually remove the ev\n      //  in favor of promises\n\n      if (!opts.promise) {\n        ev.emit('success', imgData);\n      }\n    };\n\n    img.onerror = function (err) {\n      svgBlob = null;\n      helpers.revokeObjectURL(url);\n      reject(err); // eventually remove the ev\n      //  in favor of promises\n\n      if (!opts.promise) {\n        return ev.emit('error', err);\n      }\n    };\n\n    img.src = url;\n  }); // temporary for backward compatibility\n  //  move to only Promise in 2.0.0\n  //  and eliminate the EventEmitter\n\n  if (opts.promise) {\n    return promise;\n  }\n\n  return ev;\n}\n\nmodule.exports = svgToImg;","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/plotly.js/src/snapshot/svgtoimg.js"],"names":["Lib","require","EventEmitter","helpers","svgToImg","opts","ev","emitter","promise","Promise","resolve","reject","Image","window","svg","format","isIE","ieSvgError","Error","MSG_IE_BAD_FORMAT","emit","canvas","scale","w0","width","h0","height","w1","h1","ctx","getContext","img","svgBlob","url","isSafari","encodeSVG","createBlob","createObjectURL","onload","imgData","revokeObjectURL","drawImage","toDataURL","errorMsg","onerror","err","src","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar Lib = require('../lib');\nvar EventEmitter = require('events').EventEmitter;\n\nvar helpers = require('./helpers');\n\nfunction svgToImg(opts) {\n    var ev = opts.emitter || new EventEmitter();\n\n    var promise = new Promise(function(resolve, reject) {\n        var Image = window.Image;\n        var svg = opts.svg;\n        var format = opts.format || 'png';\n\n        // IE only support svg\n        if(Lib.isIE() && format !== 'svg') {\n            var ieSvgError = new Error(helpers.MSG_IE_BAD_FORMAT);\n            reject(ieSvgError);\n            // eventually remove the ev\n            //  in favor of promises\n            if(!opts.promise) {\n                return ev.emit('error', ieSvgError);\n            } else {\n                return promise;\n            }\n        }\n\n        var canvas = opts.canvas;\n        var scale = opts.scale || 1;\n        var w0 = opts.width || 300;\n        var h0 = opts.height || 150;\n        var w1 = scale * w0;\n        var h1 = scale * h0;\n\n        var ctx = canvas.getContext('2d');\n        var img = new Image();\n        var svgBlob, url;\n\n        if(format === 'svg' || Lib.isSafari()) {\n            url = helpers.encodeSVG(svg);\n        } else {\n            svgBlob = helpers.createBlob(svg, 'svg');\n            url = helpers.createObjectURL(svgBlob);\n        }\n\n        canvas.width = w1;\n        canvas.height = h1;\n\n        img.onload = function() {\n            var imgData;\n\n            svgBlob = null;\n            helpers.revokeObjectURL(url);\n\n            // don't need to draw to canvas if svg\n            //  save some time and also avoid failure on IE\n            if(format !== 'svg') {\n                ctx.drawImage(img, 0, 0, w1, h1);\n            }\n\n            switch(format) {\n                case 'jpeg':\n                    imgData = canvas.toDataURL('image/jpeg');\n                    break;\n                case 'png':\n                    imgData = canvas.toDataURL('image/png');\n                    break;\n                case 'webp':\n                    imgData = canvas.toDataURL('image/webp');\n                    break;\n                case 'svg':\n                    imgData = url;\n                    break;\n                default:\n                    var errorMsg = 'Image format is not jpeg, png, svg or webp.';\n                    reject(new Error(errorMsg));\n                    // eventually remove the ev\n                    //  in favor of promises\n                    if(!opts.promise) {\n                        return ev.emit('error', errorMsg);\n                    }\n            }\n            resolve(imgData);\n            // eventually remove the ev\n            //  in favor of promises\n            if(!opts.promise) {\n                ev.emit('success', imgData);\n            }\n        };\n\n        img.onerror = function(err) {\n            svgBlob = null;\n            helpers.revokeObjectURL(url);\n\n            reject(err);\n            // eventually remove the ev\n            //  in favor of promises\n            if(!opts.promise) {\n                return ev.emit('error', err);\n            }\n        };\n\n        img.src = url;\n    });\n\n    // temporary for backward compatibility\n    //  move to only Promise in 2.0.0\n    //  and eliminate the EventEmitter\n    if(opts.promise) {\n        return promise;\n    }\n\n    return ev;\n}\n\nmodule.exports = svgToImg;\n"]},"metadata":{},"sourceType":"script"}