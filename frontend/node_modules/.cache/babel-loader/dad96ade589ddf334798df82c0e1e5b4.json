{"ast":null,"code":"\"use strict\";\n\nvar vectorizeText = require(\"vectorize-text\");\n\nmodule.exports = getGlyph;\nvar GLYPH_CACHE = {};\n\nfunction getGlyph(symbol, font, pixelRatio) {\n  var fontCache = GLYPH_CACHE[font];\n\n  if (!fontCache) {\n    fontCache = GLYPH_CACHE[font] = {};\n  }\n\n  if (symbol in fontCache) {\n    return fontCache[symbol];\n  }\n\n  var config = {\n    textAlign: \"center\",\n    textBaseline: \"middle\",\n    lineHeight: 1.0,\n    font: font,\n    lineSpacing: 1.25,\n    styletags: {\n      breaklines: true,\n      bolds: true,\n      italics: true,\n      subscripts: true,\n      superscripts: true\n    }\n  }; //Get line and triangle meshes for glyph\n\n  config.triangles = true;\n  var triSymbol = vectorizeText(symbol, config);\n  config.triangles = false;\n  var lineSymbol = vectorizeText(symbol, config);\n  var i, j;\n\n  if (pixelRatio && pixelRatio !== 1) {\n    for (i = 0; i < triSymbol.positions.length; ++i) {\n      for (j = 0; j < triSymbol.positions[i].length; ++j) {\n        triSymbol.positions[i][j] /= pixelRatio;\n      }\n    }\n\n    for (i = 0; i < lineSymbol.positions.length; ++i) {\n      for (j = 0; j < lineSymbol.positions[i].length; ++j) {\n        lineSymbol.positions[i][j] /= pixelRatio;\n      }\n    }\n  } //Calculate bounding box\n\n\n  var bounds = [[Infinity, Infinity], [-Infinity, -Infinity]];\n  var n = lineSymbol.positions.length;\n\n  for (i = 0; i < n; ++i) {\n    var p = lineSymbol.positions[i];\n\n    for (j = 0; j < 2; ++j) {\n      bounds[0][j] = Math.min(bounds[0][j], p[j]);\n      bounds[1][j] = Math.max(bounds[1][j], p[j]);\n    }\n  } //Save cached symbol\n\n\n  return fontCache[symbol] = [triSymbol, lineSymbol, bounds];\n}","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/gl-scatter3d/lib/glyphs.js"],"names":["vectorizeText","require","module","exports","getGlyph","GLYPH_CACHE","symbol","font","pixelRatio","fontCache","config","textAlign","textBaseline","lineHeight","lineSpacing","styletags","breaklines","bolds","italics","subscripts","superscripts","triangles","triSymbol","lineSymbol","i","j","positions","length","bounds","Infinity","n","p","Math","min","max"],"mappings":"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","sourcesContent":["\"use strict\"\n\nvar vectorizeText = require(\"vectorize-text\")\n\nmodule.exports = getGlyph\n\nvar GLYPH_CACHE = {}\n\nfunction getGlyph(symbol, font, pixelRatio) {\n  var fontCache = GLYPH_CACHE[font]\n  if(!fontCache) {\n    fontCache = GLYPH_CACHE[font] = {}\n  }\n  if(symbol in fontCache) {\n    return fontCache[symbol]\n  }\n\n  var config = {\n    textAlign: \"center\",\n    textBaseline: \"middle\",\n    lineHeight: 1.0,\n    font: font,\n    lineSpacing: 1.25,\n    styletags: {\n      breaklines:true,\n      bolds: true,\n      italics: true,\n      subscripts:true,\n      superscripts:true\n    }\n  }\n\n  //Get line and triangle meshes for glyph\n  config.triangles = true\n  var triSymbol = vectorizeText(symbol, config)\n  config.triangles = false\n  var lineSymbol = vectorizeText(symbol, config)\n\n  var i, j\n\n  if(pixelRatio && pixelRatio !== 1) {\n    for(i = 0; i < triSymbol.positions.length; ++i){\n      for(j = 0; j < triSymbol.positions[i].length; ++j){\n        triSymbol.positions[i][j] /= pixelRatio;\n      }\n    }\n\n    for(i = 0; i < lineSymbol.positions.length; ++i){\n      for(j = 0; j < lineSymbol.positions[i].length; ++j){\n        lineSymbol.positions[i][j] /= pixelRatio;\n      }\n    }\n  }\n\n  //Calculate bounding box\n  var bounds = [[Infinity,Infinity], [-Infinity,-Infinity]]\n  var n = lineSymbol.positions.length\n  for(i = 0; i < n; ++i) {\n    var p = lineSymbol.positions[i]\n    for(j=0; j<2; ++j) {\n      bounds[0][j] = Math.min(bounds[0][j], p[j])\n      bounds[1][j] = Math.max(bounds[1][j], p[j])\n    }\n  }\n\n  //Save cached symbol\n  return fontCache[symbol] = [triSymbol, lineSymbol, bounds]\n}"]},"metadata":{},"sourceType":"script"}