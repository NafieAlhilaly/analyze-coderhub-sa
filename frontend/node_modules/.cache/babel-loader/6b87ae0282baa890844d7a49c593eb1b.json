{"ast":null,"code":"'use strict';\n\nvar d3 = require('@plotly/d3');\n\nvar Lib = require('../../lib');\n\nvar Drawing = require('../../components/drawing');\n\nvar BADNUM = require('../../constants/numerical').BADNUM;\n\nvar barPlot = require('../bar/plot');\n\nvar clearMinTextSize = require('../bar/uniform_text').clearMinTextSize;\n\nmodule.exports = function plot(gd, plotinfo, cdModule, traceLayer) {\n  var fullLayout = gd._fullLayout;\n  clearMinTextSize('waterfall', fullLayout);\n  barPlot.plot(gd, plotinfo, cdModule, traceLayer, {\n    mode: fullLayout.waterfallmode,\n    norm: fullLayout.waterfallmode,\n    gap: fullLayout.waterfallgap,\n    groupgap: fullLayout.waterfallgroupgap\n  });\n  plotConnectors(gd, plotinfo, cdModule, traceLayer);\n};\n\nfunction plotConnectors(gd, plotinfo, cdModule, traceLayer) {\n  var xa = plotinfo.xaxis;\n  var ya = plotinfo.yaxis;\n  Lib.makeTraceGroups(traceLayer, cdModule, 'trace bars').each(function (cd) {\n    var plotGroup = d3.select(this);\n    var trace = cd[0].trace;\n    var group = Lib.ensureSingle(plotGroup, 'g', 'lines');\n\n    if (!trace.connector || !trace.connector.visible) {\n      group.remove();\n      return;\n    }\n\n    var isHorizontal = trace.orientation === 'h';\n    var mode = trace.connector.mode;\n    var connectors = group.selectAll('g.line').data(Lib.identity);\n    connectors.enter().append('g').classed('line', true);\n    connectors.exit().remove();\n    var len = connectors.size();\n    connectors.each(function (di, i) {\n      // don't draw lines between nulls\n      if (i !== len - 1 && !di.cNext) return;\n      var xy = getXY(di, xa, ya, isHorizontal);\n      var x = xy[0];\n      var y = xy[1];\n      var shape = '';\n\n      if (x[0] !== BADNUM && y[0] !== BADNUM && x[1] !== BADNUM && y[1] !== BADNUM) {\n        if (mode === 'spanning') {\n          if (!di.isSum && i > 0) {\n            if (isHorizontal) {\n              shape += 'M' + x[0] + ',' + y[1] + 'V' + y[0];\n            } else {\n              shape += 'M' + x[1] + ',' + y[0] + 'H' + x[0];\n            }\n          }\n        }\n\n        if (mode !== 'between') {\n          if (di.isSum || i < len - 1) {\n            if (isHorizontal) {\n              shape += 'M' + x[1] + ',' + y[0] + 'V' + y[1];\n            } else {\n              shape += 'M' + x[0] + ',' + y[1] + 'H' + x[1];\n            }\n          }\n        }\n\n        if (x[2] !== BADNUM && y[2] !== BADNUM) {\n          if (isHorizontal) {\n            shape += 'M' + x[1] + ',' + y[1] + 'V' + y[2];\n          } else {\n            shape += 'M' + x[1] + ',' + y[1] + 'H' + x[2];\n          }\n        }\n      }\n\n      if (shape === '') shape = 'M0,0Z';\n      Lib.ensureSingle(d3.select(this), 'path').attr('d', shape).call(Drawing.setClipUrl, plotinfo.layerClipId, gd);\n    });\n  });\n}\n\nfunction getXY(di, xa, ya, isHorizontal) {\n  var s = [];\n  var p = [];\n  var sAxis = isHorizontal ? xa : ya;\n  var pAxis = isHorizontal ? ya : xa;\n  s[0] = sAxis.c2p(di.s0, true);\n  p[0] = pAxis.c2p(di.p0, true);\n  s[1] = sAxis.c2p(di.s1, true);\n  p[1] = pAxis.c2p(di.p1, true);\n  s[2] = sAxis.c2p(di.nextS0, true);\n  p[2] = pAxis.c2p(di.nextP0, true);\n  return isHorizontal ? [s, p] : [p, s];\n}","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/plotly.js/src/traces/waterfall/plot.js"],"names":["d3","require","Lib","Drawing","BADNUM","barPlot","clearMinTextSize","module","exports","plot","gd","plotinfo","cdModule","traceLayer","fullLayout","_fullLayout","mode","waterfallmode","norm","gap","waterfallgap","groupgap","waterfallgroupgap","plotConnectors","xa","xaxis","ya","yaxis","makeTraceGroups","each","cd","plotGroup","select","trace","group","ensureSingle","connector","visible","remove","isHorizontal","orientation","connectors","selectAll","data","identity","enter","append","classed","exit","len","size","di","i","cNext","xy","getXY","x","y","shape","isSum","attr","call","setClipUrl","layerClipId","s","p","sAxis","pAxis","c2p","s0","p0","s1","p1","nextS0","nextP0"],"mappings":"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","sourcesContent":["'use strict';\n\nvar d3 = require('@plotly/d3');\nvar Lib = require('../../lib');\nvar Drawing = require('../../components/drawing');\nvar BADNUM = require('../../constants/numerical').BADNUM;\nvar barPlot = require('../bar/plot');\nvar clearMinTextSize = require('../bar/uniform_text').clearMinTextSize;\n\nmodule.exports = function plot(gd, plotinfo, cdModule, traceLayer) {\n    var fullLayout = gd._fullLayout;\n\n    clearMinTextSize('waterfall', fullLayout);\n\n    barPlot.plot(gd, plotinfo, cdModule, traceLayer, {\n        mode: fullLayout.waterfallmode,\n        norm: fullLayout.waterfallmode,\n        gap: fullLayout.waterfallgap,\n        groupgap: fullLayout.waterfallgroupgap\n    });\n\n    plotConnectors(gd, plotinfo, cdModule, traceLayer);\n};\n\nfunction plotConnectors(gd, plotinfo, cdModule, traceLayer) {\n    var xa = plotinfo.xaxis;\n    var ya = plotinfo.yaxis;\n\n    Lib.makeTraceGroups(traceLayer, cdModule, 'trace bars').each(function(cd) {\n        var plotGroup = d3.select(this);\n        var trace = cd[0].trace;\n\n        var group = Lib.ensureSingle(plotGroup, 'g', 'lines');\n\n        if(!trace.connector || !trace.connector.visible) {\n            group.remove();\n            return;\n        }\n\n        var isHorizontal = (trace.orientation === 'h');\n        var mode = trace.connector.mode;\n\n        var connectors = group.selectAll('g.line').data(Lib.identity);\n\n        connectors.enter().append('g')\n            .classed('line', true);\n\n        connectors.exit().remove();\n\n        var len = connectors.size();\n\n        connectors.each(function(di, i) {\n            // don't draw lines between nulls\n            if(i !== len - 1 && !di.cNext) return;\n\n            var xy = getXY(di, xa, ya, isHorizontal);\n            var x = xy[0];\n            var y = xy[1];\n\n            var shape = '';\n\n            if(\n                x[0] !== BADNUM && y[0] !== BADNUM &&\n                x[1] !== BADNUM && y[1] !== BADNUM\n            ) {\n                if(mode === 'spanning') {\n                    if(!di.isSum && i > 0) {\n                        if(isHorizontal) {\n                            shape += 'M' + x[0] + ',' + y[1] + 'V' + y[0];\n                        } else {\n                            shape += 'M' + x[1] + ',' + y[0] + 'H' + x[0];\n                        }\n                    }\n                }\n\n                if(mode !== 'between') {\n                    if(di.isSum || i < len - 1) {\n                        if(isHorizontal) {\n                            shape += 'M' + x[1] + ',' + y[0] + 'V' + y[1];\n                        } else {\n                            shape += 'M' + x[0] + ',' + y[1] + 'H' + x[1];\n                        }\n                    }\n                }\n\n                if(x[2] !== BADNUM && y[2] !== BADNUM) {\n                    if(isHorizontal) {\n                        shape += 'M' + x[1] + ',' + y[1] + 'V' + y[2];\n                    } else {\n                        shape += 'M' + x[1] + ',' + y[1] + 'H' + x[2];\n                    }\n                }\n            }\n\n            if(shape === '') shape = 'M0,0Z';\n\n            Lib.ensureSingle(d3.select(this), 'path')\n                .attr('d', shape)\n                .call(Drawing.setClipUrl, plotinfo.layerClipId, gd);\n        });\n    });\n}\n\nfunction getXY(di, xa, ya, isHorizontal) {\n    var s = [];\n    var p = [];\n\n    var sAxis = isHorizontal ? xa : ya;\n    var pAxis = isHorizontal ? ya : xa;\n\n    s[0] = sAxis.c2p(di.s0, true);\n    p[0] = pAxis.c2p(di.p0, true);\n\n    s[1] = sAxis.c2p(di.s1, true);\n    p[1] = pAxis.c2p(di.p1, true);\n\n    s[2] = sAxis.c2p(di.nextS0, true);\n    p[2] = pAxis.c2p(di.nextP0, true);\n\n    return isHorizontal ? [s, p] : [p, s];\n}\n"]},"metadata":{},"sourceType":"script"}