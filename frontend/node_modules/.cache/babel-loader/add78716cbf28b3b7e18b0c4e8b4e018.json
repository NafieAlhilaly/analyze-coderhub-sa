{"ast":null,"code":"'use strict';\n\nvar isNumeric = require('fast-isnumeric');\n\nvar handleLabelDefaults = require('./label_defaults');\n\nvar Color = require('../../components/color');\n\nvar addOpacity = Color.addOpacity;\nvar opacity = Color.opacity;\n\nvar filterOps = require('../../constants/filter_ops');\n\nvar CONSTRAINT_REDUCTION = filterOps.CONSTRAINT_REDUCTION;\nvar COMPARISON_OPS2 = filterOps.COMPARISON_OPS2;\n\nmodule.exports = function handleConstraintDefaults(traceIn, traceOut, coerce, layout, defaultColor, opts) {\n  var contours = traceOut.contours;\n  var showLines, lineColor, fillColor;\n  var operation = coerce('contours.operation');\n  contours._operation = CONSTRAINT_REDUCTION[operation];\n  handleConstraintValueDefaults(coerce, contours);\n\n  if (operation === '=') {\n    showLines = contours.showlines = true;\n  } else {\n    showLines = coerce('contours.showlines');\n    fillColor = coerce('fillcolor', addOpacity((traceIn.line || {}).color || defaultColor, 0.5));\n  }\n\n  if (showLines) {\n    var lineDfltColor = fillColor && opacity(fillColor) ? addOpacity(traceOut.fillcolor, 1) : defaultColor;\n    lineColor = coerce('line.color', lineDfltColor);\n    coerce('line.width', 2);\n    coerce('line.dash');\n  }\n\n  coerce('line.smoothing');\n  handleLabelDefaults(coerce, layout, lineColor, opts);\n};\n\nfunction handleConstraintValueDefaults(coerce, contours) {\n  var zvalue;\n\n  if (COMPARISON_OPS2.indexOf(contours.operation) === -1) {\n    // Requires an array of two numbers:\n    coerce('contours.value', [0, 1]);\n\n    if (!Array.isArray(contours.value)) {\n      if (isNumeric(contours.value)) {\n        zvalue = parseFloat(contours.value);\n        contours.value = [zvalue, zvalue + 1];\n      }\n    } else if (contours.value.length > 2) {\n      contours.value = contours.value.slice(2);\n    } else if (contours.length === 0) {\n      contours.value = [0, 1];\n    } else if (contours.length < 2) {\n      zvalue = parseFloat(contours.value[0]);\n      contours.value = [zvalue, zvalue + 1];\n    } else {\n      contours.value = [parseFloat(contours.value[0]), parseFloat(contours.value[1])];\n    }\n  } else {\n    // Requires a single scalar:\n    coerce('contours.value', 0);\n\n    if (!isNumeric(contours.value)) {\n      if (Array.isArray(contours.value)) {\n        contours.value = parseFloat(contours.value[0]);\n      } else {\n        contours.value = 0;\n      }\n    }\n  }\n}","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/plotly.js/src/traces/contour/constraint_defaults.js"],"names":["isNumeric","require","handleLabelDefaults","Color","addOpacity","opacity","filterOps","CONSTRAINT_REDUCTION","COMPARISON_OPS2","module","exports","handleConstraintDefaults","traceIn","traceOut","coerce","layout","defaultColor","opts","contours","showLines","lineColor","fillColor","operation","_operation","handleConstraintValueDefaults","showlines","line","color","lineDfltColor","fillcolor","zvalue","indexOf","Array","isArray","value","parseFloat","length","slice"],"mappings":"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","sourcesContent":["'use strict';\nvar isNumeric = require('fast-isnumeric');\n\nvar handleLabelDefaults = require('./label_defaults');\n\nvar Color = require('../../components/color');\nvar addOpacity = Color.addOpacity;\nvar opacity = Color.opacity;\n\nvar filterOps = require('../../constants/filter_ops');\nvar CONSTRAINT_REDUCTION = filterOps.CONSTRAINT_REDUCTION;\nvar COMPARISON_OPS2 = filterOps.COMPARISON_OPS2;\n\nmodule.exports = function handleConstraintDefaults(traceIn, traceOut, coerce, layout, defaultColor, opts) {\n    var contours = traceOut.contours;\n    var showLines, lineColor, fillColor;\n\n    var operation = coerce('contours.operation');\n    contours._operation = CONSTRAINT_REDUCTION[operation];\n\n    handleConstraintValueDefaults(coerce, contours);\n\n    if(operation === '=') {\n        showLines = contours.showlines = true;\n    } else {\n        showLines = coerce('contours.showlines');\n        fillColor = coerce('fillcolor', addOpacity(\n            (traceIn.line || {}).color || defaultColor, 0.5\n        ));\n    }\n\n    if(showLines) {\n        var lineDfltColor = fillColor && opacity(fillColor) ?\n            addOpacity(traceOut.fillcolor, 1) :\n            defaultColor;\n        lineColor = coerce('line.color', lineDfltColor);\n        coerce('line.width', 2);\n        coerce('line.dash');\n    }\n\n    coerce('line.smoothing');\n\n    handleLabelDefaults(coerce, layout, lineColor, opts);\n};\n\nfunction handleConstraintValueDefaults(coerce, contours) {\n    var zvalue;\n\n    if(COMPARISON_OPS2.indexOf(contours.operation) === -1) {\n        // Requires an array of two numbers:\n        coerce('contours.value', [0, 1]);\n\n        if(!Array.isArray(contours.value)) {\n            if(isNumeric(contours.value)) {\n                zvalue = parseFloat(contours.value);\n                contours.value = [zvalue, zvalue + 1];\n            }\n        } else if(contours.value.length > 2) {\n            contours.value = contours.value.slice(2);\n        } else if(contours.length === 0) {\n            contours.value = [0, 1];\n        } else if(contours.length < 2) {\n            zvalue = parseFloat(contours.value[0]);\n            contours.value = [zvalue, zvalue + 1];\n        } else {\n            contours.value = [\n                parseFloat(contours.value[0]),\n                parseFloat(contours.value[1])\n            ];\n        }\n    } else {\n        // Requires a single scalar:\n        coerce('contours.value', 0);\n\n        if(!isNumeric(contours.value)) {\n            if(Array.isArray(contours.value)) {\n                contours.value = parseFloat(contours.value[0]);\n            } else {\n                contours.value = 0;\n            }\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"script"}