{"ast":null,"code":"'use strict';\n\nmodule.exports = normalize;\n\nfunction normalize(arr, dim) {\n  if (!arr || arr.length == null) throw Error('Argument should be an array');\n  if (dim == null) dim = 1;else dim = Math.floor(dim);\n  var bounds = Array(dim * 2);\n\n  for (var offset = 0; offset < dim; offset++) {\n    var max = -Infinity,\n        min = Infinity,\n        i = offset,\n        l = arr.length;\n\n    for (; i < l; i += dim) {\n      if (arr[i] > max) max = arr[i];\n      if (arr[i] < min) min = arr[i];\n    }\n\n    bounds[offset] = min;\n    bounds[dim + offset] = max;\n  }\n\n  return bounds;\n}","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/array-bounds/index.js"],"names":["module","exports","normalize","arr","dim","length","Error","Math","floor","bounds","Array","offset","max","Infinity","min","i","l"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,SAAjB;;AAEA,SAASA,SAAT,CAAoBC,GAApB,EAAyBC,GAAzB,EAA8B;AAC7B,MAAI,CAACD,GAAD,IAAQA,GAAG,CAACE,MAAJ,IAAc,IAA1B,EAAgC,MAAMC,KAAK,CAAC,6BAAD,CAAX;AAEhC,MAAIF,GAAG,IAAI,IAAX,EAAiBA,GAAG,GAAG,CAAN,CAAjB,KACKA,GAAG,GAAGG,IAAI,CAACC,KAAL,CAAWJ,GAAX,CAAN;AAEL,MAAIK,MAAM,GAAGC,KAAK,CAACN,GAAG,GAAG,CAAP,CAAlB;;AAEA,OAAK,IAAIO,MAAM,GAAG,CAAlB,EAAqBA,MAAM,GAAGP,GAA9B,EAAmCO,MAAM,EAAzC,EAA6C;AAC5C,QAAIC,GAAG,GAAG,CAACC,QAAX;AAAA,QAAqBC,GAAG,GAAGD,QAA3B;AAAA,QAAqCE,CAAC,GAAGJ,MAAzC;AAAA,QAAiDK,CAAC,GAAGb,GAAG,CAACE,MAAzD;;AAEA,WAAOU,CAAC,GAAGC,CAAX,EAAcD,CAAC,IAAEX,GAAjB,EAAsB;AACrB,UAAID,GAAG,CAACY,CAAD,CAAH,GAASH,GAAb,EAAkBA,GAAG,GAAGT,GAAG,CAACY,CAAD,CAAT;AAClB,UAAIZ,GAAG,CAACY,CAAD,CAAH,GAASD,GAAb,EAAkBA,GAAG,GAAGX,GAAG,CAACY,CAAD,CAAT;AAClB;;AAEDN,IAAAA,MAAM,CAACE,MAAD,CAAN,GAAiBG,GAAjB;AACAL,IAAAA,MAAM,CAACL,GAAG,GAAGO,MAAP,CAAN,GAAuBC,GAAvB;AACA;;AAED,SAAOH,MAAP;AACA","sourcesContent":["'use strict'\r\n\r\nmodule.exports = normalize;\r\n\r\nfunction normalize (arr, dim) {\r\n\tif (!arr || arr.length == null) throw Error('Argument should be an array')\r\n\r\n\tif (dim == null) dim = 1\r\n\telse dim = Math.floor(dim)\r\n\r\n\tvar bounds = Array(dim * 2)\r\n\r\n\tfor (var offset = 0; offset < dim; offset++) {\r\n\t\tvar max = -Infinity, min = Infinity, i = offset, l = arr.length;\r\n\r\n\t\tfor (; i < l; i+=dim) {\r\n\t\t\tif (arr[i] > max) max = arr[i];\r\n\t\t\tif (arr[i] < min) min = arr[i];\r\n\t\t}\r\n\r\n\t\tbounds[offset] = min\r\n\t\tbounds[dim + offset] = max\r\n\t}\r\n\r\n\treturn bounds;\r\n}\r\n"]},"metadata":{},"sourceType":"script"}