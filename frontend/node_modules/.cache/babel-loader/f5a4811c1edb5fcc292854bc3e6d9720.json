{"ast":null,"code":"/*\n * World Calendars\n * https://github.com/alexcjohnson/world-calendars\n *\n * Batch-converted from kbwood/calendars\n * Many thanks to Keith Wood and all of the contributors to the original project!\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/* http://keith-wood.name/calendars.html\n  Calendars for jQuery v2.0.2.\n  Written by Keith Wood (wood.keith{at}optusnet.com.au) August 2009.\n  Available under the MIT (http://keith-wood.name/licence.html) license. \n  Please attribute the author if you use it. */\nvar assign = require('object-assign');\n\nfunction Calendars() {\n  this.regionalOptions = [];\n  this.regionalOptions[''] = {\n    invalidCalendar: 'Calendar {0} not found',\n    invalidDate: 'Invalid {0} date',\n    invalidMonth: 'Invalid {0} month',\n    invalidYear: 'Invalid {0} year',\n    differentCalendars: 'Cannot mix {0} and {1} dates'\n  };\n  this.local = this.regionalOptions[''];\n  this.calendars = {};\n  this._localCals = {};\n}\n/** Create the calendars plugin.\n    <p>Provides support for various world calendars in a consistent manner.</p>\n     @class Calendars\n    @example _exports.instance('julian').newDate(2014, 12, 25) */\n\n\nassign(Calendars.prototype, {\n  /** Obtain a calendar implementation and localisation.\n      @memberof Calendars\n      @param [name='gregorian'] {string} The name of the calendar, e.g. 'gregorian', 'persian', 'islamic'.\n      @param [language=''] {string} The language code to use for localisation (default is English).\n      @return {Calendar} The calendar and localisation.\n      @throws Error if calendar not found. */\n  instance: function instance(name, language) {\n    name = (name || 'gregorian').toLowerCase();\n    language = language || '';\n    var cal = this._localCals[name + '-' + language];\n\n    if (!cal && this.calendars[name]) {\n      cal = new this.calendars[name](language);\n      this._localCals[name + '-' + language] = cal;\n    }\n\n    if (!cal) {\n      throw (this.local.invalidCalendar || this.regionalOptions[''].invalidCalendar).replace(/\\{0\\}/, name);\n    }\n\n    return cal;\n  },\n\n  /** Create a new date - for today if no other parameters given.\n      @memberof Calendars\n      @param year {CDate|number} The date to copy or the year for the date.\n      @param [month] {number} The month for the date.\n      @param [day] {number} The day for the date.\n      @param [calendar='gregorian'] {BaseCalendar|string} The underlying calendar or the name of the calendar.\n      @param [language=''] {string} The language to use for localisation (default English).\n      @return {CDate} The new date.\n      @throws Error if an invalid date. */\n  newDate: function newDate(year, month, day, calendar, language) {\n    calendar = (year != null && year.year ? year.calendar() : typeof calendar === 'string' ? this.instance(calendar, language) : calendar) || this.instance();\n    return calendar.newDate(year, month, day);\n  },\n\n  /** A simple digit substitution function for localising numbers via the Calendar digits option.\n      @member Calendars\n      @param digits {string[]} The substitute digits, for 0 through 9.\n      @return {function} The substitution function. */\n  substituteDigits: function substituteDigits(digits) {\n    return function (value) {\n      return (value + '').replace(/[0-9]/g, function (digit) {\n        return digits[digit];\n      });\n    };\n  },\n\n  /** Digit substitution function for localising Chinese style numbers via the Calendar digits option.\n      @member Calendars\n      @param digits {string[]} The substitute digits, for 0 through 9.\n      @param powers {string[]} The characters denoting powers of 10, i.e. 1, 10, 100, 1000.\n      @return {function} The substitution function. */\n  substituteChineseDigits: function substituteChineseDigits(digits, powers) {\n    return function (value) {\n      var localNumber = '';\n      var power = 0;\n\n      while (value > 0) {\n        var units = value % 10;\n        localNumber = (units === 0 ? '' : digits[units] + powers[power]) + localNumber;\n        power++;\n        value = Math.floor(value / 10);\n      }\n\n      if (localNumber.indexOf(digits[1] + powers[1]) === 0) {\n        localNumber = localNumber.substr(1);\n      }\n\n      return localNumber || digits[0];\n    };\n  }\n});\n/** Generic date, based on a particular calendar.\n    @class CDate\n    @param calendar {BaseCalendar} The underlying calendar implementation.\n    @param year {number} The year for this date.\n    @param month {number} The month for this date.\n    @param day {number} The day for this date.\n    @return {CDate} The date object.\n    @throws Error if an invalid date. */\n\nfunction CDate(calendar, year, month, day) {\n  this._calendar = calendar;\n  this._year = year;\n  this._month = month;\n  this._day = day;\n\n  if (this._calendar._validateLevel === 0 && !this._calendar.isValid(this._year, this._month, this._day)) {\n    throw (_exports.local.invalidDate || _exports.regionalOptions[''].invalidDate).replace(/\\{0\\}/, this._calendar.local.name);\n  }\n}\n/** Pad a numeric value with leading zeroes.\n    @private\n    @param value {number} The number to format.\n    @param length {number} The minimum length.\n    @return {string} The formatted number. */\n\n\nfunction pad(value, length) {\n  value = '' + value;\n  return '000000'.substring(0, length - value.length) + value;\n}\n\nassign(CDate.prototype, {\n  /** Create a new date.\n      @memberof CDate\n      @param [year] {CDate|number} The date to copy or the year for the date (default this date).\n      @param [month] {number} The month for the date.\n      @param [day] {number} The day for the date.\n      @return {CDate} The new date.\n      @throws Error if an invalid date. */\n  newDate: function newDate(year, month, day) {\n    return this._calendar.newDate(year == null ? this : year, month, day);\n  },\n\n  /** Set or retrieve the year for this date.\n      @memberof CDate\n      @param [year] {number} The year for the date.\n      @return {number|CDate} The date's year (if no parameter) or the updated date.\n      @throws Error if an invalid date. */\n  year: function year(_year) {\n    return arguments.length === 0 ? this._year : this.set(_year, 'y');\n  },\n\n  /** Set or retrieve the month for this date.\n      @memberof CDate\n      @param [month] {number} The month for the date.\n      @return {number|CDate} The date's month (if no parameter) or the updated date.\n      @throws Error if an invalid date. */\n  month: function month(_month) {\n    return arguments.length === 0 ? this._month : this.set(_month, 'm');\n  },\n\n  /** Set or retrieve the day for this date.\n      @memberof CDate\n      @param [day] {number} The day for the date.\n      @return {number|CData} The date's day (if no parameter) or the updated date.\n      @throws Error if an invalid date. */\n  day: function day(_day) {\n    return arguments.length === 0 ? this._day : this.set(_day, 'd');\n  },\n\n  /** Set new values for this date.\n      @memberof CDate\n      @param year {number} The year for the date.\n      @param month {number} The month for the date.\n      @param day {number} The day for the date.\n      @return {CDate} The updated date.\n      @throws Error if an invalid date. */\n  date: function date(year, month, day) {\n    if (!this._calendar.isValid(year, month, day)) {\n      throw (_exports.local.invalidDate || _exports.regionalOptions[''].invalidDate).replace(/\\{0\\}/, this._calendar.local.name);\n    }\n\n    this._year = year;\n    this._month = month;\n    this._day = day;\n    return this;\n  },\n\n  /** Determine whether this date is in a leap year.\n      @memberof CDate\n      @return {boolean} <code>true</code> if this is a leap year, <code>false</code> if not. */\n  leapYear: function leapYear() {\n    return this._calendar.leapYear(this);\n  },\n\n  /** Retrieve the epoch designator for this date, e.g. BCE or CE.\n      @memberof CDate\n      @return {string} The current epoch. */\n  epoch: function epoch() {\n    return this._calendar.epoch(this);\n  },\n\n  /** Format the year, if not a simple sequential number.\n      @memberof CDate\n      @return {string} The formatted year. */\n  formatYear: function formatYear() {\n    return this._calendar.formatYear(this);\n  },\n\n  /** Retrieve the month of the year for this date,\n      i.e. the month's position within a numbered year.\n      @memberof CDate\n      @return {number} The month of the year: <code>minMonth</code> to months per year. */\n  monthOfYear: function monthOfYear() {\n    return this._calendar.monthOfYear(this);\n  },\n\n  /** Retrieve the week of the year for this date.\n      @memberof CDate\n      @return {number} The week of the year: 1 to weeks per year. */\n  weekOfYear: function weekOfYear() {\n    return this._calendar.weekOfYear(this);\n  },\n\n  /** Retrieve the number of days in the year for this date.\n      @memberof CDate\n      @return {number} The number of days in this year. */\n  daysInYear: function daysInYear() {\n    return this._calendar.daysInYear(this);\n  },\n\n  /** Retrieve the day of the year for this date.\n      @memberof CDate\n      @return {number} The day of the year: 1 to days per year. */\n  dayOfYear: function dayOfYear() {\n    return this._calendar.dayOfYear(this);\n  },\n\n  /** Retrieve the number of days in the month for this date.\n      @memberof CDate\n      @return {number} The number of days. */\n  daysInMonth: function daysInMonth() {\n    return this._calendar.daysInMonth(this);\n  },\n\n  /** Retrieve the day of the week for this date.\n      @memberof CDate\n      @return {number} The day of the week: 0 to number of days - 1. */\n  dayOfWeek: function dayOfWeek() {\n    return this._calendar.dayOfWeek(this);\n  },\n\n  /** Determine whether this date is a week day.\n      @memberof CDate\n      @return {boolean} <code>true</code> if a week day, <code>false</code> if not. */\n  weekDay: function weekDay() {\n    return this._calendar.weekDay(this);\n  },\n\n  /** Retrieve additional information about this date.\n      @memberof CDate\n      @return {object} Additional information - contents depends on calendar. */\n  extraInfo: function extraInfo() {\n    return this._calendar.extraInfo(this);\n  },\n\n  /** Add period(s) to a date.\n      @memberof CDate\n      @param offset {number} The number of periods to adjust by.\n      @param period {string} One of 'y' for year, 'm' for month, 'w' for week, 'd' for day.\n      @return {CDate} The updated date. */\n  add: function add(offset, period) {\n    return this._calendar.add(this, offset, period);\n  },\n\n  /** Set a portion of the date.\n      @memberof CDate\n      @param value {number} The new value for the period.\n      @param period {string} One of 'y' for year, 'm' for month, 'd' for day.\n      @return {CDate} The updated date.\n      @throws Error if not a valid date. */\n  set: function set(value, period) {\n    return this._calendar.set(this, value, period);\n  },\n\n  /** Compare this date to another date.\n      @memberof CDate\n      @param date {CDate} The other date.\n      @return {number} -1 if this date is before the other date,\n              0 if they are equal, or +1 if this date is after the other date. */\n  compareTo: function compareTo(date) {\n    if (this._calendar.name !== date._calendar.name) {\n      throw (_exports.local.differentCalendars || _exports.regionalOptions[''].differentCalendars).replace(/\\{0\\}/, this._calendar.local.name).replace(/\\{1\\}/, date._calendar.local.name);\n    }\n\n    var c = this._year !== date._year ? this._year - date._year : this._month !== date._month ? this.monthOfYear() - date.monthOfYear() : this._day - date._day;\n    return c === 0 ? 0 : c < 0 ? -1 : +1;\n  },\n\n  /** Retrieve the calendar backing this date.\n      @memberof CDate\n      @return {BaseCalendar} The calendar implementation. */\n  calendar: function calendar() {\n    return this._calendar;\n  },\n\n  /** Retrieve the Julian date equivalent for this date,\n      i.e. days since January 1, 4713 BCE Greenwich noon.\n      @memberof CDate\n      @return {number} The equivalent Julian date. */\n  toJD: function toJD() {\n    return this._calendar.toJD(this);\n  },\n\n  /** Create a new date from a Julian date.\n      @memberof CDate\n      @param jd {number} The Julian date to convert.\n      @return {CDate} The equivalent date. */\n  fromJD: function fromJD(jd) {\n    return this._calendar.fromJD(jd);\n  },\n\n  /** Convert this date to a standard (Gregorian) JavaScript Date.\n      @memberof CDate\n      @return {Date} The equivalent JavaScript date. */\n  toJSDate: function toJSDate() {\n    return this._calendar.toJSDate(this);\n  },\n\n  /** Create a new date from a standard (Gregorian) JavaScript Date.\n      @memberof CDate\n      @param jsd {Date} The JavaScript date to convert.\n      @return {CDate} The equivalent date. */\n  fromJSDate: function fromJSDate(jsd) {\n    return this._calendar.fromJSDate(jsd);\n  },\n\n  /** Convert to a string for display.\n      @memberof CDate\n      @return {string} This date as a string. */\n  toString: function toString() {\n    return (this.year() < 0 ? '-' : '') + pad(Math.abs(this.year()), 4) + '-' + pad(this.month(), 2) + '-' + pad(this.day(), 2);\n  }\n});\n/** Basic functionality for all calendars.\n    Other calendars should extend this:\n    <pre>OtherCalendar.prototype = new BaseCalendar;</pre>\n    @class BaseCalendar */\n\nfunction BaseCalendar() {\n  this.shortYearCutoff = '+10';\n}\n\nassign(BaseCalendar.prototype, {\n  _validateLevel: 0,\n  // \"Stack\" to turn validation on/off\n\n  /** Create a new date within this calendar - today if no parameters given.\n      @memberof BaseCalendar\n      @param year {CDate|number} The date to duplicate or the year for the date.\n      @param [month] {number} The month for the date.\n      @param [day] {number} The day for the date.\n      @return {CDate} The new date.\n      @throws Error if not a valid date or a different calendar used. */\n  newDate: function newDate(year, month, day) {\n    if (year == null) {\n      return this.today();\n    }\n\n    if (year.year) {\n      this._validate(year, month, day, _exports.local.invalidDate || _exports.regionalOptions[''].invalidDate);\n\n      day = year.day();\n      month = year.month();\n      year = year.year();\n    }\n\n    return new CDate(this, year, month, day);\n  },\n\n  /** Create a new date for today.\n      @memberof BaseCalendar\n      @return {CDate} Today's date. */\n  today: function today() {\n    return this.fromJSDate(new Date());\n  },\n\n  /** Retrieve the epoch designator for this date.\n      @memberof BaseCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @return {string} The current epoch.\n      @throws Error if an invalid year or a different calendar used. */\n  epoch: function epoch(year) {\n    var date = this._validate(year, this.minMonth, this.minDay, _exports.local.invalidYear || _exports.regionalOptions[''].invalidYear);\n\n    return date.year() < 0 ? this.local.epochs[0] : this.local.epochs[1];\n  },\n\n  /** Format the year, if not a simple sequential number\n      @memberof BaseCalendar\n      @param year {CDate|number} The date to format or the year to format.\n      @return {string} The formatted year.\n      @throws Error if an invalid year or a different calendar used. */\n  formatYear: function formatYear(year) {\n    var date = this._validate(year, this.minMonth, this.minDay, _exports.local.invalidYear || _exports.regionalOptions[''].invalidYear);\n\n    return (date.year() < 0 ? '-' : '') + pad(Math.abs(date.year()), 4);\n  },\n\n  /** Retrieve the number of months in a year.\n      @memberof BaseCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @return {number} The number of months.\n      @throws Error if an invalid year or a different calendar used. */\n  monthsInYear: function monthsInYear(year) {\n    this._validate(year, this.minMonth, this.minDay, _exports.local.invalidYear || _exports.regionalOptions[''].invalidYear);\n\n    return 12;\n  },\n\n  /** Calculate the month's ordinal position within the year -\n      for those calendars that don't start at month 1!\n      @memberof BaseCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @param month {number} The month to examine.\n      @return {number} The ordinal position, starting from <code>minMonth</code>.\n      @throws Error if an invalid year/month or a different calendar used. */\n  monthOfYear: function monthOfYear(year, month) {\n    var date = this._validate(year, month, this.minDay, _exports.local.invalidMonth || _exports.regionalOptions[''].invalidMonth);\n\n    return (date.month() + this.monthsInYear(date) - this.firstMonth) % this.monthsInYear(date) + this.minMonth;\n  },\n\n  /** Calculate actual month from ordinal position, starting from minMonth.\n      @memberof BaseCalendar\n      @param year {number} The year to examine.\n      @param ord {number} The month's ordinal position.\n      @return {number} The month's number.\n      @throws Error if an invalid year/month. */\n  fromMonthOfYear: function fromMonthOfYear(year, ord) {\n    var m = (ord + this.firstMonth - 2 * this.minMonth) % this.monthsInYear(year) + this.minMonth;\n\n    this._validate(year, m, this.minDay, _exports.local.invalidMonth || _exports.regionalOptions[''].invalidMonth);\n\n    return m;\n  },\n\n  /** Retrieve the number of days in a year.\n      @memberof BaseCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @return {number} The number of days.\n      @throws Error if an invalid year or a different calendar used. */\n  daysInYear: function daysInYear(year) {\n    var date = this._validate(year, this.minMonth, this.minDay, _exports.local.invalidYear || _exports.regionalOptions[''].invalidYear);\n\n    return this.leapYear(date) ? 366 : 365;\n  },\n\n  /** Retrieve the day of the year for a date.\n      @memberof BaseCalendar\n      @param year {CDate|number} The date to convert or the year to convert.\n      @param [month] {number} The month to convert.\n      @param [day] {number} The day to convert.\n      @return {number} The day of the year.\n      @throws Error if an invalid date or a different calendar used. */\n  dayOfYear: function dayOfYear(year, month, day) {\n    var date = this._validate(year, month, day, _exports.local.invalidDate || _exports.regionalOptions[''].invalidDate);\n\n    return date.toJD() - this.newDate(date.year(), this.fromMonthOfYear(date.year(), this.minMonth), this.minDay).toJD() + 1;\n  },\n\n  /** Retrieve the number of days in a week.\n      @memberof BaseCalendar\n      @return {number} The number of days. */\n  daysInWeek: function daysInWeek() {\n    return 7;\n  },\n\n  /** Retrieve the day of the week for a date.\n      @memberof BaseCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @param [month] {number} The month to examine.\n      @param [day] {number} The day to examine.\n      @return {number} The day of the week: 0 to number of days - 1.\n      @throws Error if an invalid date or a different calendar used. */\n  dayOfWeek: function dayOfWeek(year, month, day) {\n    var date = this._validate(year, month, day, _exports.local.invalidDate || _exports.regionalOptions[''].invalidDate);\n\n    return (Math.floor(this.toJD(date)) + 2) % this.daysInWeek();\n  },\n\n  /** Retrieve additional information about a date.\n      @memberof BaseCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @param [month] {number} The month to examine.\n      @param [day] {number} The day to examine.\n      @return {object} Additional information - contents depends on calendar.\n      @throws Error if an invalid date or a different calendar used. */\n  extraInfo: function extraInfo(year, month, day) {\n    this._validate(year, month, day, _exports.local.invalidDate || _exports.regionalOptions[''].invalidDate);\n\n    return {};\n  },\n\n  /** Add period(s) to a date.\n      Cater for no year zero.\n      @memberof BaseCalendar\n      @param date {CDate} The starting date.\n      @param offset {number} The number of periods to adjust by.\n      @param period {string} One of 'y' for year, 'm' for month, 'w' for week, 'd' for day.\n      @return {CDate} The updated date.\n      @throws Error if a different calendar used. */\n  add: function add(date, offset, period) {\n    this._validate(date, this.minMonth, this.minDay, _exports.local.invalidDate || _exports.regionalOptions[''].invalidDate);\n\n    return this._correctAdd(date, this._add(date, offset, period), offset, period);\n  },\n\n  /** Add period(s) to a date.\n      @memberof BaseCalendar\n      @private\n      @param date {CDate} The starting date.\n      @param offset {number} The number of periods to adjust by.\n      @param period {string} One of 'y' for year, 'm' for month, 'w' for week, 'd' for day.\n      @return {CDate} The updated date. */\n  _add: function _add(date, offset, period) {\n    this._validateLevel++;\n\n    if (period === 'd' || period === 'w') {\n      var jd = date.toJD() + offset * (period === 'w' ? this.daysInWeek() : 1);\n      var d = date.calendar().fromJD(jd);\n      this._validateLevel--;\n      return [d.year(), d.month(), d.day()];\n    }\n\n    try {\n      var y = date.year() + (period === 'y' ? offset : 0);\n      var m = date.monthOfYear() + (period === 'm' ? offset : 0);\n      var d = date.day(); // + (period === 'd' ? offset : 0) +\n      //(period === 'w' ? offset * this.daysInWeek() : 0);\n\n      var resyncYearMonth = function resyncYearMonth(calendar) {\n        while (m < calendar.minMonth) {\n          y--;\n          m += calendar.monthsInYear(y);\n        }\n\n        var yearMonths = calendar.monthsInYear(y);\n\n        while (m > yearMonths - 1 + calendar.minMonth) {\n          y++;\n          m -= yearMonths;\n          yearMonths = calendar.monthsInYear(y);\n        }\n      };\n\n      if (period === 'y') {\n        if (date.month() !== this.fromMonthOfYear(y, m)) {\n          // Hebrew\n          m = this.newDate(y, date.month(), this.minDay).monthOfYear();\n        }\n\n        m = Math.min(m, this.monthsInYear(y));\n        d = Math.min(d, this.daysInMonth(y, this.fromMonthOfYear(y, m)));\n      } else if (period === 'm') {\n        resyncYearMonth(this);\n        d = Math.min(d, this.daysInMonth(y, this.fromMonthOfYear(y, m)));\n      }\n\n      var ymd = [y, this.fromMonthOfYear(y, m), d];\n      this._validateLevel--;\n      return ymd;\n    } catch (e) {\n      this._validateLevel--;\n      throw e;\n    }\n  },\n\n  /** Correct a candidate date after adding period(s) to a date.\n      Handle no year zero if necessary.\n      @memberof BaseCalendar\n      @private\n      @param date {CDate} The starting date.\n      @param ymd {number[]} The added date.\n      @param offset {number} The number of periods to adjust by.\n      @param period {string} One of 'y' for year, 'm' for month, 'w' for week, 'd' for day.\n      @return {CDate} The updated date. */\n  _correctAdd: function _correctAdd(date, ymd, offset, period) {\n    if (!this.hasYearZero && (period === 'y' || period === 'm')) {\n      if (ymd[0] === 0 || // In year zero\n      date.year() > 0 !== ymd[0] > 0) {\n        // Crossed year zero\n        var adj = {\n          y: [1, 1, 'y'],\n          m: [1, this.monthsInYear(-1), 'm'],\n          w: [this.daysInWeek(), this.daysInYear(-1), 'd'],\n          d: [1, this.daysInYear(-1), 'd']\n        }[period];\n        var dir = offset < 0 ? -1 : +1;\n        ymd = this._add(date, offset * adj[0] + dir * adj[1], adj[2]);\n      }\n    }\n\n    return date.date(ymd[0], ymd[1], ymd[2]);\n  },\n\n  /** Set a portion of the date.\n      @memberof BaseCalendar\n      @param date {CDate} The starting date.\n      @param value {number} The new value for the period.\n      @param period {string} One of 'y' for year, 'm' for month, 'd' for day.\n      @return {CDate} The updated date.\n      @throws Error if an invalid date or a different calendar used. */\n  set: function set(date, value, period) {\n    this._validate(date, this.minMonth, this.minDay, _exports.local.invalidDate || _exports.regionalOptions[''].invalidDate);\n\n    var y = period === 'y' ? value : date.year();\n    var m = period === 'm' ? value : date.month();\n    var d = period === 'd' ? value : date.day();\n\n    if (period === 'y' || period === 'm') {\n      d = Math.min(d, this.daysInMonth(y, m));\n    }\n\n    return date.date(y, m, d);\n  },\n\n  /** Determine whether a date is valid for this calendar.\n      @memberof BaseCalendar\n      @param year {number} The year to examine.\n      @param month {number} The month to examine.\n      @param day {number} The day to examine.\n      @return {boolean} <code>true</code> if a valid date, <code>false</code> if not. */\n  isValid: function isValid(year, month, day) {\n    this._validateLevel++;\n    var valid = this.hasYearZero || year !== 0;\n\n    if (valid) {\n      var date = this.newDate(year, month, this.minDay);\n      valid = month >= this.minMonth && month - this.minMonth < this.monthsInYear(date) && day >= this.minDay && day - this.minDay < this.daysInMonth(date);\n    }\n\n    this._validateLevel--;\n    return valid;\n  },\n\n  /** Convert the date to a standard (Gregorian) JavaScript Date.\n      @memberof BaseCalendar\n      @param year {CDate|number} The date to convert or the year to convert.\n      @param [month] {number} The month to convert.\n      @param [day] {number} The day to convert.\n      @return {Date} The equivalent JavaScript date.\n      @throws Error if an invalid date or a different calendar used. */\n  toJSDate: function toJSDate(year, month, day) {\n    var date = this._validate(year, month, day, _exports.local.invalidDate || _exports.regionalOptions[''].invalidDate);\n\n    return _exports.instance().fromJD(this.toJD(date)).toJSDate();\n  },\n\n  /** Convert the date from a standard (Gregorian) JavaScript Date.\n      @memberof BaseCalendar\n      @param jsd {Date} The JavaScript date.\n      @return {CDate} The equivalent calendar date. */\n  fromJSDate: function fromJSDate(jsd) {\n    return this.fromJD(_exports.instance().fromJSDate(jsd).toJD());\n  },\n\n  /** Check that a candidate date is from the same calendar and is valid.\n      @memberof BaseCalendar\n      @private\n      @param year {CDate|number} The date to validate or the year to validate.\n      @param [month] {number} The month to validate.\n      @param [day] {number} The day to validate.\n      @param error {string} Rrror message if invalid.\n      @throws Error if different calendars used or invalid date. */\n  _validate: function _validate(year, month, day, error) {\n    if (year.year) {\n      if (this._validateLevel === 0 && this.name !== year.calendar().name) {\n        throw (_exports.local.differentCalendars || _exports.regionalOptions[''].differentCalendars).replace(/\\{0\\}/, this.local.name).replace(/\\{1\\}/, year.calendar().local.name);\n      }\n\n      return year;\n    }\n\n    try {\n      this._validateLevel++;\n\n      if (this._validateLevel === 1 && !this.isValid(year, month, day)) {\n        throw error.replace(/\\{0\\}/, this.local.name);\n      }\n\n      var date = this.newDate(year, month, day);\n      this._validateLevel--;\n      return date;\n    } catch (e) {\n      this._validateLevel--;\n      throw e;\n    }\n  }\n});\n/** Implementation of the Proleptic Gregorian Calendar.\n    See <a href=\":http://en.wikipedia.org/wiki/Gregorian_calendar\">http://en.wikipedia.org/wiki/Gregorian_calendar</a>\n    and <a href=\"http://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar\">http://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar</a>.\n    @class GregorianCalendar\n    @augments BaseCalendar\n    @param [language=''] {string} The language code (default English) for localisation. */\n\nfunction GregorianCalendar(language) {\n  this.local = this.regionalOptions[language] || this.regionalOptions[''];\n}\n\nGregorianCalendar.prototype = new BaseCalendar();\nassign(GregorianCalendar.prototype, {\n  /** The calendar name.\n      @memberof GregorianCalendar */\n  name: 'Gregorian',\n\n  /** Julian date of start of Gregorian epoch: 1 January 0001 CE.\n     @memberof GregorianCalendar */\n  jdEpoch: 1721425.5,\n\n  /** Days per month in a common year.\n     @memberof GregorianCalendar */\n  daysPerMonth: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n\n  /** <code>true</code> if has a year zero, <code>false</code> if not.\n     @memberof GregorianCalendar */\n  hasYearZero: false,\n\n  /** The minimum month number.\n      @memberof GregorianCalendar */\n  minMonth: 1,\n\n  /** The first month in the year.\n      @memberof GregorianCalendar */\n  firstMonth: 1,\n\n  /** The minimum day number.\n     @memberof GregorianCalendar */\n  minDay: 1,\n\n  /** Localisations for the plugin.\n      Entries are objects indexed by the language code ('' being the default US/English).\n      Each object has the following attributes.\n      @memberof GregorianCalendar\n      @property name {string} The calendar name.\n      @property epochs {string[]} The epoch names.\n      @property monthNames {string[]} The long names of the months of the year.\n      @property monthNamesShort {string[]} The short names of the months of the year.\n      @property dayNames {string[]} The long names of the days of the week.\n      @property dayNamesShort {string[]} The short names of the days of the week.\n      @property dayNamesMin {string[]} The minimal names of the days of the week.\n      @property dateFormat {string} The date format for this calendar.\n              See the options on <a href=\"BaseCalendar.html#formatDate\"><code>formatDate</code></a> for details.\n      @property firstDay {number} The number of the first day of the week, starting at 0.\n      @property isRTL {number} <code>true</code> if this localisation reads right-to-left. */\n  regionalOptions: {\n    // Localisations\n    '': {\n      name: 'Gregorian',\n      epochs: ['BCE', 'CE'],\n      monthNames: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n      monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n      dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n      dayNamesShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n      dayNamesMin: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],\n      digits: null,\n      dateFormat: 'mm/dd/yyyy',\n      firstDay: 0,\n      isRTL: false\n    }\n  },\n\n  /** Determine whether this date is in a leap year.\n      @memberof GregorianCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @return {boolean} <code>true</code> if this is a leap year, <code>false</code> if not.\n      @throws Error if an invalid year or a different calendar used. */\n  leapYear: function leapYear(year) {\n    var date = this._validate(year, this.minMonth, this.minDay, _exports.local.invalidYear || _exports.regionalOptions[''].invalidYear);\n\n    var year = date.year() + (date.year() < 0 ? 1 : 0); // No year zero\n\n    return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n  },\n\n  /** Determine the week of the year for a date - ISO 8601.\n      @memberof GregorianCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @param [month] {number} The month to examine.\n      @param [day] {number} The day to examine.\n      @return {number} The week of the year, starting from 1.\n      @throws Error if an invalid date or a different calendar used. */\n  weekOfYear: function weekOfYear(year, month, day) {\n    // Find Thursday of this week starting on Monday\n    var checkDate = this.newDate(year, month, day);\n    checkDate.add(4 - (checkDate.dayOfWeek() || 7), 'd');\n    return Math.floor((checkDate.dayOfYear() - 1) / 7) + 1;\n  },\n\n  /** Retrieve the number of days in a month.\n      @memberof GregorianCalendar\n      @param year {CDate|number} The date to examine or the year of the month.\n      @param [month] {number} The month.\n      @return {number} The number of days in this month.\n      @throws Error if an invalid month/year or a different calendar used. */\n  daysInMonth: function daysInMonth(year, month) {\n    var date = this._validate(year, month, this.minDay, _exports.local.invalidMonth || _exports.regionalOptions[''].invalidMonth);\n\n    return this.daysPerMonth[date.month() - 1] + (date.month() === 2 && this.leapYear(date.year()) ? 1 : 0);\n  },\n\n  /** Determine whether this date is a week day.\n      @memberof GregorianCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @param [month] {number} The month to examine.\n      @param [day] {number} The day to examine.\n      @return {boolean} <code>true</code> if a week day, <code>false</code> if not.\n      @throws Error if an invalid date or a different calendar used. */\n  weekDay: function weekDay(year, month, day) {\n    return (this.dayOfWeek(year, month, day) || 7) < 6;\n  },\n\n  /** Retrieve the Julian date equivalent for this date,\n      i.e. days since January 1, 4713 BCE Greenwich noon.\n      @memberof GregorianCalendar\n      @param year {CDate|number} The date to convert or the year to convert.\n      @param [month] {number} The month to convert.\n      @param [day] {number} The day to convert.\n      @return {number} The equivalent Julian date.\n      @throws Error if an invalid date or a different calendar used. */\n  toJD: function toJD(year, month, day) {\n    var date = this._validate(year, month, day, _exports.local.invalidDate || _exports.regionalOptions[''].invalidDate);\n\n    year = date.year();\n    month = date.month();\n    day = date.day();\n\n    if (year < 0) {\n      year++;\n    } // No year zero\n    // Jean Meeus algorithm, \"Astronomical Algorithms\", 1991\n\n\n    if (month < 3) {\n      month += 12;\n      year--;\n    }\n\n    var a = Math.floor(year / 100);\n    var b = 2 - a + Math.floor(a / 4);\n    return Math.floor(365.25 * (year + 4716)) + Math.floor(30.6001 * (month + 1)) + day + b - 1524.5;\n  },\n\n  /** Create a new date from a Julian date.\n      @memberof GregorianCalendar\n      @param jd {number} The Julian date to convert.\n      @return {CDate} The equivalent date. */\n  fromJD: function fromJD(jd) {\n    // Jean Meeus algorithm, \"Astronomical Algorithms\", 1991\n    var z = Math.floor(jd + 0.5);\n    var a = Math.floor((z - 1867216.25) / 36524.25);\n    a = z + 1 + a - Math.floor(a / 4);\n    var b = a + 1524;\n    var c = Math.floor((b - 122.1) / 365.25);\n    var d = Math.floor(365.25 * c);\n    var e = Math.floor((b - d) / 30.6001);\n    var day = b - d - Math.floor(e * 30.6001);\n    var month = e - (e > 13.5 ? 13 : 1);\n    var year = c - (month > 2.5 ? 4716 : 4715);\n\n    if (year <= 0) {\n      year--;\n    } // No year zero\n\n\n    return this.newDate(year, month, day);\n  },\n\n  /** Convert this date to a standard (Gregorian) JavaScript Date.\n      @memberof GregorianCalendar\n      @param year {CDate|number} The date to convert or the year to convert.\n      @param [month] {number} The month to convert.\n      @param [day] {number} The day to convert.\n      @return {Date} The equivalent JavaScript date.\n      @throws Error if an invalid date or a different calendar used. */\n  toJSDate: function toJSDate(year, month, day) {\n    var date = this._validate(year, month, day, _exports.local.invalidDate || _exports.regionalOptions[''].invalidDate);\n\n    var jsd = new Date(date.year(), date.month() - 1, date.day());\n    jsd.setHours(0);\n    jsd.setMinutes(0);\n    jsd.setSeconds(0);\n    jsd.setMilliseconds(0); // Hours may be non-zero on daylight saving cut-over:\n    // > 12 when midnight changeover, but then cannot generate\n    // midnight datetime, so jump to 1AM, otherwise reset.\n\n    jsd.setHours(jsd.getHours() > 12 ? jsd.getHours() + 2 : 0);\n    return jsd;\n  },\n\n  /** Create a new date from a standard (Gregorian) JavaScript Date.\n      @memberof GregorianCalendar\n      @param jsd {Date} The JavaScript date to convert.\n      @return {CDate} The equivalent date. */\n  fromJSDate: function fromJSDate(jsd) {\n    return this.newDate(jsd.getFullYear(), jsd.getMonth() + 1, jsd.getDate());\n  }\n}); // Singleton manager\n\nvar _exports = module.exports = new Calendars(); // Date template\n\n\n_exports.cdate = CDate; // Base calendar template\n\n_exports.baseCalendar = BaseCalendar; // Gregorian calendar implementation\n\n_exports.calendars.gregorian = GregorianCalendar;","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/world-calendars/dist/main.js"],"names":["assign","require","Calendars","regionalOptions","invalidCalendar","invalidDate","invalidMonth","invalidYear","differentCalendars","local","calendars","_localCals","prototype","instance","name","language","toLowerCase","cal","replace","newDate","year","month","day","calendar","substituteDigits","digits","value","digit","substituteChineseDigits","powers","localNumber","power","units","Math","floor","indexOf","substr","CDate","_calendar","_year","_month","_day","_validateLevel","isValid","_exports","pad","length","substring","arguments","set","date","leapYear","epoch","formatYear","monthOfYear","weekOfYear","daysInYear","dayOfYear","daysInMonth","dayOfWeek","weekDay","extraInfo","add","offset","period","compareTo","c","toJD","fromJD","jd","toJSDate","fromJSDate","jsd","toString","abs","BaseCalendar","shortYearCutoff","today","_validate","Date","minMonth","minDay","epochs","monthsInYear","firstMonth","fromMonthOfYear","ord","m","daysInWeek","_correctAdd","_add","d","y","resyncYearMonth","yearMonths","min","ymd","e","hasYearZero","adj","w","dir","valid","error","GregorianCalendar","jdEpoch","daysPerMonth","monthNames","monthNamesShort","dayNames","dayNamesShort","dayNamesMin","dateFormat","firstDay","isRTL","checkDate","a","b","z","setHours","setMinutes","setSeconds","setMilliseconds","getHours","getFullYear","getMonth","getDate","module","exports","cdate","baseCalendar","gregorian"],"mappings":"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","sourcesContent":["/*\n * World Calendars\n * https://github.com/alexcjohnson/world-calendars\n *\n * Batch-converted from kbwood/calendars\n * Many thanks to Keith Wood and all of the contributors to the original project!\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n﻿/* http://keith-wood.name/calendars.html\n   Calendars for jQuery v2.0.2.\n   Written by Keith Wood (wood.keith{at}optusnet.com.au) August 2009.\n   Available under the MIT (http://keith-wood.name/licence.html) license. \n   Please attribute the author if you use it. */\n\nvar assign = require('object-assign');\n\n\nfunction Calendars() {\n    this.regionalOptions = [];\n    this.regionalOptions[''] = {\n        invalidCalendar: 'Calendar {0} not found',\n        invalidDate: 'Invalid {0} date',\n        invalidMonth: 'Invalid {0} month',\n        invalidYear: 'Invalid {0} year',\n        differentCalendars: 'Cannot mix {0} and {1} dates'\n    };\n    this.local = this.regionalOptions[''];\n    this.calendars = {};\n    this._localCals = {};\n}\n\n/** Create the calendars plugin.\n    <p>Provides support for various world calendars in a consistent manner.</p>\n     @class Calendars\n    @example _exports.instance('julian').newDate(2014, 12, 25) */\nassign(Calendars.prototype, {\n\n    /** Obtain a calendar implementation and localisation.\n        @memberof Calendars\n        @param [name='gregorian'] {string} The name of the calendar, e.g. 'gregorian', 'persian', 'islamic'.\n        @param [language=''] {string} The language code to use for localisation (default is English).\n        @return {Calendar} The calendar and localisation.\n        @throws Error if calendar not found. */\n    instance: function(name, language) {\n        name = (name || 'gregorian').toLowerCase();\n        language = language || '';\n        var cal = this._localCals[name + '-' + language];\n        if (!cal && this.calendars[name]) {\n            cal = new this.calendars[name](language);\n            this._localCals[name + '-' + language] = cal;\n        }\n        if (!cal) {\n            throw (this.local.invalidCalendar || this.regionalOptions[''].invalidCalendar).\n                replace(/\\{0\\}/, name);\n        }\n        return cal;\n    },\n\n    /** Create a new date - for today if no other parameters given.\n        @memberof Calendars\n        @param year {CDate|number} The date to copy or the year for the date.\n        @param [month] {number} The month for the date.\n        @param [day] {number} The day for the date.\n        @param [calendar='gregorian'] {BaseCalendar|string} The underlying calendar or the name of the calendar.\n        @param [language=''] {string} The language to use for localisation (default English).\n        @return {CDate} The new date.\n        @throws Error if an invalid date. */\n    newDate: function(year, month, day, calendar, language) {\n        calendar = (year != null && year.year ? year.calendar() : (typeof calendar === 'string' ?\n            this.instance(calendar, language) : calendar)) || this.instance();\n        return calendar.newDate(year, month, day);\n    },\n    \n    /** A simple digit substitution function for localising numbers via the Calendar digits option.\n        @member Calendars\n        @param digits {string[]} The substitute digits, for 0 through 9.\n        @return {function} The substitution function. */\n    substituteDigits: function(digits) {\n        return function(value) {\n            return (value + '').replace(/[0-9]/g, function(digit) {\n                return digits[digit];\n            });\n        }\n    },\n    \n    /** Digit substitution function for localising Chinese style numbers via the Calendar digits option.\n        @member Calendars\n        @param digits {string[]} The substitute digits, for 0 through 9.\n        @param powers {string[]} The characters denoting powers of 10, i.e. 1, 10, 100, 1000.\n        @return {function} The substitution function. */\n    substituteChineseDigits: function(digits, powers) {\n        return function(value) {\n            var localNumber = '';\n            var power = 0;\n            while (value > 0) {\n                var units = value % 10;\n                localNumber = (units === 0 ? '' : digits[units] + powers[power]) + localNumber;\n                power++;\n                value = Math.floor(value / 10);\n            }\n            if (localNumber.indexOf(digits[1] + powers[1]) === 0) {\n                localNumber = localNumber.substr(1);\n            }\n            return localNumber || digits[0];\n        }\n    }\n});\n\n/** Generic date, based on a particular calendar.\n    @class CDate\n    @param calendar {BaseCalendar} The underlying calendar implementation.\n    @param year {number} The year for this date.\n    @param month {number} The month for this date.\n    @param day {number} The day for this date.\n    @return {CDate} The date object.\n    @throws Error if an invalid date. */\nfunction CDate(calendar, year, month, day) {\n    this._calendar = calendar;\n    this._year = year;\n    this._month = month;\n    this._day = day;\n    if (this._calendar._validateLevel === 0 &&\n            !this._calendar.isValid(this._year, this._month, this._day)) {\n        throw (_exports.local.invalidDate || _exports.regionalOptions[''].invalidDate).\n            replace(/\\{0\\}/, this._calendar.local.name);\n    }\n}\n\n/** Pad a numeric value with leading zeroes.\n    @private\n    @param value {number} The number to format.\n    @param length {number} The minimum length.\n    @return {string} The formatted number. */\nfunction pad(value, length) {\n    value = '' + value;\n    return '000000'.substring(0, length - value.length) + value;\n}\n\nassign(CDate.prototype, {\n\n    /** Create a new date.\n        @memberof CDate\n        @param [year] {CDate|number} The date to copy or the year for the date (default this date).\n        @param [month] {number} The month for the date.\n        @param [day] {number} The day for the date.\n        @return {CDate} The new date.\n        @throws Error if an invalid date. */\n    newDate: function(year, month, day) {\n        return this._calendar.newDate((year == null ? this : year), month, day);\n    },\n\n    /** Set or retrieve the year for this date.\n        @memberof CDate\n        @param [year] {number} The year for the date.\n        @return {number|CDate} The date's year (if no parameter) or the updated date.\n        @throws Error if an invalid date. */\n    year: function(year) {\n        return (arguments.length === 0 ? this._year : this.set(year, 'y'));\n    },\n\n    /** Set or retrieve the month for this date.\n        @memberof CDate\n        @param [month] {number} The month for the date.\n        @return {number|CDate} The date's month (if no parameter) or the updated date.\n        @throws Error if an invalid date. */\n    month: function(month) {\n        return (arguments.length === 0 ? this._month : this.set(month, 'm'));\n    },\n\n    /** Set or retrieve the day for this date.\n        @memberof CDate\n        @param [day] {number} The day for the date.\n        @return {number|CData} The date's day (if no parameter) or the updated date.\n        @throws Error if an invalid date. */\n    day: function(day) {\n        return (arguments.length === 0 ? this._day : this.set(day, 'd'));\n    },\n\n    /** Set new values for this date.\n        @memberof CDate\n        @param year {number} The year for the date.\n        @param month {number} The month for the date.\n        @param day {number} The day for the date.\n        @return {CDate} The updated date.\n        @throws Error if an invalid date. */\n    date: function(year, month, day) {\n        if (!this._calendar.isValid(year, month, day)) {\n            throw (_exports.local.invalidDate || _exports.regionalOptions[''].invalidDate).\n                replace(/\\{0\\}/, this._calendar.local.name);\n        }\n        this._year = year;\n        this._month = month;\n        this._day = day;\n        return this;\n    },\n\n    /** Determine whether this date is in a leap year.\n        @memberof CDate\n        @return {boolean} <code>true</code> if this is a leap year, <code>false</code> if not. */\n    leapYear: function() {\n        return this._calendar.leapYear(this);\n    },\n\n    /** Retrieve the epoch designator for this date, e.g. BCE or CE.\n        @memberof CDate\n        @return {string} The current epoch. */\n    epoch: function() {\n        return this._calendar.epoch(this);\n    },\n\n    /** Format the year, if not a simple sequential number.\n        @memberof CDate\n        @return {string} The formatted year. */\n    formatYear: function() {\n        return this._calendar.formatYear(this);\n    },\n\n    /** Retrieve the month of the year for this date,\n        i.e. the month's position within a numbered year.\n        @memberof CDate\n        @return {number} The month of the year: <code>minMonth</code> to months per year. */\n    monthOfYear: function() {\n        return this._calendar.monthOfYear(this);\n    },\n\n    /** Retrieve the week of the year for this date.\n        @memberof CDate\n        @return {number} The week of the year: 1 to weeks per year. */\n    weekOfYear: function() {\n        return this._calendar.weekOfYear(this);\n    },\n\n    /** Retrieve the number of days in the year for this date.\n        @memberof CDate\n        @return {number} The number of days in this year. */\n    daysInYear: function() {\n        return this._calendar.daysInYear(this);\n    },\n\n    /** Retrieve the day of the year for this date.\n        @memberof CDate\n        @return {number} The day of the year: 1 to days per year. */\n    dayOfYear: function() {\n        return this._calendar.dayOfYear(this);\n    },\n\n    /** Retrieve the number of days in the month for this date.\n        @memberof CDate\n        @return {number} The number of days. */\n    daysInMonth: function() {\n        return this._calendar.daysInMonth(this);\n    },\n\n    /** Retrieve the day of the week for this date.\n        @memberof CDate\n        @return {number} The day of the week: 0 to number of days - 1. */\n    dayOfWeek: function() {\n        return this._calendar.dayOfWeek(this);\n    },\n\n    /** Determine whether this date is a week day.\n        @memberof CDate\n        @return {boolean} <code>true</code> if a week day, <code>false</code> if not. */\n    weekDay: function() {\n        return this._calendar.weekDay(this);\n    },\n\n    /** Retrieve additional information about this date.\n        @memberof CDate\n        @return {object} Additional information - contents depends on calendar. */\n    extraInfo: function() {\n        return this._calendar.extraInfo(this);\n    },\n\n    /** Add period(s) to a date.\n        @memberof CDate\n        @param offset {number} The number of periods to adjust by.\n        @param period {string} One of 'y' for year, 'm' for month, 'w' for week, 'd' for day.\n        @return {CDate} The updated date. */\n    add: function(offset, period) {\n        return this._calendar.add(this, offset, period);\n    },\n\n    /** Set a portion of the date.\n        @memberof CDate\n        @param value {number} The new value for the period.\n        @param period {string} One of 'y' for year, 'm' for month, 'd' for day.\n        @return {CDate} The updated date.\n        @throws Error if not a valid date. */\n    set: function(value, period) {\n        return this._calendar.set(this, value, period);\n    },\n\n    /** Compare this date to another date.\n        @memberof CDate\n        @param date {CDate} The other date.\n        @return {number} -1 if this date is before the other date,\n                0 if they are equal, or +1 if this date is after the other date. */\n    compareTo: function(date) {\n        if (this._calendar.name !== date._calendar.name) {\n            throw (_exports.local.differentCalendars || _exports.regionalOptions[''].differentCalendars).\n                replace(/\\{0\\}/, this._calendar.local.name).replace(/\\{1\\}/, date._calendar.local.name);\n        }\n        var c = (this._year !== date._year ? this._year - date._year :\n            this._month !== date._month ? this.monthOfYear() - date.monthOfYear() :\n            this._day - date._day);\n        return (c === 0 ? 0 : (c < 0 ? -1 : +1));\n    },\n\n    /** Retrieve the calendar backing this date.\n        @memberof CDate\n        @return {BaseCalendar} The calendar implementation. */\n    calendar: function() {\n        return this._calendar;\n    },\n\n    /** Retrieve the Julian date equivalent for this date,\n        i.e. days since January 1, 4713 BCE Greenwich noon.\n        @memberof CDate\n        @return {number} The equivalent Julian date. */\n    toJD: function() {\n        return this._calendar.toJD(this);\n    },\n\n    /** Create a new date from a Julian date.\n        @memberof CDate\n        @param jd {number} The Julian date to convert.\n        @return {CDate} The equivalent date. */\n    fromJD: function(jd) {\n        return this._calendar.fromJD(jd);\n    },\n\n    /** Convert this date to a standard (Gregorian) JavaScript Date.\n        @memberof CDate\n        @return {Date} The equivalent JavaScript date. */\n    toJSDate: function() {\n        return this._calendar.toJSDate(this);\n    },\n\n    /** Create a new date from a standard (Gregorian) JavaScript Date.\n        @memberof CDate\n        @param jsd {Date} The JavaScript date to convert.\n        @return {CDate} The equivalent date. */\n    fromJSDate: function(jsd) {\n        return this._calendar.fromJSDate(jsd);\n    },\n\n    /** Convert to a string for display.\n        @memberof CDate\n        @return {string} This date as a string. */\n    toString: function() {\n        return (this.year() < 0 ? '-' : '') + pad(Math.abs(this.year()), 4) +\n            '-' + pad(this.month(), 2) + '-' + pad(this.day(), 2);\n    }\n});\n\n/** Basic functionality for all calendars.\n    Other calendars should extend this:\n    <pre>OtherCalendar.prototype = new BaseCalendar;</pre>\n    @class BaseCalendar */\nfunction BaseCalendar() {\n    this.shortYearCutoff = '+10';\n}\n\nassign(BaseCalendar.prototype, {\n    _validateLevel: 0, // \"Stack\" to turn validation on/off\n\n    /** Create a new date within this calendar - today if no parameters given.\n        @memberof BaseCalendar\n        @param year {CDate|number} The date to duplicate or the year for the date.\n        @param [month] {number} The month for the date.\n        @param [day] {number} The day for the date.\n        @return {CDate} The new date.\n        @throws Error if not a valid date or a different calendar used. */\n    newDate: function(year, month, day) {\n        if (year == null) {\n            return this.today();\n        }\n        if (year.year) {\n            this._validate(year, month, day,\n                _exports.local.invalidDate || _exports.regionalOptions[''].invalidDate);\n            day = year.day();\n            month = year.month();\n            year = year.year();\n        }\n        return new CDate(this, year, month, day);\n    },\n\n    /** Create a new date for today.\n        @memberof BaseCalendar\n        @return {CDate} Today's date. */\n    today: function() {\n        return this.fromJSDate(new Date());\n    },\n\n    /** Retrieve the epoch designator for this date.\n        @memberof BaseCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @return {string} The current epoch.\n        @throws Error if an invalid year or a different calendar used. */\n    epoch: function(year) {\n        var date = this._validate(year, this.minMonth, this.minDay,\n            _exports.local.invalidYear || _exports.regionalOptions[''].invalidYear);\n        return (date.year() < 0 ? this.local.epochs[0] : this.local.epochs[1]);\n    },\n\n    /** Format the year, if not a simple sequential number\n        @memberof BaseCalendar\n        @param year {CDate|number} The date to format or the year to format.\n        @return {string} The formatted year.\n        @throws Error if an invalid year or a different calendar used. */\n    formatYear: function(year) {\n        var date = this._validate(year, this.minMonth, this.minDay,\n            _exports.local.invalidYear || _exports.regionalOptions[''].invalidYear);\n        return (date.year() < 0 ? '-' : '') + pad(Math.abs(date.year()), 4)\n    },\n\n    /** Retrieve the number of months in a year.\n        @memberof BaseCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @return {number} The number of months.\n        @throws Error if an invalid year or a different calendar used. */\n    monthsInYear: function(year) {\n        this._validate(year, this.minMonth, this.minDay,\n            _exports.local.invalidYear || _exports.regionalOptions[''].invalidYear);\n        return 12;\n    },\n\n    /** Calculate the month's ordinal position within the year -\n        for those calendars that don't start at month 1!\n        @memberof BaseCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @param month {number} The month to examine.\n        @return {number} The ordinal position, starting from <code>minMonth</code>.\n        @throws Error if an invalid year/month or a different calendar used. */\n    monthOfYear: function(year, month) {\n        var date = this._validate(year, month, this.minDay,\n            _exports.local.invalidMonth || _exports.regionalOptions[''].invalidMonth);\n        return (date.month() + this.monthsInYear(date) - this.firstMonth) %\n            this.monthsInYear(date) + this.minMonth;\n    },\n\n    /** Calculate actual month from ordinal position, starting from minMonth.\n        @memberof BaseCalendar\n        @param year {number} The year to examine.\n        @param ord {number} The month's ordinal position.\n        @return {number} The month's number.\n        @throws Error if an invalid year/month. */\n    fromMonthOfYear: function(year, ord) {\n        var m = (ord + this.firstMonth - 2 * this.minMonth) %\n            this.monthsInYear(year) + this.minMonth;\n        this._validate(year, m, this.minDay,\n            _exports.local.invalidMonth || _exports.regionalOptions[''].invalidMonth);\n        return m;\n    },\n\n    /** Retrieve the number of days in a year.\n        @memberof BaseCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @return {number} The number of days.\n        @throws Error if an invalid year or a different calendar used. */\n    daysInYear: function(year) {\n        var date = this._validate(year, this.minMonth, this.minDay,\n            _exports.local.invalidYear || _exports.regionalOptions[''].invalidYear);\n        return (this.leapYear(date) ? 366 : 365);\n    },\n\n    /** Retrieve the day of the year for a date.\n        @memberof BaseCalendar\n        @param year {CDate|number} The date to convert or the year to convert.\n        @param [month] {number} The month to convert.\n        @param [day] {number} The day to convert.\n        @return {number} The day of the year.\n        @throws Error if an invalid date or a different calendar used. */\n    dayOfYear: function(year, month, day) {\n        var date = this._validate(year, month, day,\n            _exports.local.invalidDate || _exports.regionalOptions[''].invalidDate);\n        return date.toJD() - this.newDate(date.year(),\n            this.fromMonthOfYear(date.year(), this.minMonth), this.minDay).toJD() + 1;\n    },\n\n    /** Retrieve the number of days in a week.\n        @memberof BaseCalendar\n        @return {number} The number of days. */\n    daysInWeek: function() {\n        return 7;\n    },\n\n    /** Retrieve the day of the week for a date.\n        @memberof BaseCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @param [month] {number} The month to examine.\n        @param [day] {number} The day to examine.\n        @return {number} The day of the week: 0 to number of days - 1.\n        @throws Error if an invalid date or a different calendar used. */\n    dayOfWeek: function(year, month, day) {\n        var date = this._validate(year, month, day,\n            _exports.local.invalidDate || _exports.regionalOptions[''].invalidDate);\n        return (Math.floor(this.toJD(date)) + 2) % this.daysInWeek();\n    },\n\n    /** Retrieve additional information about a date.\n        @memberof BaseCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @param [month] {number} The month to examine.\n        @param [day] {number} The day to examine.\n        @return {object} Additional information - contents depends on calendar.\n        @throws Error if an invalid date or a different calendar used. */\n    extraInfo: function(year, month, day) {\n        this._validate(year, month, day,\n            _exports.local.invalidDate || _exports.regionalOptions[''].invalidDate);\n        return {};\n    },\n\n    /** Add period(s) to a date.\n        Cater for no year zero.\n        @memberof BaseCalendar\n        @param date {CDate} The starting date.\n        @param offset {number} The number of periods to adjust by.\n        @param period {string} One of 'y' for year, 'm' for month, 'w' for week, 'd' for day.\n        @return {CDate} The updated date.\n        @throws Error if a different calendar used. */\n    add: function(date, offset, period) {\n        this._validate(date, this.minMonth, this.minDay,\n            _exports.local.invalidDate || _exports.regionalOptions[''].invalidDate);\n        return this._correctAdd(date, this._add(date, offset, period), offset, period);\n    },\n\n    /** Add period(s) to a date.\n        @memberof BaseCalendar\n        @private\n        @param date {CDate} The starting date.\n        @param offset {number} The number of periods to adjust by.\n        @param period {string} One of 'y' for year, 'm' for month, 'w' for week, 'd' for day.\n        @return {CDate} The updated date. */\n    _add: function(date, offset, period) {\n        this._validateLevel++;\n        if (period === 'd' || period === 'w') {\n            var jd = date.toJD() + offset * (period === 'w' ? this.daysInWeek() : 1);\n            var d = date.calendar().fromJD(jd);\n            this._validateLevel--;\n            return [d.year(), d.month(), d.day()];\n        }\n        try {\n            var y = date.year() + (period === 'y' ? offset : 0);\n            var m = date.monthOfYear() + (period === 'm' ? offset : 0);\n            var d = date.day();// + (period === 'd' ? offset : 0) +\n                //(period === 'w' ? offset * this.daysInWeek() : 0);\n            var resyncYearMonth = function(calendar) {\n                while (m < calendar.minMonth) {\n                    y--;\n                    m += calendar.monthsInYear(y);\n                }\n                var yearMonths = calendar.monthsInYear(y);\n                while (m > yearMonths - 1 + calendar.minMonth) {\n                    y++;\n                    m -= yearMonths;\n                    yearMonths = calendar.monthsInYear(y);\n                }\n            };\n            if (period === 'y') {\n                if (date.month() !== this.fromMonthOfYear(y, m)) { // Hebrew\n                    m = this.newDate(y, date.month(), this.minDay).monthOfYear();\n                }\n                m = Math.min(m, this.monthsInYear(y));\n                d = Math.min(d, this.daysInMonth(y, this.fromMonthOfYear(y, m)));\n            }\n            else if (period === 'm') {\n                resyncYearMonth(this);\n                d = Math.min(d, this.daysInMonth(y, this.fromMonthOfYear(y, m)));\n            }\n            var ymd = [y, this.fromMonthOfYear(y, m), d];\n            this._validateLevel--;\n            return ymd;\n        }\n        catch (e) {\n            this._validateLevel--;\n            throw e;\n        }\n    },\n\n    /** Correct a candidate date after adding period(s) to a date.\n        Handle no year zero if necessary.\n        @memberof BaseCalendar\n        @private\n        @param date {CDate} The starting date.\n        @param ymd {number[]} The added date.\n        @param offset {number} The number of periods to adjust by.\n        @param period {string} One of 'y' for year, 'm' for month, 'w' for week, 'd' for day.\n        @return {CDate} The updated date. */\n    _correctAdd: function(date, ymd, offset, period) {\n        if (!this.hasYearZero && (period === 'y' || period === 'm')) {\n            if (ymd[0] === 0 || // In year zero\n                    (date.year() > 0) !== (ymd[0] > 0)) { // Crossed year zero\n                var adj = {y: [1, 1, 'y'], m: [1, this.monthsInYear(-1), 'm'],\n                    w: [this.daysInWeek(), this.daysInYear(-1), 'd'],\n                    d: [1, this.daysInYear(-1), 'd']}[period];\n                var dir = (offset < 0 ? -1 : +1);\n                ymd = this._add(date, offset * adj[0] + dir * adj[1], adj[2]);\n            }\n        }\n        return date.date(ymd[0], ymd[1], ymd[2]);\n    },\n\n    /** Set a portion of the date.\n        @memberof BaseCalendar\n        @param date {CDate} The starting date.\n        @param value {number} The new value for the period.\n        @param period {string} One of 'y' for year, 'm' for month, 'd' for day.\n        @return {CDate} The updated date.\n        @throws Error if an invalid date or a different calendar used. */\n    set: function(date, value, period) {\n        this._validate(date, this.minMonth, this.minDay,\n            _exports.local.invalidDate || _exports.regionalOptions[''].invalidDate);\n        var y = (period === 'y' ? value : date.year());\n        var m = (period === 'm' ? value : date.month());\n        var d = (period === 'd' ? value : date.day());\n        if (period === 'y' || period === 'm') {\n            d = Math.min(d, this.daysInMonth(y, m));\n        }\n        return date.date(y, m, d);\n    },\n\n    /** Determine whether a date is valid for this calendar.\n        @memberof BaseCalendar\n        @param year {number} The year to examine.\n        @param month {number} The month to examine.\n        @param day {number} The day to examine.\n        @return {boolean} <code>true</code> if a valid date, <code>false</code> if not. */\n    isValid: function(year, month, day) {\n        this._validateLevel++;\n        var valid = (this.hasYearZero || year !== 0);\n        if (valid) {\n            var date = this.newDate(year, month, this.minDay);\n            valid = (month >= this.minMonth && month - this.minMonth < this.monthsInYear(date)) &&\n                (day >= this.minDay && day - this.minDay < this.daysInMonth(date));\n        }\n        this._validateLevel--;\n        return valid;\n    },\n\n    /** Convert the date to a standard (Gregorian) JavaScript Date.\n        @memberof BaseCalendar\n        @param year {CDate|number} The date to convert or the year to convert.\n        @param [month] {number} The month to convert.\n        @param [day] {number} The day to convert.\n        @return {Date} The equivalent JavaScript date.\n        @throws Error if an invalid date or a different calendar used. */\n    toJSDate: function(year, month, day) {\n        var date = this._validate(year, month, day,\n            _exports.local.invalidDate || _exports.regionalOptions[''].invalidDate);\n        return _exports.instance().fromJD(this.toJD(date)).toJSDate();\n    },\n\n    /** Convert the date from a standard (Gregorian) JavaScript Date.\n        @memberof BaseCalendar\n        @param jsd {Date} The JavaScript date.\n        @return {CDate} The equivalent calendar date. */\n    fromJSDate: function(jsd) {\n        return this.fromJD(_exports.instance().fromJSDate(jsd).toJD());\n    },\n\n    /** Check that a candidate date is from the same calendar and is valid.\n        @memberof BaseCalendar\n        @private\n        @param year {CDate|number} The date to validate or the year to validate.\n        @param [month] {number} The month to validate.\n        @param [day] {number} The day to validate.\n        @param error {string} Rrror message if invalid.\n        @throws Error if different calendars used or invalid date. */\n    _validate: function(year, month, day, error) {\n        if (year.year) {\n            if (this._validateLevel === 0 && this.name !== year.calendar().name) {\n                throw (_exports.local.differentCalendars || _exports.regionalOptions[''].differentCalendars).\n                    replace(/\\{0\\}/, this.local.name).replace(/\\{1\\}/, year.calendar().local.name);\n            }\n            return year;\n        }\n        try {\n            this._validateLevel++;\n            if (this._validateLevel === 1 && !this.isValid(year, month, day)) {\n                throw error.replace(/\\{0\\}/, this.local.name);\n            }\n            var date = this.newDate(year, month, day);\n            this._validateLevel--;\n            return date;\n        }\n        catch (e) {\n            this._validateLevel--;\n            throw e;\n        }\n    }\n});\n\n/** Implementation of the Proleptic Gregorian Calendar.\n    See <a href=\":http://en.wikipedia.org/wiki/Gregorian_calendar\">http://en.wikipedia.org/wiki/Gregorian_calendar</a>\n    and <a href=\"http://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar\">http://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar</a>.\n    @class GregorianCalendar\n    @augments BaseCalendar\n    @param [language=''] {string} The language code (default English) for localisation. */\nfunction GregorianCalendar(language) {\n    this.local = this.regionalOptions[language] || this.regionalOptions[''];\n}\n\nGregorianCalendar.prototype = new BaseCalendar;\n\nassign(GregorianCalendar.prototype, {\n    /** The calendar name.\n        @memberof GregorianCalendar */\n    name: 'Gregorian',\n     /** Julian date of start of Gregorian epoch: 1 January 0001 CE.\n        @memberof GregorianCalendar */\n    jdEpoch: 1721425.5,\n     /** Days per month in a common year.\n        @memberof GregorianCalendar */\n    daysPerMonth: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n     /** <code>true</code> if has a year zero, <code>false</code> if not.\n        @memberof GregorianCalendar */\n    hasYearZero: false,\n    /** The minimum month number.\n        @memberof GregorianCalendar */\n    minMonth: 1,\n    /** The first month in the year.\n        @memberof GregorianCalendar */\n    firstMonth: 1,\n     /** The minimum day number.\n        @memberof GregorianCalendar */\n    minDay: 1,\n\n    /** Localisations for the plugin.\n        Entries are objects indexed by the language code ('' being the default US/English).\n        Each object has the following attributes.\n        @memberof GregorianCalendar\n        @property name {string} The calendar name.\n        @property epochs {string[]} The epoch names.\n        @property monthNames {string[]} The long names of the months of the year.\n        @property monthNamesShort {string[]} The short names of the months of the year.\n        @property dayNames {string[]} The long names of the days of the week.\n        @property dayNamesShort {string[]} The short names of the days of the week.\n        @property dayNamesMin {string[]} The minimal names of the days of the week.\n        @property dateFormat {string} The date format for this calendar.\n                See the options on <a href=\"BaseCalendar.html#formatDate\"><code>formatDate</code></a> for details.\n        @property firstDay {number} The number of the first day of the week, starting at 0.\n        @property isRTL {number} <code>true</code> if this localisation reads right-to-left. */\n    regionalOptions: { // Localisations\n        '': {\n            name: 'Gregorian',\n            epochs: ['BCE', 'CE'],\n            monthNames: ['January', 'February', 'March', 'April', 'May', 'June',\n            'July', 'August', 'September', 'October', 'November', 'December'],\n            monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n            dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n            dayNamesShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n            dayNamesMin: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],\n            digits: null,\n            dateFormat: 'mm/dd/yyyy',\n            firstDay: 0,\n            isRTL: false\n        }\n    },\n    \n    /** Determine whether this date is in a leap year.\n        @memberof GregorianCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @return {boolean} <code>true</code> if this is a leap year, <code>false</code> if not.\n        @throws Error if an invalid year or a different calendar used. */\n    leapYear: function(year) {\n        var date = this._validate(year, this.minMonth, this.minDay,\n            _exports.local.invalidYear || _exports.regionalOptions[''].invalidYear);\n        var year = date.year() + (date.year() < 0 ? 1 : 0); // No year zero\n        return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n    },\n\n    /** Determine the week of the year for a date - ISO 8601.\n        @memberof GregorianCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @param [month] {number} The month to examine.\n        @param [day] {number} The day to examine.\n        @return {number} The week of the year, starting from 1.\n        @throws Error if an invalid date or a different calendar used. */\n    weekOfYear: function(year, month, day) {\n        // Find Thursday of this week starting on Monday\n        var checkDate = this.newDate(year, month, day);\n        checkDate.add(4 - (checkDate.dayOfWeek() || 7), 'd');\n        return Math.floor((checkDate.dayOfYear() - 1) / 7) + 1;\n    },\n\n    /** Retrieve the number of days in a month.\n        @memberof GregorianCalendar\n        @param year {CDate|number} The date to examine or the year of the month.\n        @param [month] {number} The month.\n        @return {number} The number of days in this month.\n        @throws Error if an invalid month/year or a different calendar used. */\n    daysInMonth: function(year, month) {\n        var date = this._validate(year, month, this.minDay,\n            _exports.local.invalidMonth || _exports.regionalOptions[''].invalidMonth);\n        return this.daysPerMonth[date.month() - 1] +\n            (date.month() === 2 && this.leapYear(date.year()) ? 1 : 0);\n    },\n\n    /** Determine whether this date is a week day.\n        @memberof GregorianCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @param [month] {number} The month to examine.\n        @param [day] {number} The day to examine.\n        @return {boolean} <code>true</code> if a week day, <code>false</code> if not.\n        @throws Error if an invalid date or a different calendar used. */\n    weekDay: function(year, month, day) {\n        return (this.dayOfWeek(year, month, day) || 7) < 6;\n    },\n\n    /** Retrieve the Julian date equivalent for this date,\n        i.e. days since January 1, 4713 BCE Greenwich noon.\n        @memberof GregorianCalendar\n        @param year {CDate|number} The date to convert or the year to convert.\n        @param [month] {number} The month to convert.\n        @param [day] {number} The day to convert.\n        @return {number} The equivalent Julian date.\n        @throws Error if an invalid date or a different calendar used. */\n    toJD: function(year, month, day) {\n        var date = this._validate(year, month, day,\n            _exports.local.invalidDate || _exports.regionalOptions[''].invalidDate);\n        year = date.year();\n        month = date.month();\n        day = date.day();\n        if (year < 0) { year++; } // No year zero\n        // Jean Meeus algorithm, \"Astronomical Algorithms\", 1991\n        if (month < 3) {\n            month += 12;\n            year--;\n        }\n        var a = Math.floor(year / 100);\n        var b = 2 - a + Math.floor(a / 4);\n        return Math.floor(365.25 * (year + 4716)) +\n            Math.floor(30.6001 * (month + 1)) + day + b - 1524.5;\n    },\n\n    /** Create a new date from a Julian date.\n        @memberof GregorianCalendar\n        @param jd {number} The Julian date to convert.\n        @return {CDate} The equivalent date. */\n    fromJD: function(jd) {\n        // Jean Meeus algorithm, \"Astronomical Algorithms\", 1991\n        var z = Math.floor(jd + 0.5);\n        var a = Math.floor((z - 1867216.25) / 36524.25);\n        a = z + 1 + a - Math.floor(a / 4);\n        var b = a + 1524;\n        var c = Math.floor((b - 122.1) / 365.25);\n        var d = Math.floor(365.25 * c);\n        var e = Math.floor((b - d) / 30.6001);\n        var day = b - d - Math.floor(e * 30.6001);\n        var month = e - (e > 13.5 ? 13 : 1);\n        var year = c - (month > 2.5 ? 4716 : 4715);\n        if (year <= 0) { year--; } // No year zero\n        return this.newDate(year, month, day);\n    },\n\n    /** Convert this date to a standard (Gregorian) JavaScript Date.\n        @memberof GregorianCalendar\n        @param year {CDate|number} The date to convert or the year to convert.\n        @param [month] {number} The month to convert.\n        @param [day] {number} The day to convert.\n        @return {Date} The equivalent JavaScript date.\n        @throws Error if an invalid date or a different calendar used. */\n    toJSDate: function(year, month, day) {\n        var date = this._validate(year, month, day,\n            _exports.local.invalidDate || _exports.regionalOptions[''].invalidDate);\n        var jsd = new Date(date.year(), date.month() - 1, date.day());\n        jsd.setHours(0);\n        jsd.setMinutes(0);\n        jsd.setSeconds(0);\n        jsd.setMilliseconds(0);\n        // Hours may be non-zero on daylight saving cut-over:\n        // > 12 when midnight changeover, but then cannot generate\n        // midnight datetime, so jump to 1AM, otherwise reset.\n        jsd.setHours(jsd.getHours() > 12 ? jsd.getHours() + 2 : 0);\n        return jsd;\n    },\n\n    /** Create a new date from a standard (Gregorian) JavaScript Date.\n        @memberof GregorianCalendar\n        @param jsd {Date} The JavaScript date to convert.\n        @return {CDate} The equivalent date. */\n    fromJSDate: function(jsd) {\n        return this.newDate(jsd.getFullYear(), jsd.getMonth() + 1, jsd.getDate());\n    }\n});\n\n// Singleton manager\nvar _exports = module.exports = new Calendars();\n\n// Date template\n_exports.cdate = CDate;\n\n// Base calendar template\n_exports.baseCalendar = BaseCalendar;\n\n// Gregorian calendar implementation\n_exports.calendars.gregorian = GregorianCalendar;\n\n"]},"metadata":{},"sourceType":"script"}