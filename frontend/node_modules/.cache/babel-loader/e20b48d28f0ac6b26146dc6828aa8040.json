{"ast":null,"code":"// Utils used to parse miaf-based files (avif/heic/heif)\n//\n//  - image collections are not supported (only last size is reported)\n//  - images with metadata encoded after image data are not supported\n//  - images without any `ispe` box are not supported\n//\n\n/* eslint-disable consistent-return */\n'use strict';\n\nvar str2arr = require('../common').str2arr;\n\nvar sliceEq = require('../common').sliceEq;\n\nvar readUInt32BE = require('../common').readUInt32BE;\n\nvar miaf = require('../miaf_utils');\n\nvar exif = require('../exif_utils');\n\nvar SIG_FTYP = str2arr('ftyp');\n\nmodule.exports = function (data) {\n  // ISO media file (avif format) starts with ftyp box:\n  // 0000 0020 6674 7970 6176 6966\n  //  (length)  f t  y p  a v  i f\n  //\n  if (!sliceEq(data, 4, SIG_FTYP)) return;\n  var firstBox = miaf.unbox(data, 0);\n  if (!firstBox) return;\n  var fileType = miaf.getMimeType(firstBox.data);\n  if (!fileType) return;\n  var meta,\n      offset = firstBox.end;\n\n  for (;;) {\n    var box = miaf.unbox(data, offset);\n    if (!box) break;\n    offset = box.end; // mdat block SHOULD be last (but not strictly required),\n    // so it's unlikely that metadata is after it\n\n    if (box.boxtype === 'mdat') return;\n\n    if (box.boxtype === 'meta') {\n      meta = box.data;\n      break;\n    }\n  }\n\n  if (!meta) return;\n  var imgSize = miaf.readSizeFromMeta(meta);\n  if (!imgSize) return;\n  var result = {\n    width: imgSize.width,\n    height: imgSize.height,\n    type: fileType.type,\n    mime: fileType.mime,\n    wUnits: 'px',\n    hUnits: 'px'\n  };\n\n  if (imgSize.variants.length > 1) {\n    result.variants = imgSize.variants;\n  }\n\n  if (imgSize.orientation) {\n    result.orientation = imgSize.orientation;\n  }\n\n  if (imgSize.exif_location && imgSize.exif_location.offset + imgSize.exif_location.length <= data.length) {\n    var sig_offset = readUInt32BE(data, imgSize.exif_location.offset);\n    var exif_data = data.slice(imgSize.exif_location.offset + sig_offset + 4, imgSize.exif_location.offset + imgSize.exif_location.length);\n    var orientation = exif.get_orientation(exif_data);\n    if (orientation > 0) result.orientation = orientation;\n  }\n\n  return result;\n};","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/probe-image-size/lib/parse_sync/avif.js"],"names":["str2arr","require","sliceEq","readUInt32BE","miaf","exif","SIG_FTYP","module","exports","data","firstBox","unbox","fileType","getMimeType","meta","offset","end","box","boxtype","imgSize","readSizeFromMeta","result","width","height","type","mime","wUnits","hUnits","variants","length","orientation","exif_location","sig_offset","exif_data","slice","get_orientation"],"mappings":"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","sourcesContent":["// Utils used to parse miaf-based files (avif/heic/heif)\n//\n//  - image collections are not supported (only last size is reported)\n//  - images with metadata encoded after image data are not supported\n//  - images without any `ispe` box are not supported\n//\n\n/* eslint-disable consistent-return */\n\n'use strict';\n\n\nvar str2arr      = require('../common').str2arr;\nvar sliceEq      = require('../common').sliceEq;\nvar readUInt32BE = require('../common').readUInt32BE;\nvar miaf         = require('../miaf_utils');\nvar exif         = require('../exif_utils');\n\nvar SIG_FTYP = str2arr('ftyp');\n\n\nmodule.exports = function (data) {\n  // ISO media file (avif format) starts with ftyp box:\n  // 0000 0020 6674 7970 6176 6966\n  //  (length)  f t  y p  a v  i f\n  //\n  if (!sliceEq(data, 4, SIG_FTYP)) return;\n\n  var firstBox = miaf.unbox(data, 0);\n  if (!firstBox) return;\n\n  var fileType = miaf.getMimeType(firstBox.data);\n  if (!fileType) return;\n\n  var meta, offset = firstBox.end;\n\n  for (;;) {\n    var box = miaf.unbox(data, offset);\n    if (!box) break;\n    offset = box.end;\n\n    // mdat block SHOULD be last (but not strictly required),\n    // so it's unlikely that metadata is after it\n    if (box.boxtype === 'mdat') return;\n    if (box.boxtype === 'meta') {\n      meta = box.data;\n      break;\n    }\n  }\n\n  if (!meta) return;\n\n  var imgSize = miaf.readSizeFromMeta(meta);\n\n  if (!imgSize) return;\n\n  var result = {\n    width:    imgSize.width,\n    height:   imgSize.height,\n    type:     fileType.type,\n    mime:     fileType.mime,\n    wUnits:   'px',\n    hUnits:   'px'\n  };\n\n  if (imgSize.variants.length > 1) {\n    result.variants = imgSize.variants;\n  }\n\n  if (imgSize.orientation) {\n    result.orientation = imgSize.orientation;\n  }\n\n  if (imgSize.exif_location &&\n      imgSize.exif_location.offset + imgSize.exif_location.length <= data.length) {\n\n    var sig_offset = readUInt32BE(data, imgSize.exif_location.offset);\n    var exif_data = data.slice(\n      imgSize.exif_location.offset + sig_offset + 4,\n      imgSize.exif_location.offset + imgSize.exif_location.length);\n\n    var orientation = exif.get_orientation(exif_data);\n\n    if (orientation > 0) result.orientation = orientation;\n  }\n\n  return result;\n};\n"]},"metadata":{},"sourceType":"script"}