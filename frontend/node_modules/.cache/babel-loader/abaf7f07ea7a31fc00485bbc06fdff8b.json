{"ast":null,"code":"'use strict';\n\nvar scatterHover = require('../scatter/hover');\n\nmodule.exports = function hoverPoints(pointData, xval, yval, hovermode) {\n  var scatterPointData = scatterHover(pointData, xval, yval, hovermode);\n  if (!scatterPointData || scatterPointData[0].index === false) return;\n  var newPointData = scatterPointData[0]; // if hovering on a fill, we don't show any point data so the label is\n  // unchanged from what scatter gives us - except that it needs to\n  // be constrained to the trianglular plot area, not just the rectangular\n  // area defined by the synthetic x and y axes\n  // TODO: in some cases the vertical middle of the shape is not within\n  // the triangular viewport at all, so the label can become disconnected\n  // from the shape entirely. But calculating what portion of the shape\n  // is actually visible, as constrained by the diagonal axis lines, is not\n  // so easy and anyway we lost the information we would have needed to do\n  // this inside scatterHover.\n\n  if (newPointData.index === undefined) {\n    var yFracUp = 1 - newPointData.y0 / pointData.ya._length;\n    var xLen = pointData.xa._length;\n    var xMin = xLen * yFracUp / 2;\n    var xMax = xLen - xMin;\n    newPointData.x0 = Math.max(Math.min(newPointData.x0, xMax), xMin);\n    newPointData.x1 = Math.max(Math.min(newPointData.x1, xMax), xMin);\n    return scatterPointData;\n  }\n\n  var cdi = newPointData.cd[newPointData.index];\n  var trace = newPointData.trace;\n  var subplot = newPointData.subplot;\n  newPointData.a = cdi.a;\n  newPointData.b = cdi.b;\n  newPointData.c = cdi.c;\n  newPointData.xLabelVal = undefined;\n  newPointData.yLabelVal = undefined;\n  var fullLayout = {};\n  fullLayout[trace.subplot] = {\n    _subplot: subplot\n  };\n\n  var labels = trace._module.formatLabels(cdi, trace, fullLayout);\n\n  newPointData.aLabel = labels.aLabel;\n  newPointData.bLabel = labels.bLabel;\n  newPointData.cLabel = labels.cLabel;\n  var hoverinfo = cdi.hi || trace.hoverinfo;\n  var text = [];\n\n  function textPart(ax, val) {\n    text.push(ax._hovertitle + ': ' + val);\n  }\n\n  if (!trace.hovertemplate) {\n    var parts = hoverinfo.split('+');\n    if (parts.indexOf('all') !== -1) parts = ['a', 'b', 'c'];\n    if (parts.indexOf('a') !== -1) textPart(subplot.aaxis, newPointData.aLabel);\n    if (parts.indexOf('b') !== -1) textPart(subplot.baxis, newPointData.bLabel);\n    if (parts.indexOf('c') !== -1) textPart(subplot.caxis, newPointData.cLabel);\n  }\n\n  newPointData.extraText = text.join('<br>');\n  newPointData.hovertemplate = trace.hovertemplate;\n  return scatterPointData;\n};","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/plotly.js/src/traces/scatterternary/hover.js"],"names":["scatterHover","require","module","exports","hoverPoints","pointData","xval","yval","hovermode","scatterPointData","index","newPointData","undefined","yFracUp","y0","ya","_length","xLen","xa","xMin","xMax","x0","Math","max","min","x1","cdi","cd","trace","subplot","a","b","c","xLabelVal","yLabelVal","fullLayout","_subplot","labels","_module","formatLabels","aLabel","bLabel","cLabel","hoverinfo","hi","text","textPart","ax","val","push","_hovertitle","hovertemplate","parts","split","indexOf","aaxis","baxis","caxis","extraText","join"],"mappings":"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","sourcesContent":["'use strict';\n\nvar scatterHover = require('../scatter/hover');\n\nmodule.exports = function hoverPoints(pointData, xval, yval, hovermode) {\n    var scatterPointData = scatterHover(pointData, xval, yval, hovermode);\n    if(!scatterPointData || scatterPointData[0].index === false) return;\n\n    var newPointData = scatterPointData[0];\n\n    // if hovering on a fill, we don't show any point data so the label is\n    // unchanged from what scatter gives us - except that it needs to\n    // be constrained to the trianglular plot area, not just the rectangular\n    // area defined by the synthetic x and y axes\n    // TODO: in some cases the vertical middle of the shape is not within\n    // the triangular viewport at all, so the label can become disconnected\n    // from the shape entirely. But calculating what portion of the shape\n    // is actually visible, as constrained by the diagonal axis lines, is not\n    // so easy and anyway we lost the information we would have needed to do\n    // this inside scatterHover.\n    if(newPointData.index === undefined) {\n        var yFracUp = 1 - (newPointData.y0 / pointData.ya._length);\n        var xLen = pointData.xa._length;\n        var xMin = xLen * yFracUp / 2;\n        var xMax = xLen - xMin;\n        newPointData.x0 = Math.max(Math.min(newPointData.x0, xMax), xMin);\n        newPointData.x1 = Math.max(Math.min(newPointData.x1, xMax), xMin);\n        return scatterPointData;\n    }\n\n    var cdi = newPointData.cd[newPointData.index];\n    var trace = newPointData.trace;\n    var subplot = newPointData.subplot;\n\n    newPointData.a = cdi.a;\n    newPointData.b = cdi.b;\n    newPointData.c = cdi.c;\n\n    newPointData.xLabelVal = undefined;\n    newPointData.yLabelVal = undefined;\n\n    var fullLayout = {};\n    fullLayout[trace.subplot] = {_subplot: subplot};\n    var labels = trace._module.formatLabels(cdi, trace, fullLayout);\n    newPointData.aLabel = labels.aLabel;\n    newPointData.bLabel = labels.bLabel;\n    newPointData.cLabel = labels.cLabel;\n\n    var hoverinfo = cdi.hi || trace.hoverinfo;\n    var text = [];\n    function textPart(ax, val) {\n        text.push(ax._hovertitle + ': ' + val);\n    }\n    if(!trace.hovertemplate) {\n        var parts = hoverinfo.split('+');\n        if(parts.indexOf('all') !== -1) parts = ['a', 'b', 'c'];\n        if(parts.indexOf('a') !== -1) textPart(subplot.aaxis, newPointData.aLabel);\n        if(parts.indexOf('b') !== -1) textPart(subplot.baxis, newPointData.bLabel);\n        if(parts.indexOf('c') !== -1) textPart(subplot.caxis, newPointData.cLabel);\n    }\n    newPointData.extraText = text.join('<br>');\n    newPointData.hovertemplate = trace.hovertemplate;\n    return scatterPointData;\n};\n"]},"metadata":{},"sourceType":"script"}