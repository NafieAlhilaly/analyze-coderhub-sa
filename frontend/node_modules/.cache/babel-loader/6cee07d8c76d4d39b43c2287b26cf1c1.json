{"ast":null,"code":"'use strict';\n\nvar d3 = require('@plotly/d3');\n\nvar interpolateNumber = require('d3-interpolate').interpolateNumber;\n\nvar Plotly = require('../../plot_api/plot_api');\n\nvar Fx = require('../../components/fx');\n\nvar Lib = require('../../lib');\n\nvar strTranslate = Lib.strTranslate;\n\nvar Drawing = require('../../components/drawing');\n\nvar tinycolor = require('tinycolor2');\n\nvar svgTextUtils = require('../../lib/svg_text_utils');\n\nfunction performPlot(parcatsModels, graphDiv, layout, svg) {\n  var viewModels = parcatsModels.map(createParcatsViewModel.bind(0, graphDiv, layout)); // Get (potentially empty) parcatslayer selection with bound data to single element array\n\n  var layerSelection = svg.selectAll('g.parcatslayer').data([null]); // Initialize single parcatslayer group if it doesn't exist\n\n  layerSelection.enter().append('g').attr('class', 'parcatslayer').style('pointer-events', 'all'); // Bind data to children of layerSelection and get reference to traceSelection\n\n  var traceSelection = layerSelection.selectAll('g.trace.parcats').data(viewModels, key); // Initialize group for each trace/dimensions\n\n  var traceEnter = traceSelection.enter().append('g').attr('class', 'trace parcats'); // Update properties for each trace\n\n  traceSelection.attr('transform', function (d) {\n    return strTranslate(d.x, d.y);\n  }); // Initialize paths group\n\n  traceEnter.append('g').attr('class', 'paths'); // Update paths transform\n\n  var pathsSelection = traceSelection.select('g.paths'); // Get paths selection\n\n  var pathSelection = pathsSelection.selectAll('path.path').data(function (d) {\n    return d.paths;\n  }, key); // Update existing path colors\n\n  pathSelection.attr('fill', function (d) {\n    return d.model.color;\n  }); // Create paths\n\n  var pathSelectionEnter = pathSelection.enter().append('path').attr('class', 'path').attr('stroke-opacity', 0).attr('fill', function (d) {\n    return d.model.color;\n  }).attr('fill-opacity', 0);\n  stylePathsNoHover(pathSelectionEnter); // Set path geometry\n\n  pathSelection.attr('d', function (d) {\n    return d.svgD;\n  }); // sort paths\n\n  if (!pathSelectionEnter.empty()) {\n    // Only sort paths if there has been a change.\n    // Otherwise paths are already sorted or a hover operation may be in progress\n    pathSelection.sort(compareRawColor);\n  } // Remove any old paths\n\n\n  pathSelection.exit().remove(); // Path hover\n\n  pathSelection.on('mouseover', mouseoverPath).on('mouseout', mouseoutPath).on('click', clickPath); // Initialize dimensions group\n\n  traceEnter.append('g').attr('class', 'dimensions'); // Update dimensions transform\n\n  var dimensionsSelection = traceSelection.select('g.dimensions'); // Get dimension selection\n\n  var dimensionSelection = dimensionsSelection.selectAll('g.dimension').data(function (d) {\n    return d.dimensions;\n  }, key); // Create dimension groups\n\n  dimensionSelection.enter().append('g').attr('class', 'dimension'); // Update dimension group transforms\n\n  dimensionSelection.attr('transform', function (d) {\n    return strTranslate(d.x, 0);\n  }); // Remove any old dimensions\n\n  dimensionSelection.exit().remove(); // Get category selection\n\n  var categorySelection = dimensionSelection.selectAll('g.category').data(function (d) {\n    return d.categories;\n  }, key); // Initialize category groups\n\n  var categoryGroupEnterSelection = categorySelection.enter().append('g').attr('class', 'category'); // Update category transforms\n\n  categorySelection.attr('transform', function (d) {\n    return strTranslate(0, d.y);\n  }); // Initialize rectangle\n\n  categoryGroupEnterSelection.append('rect').attr('class', 'catrect').attr('pointer-events', 'none'); // Update rectangle\n\n  categorySelection.select('rect.catrect').attr('fill', 'none').attr('width', function (d) {\n    return d.width;\n  }).attr('height', function (d) {\n    return d.height;\n  });\n  styleCategoriesNoHover(categoryGroupEnterSelection); // Initialize color band rects\n\n  var bandSelection = categorySelection.selectAll('rect.bandrect').data(\n  /** @param {CategoryViewModel} catViewModel*/\n  function (catViewModel) {\n    return catViewModel.bands;\n  }, key); // Raise all update bands to the top so that fading enter/exit bands will be behind\n\n  bandSelection.each(function () {\n    Lib.raiseToTop(this);\n  }); // Update band color\n\n  bandSelection.attr('fill', function (d) {\n    return d.color;\n  });\n  var bandsSelectionEnter = bandSelection.enter().append('rect').attr('class', 'bandrect').attr('stroke-opacity', 0).attr('fill', function (d) {\n    return d.color;\n  }).attr('fill-opacity', 0);\n  bandSelection.attr('fill', function (d) {\n    return d.color;\n  }).attr('width', function (d) {\n    return d.width;\n  }).attr('height', function (d) {\n    return d.height;\n  }).attr('y', function (d) {\n    return d.y;\n  }).attr('cursor',\n  /** @param {CategoryBandViewModel} bandModel*/\n  function (bandModel) {\n    if (bandModel.parcatsViewModel.arrangement === 'fixed') {\n      return 'default';\n    } else if (bandModel.parcatsViewModel.arrangement === 'perpendicular') {\n      return 'ns-resize';\n    } else {\n      return 'move';\n    }\n  });\n  styleBandsNoHover(bandsSelectionEnter);\n  bandSelection.exit().remove(); // Initialize category label\n\n  categoryGroupEnterSelection.append('text').attr('class', 'catlabel').attr('pointer-events', 'none');\n  var paperColor = graphDiv._fullLayout.paper_bgcolor; // Update category label\n\n  categorySelection.select('text.catlabel').attr('text-anchor', function (d) {\n    if (catInRightDim(d)) {\n      // Place label to the right of category\n      return 'start';\n    } else {\n      // Place label to the left of category\n      return 'end';\n    }\n  }).attr('alignment-baseline', 'middle').style('text-shadow', svgTextUtils.makeTextShadow(paperColor)).style('fill', 'rgb(0, 0, 0)').attr('x', function (d) {\n    if (catInRightDim(d)) {\n      // Place label to the right of category\n      return d.width + 5;\n    } else {\n      // Place label to the left of category\n      return -5;\n    }\n  }).attr('y', function (d) {\n    return d.height / 2;\n  }).text(function (d) {\n    return d.model.categoryLabel;\n  }).each(\n  /** @param {CategoryViewModel} catModel*/\n  function (catModel) {\n    Drawing.font(d3.select(this), catModel.parcatsViewModel.categorylabelfont);\n    svgTextUtils.convertToTspans(d3.select(this), graphDiv);\n  }); // Initialize dimension label\n\n  categoryGroupEnterSelection.append('text').attr('class', 'dimlabel'); // Update dimension label\n\n  categorySelection.select('text.dimlabel').attr('text-anchor', 'middle').attr('alignment-baseline', 'baseline').attr('cursor',\n  /** @param {CategoryViewModel} catModel*/\n  function (catModel) {\n    if (catModel.parcatsViewModel.arrangement === 'fixed') {\n      return 'default';\n    } else {\n      return 'ew-resize';\n    }\n  }).attr('x', function (d) {\n    return d.width / 2;\n  }).attr('y', -5).text(function (d, i) {\n    if (i === 0) {\n      // Add dimension label above topmost category\n      return d.parcatsViewModel.model.dimensions[d.model.dimensionInd].dimensionLabel;\n    } else {\n      return null;\n    }\n  }).each(\n  /** @param {CategoryViewModel} catModel*/\n  function (catModel) {\n    Drawing.font(d3.select(this), catModel.parcatsViewModel.labelfont);\n  }); // Category hover\n  // categorySelection.select('rect.catrect')\n\n  categorySelection.selectAll('rect.bandrect').on('mouseover', mouseoverCategoryBand).on('mouseout', mouseoutCategory); // Remove unused categories\n\n  categorySelection.exit().remove(); // Setup drag\n\n  dimensionSelection.call(d3.behavior.drag().origin(function (d) {\n    return {\n      x: d.x,\n      y: 0\n    };\n  }).on('dragstart', dragDimensionStart).on('drag', dragDimension).on('dragend', dragDimensionEnd)); // Save off selections to view models\n\n  traceSelection.each(function (d) {\n    d.traceSelection = d3.select(this);\n    d.pathSelection = d3.select(this).selectAll('g.paths').selectAll('path.path');\n    d.dimensionSelection = d3.select(this).selectAll('g.dimensions').selectAll('g.dimension');\n  }); // Remove any orphan traces\n\n  traceSelection.exit().remove();\n}\n/**\n * Create / update parcat traces\n *\n * @param {Object} graphDiv\n * @param {Object} svg\n * @param {Array.<ParcatsModel>} parcatsModels\n * @param {Layout} layout\n */\n\n\nmodule.exports = function (graphDiv, svg, parcatsModels, layout) {\n  performPlot(parcatsModels, graphDiv, layout, svg);\n};\n/**\n * Function the returns the key property of an object for use with as D3 join function\n * @param d\n */\n\n\nfunction key(d) {\n  return d.key;\n}\n/** True if a category view model is in the right-most display dimension\n * @param {CategoryViewModel} d */\n\n\nfunction catInRightDim(d) {\n  var numDims = d.parcatsViewModel.dimensions.length;\n  var leftDimInd = d.parcatsViewModel.dimensions[numDims - 1].model.dimensionInd;\n  return d.model.dimensionInd === leftDimInd;\n}\n/**\n * @param {PathViewModel} a\n * @param {PathViewModel} b\n */\n\n\nfunction compareRawColor(a, b) {\n  if (a.model.rawColor > b.model.rawColor) {\n    return 1;\n  } else if (a.model.rawColor < b.model.rawColor) {\n    return -1;\n  } else {\n    return 0;\n  }\n}\n/**\n * Handle path mouseover\n * @param {PathViewModel} d\n */\n\n\nfunction mouseoverPath(d) {\n  if (!d.parcatsViewModel.dragDimension) {\n    // We're not currently dragging\n    if (d.parcatsViewModel.hoverinfoItems.indexOf('skip') === -1) {\n      // hoverinfo is not skip, so we at least style the paths and emit interaction events\n      // Raise path to top\n      Lib.raiseToTop(this);\n      stylePathsHover(d3.select(this)); // Emit hover event\n\n      var points = buildPointsArrayForPath(d);\n      var constraints = buildConstraintsForPath(d);\n      d.parcatsViewModel.graphDiv.emit('plotly_hover', {\n        points: points,\n        event: d3.event,\n        constraints: constraints\n      }); // Handle hover label\n\n      if (d.parcatsViewModel.hoverinfoItems.indexOf('none') === -1) {\n        // hoverinfo is a combination of 'count' and 'probability'\n        // Mouse\n        var hoverX = d3.mouse(this)[0]; // Label\n\n        var gd = d.parcatsViewModel.graphDiv;\n        var trace = d.parcatsViewModel.trace;\n        var fullLayout = gd._fullLayout;\n\n        var rootBBox = fullLayout._paperdiv.node().getBoundingClientRect();\n\n        var graphDivBBox = d.parcatsViewModel.graphDiv.getBoundingClientRect(); // Find path center in path coordinates\n\n        var pathCenterX, pathCenterY, dimInd;\n\n        for (dimInd = 0; dimInd < d.leftXs.length - 1; dimInd++) {\n          if (d.leftXs[dimInd] + d.dimWidths[dimInd] - 2 <= hoverX && hoverX <= d.leftXs[dimInd + 1] + 2) {\n            var leftDim = d.parcatsViewModel.dimensions[dimInd];\n            var rightDim = d.parcatsViewModel.dimensions[dimInd + 1];\n            pathCenterX = (leftDim.x + leftDim.width + rightDim.x) / 2;\n            pathCenterY = (d.topYs[dimInd] + d.topYs[dimInd + 1] + d.height) / 2;\n            break;\n          }\n        } // Find path center in root coordinates\n\n\n        var hoverCenterX = d.parcatsViewModel.x + pathCenterX;\n        var hoverCenterY = d.parcatsViewModel.y + pathCenterY;\n        var textColor = tinycolor.mostReadable(d.model.color, ['black', 'white']);\n        var count = d.model.count;\n        var prob = count / d.parcatsViewModel.model.count;\n        var labels = {\n          countLabel: count,\n          probabilityLabel: prob.toFixed(3)\n        }; // Build hover text\n\n        var hovertextParts = [];\n\n        if (d.parcatsViewModel.hoverinfoItems.indexOf('count') !== -1) {\n          hovertextParts.push(['Count:', labels.countLabel].join(' '));\n        }\n\n        if (d.parcatsViewModel.hoverinfoItems.indexOf('probability') !== -1) {\n          hovertextParts.push(['P:', labels.probabilityLabel].join(' '));\n        }\n\n        var hovertext = hovertextParts.join('<br>');\n        var mouseX = d3.mouse(gd)[0];\n        Fx.loneHover({\n          trace: trace,\n          x: hoverCenterX - rootBBox.left + graphDivBBox.left,\n          y: hoverCenterY - rootBBox.top + graphDivBBox.top,\n          text: hovertext,\n          color: d.model.color,\n          borderColor: 'black',\n          fontFamily: 'Monaco, \"Courier New\", monospace',\n          fontSize: 10,\n          fontColor: textColor,\n          idealAlign: mouseX < hoverCenterX ? 'right' : 'left',\n          hovertemplate: (trace.line || {}).hovertemplate,\n          hovertemplateLabels: labels,\n          eventData: [{\n            data: trace._input,\n            fullData: trace,\n            count: count,\n            probability: prob\n          }]\n        }, {\n          container: fullLayout._hoverlayer.node(),\n          outerContainer: fullLayout._paper.node(),\n          gd: gd\n        });\n      }\n    }\n  }\n}\n/**\n * Handle path mouseout\n * @param {PathViewModel} d\n */\n\n\nfunction mouseoutPath(d) {\n  if (!d.parcatsViewModel.dragDimension) {\n    // We're not currently dragging\n    stylePathsNoHover(d3.select(this)); // Remove and hover label\n\n    Fx.loneUnhover(d.parcatsViewModel.graphDiv._fullLayout._hoverlayer.node()); // Restore path order\n\n    d.parcatsViewModel.pathSelection.sort(compareRawColor); // Emit unhover event\n\n    if (d.parcatsViewModel.hoverinfoItems.indexOf('skip') === -1) {\n      var points = buildPointsArrayForPath(d);\n      var constraints = buildConstraintsForPath(d);\n      d.parcatsViewModel.graphDiv.emit('plotly_unhover', {\n        points: points,\n        event: d3.event,\n        constraints: constraints\n      });\n    }\n  }\n}\n/**\n * Build array of point objects for a path\n *\n * For use in click/hover events\n * @param {PathViewModel} d\n */\n\n\nfunction buildPointsArrayForPath(d) {\n  var points = [];\n  var curveNumber = getTraceIndex(d.parcatsViewModel);\n\n  for (var i = 0; i < d.model.valueInds.length; i++) {\n    var pointNumber = d.model.valueInds[i];\n    points.push({\n      curveNumber: curveNumber,\n      pointNumber: pointNumber\n    });\n  }\n\n  return points;\n}\n/**\n * Build constraints object for a path\n *\n * For use in click/hover events\n * @param {PathViewModel} d\n */\n\n\nfunction buildConstraintsForPath(d) {\n  var constraints = {};\n  var dimensions = d.parcatsViewModel.model.dimensions; // dimensions\n\n  for (var i = 0; i < dimensions.length; i++) {\n    var dimension = dimensions[i];\n    var category = dimension.categories[d.model.categoryInds[i]];\n    constraints[dimension.containerInd] = category.categoryValue;\n  } // color\n\n\n  if (d.model.rawColor !== undefined) {\n    constraints.color = d.model.rawColor;\n  }\n\n  return constraints;\n}\n/**\n * Handle path click\n * @param {PathViewModel} d\n */\n\n\nfunction clickPath(d) {\n  if (d.parcatsViewModel.hoverinfoItems.indexOf('skip') === -1) {\n    // hoverinfo it's skip, so interaction events aren't disabled\n    var points = buildPointsArrayForPath(d);\n    var constraints = buildConstraintsForPath(d);\n    d.parcatsViewModel.graphDiv.emit('plotly_click', {\n      points: points,\n      event: d3.event,\n      constraints: constraints\n    });\n  }\n}\n\nfunction stylePathsNoHover(pathSelection) {\n  pathSelection.attr('fill', function (d) {\n    return d.model.color;\n  }).attr('fill-opacity', 0.6).attr('stroke', 'lightgray').attr('stroke-width', 0.2).attr('stroke-opacity', 1.0);\n}\n\nfunction stylePathsHover(pathSelection) {\n  pathSelection.attr('fill-opacity', 0.8).attr('stroke', function (d) {\n    return tinycolor.mostReadable(d.model.color, ['black', 'white']);\n  }).attr('stroke-width', 0.3);\n}\n\nfunction styleCategoryHover(categorySelection) {\n  categorySelection.select('rect.catrect').attr('stroke', 'black').attr('stroke-width', 2.5);\n}\n\nfunction styleCategoriesNoHover(categorySelection) {\n  categorySelection.select('rect.catrect').attr('stroke', 'black').attr('stroke-width', 1).attr('stroke-opacity', 1);\n}\n\nfunction styleBandsHover(bandsSelection) {\n  bandsSelection.attr('stroke', 'black').attr('stroke-width', 1.5);\n}\n\nfunction styleBandsNoHover(bandsSelection) {\n  bandsSelection.attr('stroke', 'black').attr('stroke-width', 0.2).attr('stroke-opacity', 1.0).attr('fill-opacity', 1.0);\n}\n/**\n * Return selection of all paths that pass through the specified category\n * @param {CategoryBandViewModel} catBandViewModel\n */\n\n\nfunction selectPathsThroughCategoryBandColor(catBandViewModel) {\n  var allPaths = catBandViewModel.parcatsViewModel.pathSelection;\n  var dimInd = catBandViewModel.categoryViewModel.model.dimensionInd;\n  var catInd = catBandViewModel.categoryViewModel.model.categoryInd;\n  return allPaths.filter(\n  /** @param {PathViewModel} pathViewModel */\n  function (pathViewModel) {\n    return pathViewModel.model.categoryInds[dimInd] === catInd && pathViewModel.model.color === catBandViewModel.color;\n  });\n}\n/**\n * Perform hover styling for all paths that pass though the specified band element's category\n *\n * @param {HTMLElement} bandElement\n *  HTML element for band\n *\n */\n\n\nfunction styleForCategoryHovermode(bandElement) {\n  // Get all bands in the current category\n  var bandSel = d3.select(bandElement.parentNode).selectAll('rect.bandrect'); // Raise and style paths\n\n  bandSel.each(function (bvm) {\n    var paths = selectPathsThroughCategoryBandColor(bvm);\n    stylePathsHover(paths);\n    paths.each(function () {\n      // Raise path to top\n      Lib.raiseToTop(this);\n    });\n  }); // Style category\n\n  styleCategoryHover(d3.select(bandElement.parentNode));\n}\n/**\n * Perform hover styling for all paths that pass though the category of the specified band element and share the\n * same color\n *\n * @param {HTMLElement} bandElement\n *  HTML element for band\n *\n */\n\n\nfunction styleForColorHovermode(bandElement) {\n  var bandViewModel = d3.select(bandElement).datum();\n  var catPaths = selectPathsThroughCategoryBandColor(bandViewModel);\n  stylePathsHover(catPaths);\n  catPaths.each(function () {\n    // Raise path to top\n    Lib.raiseToTop(this);\n  }); // Style category for drag\n\n  d3.select(bandElement.parentNode).selectAll('rect.bandrect').filter(function (b) {\n    return b.color === bandViewModel.color;\n  }).each(function () {\n    Lib.raiseToTop(this);\n    styleBandsHover(d3.select(this));\n  });\n}\n/**\n * @param {HTMLElement} bandElement\n *  HTML element for band\n * @param eventName\n *  Event name (plotly_hover or plotly_click)\n * @param event\n *  Mouse Event\n */\n\n\nfunction emitPointsEventCategoryHovermode(bandElement, eventName, event) {\n  // Get all bands in the current category\n  var bandViewModel = d3.select(bandElement).datum();\n  var categoryModel = bandViewModel.categoryViewModel.model;\n  var gd = bandViewModel.parcatsViewModel.graphDiv;\n  var bandSel = d3.select(bandElement.parentNode).selectAll('rect.bandrect');\n  var points = [];\n  bandSel.each(function (bvm) {\n    var paths = selectPathsThroughCategoryBandColor(bvm);\n    paths.each(function (pathViewModel) {\n      // Extend points array\n      Array.prototype.push.apply(points, buildPointsArrayForPath(pathViewModel));\n    });\n  });\n  var constraints = {};\n  constraints[categoryModel.dimensionInd] = categoryModel.categoryValue;\n  gd.emit(eventName, {\n    points: points,\n    event: event,\n    constraints: constraints\n  });\n}\n/**\n * @param {HTMLElement} bandElement\n *  HTML element for band\n * @param eventName\n *  Event name (plotly_hover or plotly_click)\n * @param event\n *  Mouse Event\n */\n\n\nfunction emitPointsEventColorHovermode(bandElement, eventName, event) {\n  var bandViewModel = d3.select(bandElement).datum();\n  var categoryModel = bandViewModel.categoryViewModel.model;\n  var gd = bandViewModel.parcatsViewModel.graphDiv;\n  var paths = selectPathsThroughCategoryBandColor(bandViewModel);\n  var points = [];\n  paths.each(function (pathViewModel) {\n    // Extend points array\n    Array.prototype.push.apply(points, buildPointsArrayForPath(pathViewModel));\n  });\n  var constraints = {};\n  constraints[categoryModel.dimensionInd] = categoryModel.categoryValue; // color\n\n  if (bandViewModel.rawColor !== undefined) {\n    constraints.color = bandViewModel.rawColor;\n  }\n\n  gd.emit(eventName, {\n    points: points,\n    event: event,\n    constraints: constraints\n  });\n}\n/**\n * Create hover label for a band element's category (for use when hoveron === 'category')\n *\n * @param {ClientRect} rootBBox\n *  Client bounding box for root of figure\n * @param {HTMLElement} bandElement\n *  HTML element for band\n *\n */\n\n\nfunction createHoverLabelForCategoryHovermode(gd, rootBBox, bandElement) {\n  gd._fullLayout._calcInverseTransform(gd);\n\n  var scaleX = gd._fullLayout._invScaleX;\n  var scaleY = gd._fullLayout._invScaleY; // Selections\n\n  var rectSelection = d3.select(bandElement.parentNode).select('rect.catrect');\n  var rectBoundingBox = rectSelection.node().getBoundingClientRect(); // Models\n\n  /** @type {CategoryViewModel} */\n\n  var catViewModel = rectSelection.datum();\n  var parcatsViewModel = catViewModel.parcatsViewModel;\n  var dimensionModel = parcatsViewModel.model.dimensions[catViewModel.model.dimensionInd];\n  var trace = parcatsViewModel.trace; // Positions\n\n  var hoverCenterY = rectBoundingBox.top + rectBoundingBox.height / 2;\n  var hoverCenterX, hoverLabelIdealAlign;\n\n  if (parcatsViewModel.dimensions.length > 1 && dimensionModel.displayInd === parcatsViewModel.dimensions.length - 1) {\n    // right most dimension\n    hoverCenterX = rectBoundingBox.left;\n    hoverLabelIdealAlign = 'left';\n  } else {\n    hoverCenterX = rectBoundingBox.left + rectBoundingBox.width;\n    hoverLabelIdealAlign = 'right';\n  }\n\n  var count = catViewModel.model.count;\n  var catLabel = catViewModel.model.categoryLabel;\n  var prob = count / catViewModel.parcatsViewModel.model.count;\n  var labels = {\n    countLabel: count,\n    categoryLabel: catLabel,\n    probabilityLabel: prob.toFixed(3)\n  }; // Hover label text\n\n  var hoverinfoParts = [];\n\n  if (catViewModel.parcatsViewModel.hoverinfoItems.indexOf('count') !== -1) {\n    hoverinfoParts.push(['Count:', labels.countLabel].join(' '));\n  }\n\n  if (catViewModel.parcatsViewModel.hoverinfoItems.indexOf('probability') !== -1) {\n    hoverinfoParts.push(['P(' + labels.categoryLabel + '):', labels.probabilityLabel].join(' '));\n  }\n\n  var hovertext = hoverinfoParts.join('<br>');\n  return {\n    trace: trace,\n    x: scaleX * (hoverCenterX - rootBBox.left),\n    y: scaleY * (hoverCenterY - rootBBox.top),\n    text: hovertext,\n    color: 'lightgray',\n    borderColor: 'black',\n    fontFamily: 'Monaco, \"Courier New\", monospace',\n    fontSize: 12,\n    fontColor: 'black',\n    idealAlign: hoverLabelIdealAlign,\n    hovertemplate: trace.hovertemplate,\n    hovertemplateLabels: labels,\n    eventData: [{\n      data: trace._input,\n      fullData: trace,\n      count: count,\n      category: catLabel,\n      probability: prob\n    }]\n  };\n}\n/**\n * Create hover label for a band element's category (for use when hoveron === 'category')\n *\n * @param {ClientRect} rootBBox\n *  Client bounding box for root of figure\n * @param {HTMLElement} bandElement\n *  HTML element for band\n *\n */\n\n\nfunction createHoverLabelForDimensionHovermode(gd, rootBBox, bandElement) {\n  var allHoverlabels = [];\n  d3.select(bandElement.parentNode.parentNode).selectAll('g.category').select('rect.catrect').each(function () {\n    var bandNode = this;\n    allHoverlabels.push(createHoverLabelForCategoryHovermode(gd, rootBBox, bandNode));\n  });\n  return allHoverlabels;\n}\n/**\n * Create hover labels for a band element's category (for use when hoveron === 'dimension')\n *\n * @param {ClientRect} rootBBox\n *  Client bounding box for root of figure\n * @param {HTMLElement} bandElement\n *  HTML element for band\n *\n */\n\n\nfunction createHoverLabelForColorHovermode(gd, rootBBox, bandElement) {\n  gd._fullLayout._calcInverseTransform(gd);\n\n  var scaleX = gd._fullLayout._invScaleX;\n  var scaleY = gd._fullLayout._invScaleY;\n  var bandBoundingBox = bandElement.getBoundingClientRect(); // Models\n\n  /** @type {CategoryBandViewModel} */\n\n  var bandViewModel = d3.select(bandElement).datum();\n  var catViewModel = bandViewModel.categoryViewModel;\n  var parcatsViewModel = catViewModel.parcatsViewModel;\n  var dimensionModel = parcatsViewModel.model.dimensions[catViewModel.model.dimensionInd];\n  var trace = parcatsViewModel.trace; // positions\n\n  var hoverCenterY = bandBoundingBox.y + bandBoundingBox.height / 2;\n  var hoverCenterX, hoverLabelIdealAlign;\n\n  if (parcatsViewModel.dimensions.length > 1 && dimensionModel.displayInd === parcatsViewModel.dimensions.length - 1) {\n    // right most dimension\n    hoverCenterX = bandBoundingBox.left;\n    hoverLabelIdealAlign = 'left';\n  } else {\n    hoverCenterX = bandBoundingBox.left + bandBoundingBox.width;\n    hoverLabelIdealAlign = 'right';\n  } // Labels\n\n\n  var catLabel = catViewModel.model.categoryLabel; // Counts\n\n  var totalCount = bandViewModel.parcatsViewModel.model.count;\n  var bandColorCount = 0;\n  bandViewModel.categoryViewModel.bands.forEach(function (b) {\n    if (b.color === bandViewModel.color) {\n      bandColorCount += b.count;\n    }\n  });\n  var catCount = catViewModel.model.count;\n  var colorCount = 0;\n  parcatsViewModel.pathSelection.each(\n  /** @param {PathViewModel} pathViewModel */\n  function (pathViewModel) {\n    if (pathViewModel.model.color === bandViewModel.color) {\n      colorCount += pathViewModel.model.count;\n    }\n  });\n  var pColorAndCat = bandColorCount / totalCount;\n  var pCatGivenColor = bandColorCount / colorCount;\n  var pColorGivenCat = bandColorCount / catCount;\n  var labels = {\n    countLabel: totalCount,\n    categoryLabel: catLabel,\n    probabilityLabel: pColorAndCat.toFixed(3)\n  }; // Hover label text\n\n  var hoverinfoParts = [];\n\n  if (catViewModel.parcatsViewModel.hoverinfoItems.indexOf('count') !== -1) {\n    hoverinfoParts.push(['Count:', labels.countLabel].join(' '));\n  }\n\n  if (catViewModel.parcatsViewModel.hoverinfoItems.indexOf('probability') !== -1) {\n    hoverinfoParts.push('P(color ∩ ' + catLabel + '): ' + labels.probabilityLabel);\n    hoverinfoParts.push('P(' + catLabel + ' | color): ' + pCatGivenColor.toFixed(3));\n    hoverinfoParts.push('P(color | ' + catLabel + '): ' + pColorGivenCat.toFixed(3));\n  }\n\n  var hovertext = hoverinfoParts.join('<br>'); // Compute text color\n\n  var textColor = tinycolor.mostReadable(bandViewModel.color, ['black', 'white']);\n  return {\n    trace: trace,\n    x: scaleX * (hoverCenterX - rootBBox.left),\n    y: scaleY * (hoverCenterY - rootBBox.top),\n    // name: 'NAME',\n    text: hovertext,\n    color: bandViewModel.color,\n    borderColor: 'black',\n    fontFamily: 'Monaco, \"Courier New\", monospace',\n    fontColor: textColor,\n    fontSize: 10,\n    idealAlign: hoverLabelIdealAlign,\n    hovertemplate: trace.hovertemplate,\n    hovertemplateLabels: labels,\n    eventData: [{\n      data: trace._input,\n      fullData: trace,\n      category: catLabel,\n      count: totalCount,\n      probability: pColorAndCat,\n      categorycount: catCount,\n      colorcount: colorCount,\n      bandcolorcount: bandColorCount\n    }]\n  };\n}\n/**\n * Handle dimension mouseover\n * @param {CategoryBandViewModel} bandViewModel\n */\n\n\nfunction mouseoverCategoryBand(bandViewModel) {\n  if (!bandViewModel.parcatsViewModel.dragDimension) {\n    // We're not currently dragging\n    if (bandViewModel.parcatsViewModel.hoverinfoItems.indexOf('skip') === -1) {\n      // hoverinfo is not skip, so we at least style the bands and emit interaction events\n      // Mouse\n      var mouseY = d3.mouse(this)[1];\n\n      if (mouseY < -1) {\n        // Hover is above above the category rectangle (probably the dimension title text)\n        return;\n      }\n\n      var gd = bandViewModel.parcatsViewModel.graphDiv;\n      var fullLayout = gd._fullLayout;\n\n      var rootBBox = fullLayout._paperdiv.node().getBoundingClientRect();\n\n      var hoveron = bandViewModel.parcatsViewModel.hoveron;\n      /** @type {HTMLElement} */\n\n      var bandElement = this; // Handle style and events\n\n      if (hoveron === 'color') {\n        styleForColorHovermode(bandElement);\n        emitPointsEventColorHovermode(bandElement, 'plotly_hover', d3.event);\n      } else {\n        styleForCategoryHovermode(bandElement);\n        emitPointsEventCategoryHovermode(bandElement, 'plotly_hover', d3.event);\n      } // Handle hover label\n\n\n      if (bandViewModel.parcatsViewModel.hoverinfoItems.indexOf('none') === -1) {\n        var hoverItems;\n\n        if (hoveron === 'category') {\n          hoverItems = createHoverLabelForCategoryHovermode(gd, rootBBox, bandElement);\n        } else if (hoveron === 'color') {\n          hoverItems = createHoverLabelForColorHovermode(gd, rootBBox, bandElement);\n        } else if (hoveron === 'dimension') {\n          hoverItems = createHoverLabelForDimensionHovermode(gd, rootBBox, bandElement);\n        }\n\n        if (hoverItems) {\n          Fx.loneHover(hoverItems, {\n            container: fullLayout._hoverlayer.node(),\n            outerContainer: fullLayout._paper.node(),\n            gd: gd\n          });\n        }\n      }\n    }\n  }\n}\n/**\n * Handle dimension mouseover\n * @param {CategoryBandViewModel} bandViewModel\n */\n\n\nfunction mouseoutCategory(bandViewModel) {\n  var parcatsViewModel = bandViewModel.parcatsViewModel;\n\n  if (!parcatsViewModel.dragDimension) {\n    // We're not dragging anything\n    // Reset unhovered styles\n    stylePathsNoHover(parcatsViewModel.pathSelection);\n    styleCategoriesNoHover(parcatsViewModel.dimensionSelection.selectAll('g.category'));\n    styleBandsNoHover(parcatsViewModel.dimensionSelection.selectAll('g.category').selectAll('rect.bandrect')); // Remove hover label\n\n    Fx.loneUnhover(parcatsViewModel.graphDiv._fullLayout._hoverlayer.node()); // Restore path order\n\n    parcatsViewModel.pathSelection.sort(compareRawColor); // Emit unhover event\n\n    if (parcatsViewModel.hoverinfoItems.indexOf('skip') === -1) {\n      var hoveron = bandViewModel.parcatsViewModel.hoveron;\n      var bandElement = this; // Handle style and events\n\n      if (hoveron === 'color') {\n        emitPointsEventColorHovermode(bandElement, 'plotly_unhover', d3.event);\n      } else {\n        emitPointsEventCategoryHovermode(bandElement, 'plotly_unhover', d3.event);\n      }\n    }\n  }\n}\n/**\n * Handle dimension drag start\n * @param {DimensionViewModel} d\n */\n\n\nfunction dragDimensionStart(d) {\n  // Check if dragging is supported\n  if (d.parcatsViewModel.arrangement === 'fixed') {\n    return;\n  } // Save off initial drag indexes for dimension\n\n\n  d.dragDimensionDisplayInd = d.model.displayInd;\n  d.initialDragDimensionDisplayInds = d.parcatsViewModel.model.dimensions.map(function (d) {\n    return d.displayInd;\n  });\n  d.dragHasMoved = false; // Check for category hit\n\n  d.dragCategoryDisplayInd = null;\n  d3.select(this).selectAll('g.category').select('rect.catrect').each(\n  /** @param {CategoryViewModel} catViewModel */\n  function (catViewModel) {\n    var catMouseX = d3.mouse(this)[0];\n    var catMouseY = d3.mouse(this)[1];\n\n    if (-2 <= catMouseX && catMouseX <= catViewModel.width + 2 && -2 <= catMouseY && catMouseY <= catViewModel.height + 2) {\n      // Save off initial drag indexes for categories\n      d.dragCategoryDisplayInd = catViewModel.model.displayInd;\n      d.initialDragCategoryDisplayInds = d.model.categories.map(function (c) {\n        return c.displayInd;\n      }); // Initialize categories dragY to be the current y position\n\n      catViewModel.model.dragY = catViewModel.y; // Raise category\n\n      Lib.raiseToTop(this.parentNode); // Get band element\n\n      d3.select(this.parentNode).selectAll('rect.bandrect')\n      /** @param {CategoryBandViewModel} bandViewModel */\n      .each(function (bandViewModel) {\n        if (bandViewModel.y < catMouseY && catMouseY <= bandViewModel.y + bandViewModel.height) {\n          d.potentialClickBand = this;\n        }\n      });\n    }\n  }); // Update toplevel drag dimension\n\n  d.parcatsViewModel.dragDimension = d; // Remove hover label if any\n\n  Fx.loneUnhover(d.parcatsViewModel.graphDiv._fullLayout._hoverlayer.node());\n}\n/**\n * Handle dimension drag\n * @param {DimensionViewModel} d\n */\n\n\nfunction dragDimension(d) {\n  // Check if dragging is supported\n  if (d.parcatsViewModel.arrangement === 'fixed') {\n    return;\n  }\n\n  d.dragHasMoved = true;\n\n  if (d.dragDimensionDisplayInd === null) {\n    return;\n  }\n\n  var dragDimInd = d.dragDimensionDisplayInd;\n  var prevDimInd = dragDimInd - 1;\n  var nextDimInd = dragDimInd + 1;\n  var dragDimension = d.parcatsViewModel.dimensions[dragDimInd]; // Update category\n\n  if (d.dragCategoryDisplayInd !== null) {\n    var dragCategory = dragDimension.categories[d.dragCategoryDisplayInd]; // Update dragY by dy\n\n    dragCategory.model.dragY += d3.event.dy;\n    var categoryY = dragCategory.model.dragY; // Check for category drag swaps\n\n    var catDisplayInd = dragCategory.model.displayInd;\n    var dimCategoryViews = dragDimension.categories;\n    var catAbove = dimCategoryViews[catDisplayInd - 1];\n    var catBelow = dimCategoryViews[catDisplayInd + 1]; // Check for overlap above\n\n    if (catAbove !== undefined) {\n      if (categoryY < catAbove.y + catAbove.height / 2.0) {\n        // Swap display inds\n        dragCategory.model.displayInd = catAbove.model.displayInd;\n        catAbove.model.displayInd = catDisplayInd;\n      }\n    }\n\n    if (catBelow !== undefined) {\n      if (categoryY + dragCategory.height > catBelow.y + catBelow.height / 2.0) {\n        // Swap display inds\n        dragCategory.model.displayInd = catBelow.model.displayInd;\n        catBelow.model.displayInd = catDisplayInd;\n      }\n    } // Update category drag display index\n\n\n    d.dragCategoryDisplayInd = dragCategory.model.displayInd;\n  } // Update dimension position\n\n\n  if (d.dragCategoryDisplayInd === null || d.parcatsViewModel.arrangement === 'freeform') {\n    dragDimension.model.dragX = d3.event.x; // Check for dimension swaps\n\n    var prevDimension = d.parcatsViewModel.dimensions[prevDimInd];\n    var nextDimension = d.parcatsViewModel.dimensions[nextDimInd];\n\n    if (prevDimension !== undefined) {\n      if (dragDimension.model.dragX < prevDimension.x + prevDimension.width) {\n        // Swap display inds\n        dragDimension.model.displayInd = prevDimension.model.displayInd;\n        prevDimension.model.displayInd = dragDimInd;\n      }\n    }\n\n    if (nextDimension !== undefined) {\n      if (dragDimension.model.dragX + dragDimension.width > nextDimension.x) {\n        // Swap display inds\n        dragDimension.model.displayInd = nextDimension.model.displayInd;\n        nextDimension.model.displayInd = d.dragDimensionDisplayInd;\n      }\n    } // Update drag display index\n\n\n    d.dragDimensionDisplayInd = dragDimension.model.displayInd;\n  } // Update view models\n\n\n  updateDimensionViewModels(d.parcatsViewModel);\n  updatePathViewModels(d.parcatsViewModel); // Update svg geometry\n\n  updateSvgCategories(d.parcatsViewModel);\n  updateSvgPaths(d.parcatsViewModel);\n}\n/**\n * Handle dimension drag end\n * @param {DimensionViewModel} d\n */\n\n\nfunction dragDimensionEnd(d) {\n  // Check if dragging is supported\n  if (d.parcatsViewModel.arrangement === 'fixed') {\n    return;\n  }\n\n  if (d.dragDimensionDisplayInd === null) {\n    return;\n  }\n\n  d3.select(this).selectAll('text').attr('font-weight', 'normal'); // Compute restyle command\n  // -----------------------\n\n  var restyleData = {};\n  var traceInd = getTraceIndex(d.parcatsViewModel); // ### Handle dimension reordering ###\n\n  var finalDragDimensionDisplayInds = d.parcatsViewModel.model.dimensions.map(function (d) {\n    return d.displayInd;\n  });\n  var anyDimsReordered = d.initialDragDimensionDisplayInds.some(function (initDimDisplay, dimInd) {\n    return initDimDisplay !== finalDragDimensionDisplayInds[dimInd];\n  });\n\n  if (anyDimsReordered) {\n    finalDragDimensionDisplayInds.forEach(function (finalDimDisplay, dimInd) {\n      var containerInd = d.parcatsViewModel.model.dimensions[dimInd].containerInd;\n      restyleData['dimensions[' + containerInd + '].displayindex'] = finalDimDisplay;\n    });\n  } // ### Handle category reordering ###\n\n\n  var anyCatsReordered = false;\n\n  if (d.dragCategoryDisplayInd !== null) {\n    var finalDragCategoryDisplayInds = d.model.categories.map(function (c) {\n      return c.displayInd;\n    });\n    anyCatsReordered = d.initialDragCategoryDisplayInds.some(function (initCatDisplay, catInd) {\n      return initCatDisplay !== finalDragCategoryDisplayInds[catInd];\n    });\n\n    if (anyCatsReordered) {\n      // Sort a shallow copy of the category models by display index\n      var sortedCategoryModels = d.model.categories.slice().sort(function (a, b) {\n        return a.displayInd - b.displayInd;\n      }); // Get new categoryarray and ticktext values\n\n      var newCategoryArray = sortedCategoryModels.map(function (v) {\n        return v.categoryValue;\n      });\n      var newCategoryLabels = sortedCategoryModels.map(function (v) {\n        return v.categoryLabel;\n      });\n      restyleData['dimensions[' + d.model.containerInd + '].categoryarray'] = [newCategoryArray];\n      restyleData['dimensions[' + d.model.containerInd + '].ticktext'] = [newCategoryLabels];\n      restyleData['dimensions[' + d.model.containerInd + '].categoryorder'] = 'array';\n    }\n  } // Handle potential click event\n  // ----------------------------\n\n\n  if (d.parcatsViewModel.hoverinfoItems.indexOf('skip') === -1) {\n    if (!d.dragHasMoved && d.potentialClickBand) {\n      if (d.parcatsViewModel.hoveron === 'color') {\n        emitPointsEventColorHovermode(d.potentialClickBand, 'plotly_click', d3.event.sourceEvent);\n      } else {\n        emitPointsEventCategoryHovermode(d.potentialClickBand, 'plotly_click', d3.event.sourceEvent);\n      }\n    }\n  } // Nullify drag states\n  // -------------------\n\n\n  d.model.dragX = null;\n\n  if (d.dragCategoryDisplayInd !== null) {\n    var dragCategory = d.parcatsViewModel.dimensions[d.dragDimensionDisplayInd].categories[d.dragCategoryDisplayInd];\n    dragCategory.model.dragY = null;\n    d.dragCategoryDisplayInd = null;\n  }\n\n  d.dragDimensionDisplayInd = null;\n  d.parcatsViewModel.dragDimension = null;\n  d.dragHasMoved = null;\n  d.potentialClickBand = null; // Update view models\n  // ------------------\n\n  updateDimensionViewModels(d.parcatsViewModel);\n  updatePathViewModels(d.parcatsViewModel); // Perform transition\n  // ------------------\n\n  var transition = d3.transition().duration(300).ease('cubic-in-out');\n  transition.each(function () {\n    updateSvgCategories(d.parcatsViewModel, true);\n    updateSvgPaths(d.parcatsViewModel, true);\n  }).each('end', function () {\n    if (anyDimsReordered || anyCatsReordered) {\n      // Perform restyle if the order of categories or dimensions changed\n      Plotly.restyle(d.parcatsViewModel.graphDiv, restyleData, [traceInd]);\n    }\n  });\n}\n/**\n *\n * @param {ParcatsViewModel} parcatsViewModel\n */\n\n\nfunction getTraceIndex(parcatsViewModel) {\n  var traceInd;\n  var allTraces = parcatsViewModel.graphDiv._fullData;\n\n  for (var i = 0; i < allTraces.length; i++) {\n    if (parcatsViewModel.key === allTraces[i].uid) {\n      traceInd = i;\n      break;\n    }\n  }\n\n  return traceInd;\n}\n/** Update the svg paths for view model\n * @param {ParcatsViewModel} parcatsViewModel\n * @param {boolean} hasTransition Whether to update element with transition\n */\n\n\nfunction updateSvgPaths(parcatsViewModel, hasTransition) {\n  if (hasTransition === undefined) {\n    hasTransition = false;\n  }\n\n  function transition(selection) {\n    return hasTransition ? selection.transition() : selection;\n  } // Update binding\n\n\n  parcatsViewModel.pathSelection.data(function (d) {\n    return d.paths;\n  }, key); // Update paths\n\n  transition(parcatsViewModel.pathSelection).attr('d', function (d) {\n    return d.svgD;\n  });\n}\n/** Update the svg paths for view model\n * @param {ParcatsViewModel} parcatsViewModel\n * @param {boolean} hasTransition Whether to update element with transition\n */\n\n\nfunction updateSvgCategories(parcatsViewModel, hasTransition) {\n  if (hasTransition === undefined) {\n    hasTransition = false;\n  }\n\n  function transition(selection) {\n    return hasTransition ? selection.transition() : selection;\n  } // Update binding\n\n\n  parcatsViewModel.dimensionSelection.data(function (d) {\n    return d.dimensions;\n  }, key);\n  var categorySelection = parcatsViewModel.dimensionSelection.selectAll('g.category').data(function (d) {\n    return d.categories;\n  }, key); // Update dimension position\n\n  transition(parcatsViewModel.dimensionSelection).attr('transform', function (d) {\n    return strTranslate(d.x, 0);\n  }); // Update category position\n\n  transition(categorySelection).attr('transform', function (d) {\n    return strTranslate(0, d.y);\n  });\n  var dimLabelSelection = categorySelection.select('.dimlabel'); // ### Update dimension label\n  // Only the top-most display category should have the dimension label\n\n  dimLabelSelection.text(function (d, i) {\n    if (i === 0) {\n      // Add dimension label above topmost category\n      return d.parcatsViewModel.model.dimensions[d.model.dimensionInd].dimensionLabel;\n    } else {\n      return null;\n    }\n  }); // Update category label\n  // Categories in the right-most display dimension have their labels on\n  // the right, all others on the left\n\n  var catLabelSelection = categorySelection.select('.catlabel');\n  catLabelSelection.attr('text-anchor', function (d) {\n    if (catInRightDim(d)) {\n      // Place label to the right of category\n      return 'start';\n    } else {\n      // Place label to the left of category\n      return 'end';\n    }\n  }).attr('x', function (d) {\n    if (catInRightDim(d)) {\n      // Place label to the right of category\n      return d.width + 5;\n    } else {\n      // Place label to the left of category\n      return -5;\n    }\n  }).each(function (d) {\n    // Update attriubutes of <tspan> elements\n    var newX;\n    var newAnchor;\n\n    if (catInRightDim(d)) {\n      // Place label to the right of category\n      newX = d.width + 5;\n      newAnchor = 'start';\n    } else {\n      // Place label to the left of category\n      newX = -5;\n      newAnchor = 'end';\n    }\n\n    d3.select(this).selectAll('tspan').attr('x', newX).attr('text-anchor', newAnchor);\n  }); // Update bands\n  // Initialize color band rects\n\n  var bandSelection = categorySelection.selectAll('rect.bandrect').data(\n  /** @param {CategoryViewModel} catViewModel*/\n  function (catViewModel) {\n    return catViewModel.bands;\n  }, key);\n  var bandsSelectionEnter = bandSelection.enter().append('rect').attr('class', 'bandrect').attr('cursor', 'move').attr('stroke-opacity', 0).attr('fill', function (d) {\n    return d.color;\n  }).attr('fill-opacity', 0);\n  bandSelection.attr('fill', function (d) {\n    return d.color;\n  }).attr('width', function (d) {\n    return d.width;\n  }).attr('height', function (d) {\n    return d.height;\n  }).attr('y', function (d) {\n    return d.y;\n  });\n  styleBandsNoHover(bandsSelectionEnter); // Raise bands to the top\n\n  bandSelection.each(function () {\n    Lib.raiseToTop(this);\n  }); // Remove unused bands\n\n  bandSelection.exit().remove();\n}\n/**\n * Create a ParcatsViewModel traces\n * @param {Object} graphDiv\n *  Top-level graph div element\n * @param {Layout} layout\n *  SVG layout object\n * @param {Array.<ParcatsModel>} wrappedParcatsModel\n *  Wrapped ParcatsModel for this trace\n * @return {ParcatsViewModel}\n */\n\n\nfunction createParcatsViewModel(graphDiv, layout, wrappedParcatsModel) {\n  // Unwrap model\n  var parcatsModel = wrappedParcatsModel[0]; // Compute margin\n\n  var margin = layout.margin || {\n    l: 80,\n    r: 80,\n    t: 100,\n    b: 80\n  }; // Compute pixel position/extents\n\n  var trace = parcatsModel.trace;\n  var domain = trace.domain;\n  var figureWidth = layout.width;\n  var figureHeight = layout.height;\n  var traceWidth = Math.floor(figureWidth * (domain.x[1] - domain.x[0]));\n  var traceHeight = Math.floor(figureHeight * (domain.y[1] - domain.y[0]));\n  var traceX = domain.x[0] * figureWidth + margin.l;\n  var traceY = layout.height - domain.y[1] * layout.height + margin.t; // Handle path shape\n  // -----------------\n\n  var pathShape = trace.line.shape; // Handle hover info\n  // -----------------\n\n  var hoverinfoItems;\n\n  if (trace.hoverinfo === 'all') {\n    hoverinfoItems = ['count', 'probability'];\n  } else {\n    hoverinfoItems = (trace.hoverinfo || '').split('+');\n  } // Construct parcatsViewModel\n  // --------------------------\n\n\n  var parcatsViewModel = {\n    trace: trace,\n    key: trace.uid,\n    model: parcatsModel,\n    x: traceX,\n    y: traceY,\n    width: traceWidth,\n    height: traceHeight,\n    hoveron: trace.hoveron,\n    hoverinfoItems: hoverinfoItems,\n    arrangement: trace.arrangement,\n    bundlecolors: trace.bundlecolors,\n    sortpaths: trace.sortpaths,\n    labelfont: trace.labelfont,\n    categorylabelfont: trace.tickfont,\n    pathShape: pathShape,\n    dragDimension: null,\n    margin: margin,\n    paths: [],\n    dimensions: [],\n    graphDiv: graphDiv,\n    traceSelection: null,\n    pathSelection: null,\n    dimensionSelection: null\n  }; // Update dimension view models if we have at least 1 dimension\n\n  if (parcatsModel.dimensions) {\n    updateDimensionViewModels(parcatsViewModel); // Update path view models if we have at least 2 dimensions\n\n    updatePathViewModels(parcatsViewModel);\n  } // Inside a categories view model\n\n\n  return parcatsViewModel;\n}\n/**\n * Build the SVG string to represents a parallel categories path\n * @param {Array.<Number>} leftXPositions\n *  Array of the x positions of the left edge of each dimension (in display order)\n * @param {Array.<Number>} pathYs\n *  Array of the y positions of the top of the path at each dimension (in display order)\n * @param {Array.<Number>} dimWidths\n *  Array of the widths of each dimension in display order\n * @param {Number} pathHeight\n *  The height of the path in pixels\n * @param {Number} curvature\n *  The curvature factor for the path. 0 results in a straight line and values greater than zero result in curved paths\n * @return {string}\n */\n\n\nfunction buildSvgPath(leftXPositions, pathYs, dimWidths, pathHeight, curvature) {\n  // Compute the x midpoint of each path segment\n  var xRefPoints1 = [];\n  var xRefPoints2 = [];\n  var refInterpolator;\n  var d;\n\n  for (d = 0; d < dimWidths.length - 1; d++) {\n    refInterpolator = interpolateNumber(dimWidths[d] + leftXPositions[d], leftXPositions[d + 1]);\n    xRefPoints1.push(refInterpolator(curvature));\n    xRefPoints2.push(refInterpolator(1 - curvature));\n  } // Move to top of path on left edge of left-most category\n\n\n  var svgD = 'M ' + leftXPositions[0] + ',' + pathYs[0]; // Horizontal line to right edge\n\n  svgD += 'l' + dimWidths[0] + ',0 '; // Horizontal line to right edge\n\n  for (d = 1; d < dimWidths.length; d++) {\n    // Curve to left edge of category\n    svgD += 'C' + xRefPoints1[d - 1] + ',' + pathYs[d - 1] + ' ' + xRefPoints2[d - 1] + ',' + pathYs[d] + ' ' + leftXPositions[d] + ',' + pathYs[d]; // svgD += 'L' + leftXPositions[d] + ',' + pathYs[d];\n    // Horizontal line to right edge\n\n    svgD += 'l' + dimWidths[d] + ',0 ';\n  } // Line down\n\n\n  svgD += 'l' + '0,' + pathHeight + ' '; // Line to left edge of right-most category\n\n  svgD += 'l -' + dimWidths[dimWidths.length - 1] + ',0 ';\n\n  for (d = dimWidths.length - 2; d >= 0; d--) {\n    // Curve to right edge of category\n    svgD += 'C' + xRefPoints2[d] + ',' + (pathYs[d + 1] + pathHeight) + ' ' + xRefPoints1[d] + ',' + (pathYs[d] + pathHeight) + ' ' + (leftXPositions[d] + dimWidths[d]) + ',' + (pathYs[d] + pathHeight); // svgD += 'L' + (leftXPositions[d] + dimWidths[d]) + ',' + (pathYs[d] + pathHeight);\n    // Horizontal line to right edge\n\n    svgD += 'l-' + dimWidths[d] + ',0 ';\n  } // Close path\n\n\n  svgD += 'Z';\n  return svgD;\n}\n/**\n * Update the path view models based on the dimension view models in a ParcatsViewModel\n *\n * @param {ParcatsViewModel} parcatsViewModel\n *  View model for trace\n */\n\n\nfunction updatePathViewModels(parcatsViewModel) {\n  // Initialize an array of the y position of the top of the next path to be added to each category.\n  //\n  // nextYPositions[d][c] is the y position of the next path through category with index c of dimension with index d\n  var dimensionViewModels = parcatsViewModel.dimensions;\n  var parcatsModel = parcatsViewModel.model;\n  var nextYPositions = dimensionViewModels.map(function (d) {\n    return d.categories.map(function (c) {\n      return c.y;\n    });\n  }); // Array from category index to category display index for each true dimension index\n\n  var catToDisplayIndPerDim = parcatsViewModel.model.dimensions.map(function (d) {\n    return d.categories.map(function (c) {\n      return c.displayInd;\n    });\n  }); // Array from true dimension index to dimension display index\n\n  var dimToDisplayInd = parcatsViewModel.model.dimensions.map(function (d) {\n    return d.displayInd;\n  });\n  var displayToDimInd = parcatsViewModel.dimensions.map(function (d) {\n    return d.model.dimensionInd;\n  }); // Array of the x position of the left edge of the rectangles for each dimension\n\n  var leftXPositions = dimensionViewModels.map(function (d) {\n    return d.x;\n  }); // Compute dimension widths\n\n  var dimWidths = dimensionViewModels.map(function (d) {\n    return d.width;\n  }); // Build sorted Array of PathModel objects\n\n  var pathModels = [];\n\n  for (var p in parcatsModel.paths) {\n    if (parcatsModel.paths.hasOwnProperty(p)) {\n      pathModels.push(parcatsModel.paths[p]);\n    }\n  } // Compute category display inds to use for sorting paths\n\n\n  function pathDisplayCategoryInds(pathModel) {\n    var dimensionInds = pathModel.categoryInds.map(function (catInd, dimInd) {\n      return catToDisplayIndPerDim[dimInd][catInd];\n    });\n    var displayInds = displayToDimInd.map(function (dimInd) {\n      return dimensionInds[dimInd];\n    });\n    return displayInds;\n  } // Sort in ascending order by display index array\n\n\n  pathModels.sort(function (v1, v2) {\n    // Build display inds for each path\n    var sortArray1 = pathDisplayCategoryInds(v1);\n    var sortArray2 = pathDisplayCategoryInds(v2); // Handle path sort order\n\n    if (parcatsViewModel.sortpaths === 'backward') {\n      sortArray1.reverse();\n      sortArray2.reverse();\n    } // Append the first value index of the path to break ties\n\n\n    sortArray1.push(v1.valueInds[0]);\n    sortArray2.push(v2.valueInds[0]); // Handle color bundling\n\n    if (parcatsViewModel.bundlecolors) {\n      // Prepend sort array with the raw color value\n      sortArray1.unshift(v1.rawColor);\n      sortArray2.unshift(v2.rawColor);\n    } // colors equal, sort by display categories\n\n\n    if (sortArray1 < sortArray2) {\n      return -1;\n    }\n\n    if (sortArray1 > sortArray2) {\n      return 1;\n    }\n\n    return 0;\n  }); // Create path models\n\n  var pathViewModels = new Array(pathModels.length);\n  var totalCount = dimensionViewModels[0].model.count;\n  var totalHeight = dimensionViewModels[0].categories.map(function (c) {\n    return c.height;\n  }).reduce(function (v1, v2) {\n    return v1 + v2;\n  });\n\n  for (var pathNumber = 0; pathNumber < pathModels.length; pathNumber++) {\n    var pathModel = pathModels[pathNumber];\n    var pathHeight;\n\n    if (totalCount > 0) {\n      pathHeight = totalHeight * (pathModel.count / totalCount);\n    } else {\n      pathHeight = 0;\n    } // Build path y coords\n\n\n    var pathYs = new Array(nextYPositions.length);\n\n    for (var d = 0; d < pathModel.categoryInds.length; d++) {\n      var catInd = pathModel.categoryInds[d];\n      var catDisplayInd = catToDisplayIndPerDim[d][catInd];\n      var dimDisplayInd = dimToDisplayInd[d]; // Update next y position\n\n      pathYs[dimDisplayInd] = nextYPositions[dimDisplayInd][catDisplayInd];\n      nextYPositions[dimDisplayInd][catDisplayInd] += pathHeight; // Update category color information\n\n      var catViewModle = parcatsViewModel.dimensions[dimDisplayInd].categories[catDisplayInd];\n      var numBands = catViewModle.bands.length;\n      var lastCatBand = catViewModle.bands[numBands - 1];\n\n      if (lastCatBand === undefined || pathModel.rawColor !== lastCatBand.rawColor) {\n        // Create a new band\n        var bandY = lastCatBand === undefined ? 0 : lastCatBand.y + lastCatBand.height;\n        catViewModle.bands.push({\n          key: bandY,\n          color: pathModel.color,\n          rawColor: pathModel.rawColor,\n          height: pathHeight,\n          width: catViewModle.width,\n          count: pathModel.count,\n          y: bandY,\n          categoryViewModel: catViewModle,\n          parcatsViewModel: parcatsViewModel\n        });\n      } else {\n        // Extend current band\n        var currentBand = catViewModle.bands[numBands - 1];\n        currentBand.height += pathHeight;\n        currentBand.count += pathModel.count;\n      }\n    } // build svg path\n\n\n    var svgD;\n\n    if (parcatsViewModel.pathShape === 'hspline') {\n      svgD = buildSvgPath(leftXPositions, pathYs, dimWidths, pathHeight, 0.5);\n    } else {\n      svgD = buildSvgPath(leftXPositions, pathYs, dimWidths, pathHeight, 0);\n    }\n\n    pathViewModels[pathNumber] = {\n      key: pathModel.valueInds[0],\n      model: pathModel,\n      height: pathHeight,\n      leftXs: leftXPositions,\n      topYs: pathYs,\n      dimWidths: dimWidths,\n      svgD: svgD,\n      parcatsViewModel: parcatsViewModel\n    };\n  }\n\n  parcatsViewModel.paths = pathViewModels; // * @property key\n  // *  Unique key for this model\n  // * @property {PathModel} model\n  // *  Source path model\n  // * @property {Number} height\n  // *  Height of this path (pixels)\n  // * @property {String} svgD\n  // *  SVG path \"d\" attribute string\n}\n/**\n * Update the dimension view models based on the dimension models in a ParcatsViewModel\n *\n * @param {ParcatsViewModel} parcatsViewModel\n *  View model for trace\n */\n\n\nfunction updateDimensionViewModels(parcatsViewModel) {\n  // Compute dimension ordering\n  var dimensionsIndInfo = parcatsViewModel.model.dimensions.map(function (d) {\n    return {\n      displayInd: d.displayInd,\n      dimensionInd: d.dimensionInd\n    };\n  });\n  dimensionsIndInfo.sort(function (a, b) {\n    return a.displayInd - b.displayInd;\n  });\n  var dimensions = [];\n\n  for (var displayInd in dimensionsIndInfo) {\n    var dimensionInd = dimensionsIndInfo[displayInd].dimensionInd;\n    var dimModel = parcatsViewModel.model.dimensions[dimensionInd];\n    dimensions.push(createDimensionViewModel(parcatsViewModel, dimModel));\n  }\n\n  parcatsViewModel.dimensions = dimensions;\n}\n/**\n * Create a parcats DimensionViewModel\n *\n * @param {ParcatsViewModel} parcatsViewModel\n *  View model for trace\n * @param {DimensionModel} dimensionModel\n * @return {DimensionViewModel}\n */\n\n\nfunction createDimensionViewModel(parcatsViewModel, dimensionModel) {\n  // Compute dimension x position\n  var categoryLabelPad = 40;\n  var dimWidth = 16;\n  var numDimensions = parcatsViewModel.model.dimensions.length;\n  var displayInd = dimensionModel.displayInd; // Compute x coordinate values\n\n  var dimDx;\n  var dimX0;\n  var dimX;\n\n  if (numDimensions > 1) {\n    dimDx = (parcatsViewModel.width - 2 * categoryLabelPad - dimWidth) / (numDimensions - 1);\n  } else {\n    dimDx = 0;\n  }\n\n  dimX0 = categoryLabelPad;\n  dimX = dimX0 + dimDx * displayInd; // Compute categories\n\n  var categories = [];\n  var maxCats = parcatsViewModel.model.maxCats;\n  var numCats = dimensionModel.categories.length;\n  var catSpacing = 8;\n  var totalCount = dimensionModel.count;\n  var totalHeight = parcatsViewModel.height - catSpacing * (maxCats - 1);\n  var nextCatHeight;\n  var nextCatModel;\n  var nextCat;\n  var catInd;\n  var catDisplayInd; // Compute starting Y offset\n\n  var nextCatY = (maxCats - numCats) * catSpacing / 2.0; // Compute category ordering\n\n  var categoryIndInfo = dimensionModel.categories.map(function (c) {\n    return {\n      displayInd: c.displayInd,\n      categoryInd: c.categoryInd\n    };\n  });\n  categoryIndInfo.sort(function (a, b) {\n    return a.displayInd - b.displayInd;\n  });\n\n  for (catDisplayInd = 0; catDisplayInd < numCats; catDisplayInd++) {\n    catInd = categoryIndInfo[catDisplayInd].categoryInd;\n    nextCatModel = dimensionModel.categories[catInd];\n\n    if (totalCount > 0) {\n      nextCatHeight = nextCatModel.count / totalCount * totalHeight;\n    } else {\n      nextCatHeight = 0;\n    }\n\n    nextCat = {\n      key: nextCatModel.valueInds[0],\n      model: nextCatModel,\n      width: dimWidth,\n      height: nextCatHeight,\n      y: nextCatModel.dragY !== null ? nextCatModel.dragY : nextCatY,\n      bands: [],\n      parcatsViewModel: parcatsViewModel\n    };\n    nextCatY = nextCatY + nextCatHeight + catSpacing;\n    categories.push(nextCat);\n  }\n\n  return {\n    key: dimensionModel.dimensionInd,\n    x: dimensionModel.dragX !== null ? dimensionModel.dragX : dimX,\n    y: 0,\n    width: dimWidth,\n    model: dimensionModel,\n    categories: categories,\n    parcatsViewModel: parcatsViewModel,\n    dragCategoryDisplayInd: null,\n    dragDimensionDisplayInd: null,\n    initialDragDimensionDisplayInds: null,\n    initialDragCategoryDisplayInds: null,\n    dragHasMoved: null,\n    potentialClickBand: null\n  };\n} // JSDoc typedefs\n// ==============\n\n/**\n * @typedef {Object} Layout\n *  Object containing svg layout information\n *\n * @property {Number} width (pixels)\n *  Usable width for Figure (after margins are removed)\n * @property {Number} height (pixels)\n *  Usable height for Figure (after margins are removed)\n * @property {Margin} margin\n *  Margin around the Figure (pixels)\n */\n\n/**\n * @typedef {Object} Margin\n *  Object containing padding information in pixels\n *\n * @property {Number} t\n *  Top margin\n * @property {Number} r\n *  Right margin\n * @property {Number} b\n *  Bottom margin\n * @property {Number} l\n *  Left margin\n */\n\n/**\n * @typedef {Object} Font\n *  Object containing font information\n *\n * @property {Number} size: Font size\n * @property {String} color: Font color\n * @property {String} family: Font family\n */\n\n/**\n * @typedef {Object} ParcatsViewModel\n *  Object containing calculated parcats view information\n *\n *  These are quantities that require Layout information to calculate\n * @property key\n *  Unique key for this model\n * @property {ParcatsModel} model\n *  Source parcats model\n * @property {Array.<DimensionViewModel>} dimensions\n *  Array of dimension view models\n * @property {Number} width\n *  Width for this trace (pixels)\n * @property {Number} height\n *  Height for this trace (pixels)\n * @property {Number} x\n *  X position of this trace with respect to the Figure (pixels)\n * @property {Number} y\n *  Y position of this trace with respect to the Figure (pixels)\n * @property {String} hoveron\n *  Hover interaction mode. One of: 'category', 'color', or 'dimension'\n * @property {Array.<String>} hoverinfoItems\n *  Info to display on hover. Array with a combination of 'counts' and/or 'probabilities', or 'none', or 'skip'\n * @property {String} arrangement\n *  Category arrangement. One of: 'perpendicular', 'freeform', or 'fixed'\n * @property {Boolean} bundlecolors\n *  Whether paths should be sorted so that like colors are bundled together as they pass through categories\n * @property {String} sortpaths\n *  If 'forward' then sort paths based on dimensions from left to right. If 'backward' sort based on dimensions\n *  from right to left\n * @property {Font} labelfont\n *  Font for the dimension labels\n * @property {Font} categorylabelfont\n *  Font for the category labels\n * @property {String} pathShape\n *  The shape of the paths. Either 'linear' or 'hspline'.\n * @property {DimensionViewModel|null} dragDimension\n *  Dimension currently being dragged. Null if no drag in progress\n * @property {Margin} margin\n *  Margin around the Figure\n * @property {Object} graphDiv\n *  Top-level graph div element\n * @property {Object} traceSelection\n *  D3 selection of this view models trace group element\n * @property {Object} pathSelection\n *  D3 selection of this view models path elements\n * @property {Object} dimensionSelection\n *  D3 selection of this view models dimension group element\n */\n\n/**\n * @typedef {Object} DimensionViewModel\n *  Object containing calculated parcats dimension view information\n *\n *  These are quantities that require Layout information to calculate\n * @property key\n *  Unique key for this model\n * @property {DimensionModel} model\n *  Source dimension model\n * @property {Number} x\n *  X position of the center of this dimension with respect to the Figure (pixels)\n * @property {Number} y\n *  Y position of the top of this dimension with respect to the Figure (pixels)\n * @property {Number} width\n *  Width of categories in this dimension (pixels)\n * @property {ParcatsViewModel} parcatsViewModel\n *  The parent trace's view model\n * @property {Array.<CategoryViewModel>} categories\n *  Dimensions category view models\n * @property {Number|null} dragCategoryDisplayInd\n *  Display index of category currently being dragged. null if no category is being dragged\n * @property {Number|null} dragDimensionDisplayInd\n *  Display index of the dimension being dragged. null if no dimension is being dragged\n * @property {Array.<Number>|null} initialDragDimensionDisplayInds\n *  Dimensions display indexes at the beginning of the current drag. null if no dimension is being dragged\n * @property {Array.<Number>|null} initialDragCategoryDisplayInds\n *  Category display indexes for the at the beginning of the current drag. null if no category is being dragged\n * @property {HTMLElement} potentialClickBand\n *  Band under mouse when current drag began. If no drag movement takes place then a click will be emitted for this\n *  band. Null if not drag in progress.\n * @property {Boolean} dragHasMoved\n *  True if there is an active drag and the drag has moved. If drag doesn't move before being ended then\n *  this may be interpreted as a click. Null if no drag in progress\n */\n\n/**\n * @typedef {Object} CategoryViewModel\n *  Object containing calculated parcats category view information\n *\n *  These are quantities that require Layout information to calculate\n * @property key\n *  Unique key for this model\n * @property {CategoryModel} model\n *  Source category model\n * @property {Number} width\n *  Width for this category (pixels)\n * @property {Number} height\n *  Height for this category (pixels)\n * @property {Number} y\n *  Y position of this cateogry with respect to the Figure (pixels)\n * @property {Array.<CategoryBandViewModel>} bands\n *  Array of color bands inside the category\n * @property {ParcatsViewModel} parcatsViewModel\n *  The parent trace's view model\n */\n\n/**\n * @typedef {Object} CategoryBandViewModel\n *  Object containing calculated category band information. A category band is a region inside a category covering\n *  paths of a single color\n *\n * @property key\n *  Unique key for this model\n * @property color\n *  Band color\n * @property rawColor\n *  Raw color value for band\n * @property {Number} width\n *  Band width\n * @property {Number} height\n *  Band height\n * @property {Number} y\n *  Y position of top of the band with respect to the category\n * @property {Number} count\n *  The number of samples represented by the band\n * @property {CategoryViewModel} categoryViewModel\n *  The parent categorie's view model\n * @property {ParcatsViewModel} parcatsViewModel\n *  The parent trace's view model\n */\n\n/**\n * @typedef {Object} PathViewModel\n *  Object containing calculated parcats path view information\n *\n *  These are quantities that require Layout information to calculate\n * @property key\n *  Unique key for this model\n * @property {PathModel} model\n *  Source path model\n * @property {Number} height\n *  Height of this path (pixels)\n * @property {Array.<Number>} leftXs\n *  The x position of the left edge of each display dimension\n * @property {Array.<Number>} topYs\n *  The y position of the top of the path for each display dimension\n * @property {Array.<Number>} dimWidths\n *  The width of each display dimension\n * @property {String} svgD\n *  SVG path \"d\" attribute string\n * @property {ParcatsViewModel} parcatsViewModel\n *  The parent trace's view model\n */","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/plotly.js/src/traces/parcats/parcats.js"],"names":["d3","require","interpolateNumber","Plotly","Fx","Lib","strTranslate","Drawing","tinycolor","svgTextUtils","performPlot","parcatsModels","graphDiv","layout","svg","viewModels","map","createParcatsViewModel","bind","layerSelection","selectAll","data","enter","append","attr","style","traceSelection","key","traceEnter","d","x","y","pathsSelection","select","pathSelection","paths","model","color","pathSelectionEnter","stylePathsNoHover","svgD","empty","sort","compareRawColor","exit","remove","on","mouseoverPath","mouseoutPath","clickPath","dimensionsSelection","dimensionSelection","dimensions","categorySelection","categories","categoryGroupEnterSelection","width","height","styleCategoriesNoHover","bandSelection","catViewModel","bands","each","raiseToTop","bandsSelectionEnter","bandModel","parcatsViewModel","arrangement","styleBandsNoHover","paperColor","_fullLayout","paper_bgcolor","catInRightDim","makeTextShadow","text","categoryLabel","catModel","font","categorylabelfont","convertToTspans","i","dimensionInd","dimensionLabel","labelfont","mouseoverCategoryBand","mouseoutCategory","call","behavior","drag","origin","dragDimensionStart","dragDimension","dragDimensionEnd","module","exports","numDims","length","leftDimInd","a","b","rawColor","hoverinfoItems","indexOf","stylePathsHover","points","buildPointsArrayForPath","constraints","buildConstraintsForPath","emit","event","hoverX","mouse","gd","trace","fullLayout","rootBBox","_paperdiv","node","getBoundingClientRect","graphDivBBox","pathCenterX","pathCenterY","dimInd","leftXs","dimWidths","leftDim","rightDim","topYs","hoverCenterX","hoverCenterY","textColor","mostReadable","count","prob","labels","countLabel","probabilityLabel","toFixed","hovertextParts","push","join","hovertext","mouseX","loneHover","left","top","borderColor","fontFamily","fontSize","fontColor","idealAlign","hovertemplate","line","hovertemplateLabels","eventData","_input","fullData","probability","container","_hoverlayer","outerContainer","_paper","loneUnhover","curveNumber","getTraceIndex","valueInds","pointNumber","dimension","category","categoryInds","containerInd","categoryValue","undefined","styleCategoryHover","styleBandsHover","bandsSelection","selectPathsThroughCategoryBandColor","catBandViewModel","allPaths","categoryViewModel","catInd","categoryInd","filter","pathViewModel","styleForCategoryHovermode","bandElement","bandSel","parentNode","bvm","styleForColorHovermode","bandViewModel","datum","catPaths","emitPointsEventCategoryHovermode","eventName","categoryModel","Array","prototype","apply","emitPointsEventColorHovermode","createHoverLabelForCategoryHovermode","_calcInverseTransform","scaleX","_invScaleX","scaleY","_invScaleY","rectSelection","rectBoundingBox","dimensionModel","hoverLabelIdealAlign","displayInd","catLabel","hoverinfoParts","createHoverLabelForDimensionHovermode","allHoverlabels","bandNode","createHoverLabelForColorHovermode","bandBoundingBox","totalCount","bandColorCount","forEach","catCount","colorCount","pColorAndCat","pCatGivenColor","pColorGivenCat","categorycount","colorcount","bandcolorcount","mouseY","hoveron","hoverItems","dragDimensionDisplayInd","initialDragDimensionDisplayInds","dragHasMoved","dragCategoryDisplayInd","catMouseX","catMouseY","initialDragCategoryDisplayInds","c","dragY","potentialClickBand","dragDimInd","prevDimInd","nextDimInd","dragCategory","dy","categoryY","catDisplayInd","dimCategoryViews","catAbove","catBelow","dragX","prevDimension","nextDimension","updateDimensionViewModels","updatePathViewModels","updateSvgCategories","updateSvgPaths","restyleData","traceInd","finalDragDimensionDisplayInds","anyDimsReordered","some","initDimDisplay","finalDimDisplay","anyCatsReordered","finalDragCategoryDisplayInds","initCatDisplay","sortedCategoryModels","slice","newCategoryArray","v","newCategoryLabels","sourceEvent","transition","duration","ease","restyle","allTraces","_fullData","uid","hasTransition","selection","dimLabelSelection","catLabelSelection","newX","newAnchor","wrappedParcatsModel","parcatsModel","margin","l","r","t","domain","figureWidth","figureHeight","traceWidth","Math","floor","traceHeight","traceX","traceY","pathShape","shape","hoverinfo","split","bundlecolors","sortpaths","tickfont","buildSvgPath","leftXPositions","pathYs","pathHeight","curvature","xRefPoints1","xRefPoints2","refInterpolator","dimensionViewModels","nextYPositions","catToDisplayIndPerDim","dimToDisplayInd","displayToDimInd","pathModels","p","hasOwnProperty","pathDisplayCategoryInds","pathModel","dimensionInds","displayInds","v1","v2","sortArray1","sortArray2","reverse","unshift","pathViewModels","totalHeight","reduce","pathNumber","dimDisplayInd","catViewModle","numBands","lastCatBand","bandY","currentBand","dimensionsIndInfo","dimModel","createDimensionViewModel","categoryLabelPad","dimWidth","numDimensions","dimDx","dimX0","dimX","maxCats","numCats","catSpacing","nextCatHeight","nextCatModel","nextCat","nextCatY","categoryIndInfo"],"mappings":"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":["'use strict';\n\nvar d3 = require('@plotly/d3');\nvar interpolateNumber = require('d3-interpolate').interpolateNumber;\nvar Plotly = require('../../plot_api/plot_api');\nvar Fx = require('../../components/fx');\nvar Lib = require('../../lib');\nvar strTranslate = Lib.strTranslate;\nvar Drawing = require('../../components/drawing');\nvar tinycolor = require('tinycolor2');\nvar svgTextUtils = require('../../lib/svg_text_utils');\n\nfunction performPlot(parcatsModels, graphDiv, layout, svg) {\n    var viewModels = parcatsModels.map(createParcatsViewModel.bind(0, graphDiv, layout));\n\n    // Get (potentially empty) parcatslayer selection with bound data to single element array\n    var layerSelection = svg.selectAll('g.parcatslayer').data([null]);\n\n    // Initialize single parcatslayer group if it doesn't exist\n    layerSelection.enter()\n        .append('g')\n        .attr('class', 'parcatslayer')\n        .style('pointer-events', 'all');\n\n    // Bind data to children of layerSelection and get reference to traceSelection\n    var traceSelection = layerSelection\n        .selectAll('g.trace.parcats')\n        .data(viewModels, key);\n\n    // Initialize group for each trace/dimensions\n    var traceEnter = traceSelection.enter()\n        .append('g')\n        .attr('class', 'trace parcats');\n\n    // Update properties for each trace\n    traceSelection\n        .attr('transform', function(d) {\n            return strTranslate(d.x, d.y);\n        });\n\n    // Initialize paths group\n    traceEnter\n        .append('g')\n        .attr('class', 'paths');\n\n    // Update paths transform\n    var pathsSelection = traceSelection\n        .select('g.paths');\n\n    // Get paths selection\n    var pathSelection = pathsSelection\n        .selectAll('path.path')\n        .data(function(d) {\n            return d.paths;\n        }, key);\n\n    // Update existing path colors\n    pathSelection\n        .attr('fill', function(d) {\n            return d.model.color;\n        });\n\n    // Create paths\n    var pathSelectionEnter = pathSelection\n        .enter()\n        .append('path')\n        .attr('class', 'path')\n        .attr('stroke-opacity', 0)\n        .attr('fill', function(d) {\n            return d.model.color;\n        })\n        .attr('fill-opacity', 0);\n\n    stylePathsNoHover(pathSelectionEnter);\n\n    // Set path geometry\n    pathSelection\n        .attr('d', function(d) {\n            return d.svgD;\n        });\n\n    // sort paths\n    if(!pathSelectionEnter.empty()) {\n        // Only sort paths if there has been a change.\n        // Otherwise paths are already sorted or a hover operation may be in progress\n        pathSelection.sort(compareRawColor);\n    }\n\n    // Remove any old paths\n    pathSelection.exit().remove();\n\n    // Path hover\n    pathSelection\n        .on('mouseover', mouseoverPath)\n        .on('mouseout', mouseoutPath)\n        .on('click', clickPath);\n\n    // Initialize dimensions group\n    traceEnter.append('g').attr('class', 'dimensions');\n\n    // Update dimensions transform\n    var dimensionsSelection = traceSelection\n        .select('g.dimensions');\n\n    // Get dimension selection\n    var dimensionSelection = dimensionsSelection\n        .selectAll('g.dimension')\n        .data(function(d) {\n            return d.dimensions;\n        }, key);\n\n    // Create dimension groups\n    dimensionSelection.enter()\n        .append('g')\n        .attr('class', 'dimension');\n\n    // Update dimension group transforms\n    dimensionSelection.attr('transform', function(d) {\n        return strTranslate(d.x, 0);\n    });\n\n    // Remove any old dimensions\n    dimensionSelection.exit().remove();\n\n    // Get category selection\n    var categorySelection = dimensionSelection\n        .selectAll('g.category')\n        .data(function(d) {\n            return d.categories;\n        }, key);\n\n    // Initialize category groups\n    var categoryGroupEnterSelection = categorySelection\n        .enter()\n        .append('g')\n        .attr('class', 'category');\n\n    // Update category transforms\n    categorySelection\n        .attr('transform', function(d) {\n            return strTranslate(0, d.y);\n        });\n\n\n    // Initialize rectangle\n    categoryGroupEnterSelection\n        .append('rect')\n        .attr('class', 'catrect')\n        .attr('pointer-events', 'none');\n\n\n    // Update rectangle\n    categorySelection.select('rect.catrect')\n        .attr('fill', 'none')\n        .attr('width', function(d) {\n            return d.width;\n        })\n        .attr('height', function(d) {\n            return d.height;\n        });\n\n    styleCategoriesNoHover(categoryGroupEnterSelection);\n\n    // Initialize color band rects\n    var bandSelection = categorySelection\n        .selectAll('rect.bandrect')\n        .data(\n            /** @param {CategoryViewModel} catViewModel*/\n            function(catViewModel) {\n                return catViewModel.bands;\n            }, key);\n\n    // Raise all update bands to the top so that fading enter/exit bands will be behind\n    bandSelection.each(function() {Lib.raiseToTop(this);});\n\n    // Update band color\n    bandSelection\n        .attr('fill', function(d) {\n            return d.color;\n        });\n\n    var bandsSelectionEnter = bandSelection.enter()\n        .append('rect')\n        .attr('class', 'bandrect')\n        .attr('stroke-opacity', 0)\n        .attr('fill', function(d) {\n            return d.color;\n        })\n        .attr('fill-opacity', 0);\n\n    bandSelection\n        .attr('fill', function(d) {\n            return d.color;\n        })\n        .attr('width', function(d) {\n            return d.width;\n        })\n        .attr('height', function(d) {\n            return d.height;\n        })\n        .attr('y', function(d) {\n            return d.y;\n        })\n        .attr('cursor',\n            /** @param {CategoryBandViewModel} bandModel*/\n            function(bandModel) {\n                if(bandModel.parcatsViewModel.arrangement === 'fixed') {\n                    return 'default';\n                } else if(bandModel.parcatsViewModel.arrangement === 'perpendicular') {\n                    return 'ns-resize';\n                } else {\n                    return 'move';\n                }\n            });\n\n    styleBandsNoHover(bandsSelectionEnter);\n\n    bandSelection.exit().remove();\n\n    // Initialize category label\n    categoryGroupEnterSelection\n        .append('text')\n        .attr('class', 'catlabel')\n        .attr('pointer-events', 'none');\n\n    var paperColor = graphDiv._fullLayout.paper_bgcolor;\n\n    // Update category label\n    categorySelection.select('text.catlabel')\n        .attr('text-anchor',\n            function(d) {\n                if(catInRightDim(d)) {\n                    // Place label to the right of category\n                    return 'start';\n                } else {\n                    // Place label to the left of category\n                    return 'end';\n                }\n            })\n        .attr('alignment-baseline', 'middle')\n\n        .style('text-shadow', svgTextUtils.makeTextShadow(paperColor))\n        .style('fill', 'rgb(0, 0, 0)')\n        .attr('x',\n            function(d) {\n                if(catInRightDim(d)) {\n                    // Place label to the right of category\n                    return d.width + 5;\n                } else {\n                    // Place label to the left of category\n                    return -5;\n                }\n            })\n        .attr('y', function(d) {\n            return d.height / 2;\n        })\n        .text(function(d) {\n            return d.model.categoryLabel;\n        })\n        .each(\n            /** @param {CategoryViewModel} catModel*/\n            function(catModel) {\n                Drawing.font(d3.select(this), catModel.parcatsViewModel.categorylabelfont);\n                svgTextUtils.convertToTspans(d3.select(this), graphDiv);\n            });\n\n    // Initialize dimension label\n    categoryGroupEnterSelection\n        .append('text')\n        .attr('class', 'dimlabel');\n\n    // Update dimension label\n    categorySelection.select('text.dimlabel')\n        .attr('text-anchor', 'middle')\n        .attr('alignment-baseline', 'baseline')\n        .attr('cursor',\n             /** @param {CategoryViewModel} catModel*/\n            function(catModel) {\n                if(catModel.parcatsViewModel.arrangement === 'fixed') {\n                    return 'default';\n                } else {\n                    return 'ew-resize';\n                }\n            })\n        .attr('x', function(d) {\n            return d.width / 2;\n        })\n        .attr('y', -5)\n        .text(function(d, i) {\n            if(i === 0) {\n                // Add dimension label above topmost category\n                return d.parcatsViewModel.model.dimensions[d.model.dimensionInd].dimensionLabel;\n            } else {\n                return null;\n            }\n        })\n        .each(\n            /** @param {CategoryViewModel} catModel*/\n            function(catModel) {\n                Drawing.font(d3.select(this), catModel.parcatsViewModel.labelfont);\n            });\n\n    // Category hover\n    // categorySelection.select('rect.catrect')\n    categorySelection.selectAll('rect.bandrect')\n        .on('mouseover', mouseoverCategoryBand)\n        .on('mouseout', mouseoutCategory);\n\n    // Remove unused categories\n    categorySelection.exit().remove();\n\n    // Setup drag\n    dimensionSelection.call(d3.behavior.drag()\n        .origin(function(d) {\n            return {x: d.x, y: 0};\n        })\n        .on('dragstart', dragDimensionStart)\n        .on('drag', dragDimension)\n        .on('dragend', dragDimensionEnd));\n\n\n    // Save off selections to view models\n    traceSelection.each(function(d) {\n        d.traceSelection = d3.select(this);\n        d.pathSelection = d3.select(this).selectAll('g.paths').selectAll('path.path');\n        d.dimensionSelection = d3.select(this).selectAll('g.dimensions').selectAll('g.dimension');\n    });\n\n    // Remove any orphan traces\n    traceSelection.exit().remove();\n}\n\n/**\n * Create / update parcat traces\n *\n * @param {Object} graphDiv\n * @param {Object} svg\n * @param {Array.<ParcatsModel>} parcatsModels\n * @param {Layout} layout\n */\nmodule.exports = function(graphDiv, svg, parcatsModels, layout) {\n    performPlot(parcatsModels, graphDiv, layout, svg);\n};\n\n/**\n * Function the returns the key property of an object for use with as D3 join function\n * @param d\n */\nfunction key(d) {\n    return d.key;\n}\n\n /** True if a category view model is in the right-most display dimension\n  * @param {CategoryViewModel} d */\nfunction catInRightDim(d) {\n    var numDims = d.parcatsViewModel.dimensions.length;\n    var leftDimInd = d.parcatsViewModel.dimensions[numDims - 1].model.dimensionInd;\n    return d.model.dimensionInd === leftDimInd;\n}\n\n/**\n * @param {PathViewModel} a\n * @param {PathViewModel} b\n */\nfunction compareRawColor(a, b) {\n    if(a.model.rawColor > b.model.rawColor) {\n        return 1;\n    } else if(a.model.rawColor < b.model.rawColor) {\n        return -1;\n    } else {\n        return 0;\n    }\n}\n\n/**\n * Handle path mouseover\n * @param {PathViewModel} d\n */\nfunction mouseoverPath(d) {\n    if(!d.parcatsViewModel.dragDimension) {\n        // We're not currently dragging\n\n        if(d.parcatsViewModel.hoverinfoItems.indexOf('skip') === -1) {\n            // hoverinfo is not skip, so we at least style the paths and emit interaction events\n\n            // Raise path to top\n            Lib.raiseToTop(this);\n\n            stylePathsHover(d3.select(this));\n\n            // Emit hover event\n            var points = buildPointsArrayForPath(d);\n            var constraints = buildConstraintsForPath(d);\n            d.parcatsViewModel.graphDiv.emit('plotly_hover', {\n                points: points, event: d3.event, constraints: constraints\n            });\n\n            // Handle hover label\n            if(d.parcatsViewModel.hoverinfoItems.indexOf('none') === -1) {\n                // hoverinfo is a combination of 'count' and 'probability'\n\n                // Mouse\n                var hoverX = d3.mouse(this)[0];\n\n                // Label\n                var gd = d.parcatsViewModel.graphDiv;\n                var trace = d.parcatsViewModel.trace;\n                var fullLayout = gd._fullLayout;\n                var rootBBox = fullLayout._paperdiv.node().getBoundingClientRect();\n                var graphDivBBox = d.parcatsViewModel.graphDiv.getBoundingClientRect();\n\n                // Find path center in path coordinates\n                var pathCenterX,\n                    pathCenterY,\n                    dimInd;\n\n                for(dimInd = 0; dimInd < (d.leftXs.length - 1); dimInd++) {\n                    if(d.leftXs[dimInd] + d.dimWidths[dimInd] - 2 <= hoverX && hoverX <= d.leftXs[dimInd + 1] + 2) {\n                        var leftDim = d.parcatsViewModel.dimensions[dimInd];\n                        var rightDim = d.parcatsViewModel.dimensions[dimInd + 1];\n                        pathCenterX = (leftDim.x + leftDim.width + rightDim.x) / 2;\n                        pathCenterY = (d.topYs[dimInd] + d.topYs[dimInd + 1] + d.height) / 2;\n                        break;\n                    }\n                }\n\n                // Find path center in root coordinates\n                var hoverCenterX = d.parcatsViewModel.x + pathCenterX;\n                var hoverCenterY = d.parcatsViewModel.y + pathCenterY;\n\n                var textColor = tinycolor.mostReadable(d.model.color, ['black', 'white']);\n\n                var count = d.model.count;\n                var prob = count / d.parcatsViewModel.model.count;\n                var labels = {\n                    countLabel: count,\n                    probabilityLabel: prob.toFixed(3)\n                };\n\n                // Build hover text\n                var hovertextParts = [];\n                if(d.parcatsViewModel.hoverinfoItems.indexOf('count') !== -1) {\n                    hovertextParts.push(['Count:', labels.countLabel].join(' '));\n                }\n                if(d.parcatsViewModel.hoverinfoItems.indexOf('probability') !== -1) {\n                    hovertextParts.push(['P:', labels.probabilityLabel].join(' '));\n                }\n\n                var hovertext = hovertextParts.join('<br>');\n                var mouseX = d3.mouse(gd)[0];\n\n                Fx.loneHover({\n                    trace: trace,\n                    x: hoverCenterX - rootBBox.left + graphDivBBox.left,\n                    y: hoverCenterY - rootBBox.top + graphDivBBox.top,\n                    text: hovertext,\n                    color: d.model.color,\n                    borderColor: 'black',\n                    fontFamily: 'Monaco, \"Courier New\", monospace',\n                    fontSize: 10,\n                    fontColor: textColor,\n                    idealAlign: mouseX < hoverCenterX ? 'right' : 'left',\n                    hovertemplate: (trace.line || {}).hovertemplate,\n                    hovertemplateLabels: labels,\n                    eventData: [{\n                        data: trace._input,\n                        fullData: trace,\n                        count: count,\n                        probability: prob\n                    }]\n                }, {\n                    container: fullLayout._hoverlayer.node(),\n                    outerContainer: fullLayout._paper.node(),\n                    gd: gd\n                });\n            }\n        }\n    }\n}\n\n/**\n * Handle path mouseout\n * @param {PathViewModel} d\n */\nfunction mouseoutPath(d) {\n    if(!d.parcatsViewModel.dragDimension) {\n        // We're not currently dragging\n        stylePathsNoHover(d3.select(this));\n\n        // Remove and hover label\n        Fx.loneUnhover(d.parcatsViewModel.graphDiv._fullLayout._hoverlayer.node());\n\n        // Restore path order\n        d.parcatsViewModel.pathSelection.sort(compareRawColor);\n\n        // Emit unhover event\n        if(d.parcatsViewModel.hoverinfoItems.indexOf('skip') === -1) {\n            var points = buildPointsArrayForPath(d);\n            var constraints = buildConstraintsForPath(d);\n            d.parcatsViewModel.graphDiv.emit('plotly_unhover', {\n                points: points, event: d3.event, constraints: constraints\n            });\n        }\n    }\n}\n\n/**\n * Build array of point objects for a path\n *\n * For use in click/hover events\n * @param {PathViewModel} d\n */\nfunction buildPointsArrayForPath(d) {\n    var points = [];\n    var curveNumber = getTraceIndex(d.parcatsViewModel);\n\n    for(var i = 0; i < d.model.valueInds.length; i++) {\n        var pointNumber = d.model.valueInds[i];\n        points.push({\n            curveNumber: curveNumber,\n            pointNumber: pointNumber\n        });\n    }\n    return points;\n}\n\n/**\n * Build constraints object for a path\n *\n * For use in click/hover events\n * @param {PathViewModel} d\n */\nfunction buildConstraintsForPath(d) {\n    var constraints = {};\n    var dimensions = d.parcatsViewModel.model.dimensions;\n\n    // dimensions\n    for(var i = 0; i < dimensions.length; i++) {\n        var dimension = dimensions[i];\n        var category = dimension.categories[d.model.categoryInds[i]];\n        constraints[dimension.containerInd] = category.categoryValue;\n    }\n\n    // color\n    if(d.model.rawColor !== undefined) {\n        constraints.color = d.model.rawColor;\n    }\n    return constraints;\n}\n\n/**\n * Handle path click\n * @param {PathViewModel} d\n */\nfunction clickPath(d) {\n    if(d.parcatsViewModel.hoverinfoItems.indexOf('skip') === -1) {\n        // hoverinfo it's skip, so interaction events aren't disabled\n        var points = buildPointsArrayForPath(d);\n        var constraints = buildConstraintsForPath(d);\n        d.parcatsViewModel.graphDiv.emit('plotly_click', {\n            points: points, event: d3.event, constraints: constraints\n        });\n    }\n}\n\nfunction stylePathsNoHover(pathSelection) {\n    pathSelection\n        .attr('fill', function(d) {\n            return d.model.color;\n        })\n        .attr('fill-opacity', 0.6)\n        .attr('stroke', 'lightgray')\n        .attr('stroke-width', 0.2)\n        .attr('stroke-opacity', 1.0);\n}\n\nfunction stylePathsHover(pathSelection) {\n    pathSelection\n        .attr('fill-opacity', 0.8)\n        .attr('stroke', function(d) {\n            return tinycolor.mostReadable(d.model.color, ['black', 'white']);\n        })\n        .attr('stroke-width', 0.3);\n}\n\nfunction styleCategoryHover(categorySelection) {\n    categorySelection\n        .select('rect.catrect')\n        .attr('stroke', 'black')\n        .attr('stroke-width', 2.5);\n}\n\nfunction styleCategoriesNoHover(categorySelection) {\n    categorySelection\n        .select('rect.catrect')\n        .attr('stroke', 'black')\n        .attr('stroke-width', 1)\n        .attr('stroke-opacity', 1);\n}\n\nfunction styleBandsHover(bandsSelection) {\n    bandsSelection\n        .attr('stroke', 'black')\n        .attr('stroke-width', 1.5);\n}\n\nfunction styleBandsNoHover(bandsSelection) {\n    bandsSelection\n        .attr('stroke', 'black')\n        .attr('stroke-width', 0.2)\n        .attr('stroke-opacity', 1.0)\n        .attr('fill-opacity', 1.0);\n}\n\n/**\n * Return selection of all paths that pass through the specified category\n * @param {CategoryBandViewModel} catBandViewModel\n */\nfunction selectPathsThroughCategoryBandColor(catBandViewModel) {\n    var allPaths = catBandViewModel.parcatsViewModel.pathSelection;\n    var dimInd = catBandViewModel.categoryViewModel.model.dimensionInd;\n    var catInd = catBandViewModel.categoryViewModel.model.categoryInd;\n\n    return allPaths\n        .filter(\n            /** @param {PathViewModel} pathViewModel */\n            function(pathViewModel) {\n                return pathViewModel.model.categoryInds[dimInd] === catInd &&\n                    pathViewModel.model.color === catBandViewModel.color;\n            });\n}\n\n\n/**\n * Perform hover styling for all paths that pass though the specified band element's category\n *\n * @param {HTMLElement} bandElement\n *  HTML element for band\n *\n */\nfunction styleForCategoryHovermode(bandElement) {\n    // Get all bands in the current category\n    var bandSel = d3.select(bandElement.parentNode).selectAll('rect.bandrect');\n\n    // Raise and style paths\n    bandSel.each(function(bvm) {\n        var paths = selectPathsThroughCategoryBandColor(bvm);\n        stylePathsHover(paths);\n        paths.each(function() {\n            // Raise path to top\n            Lib.raiseToTop(this);\n        });\n    });\n\n    // Style category\n    styleCategoryHover(d3.select(bandElement.parentNode));\n}\n\n/**\n * Perform hover styling for all paths that pass though the category of the specified band element and share the\n * same color\n *\n * @param {HTMLElement} bandElement\n *  HTML element for band\n *\n */\nfunction styleForColorHovermode(bandElement) {\n    var bandViewModel = d3.select(bandElement).datum();\n    var catPaths = selectPathsThroughCategoryBandColor(bandViewModel);\n    stylePathsHover(catPaths);\n    catPaths.each(function() {\n        // Raise path to top\n        Lib.raiseToTop(this);\n    });\n\n    // Style category for drag\n    d3.select(bandElement.parentNode)\n        .selectAll('rect.bandrect')\n        .filter(function(b) {return b.color === bandViewModel.color;})\n        .each(function() {\n            Lib.raiseToTop(this);\n            styleBandsHover(d3.select(this));\n        });\n}\n\n\n/**\n * @param {HTMLElement} bandElement\n *  HTML element for band\n * @param eventName\n *  Event name (plotly_hover or plotly_click)\n * @param event\n *  Mouse Event\n */\nfunction emitPointsEventCategoryHovermode(bandElement, eventName, event) {\n    // Get all bands in the current category\n    var bandViewModel = d3.select(bandElement).datum();\n    var categoryModel = bandViewModel.categoryViewModel.model;\n    var gd = bandViewModel.parcatsViewModel.graphDiv;\n    var bandSel = d3.select(bandElement.parentNode).selectAll('rect.bandrect');\n\n    var points = [];\n    bandSel.each(function(bvm) {\n        var paths = selectPathsThroughCategoryBandColor(bvm);\n        paths.each(function(pathViewModel) {\n            // Extend points array\n            Array.prototype.push.apply(points, buildPointsArrayForPath(pathViewModel));\n        });\n    });\n\n    var constraints = {};\n    constraints[categoryModel.dimensionInd] = categoryModel.categoryValue;\n    gd.emit(eventName, {\n        points: points, event: event, constraints: constraints\n    });\n}\n\n/**\n * @param {HTMLElement} bandElement\n *  HTML element for band\n * @param eventName\n *  Event name (plotly_hover or plotly_click)\n * @param event\n *  Mouse Event\n */\nfunction emitPointsEventColorHovermode(bandElement, eventName, event) {\n    var bandViewModel = d3.select(bandElement).datum();\n    var categoryModel = bandViewModel.categoryViewModel.model;\n    var gd = bandViewModel.parcatsViewModel.graphDiv;\n    var paths = selectPathsThroughCategoryBandColor(bandViewModel);\n\n    var points = [];\n    paths.each(function(pathViewModel) {\n        // Extend points array\n        Array.prototype.push.apply(points, buildPointsArrayForPath(pathViewModel));\n    });\n\n    var constraints = {};\n    constraints[categoryModel.dimensionInd] = categoryModel.categoryValue;\n    // color\n    if(bandViewModel.rawColor !== undefined) {\n        constraints.color = bandViewModel.rawColor;\n    }\n    gd.emit(eventName, {\n        points: points, event: event, constraints: constraints\n    });\n}\n\n/**\n * Create hover label for a band element's category (for use when hoveron === 'category')\n *\n * @param {ClientRect} rootBBox\n *  Client bounding box for root of figure\n * @param {HTMLElement} bandElement\n *  HTML element for band\n *\n */\nfunction createHoverLabelForCategoryHovermode(gd, rootBBox, bandElement) {\n    gd._fullLayout._calcInverseTransform(gd);\n    var scaleX = gd._fullLayout._invScaleX;\n    var scaleY = gd._fullLayout._invScaleY;\n\n    // Selections\n    var rectSelection = d3.select(bandElement.parentNode).select('rect.catrect');\n    var rectBoundingBox = rectSelection.node().getBoundingClientRect();\n\n    // Models\n    /** @type {CategoryViewModel} */\n    var catViewModel = rectSelection.datum();\n    var parcatsViewModel = catViewModel.parcatsViewModel;\n    var dimensionModel = parcatsViewModel.model.dimensions[catViewModel.model.dimensionInd];\n    var trace = parcatsViewModel.trace;\n\n    // Positions\n    var hoverCenterY = rectBoundingBox.top + rectBoundingBox.height / 2;\n    var hoverCenterX,\n        hoverLabelIdealAlign;\n\n    if(parcatsViewModel.dimensions.length > 1 &&\n        dimensionModel.displayInd === parcatsViewModel.dimensions.length - 1) {\n        // right most dimension\n        hoverCenterX = rectBoundingBox.left;\n        hoverLabelIdealAlign = 'left';\n    } else {\n        hoverCenterX = rectBoundingBox.left + rectBoundingBox.width;\n        hoverLabelIdealAlign = 'right';\n    }\n\n    var count = catViewModel.model.count;\n    var catLabel = catViewModel.model.categoryLabel;\n    var prob = count / catViewModel.parcatsViewModel.model.count;\n    var labels = {\n        countLabel: count,\n        categoryLabel: catLabel,\n        probabilityLabel: prob.toFixed(3)\n    };\n\n    // Hover label text\n    var hoverinfoParts = [];\n    if(catViewModel.parcatsViewModel.hoverinfoItems.indexOf('count') !== -1) {\n        hoverinfoParts.push(['Count:', labels.countLabel].join(' '));\n    }\n    if(catViewModel.parcatsViewModel.hoverinfoItems.indexOf('probability') !== -1) {\n        hoverinfoParts.push(['P(' + labels.categoryLabel + '):', labels.probabilityLabel].join(' '));\n    }\n\n    var hovertext = hoverinfoParts.join('<br>');\n    return {\n        trace: trace,\n        x: scaleX * (hoverCenterX - rootBBox.left),\n        y: scaleY * (hoverCenterY - rootBBox.top),\n        text: hovertext,\n        color: 'lightgray',\n        borderColor: 'black',\n        fontFamily: 'Monaco, \"Courier New\", monospace',\n        fontSize: 12,\n        fontColor: 'black',\n        idealAlign: hoverLabelIdealAlign,\n        hovertemplate: trace.hovertemplate,\n        hovertemplateLabels: labels,\n        eventData: [{\n            data: trace._input,\n            fullData: trace,\n            count: count,\n            category: catLabel,\n            probability: prob\n        }]\n    };\n}\n\n/**\n * Create hover label for a band element's category (for use when hoveron === 'category')\n *\n * @param {ClientRect} rootBBox\n *  Client bounding box for root of figure\n * @param {HTMLElement} bandElement\n *  HTML element for band\n *\n */\nfunction createHoverLabelForDimensionHovermode(gd, rootBBox, bandElement) {\n    var allHoverlabels = [];\n\n    d3.select(bandElement.parentNode.parentNode)\n        .selectAll('g.category')\n        .select('rect.catrect')\n        .each(function() {\n            var bandNode = this;\n            allHoverlabels.push(createHoverLabelForCategoryHovermode(gd, rootBBox, bandNode));\n        });\n\n    return allHoverlabels;\n}\n\n/**\n * Create hover labels for a band element's category (for use when hoveron === 'dimension')\n *\n * @param {ClientRect} rootBBox\n *  Client bounding box for root of figure\n * @param {HTMLElement} bandElement\n *  HTML element for band\n *\n */\nfunction createHoverLabelForColorHovermode(gd, rootBBox, bandElement) {\n    gd._fullLayout._calcInverseTransform(gd);\n    var scaleX = gd._fullLayout._invScaleX;\n    var scaleY = gd._fullLayout._invScaleY;\n\n    var bandBoundingBox = bandElement.getBoundingClientRect();\n\n    // Models\n    /** @type {CategoryBandViewModel} */\n    var bandViewModel = d3.select(bandElement).datum();\n    var catViewModel = bandViewModel.categoryViewModel;\n    var parcatsViewModel = catViewModel.parcatsViewModel;\n    var dimensionModel = parcatsViewModel.model.dimensions[catViewModel.model.dimensionInd];\n    var trace = parcatsViewModel.trace;\n\n    // positions\n    var hoverCenterY = bandBoundingBox.y + bandBoundingBox.height / 2;\n\n    var hoverCenterX,\n        hoverLabelIdealAlign;\n    if(parcatsViewModel.dimensions.length > 1 &&\n        dimensionModel.displayInd === parcatsViewModel.dimensions.length - 1) {\n        // right most dimension\n        hoverCenterX = bandBoundingBox.left;\n        hoverLabelIdealAlign = 'left';\n    } else {\n        hoverCenterX = bandBoundingBox.left + bandBoundingBox.width;\n        hoverLabelIdealAlign = 'right';\n    }\n\n    // Labels\n    var catLabel = catViewModel.model.categoryLabel;\n\n    // Counts\n    var totalCount = bandViewModel.parcatsViewModel.model.count;\n\n    var bandColorCount = 0;\n    bandViewModel.categoryViewModel.bands.forEach(function(b) {\n        if(b.color === bandViewModel.color) {\n            bandColorCount += b.count;\n        }\n    });\n\n    var catCount = catViewModel.model.count;\n\n    var colorCount = 0;\n    parcatsViewModel.pathSelection.each(\n        /** @param {PathViewModel} pathViewModel */\n        function(pathViewModel) {\n            if(pathViewModel.model.color === bandViewModel.color) {\n                colorCount += pathViewModel.model.count;\n            }\n        });\n\n    var pColorAndCat = bandColorCount / totalCount;\n    var pCatGivenColor = bandColorCount / colorCount;\n    var pColorGivenCat = bandColorCount / catCount;\n\n    var labels = {\n        countLabel: totalCount,\n        categoryLabel: catLabel,\n        probabilityLabel: pColorAndCat.toFixed(3)\n    };\n\n    // Hover label text\n    var hoverinfoParts = [];\n    if(catViewModel.parcatsViewModel.hoverinfoItems.indexOf('count') !== -1) {\n        hoverinfoParts.push(['Count:', labels.countLabel].join(' '));\n    }\n    if(catViewModel.parcatsViewModel.hoverinfoItems.indexOf('probability') !== -1) {\n        hoverinfoParts.push('P(color ∩ ' + catLabel + '): ' + labels.probabilityLabel);\n        hoverinfoParts.push('P(' + catLabel + ' | color): ' + pCatGivenColor.toFixed(3));\n        hoverinfoParts.push('P(color | ' + catLabel + '): ' + pColorGivenCat.toFixed(3));\n    }\n\n    var hovertext = hoverinfoParts.join('<br>');\n\n    // Compute text color\n    var textColor = tinycolor.mostReadable(bandViewModel.color, ['black', 'white']);\n\n    return {\n        trace: trace,\n        x: scaleX * (hoverCenterX - rootBBox.left),\n        y: scaleY * (hoverCenterY - rootBBox.top),\n        // name: 'NAME',\n        text: hovertext,\n        color: bandViewModel.color,\n        borderColor: 'black',\n        fontFamily: 'Monaco, \"Courier New\", monospace',\n        fontColor: textColor,\n        fontSize: 10,\n        idealAlign: hoverLabelIdealAlign,\n        hovertemplate: trace.hovertemplate,\n        hovertemplateLabels: labels,\n        eventData: [{\n            data: trace._input,\n            fullData: trace,\n            category: catLabel,\n            count: totalCount,\n            probability: pColorAndCat,\n            categorycount: catCount,\n            colorcount: colorCount,\n            bandcolorcount: bandColorCount\n        }]\n    };\n}\n\n/**\n * Handle dimension mouseover\n * @param {CategoryBandViewModel} bandViewModel\n */\nfunction mouseoverCategoryBand(bandViewModel) {\n    if(!bandViewModel.parcatsViewModel.dragDimension) {\n        // We're not currently dragging\n\n        if(bandViewModel.parcatsViewModel.hoverinfoItems.indexOf('skip') === -1) {\n            // hoverinfo is not skip, so we at least style the bands and emit interaction events\n\n            // Mouse\n            var mouseY = d3.mouse(this)[1];\n            if(mouseY < -1) {\n                // Hover is above above the category rectangle (probably the dimension title text)\n                return;\n            }\n\n            var gd = bandViewModel.parcatsViewModel.graphDiv;\n            var fullLayout = gd._fullLayout;\n            var rootBBox = fullLayout._paperdiv.node().getBoundingClientRect();\n            var hoveron = bandViewModel.parcatsViewModel.hoveron;\n\n            /** @type {HTMLElement} */\n            var bandElement = this;\n\n            // Handle style and events\n            if(hoveron === 'color') {\n                styleForColorHovermode(bandElement);\n                emitPointsEventColorHovermode(bandElement, 'plotly_hover', d3.event);\n            } else {\n                styleForCategoryHovermode(bandElement);\n                emitPointsEventCategoryHovermode(bandElement, 'plotly_hover', d3.event);\n            }\n\n            // Handle hover label\n            if(bandViewModel.parcatsViewModel.hoverinfoItems.indexOf('none') === -1) {\n                var hoverItems;\n                if(hoveron === 'category') {\n                    hoverItems = createHoverLabelForCategoryHovermode(gd, rootBBox, bandElement);\n                } else if(hoveron === 'color') {\n                    hoverItems = createHoverLabelForColorHovermode(gd, rootBBox, bandElement);\n                } else if(hoveron === 'dimension') {\n                    hoverItems = createHoverLabelForDimensionHovermode(gd, rootBBox, bandElement);\n                }\n\n                if(hoverItems) {\n                    Fx.loneHover(hoverItems, {\n                        container: fullLayout._hoverlayer.node(),\n                        outerContainer: fullLayout._paper.node(),\n                        gd: gd\n                    });\n                }\n            }\n        }\n    }\n}\n\n\n/**\n * Handle dimension mouseover\n * @param {CategoryBandViewModel} bandViewModel\n */\nfunction mouseoutCategory(bandViewModel) {\n    var parcatsViewModel = bandViewModel.parcatsViewModel;\n\n    if(!parcatsViewModel.dragDimension) {\n        // We're not dragging anything\n\n        // Reset unhovered styles\n        stylePathsNoHover(parcatsViewModel.pathSelection);\n        styleCategoriesNoHover(parcatsViewModel.dimensionSelection.selectAll('g.category'));\n        styleBandsNoHover(parcatsViewModel.dimensionSelection.selectAll('g.category').selectAll('rect.bandrect'));\n\n        // Remove hover label\n        Fx.loneUnhover(parcatsViewModel.graphDiv._fullLayout._hoverlayer.node());\n\n        // Restore path order\n        parcatsViewModel.pathSelection.sort(compareRawColor);\n\n        // Emit unhover event\n        if(parcatsViewModel.hoverinfoItems.indexOf('skip') === -1) {\n            var hoveron = bandViewModel.parcatsViewModel.hoveron;\n            var bandElement = this;\n\n            // Handle style and events\n            if(hoveron === 'color') {\n                emitPointsEventColorHovermode(bandElement, 'plotly_unhover', d3.event);\n            } else {\n                emitPointsEventCategoryHovermode(bandElement, 'plotly_unhover', d3.event);\n            }\n        }\n    }\n}\n\n\n/**\n * Handle dimension drag start\n * @param {DimensionViewModel} d\n */\nfunction dragDimensionStart(d) {\n    // Check if dragging is supported\n    if(d.parcatsViewModel.arrangement === 'fixed') {\n        return;\n    }\n\n    // Save off initial drag indexes for dimension\n    d.dragDimensionDisplayInd = d.model.displayInd;\n    d.initialDragDimensionDisplayInds = d.parcatsViewModel.model.dimensions.map(function(d) {return d.displayInd;});\n    d.dragHasMoved = false;\n\n    // Check for category hit\n    d.dragCategoryDisplayInd = null;\n    d3.select(this)\n        .selectAll('g.category')\n        .select('rect.catrect')\n        .each(\n            /** @param {CategoryViewModel} catViewModel */\n            function(catViewModel) {\n                var catMouseX = d3.mouse(this)[0];\n                var catMouseY = d3.mouse(this)[1];\n\n\n                if(-2 <= catMouseX && catMouseX <= catViewModel.width + 2 &&\n                    -2 <= catMouseY && catMouseY <= catViewModel.height + 2) {\n                    // Save off initial drag indexes for categories\n                    d.dragCategoryDisplayInd = catViewModel.model.displayInd;\n                    d.initialDragCategoryDisplayInds = d.model.categories.map(function(c) {\n                        return c.displayInd;\n                    });\n\n                    // Initialize categories dragY to be the current y position\n                    catViewModel.model.dragY = catViewModel.y;\n\n                    // Raise category\n                    Lib.raiseToTop(this.parentNode);\n\n                    // Get band element\n                    d3.select(this.parentNode)\n                        .selectAll('rect.bandrect')\n                        /** @param {CategoryBandViewModel} bandViewModel */\n                        .each(function(bandViewModel) {\n                            if(bandViewModel.y < catMouseY && catMouseY <= bandViewModel.y + bandViewModel.height) {\n                                d.potentialClickBand = this;\n                            }\n                        });\n                }\n            });\n\n    // Update toplevel drag dimension\n    d.parcatsViewModel.dragDimension = d;\n\n    // Remove hover label if any\n    Fx.loneUnhover(d.parcatsViewModel.graphDiv._fullLayout._hoverlayer.node());\n}\n\n/**\n * Handle dimension drag\n * @param {DimensionViewModel} d\n */\nfunction dragDimension(d) {\n    // Check if dragging is supported\n    if(d.parcatsViewModel.arrangement === 'fixed') {\n        return;\n    }\n\n    d.dragHasMoved = true;\n\n    if(d.dragDimensionDisplayInd === null) {\n        return;\n    }\n\n    var dragDimInd = d.dragDimensionDisplayInd;\n    var prevDimInd = dragDimInd - 1;\n    var nextDimInd = dragDimInd + 1;\n\n    var dragDimension = d.parcatsViewModel\n        .dimensions[dragDimInd];\n\n    // Update category\n    if(d.dragCategoryDisplayInd !== null) {\n        var dragCategory = dragDimension.categories[d.dragCategoryDisplayInd];\n\n        // Update dragY by dy\n        dragCategory.model.dragY += d3.event.dy;\n        var categoryY = dragCategory.model.dragY;\n\n        // Check for category drag swaps\n        var catDisplayInd = dragCategory.model.displayInd;\n        var dimCategoryViews = dragDimension.categories;\n\n        var catAbove = dimCategoryViews[catDisplayInd - 1];\n        var catBelow = dimCategoryViews[catDisplayInd + 1];\n\n        // Check for overlap above\n        if(catAbove !== undefined) {\n            if(categoryY < (catAbove.y + catAbove.height / 2.0)) {\n                // Swap display inds\n                dragCategory.model.displayInd = catAbove.model.displayInd;\n                catAbove.model.displayInd = catDisplayInd;\n            }\n        }\n\n        if(catBelow !== undefined) {\n            if((categoryY + dragCategory.height) > (catBelow.y + catBelow.height / 2.0)) {\n                // Swap display inds\n                dragCategory.model.displayInd = catBelow.model.displayInd;\n                catBelow.model.displayInd = catDisplayInd;\n            }\n        }\n\n        // Update category drag display index\n        d.dragCategoryDisplayInd = dragCategory.model.displayInd;\n    }\n\n    // Update dimension position\n    if(d.dragCategoryDisplayInd === null || d.parcatsViewModel.arrangement === 'freeform') {\n        dragDimension.model.dragX = d3.event.x;\n\n        // Check for dimension swaps\n        var prevDimension = d.parcatsViewModel.dimensions[prevDimInd];\n        var nextDimension = d.parcatsViewModel.dimensions[nextDimInd];\n\n        if(prevDimension !== undefined) {\n            if(dragDimension.model.dragX < (prevDimension.x + prevDimension.width)) {\n                // Swap display inds\n                dragDimension.model.displayInd = prevDimension.model.displayInd;\n                prevDimension.model.displayInd = dragDimInd;\n            }\n        }\n\n        if(nextDimension !== undefined) {\n            if((dragDimension.model.dragX + dragDimension.width) > nextDimension.x) {\n                // Swap display inds\n                dragDimension.model.displayInd = nextDimension.model.displayInd;\n                nextDimension.model.displayInd = d.dragDimensionDisplayInd;\n            }\n        }\n\n        // Update drag display index\n        d.dragDimensionDisplayInd = dragDimension.model.displayInd;\n    }\n\n    // Update view models\n    updateDimensionViewModels(d.parcatsViewModel);\n    updatePathViewModels(d.parcatsViewModel);\n\n    // Update svg geometry\n    updateSvgCategories(d.parcatsViewModel);\n    updateSvgPaths(d.parcatsViewModel);\n}\n\n\n/**\n * Handle dimension drag end\n * @param {DimensionViewModel} d\n */\nfunction dragDimensionEnd(d) {\n    // Check if dragging is supported\n    if(d.parcatsViewModel.arrangement === 'fixed') {\n        return;\n    }\n\n    if(d.dragDimensionDisplayInd === null) {\n        return;\n    }\n\n    d3.select(this).selectAll('text').attr('font-weight', 'normal');\n\n    // Compute restyle command\n    // -----------------------\n    var restyleData = {};\n    var traceInd = getTraceIndex(d.parcatsViewModel);\n\n    // ### Handle dimension reordering ###\n    var finalDragDimensionDisplayInds = d.parcatsViewModel.model.dimensions.map(function(d) {return d.displayInd;});\n    var anyDimsReordered = d.initialDragDimensionDisplayInds.some(function(initDimDisplay, dimInd) {\n        return initDimDisplay !== finalDragDimensionDisplayInds[dimInd];\n    });\n\n    if(anyDimsReordered) {\n        finalDragDimensionDisplayInds.forEach(function(finalDimDisplay, dimInd) {\n            var containerInd = d.parcatsViewModel.model.dimensions[dimInd].containerInd;\n            restyleData['dimensions[' + containerInd + '].displayindex'] = finalDimDisplay;\n        });\n    }\n\n    // ### Handle category reordering ###\n    var anyCatsReordered = false;\n    if(d.dragCategoryDisplayInd !== null) {\n        var finalDragCategoryDisplayInds = d.model.categories.map(function(c) {\n            return c.displayInd;\n        });\n\n        anyCatsReordered = d.initialDragCategoryDisplayInds.some(function(initCatDisplay, catInd) {\n            return initCatDisplay !== finalDragCategoryDisplayInds[catInd];\n        });\n\n        if(anyCatsReordered) {\n            // Sort a shallow copy of the category models by display index\n            var sortedCategoryModels = d.model.categories.slice().sort(\n                function(a, b) { return a.displayInd - b.displayInd; });\n\n            // Get new categoryarray and ticktext values\n            var newCategoryArray = sortedCategoryModels.map(function(v) { return v.categoryValue; });\n            var newCategoryLabels = sortedCategoryModels.map(function(v) { return v.categoryLabel; });\n\n            restyleData['dimensions[' + d.model.containerInd + '].categoryarray'] = [newCategoryArray];\n            restyleData['dimensions[' + d.model.containerInd + '].ticktext'] = [newCategoryLabels];\n            restyleData['dimensions[' + d.model.containerInd + '].categoryorder'] = 'array';\n        }\n    }\n\n    // Handle potential click event\n    // ----------------------------\n    if(d.parcatsViewModel.hoverinfoItems.indexOf('skip') === -1) {\n        if(!d.dragHasMoved && d.potentialClickBand) {\n            if(d.parcatsViewModel.hoveron === 'color') {\n                emitPointsEventColorHovermode(d.potentialClickBand, 'plotly_click', d3.event.sourceEvent);\n            } else {\n                emitPointsEventCategoryHovermode(d.potentialClickBand, 'plotly_click', d3.event.sourceEvent);\n            }\n        }\n    }\n\n    // Nullify drag states\n    // -------------------\n    d.model.dragX = null;\n    if(d.dragCategoryDisplayInd !== null) {\n        var dragCategory = d.parcatsViewModel\n            .dimensions[d.dragDimensionDisplayInd]\n            .categories[d.dragCategoryDisplayInd];\n\n        dragCategory.model.dragY = null;\n        d.dragCategoryDisplayInd = null;\n    }\n\n    d.dragDimensionDisplayInd = null;\n    d.parcatsViewModel.dragDimension = null;\n    d.dragHasMoved = null;\n    d.potentialClickBand = null;\n\n    // Update view models\n    // ------------------\n    updateDimensionViewModels(d.parcatsViewModel);\n    updatePathViewModels(d.parcatsViewModel);\n\n    // Perform transition\n    // ------------------\n    var transition = d3.transition()\n        .duration(300)\n        .ease('cubic-in-out');\n\n    transition\n        .each(function() {\n            updateSvgCategories(d.parcatsViewModel, true);\n            updateSvgPaths(d.parcatsViewModel, true);\n        })\n        .each('end', function() {\n            if(anyDimsReordered || anyCatsReordered) {\n                // Perform restyle if the order of categories or dimensions changed\n                Plotly.restyle(d.parcatsViewModel.graphDiv, restyleData, [traceInd]);\n            }\n        });\n}\n\n/**\n *\n * @param {ParcatsViewModel} parcatsViewModel\n */\nfunction getTraceIndex(parcatsViewModel) {\n    var traceInd;\n    var allTraces = parcatsViewModel.graphDiv._fullData;\n    for(var i = 0; i < allTraces.length; i++) {\n        if(parcatsViewModel.key === allTraces[i].uid) {\n            traceInd = i;\n            break;\n        }\n    }\n    return traceInd;\n}\n\n/** Update the svg paths for view model\n * @param {ParcatsViewModel} parcatsViewModel\n * @param {boolean} hasTransition Whether to update element with transition\n */\nfunction updateSvgPaths(parcatsViewModel, hasTransition) {\n    if(hasTransition === undefined) {\n        hasTransition = false;\n    }\n\n    function transition(selection) {\n        return hasTransition ? selection.transition() : selection;\n    }\n\n    // Update binding\n    parcatsViewModel.pathSelection.data(function(d) {\n        return d.paths;\n    }, key);\n\n    // Update paths\n    transition(parcatsViewModel.pathSelection).attr('d', function(d) {\n        return d.svgD;\n    });\n}\n\n/** Update the svg paths for view model\n * @param {ParcatsViewModel} parcatsViewModel\n * @param {boolean} hasTransition Whether to update element with transition\n */\nfunction updateSvgCategories(parcatsViewModel, hasTransition) {\n    if(hasTransition === undefined) {\n        hasTransition = false;\n    }\n\n    function transition(selection) {\n        return hasTransition ? selection.transition() : selection;\n    }\n\n    // Update binding\n    parcatsViewModel.dimensionSelection\n        .data(function(d) {\n            return d.dimensions;\n        }, key);\n\n    var categorySelection = parcatsViewModel.dimensionSelection\n        .selectAll('g.category')\n        .data(function(d) {return d.categories;}, key);\n\n    // Update dimension position\n    transition(parcatsViewModel.dimensionSelection)\n        .attr('transform', function(d) {\n            return strTranslate(d.x, 0);\n        });\n\n    // Update category position\n    transition(categorySelection)\n        .attr('transform', function(d) {\n            return strTranslate(0, d.y);\n        });\n\n    var dimLabelSelection = categorySelection.select('.dimlabel');\n\n    // ### Update dimension label\n    // Only the top-most display category should have the dimension label\n    dimLabelSelection\n        .text(function(d, i) {\n            if(i === 0) {\n                // Add dimension label above topmost category\n                return d.parcatsViewModel.model.dimensions[d.model.dimensionInd].dimensionLabel;\n            } else {\n                return null;\n            }\n        });\n\n    // Update category label\n    // Categories in the right-most display dimension have their labels on\n    // the right, all others on the left\n    var catLabelSelection = categorySelection.select('.catlabel');\n    catLabelSelection\n        .attr('text-anchor',\n            function(d) {\n                if(catInRightDim(d)) {\n                    // Place label to the right of category\n                    return 'start';\n                } else {\n                    // Place label to the left of category\n                    return 'end';\n                }\n            })\n        .attr('x',\n            function(d) {\n                if(catInRightDim(d)) {\n                    // Place label to the right of category\n                    return d.width + 5;\n                } else {\n                    // Place label to the left of category\n                    return -5;\n                }\n            })\n        .each(function(d) {\n            // Update attriubutes of <tspan> elements\n            var newX;\n            var newAnchor;\n            if(catInRightDim(d)) {\n                // Place label to the right of category\n                newX = d.width + 5;\n                newAnchor = 'start';\n            } else {\n                // Place label to the left of category\n                newX = -5;\n                newAnchor = 'end';\n            }\n            d3.select(this)\n                .selectAll('tspan')\n                .attr('x', newX)\n                .attr('text-anchor', newAnchor);\n        });\n\n    // Update bands\n    // Initialize color band rects\n    var bandSelection = categorySelection\n        .selectAll('rect.bandrect')\n        .data(\n            /** @param {CategoryViewModel} catViewModel*/\n            function(catViewModel) {\n                return catViewModel.bands;\n            }, key);\n\n    var bandsSelectionEnter = bandSelection.enter()\n        .append('rect')\n        .attr('class', 'bandrect')\n        .attr('cursor', 'move')\n        .attr('stroke-opacity', 0)\n        .attr('fill', function(d) {\n            return d.color;\n        })\n        .attr('fill-opacity', 0);\n\n    bandSelection\n        .attr('fill', function(d) {\n            return d.color;\n        })\n        .attr('width', function(d) {\n            return d.width;\n        })\n        .attr('height', function(d) {\n            return d.height;\n        })\n        .attr('y', function(d) {\n            return d.y;\n        });\n\n    styleBandsNoHover(bandsSelectionEnter);\n\n    // Raise bands to the top\n    bandSelection.each(function() {Lib.raiseToTop(this);});\n\n    // Remove unused bands\n    bandSelection.exit().remove();\n}\n\n/**\n * Create a ParcatsViewModel traces\n * @param {Object} graphDiv\n *  Top-level graph div element\n * @param {Layout} layout\n *  SVG layout object\n * @param {Array.<ParcatsModel>} wrappedParcatsModel\n *  Wrapped ParcatsModel for this trace\n * @return {ParcatsViewModel}\n */\nfunction createParcatsViewModel(graphDiv, layout, wrappedParcatsModel) {\n    // Unwrap model\n    var parcatsModel = wrappedParcatsModel[0];\n\n    // Compute margin\n    var margin = layout.margin || {l: 80, r: 80, t: 100, b: 80};\n\n    // Compute pixel position/extents\n    var trace = parcatsModel.trace;\n    var domain = trace.domain;\n    var figureWidth = layout.width;\n    var figureHeight = layout.height;\n    var traceWidth = Math.floor(figureWidth * (domain.x[1] - domain.x[0]));\n    var traceHeight = Math.floor(figureHeight * (domain.y[1] - domain.y[0]));\n    var traceX = domain.x[0] * figureWidth + margin.l;\n    var traceY = layout.height - domain.y[1] * layout.height + margin.t;\n\n    // Handle path shape\n    // -----------------\n    var pathShape = trace.line.shape;\n\n    // Handle hover info\n    // -----------------\n    var hoverinfoItems;\n    if(trace.hoverinfo === 'all') {\n        hoverinfoItems = ['count', 'probability'];\n    } else {\n        hoverinfoItems = (trace.hoverinfo || '').split('+');\n    }\n\n    // Construct parcatsViewModel\n    // --------------------------\n    var parcatsViewModel = {\n        trace: trace,\n        key: trace.uid,\n        model: parcatsModel,\n        x: traceX,\n        y: traceY,\n        width: traceWidth,\n        height: traceHeight,\n        hoveron: trace.hoveron,\n        hoverinfoItems: hoverinfoItems,\n        arrangement: trace.arrangement,\n        bundlecolors: trace.bundlecolors,\n        sortpaths: trace.sortpaths,\n        labelfont: trace.labelfont,\n        categorylabelfont: trace.tickfont,\n        pathShape: pathShape,\n        dragDimension: null,\n        margin: margin,\n        paths: [],\n        dimensions: [],\n        graphDiv: graphDiv,\n        traceSelection: null,\n        pathSelection: null,\n        dimensionSelection: null\n    };\n\n    // Update dimension view models if we have at least 1 dimension\n    if(parcatsModel.dimensions) {\n        updateDimensionViewModels(parcatsViewModel);\n\n        // Update path view models if we have at least 2 dimensions\n        updatePathViewModels(parcatsViewModel);\n    }\n    // Inside a categories view model\n    return parcatsViewModel;\n}\n\n/**\n * Build the SVG string to represents a parallel categories path\n * @param {Array.<Number>} leftXPositions\n *  Array of the x positions of the left edge of each dimension (in display order)\n * @param {Array.<Number>} pathYs\n *  Array of the y positions of the top of the path at each dimension (in display order)\n * @param {Array.<Number>} dimWidths\n *  Array of the widths of each dimension in display order\n * @param {Number} pathHeight\n *  The height of the path in pixels\n * @param {Number} curvature\n *  The curvature factor for the path. 0 results in a straight line and values greater than zero result in curved paths\n * @return {string}\n */\nfunction buildSvgPath(leftXPositions, pathYs, dimWidths, pathHeight, curvature) {\n    // Compute the x midpoint of each path segment\n    var xRefPoints1 = [];\n    var xRefPoints2 = [];\n    var refInterpolator;\n    var d;\n\n    for(d = 0; d < dimWidths.length - 1; d++) {\n        refInterpolator = interpolateNumber(dimWidths[d] + leftXPositions[d], leftXPositions[d + 1]);\n        xRefPoints1.push(refInterpolator(curvature));\n        xRefPoints2.push(refInterpolator(1 - curvature));\n    }\n\n    // Move to top of path on left edge of left-most category\n    var svgD = 'M ' + leftXPositions[0] + ',' + pathYs[0];\n\n    // Horizontal line to right edge\n    svgD += 'l' + dimWidths[0] + ',0 ';\n\n    // Horizontal line to right edge\n    for(d = 1; d < dimWidths.length; d++) {\n        // Curve to left edge of category\n        svgD += 'C' + xRefPoints1[d - 1] + ',' + pathYs[d - 1] +\n              ' ' + xRefPoints2[d - 1] + ',' + pathYs[d] +\n              ' ' + leftXPositions[d] + ',' + pathYs[d];\n\n        // svgD += 'L' + leftXPositions[d] + ',' + pathYs[d];\n\n        // Horizontal line to right edge\n        svgD += 'l' + dimWidths[d] + ',0 ';\n    }\n\n    // Line down\n    svgD += 'l' + '0,' + pathHeight + ' ';\n\n    // Line to left edge of right-most category\n    svgD += 'l -' + dimWidths[dimWidths.length - 1] + ',0 ';\n\n    for(d = dimWidths.length - 2; d >= 0; d--) {\n        // Curve to right edge of category\n        svgD += 'C' + xRefPoints2[d] + ',' + (pathYs[d + 1] + pathHeight) +\n             ' ' + xRefPoints1[d] + ',' + (pathYs[d] + pathHeight) +\n             ' ' + (leftXPositions[d] + dimWidths[d]) + ',' + (pathYs[d] + pathHeight);\n\n        // svgD += 'L' + (leftXPositions[d] + dimWidths[d]) + ',' + (pathYs[d] + pathHeight);\n\n        // Horizontal line to right edge\n        svgD += 'l-' + dimWidths[d] + ',0 ';\n    }\n\n    // Close path\n    svgD += 'Z';\n    return svgD;\n}\n\n/**\n * Update the path view models based on the dimension view models in a ParcatsViewModel\n *\n * @param {ParcatsViewModel} parcatsViewModel\n *  View model for trace\n */\nfunction updatePathViewModels(parcatsViewModel) {\n    // Initialize an array of the y position of the top of the next path to be added to each category.\n    //\n    // nextYPositions[d][c] is the y position of the next path through category with index c of dimension with index d\n    var dimensionViewModels = parcatsViewModel.dimensions;\n    var parcatsModel = parcatsViewModel.model;\n    var nextYPositions = dimensionViewModels.map(\n        function(d) {\n            return d.categories.map(\n                function(c) {\n                    return c.y;\n                });\n        });\n\n    // Array from category index to category display index for each true dimension index\n    var catToDisplayIndPerDim = parcatsViewModel.model.dimensions.map(\n        function(d) {\n            return d.categories.map(function(c) {return c.displayInd;});\n        });\n\n    // Array from true dimension index to dimension display index\n    var dimToDisplayInd = parcatsViewModel.model.dimensions.map(function(d) {return d.displayInd;});\n    var displayToDimInd = parcatsViewModel.dimensions.map(function(d) {return d.model.dimensionInd;});\n\n    // Array of the x position of the left edge of the rectangles for each dimension\n    var leftXPositions = dimensionViewModels.map(\n        function(d) {\n            return d.x;\n        });\n\n    // Compute dimension widths\n    var dimWidths = dimensionViewModels.map(function(d) {return d.width;});\n\n    // Build sorted Array of PathModel objects\n    var pathModels = [];\n    for(var p in parcatsModel.paths) {\n        if(parcatsModel.paths.hasOwnProperty(p)) {\n            pathModels.push(parcatsModel.paths[p]);\n        }\n    }\n\n    // Compute category display inds to use for sorting paths\n    function pathDisplayCategoryInds(pathModel) {\n        var dimensionInds = pathModel.categoryInds.map(function(catInd, dimInd) {return catToDisplayIndPerDim[dimInd][catInd];});\n        var displayInds = displayToDimInd.map(function(dimInd) {\n            return dimensionInds[dimInd];\n        });\n        return displayInds;\n    }\n\n    // Sort in ascending order by display index array\n    pathModels.sort(function(v1, v2) {\n        // Build display inds for each path\n        var sortArray1 = pathDisplayCategoryInds(v1);\n        var sortArray2 = pathDisplayCategoryInds(v2);\n\n        // Handle path sort order\n        if(parcatsViewModel.sortpaths === 'backward') {\n            sortArray1.reverse();\n            sortArray2.reverse();\n        }\n\n        // Append the first value index of the path to break ties\n        sortArray1.push(v1.valueInds[0]);\n        sortArray2.push(v2.valueInds[0]);\n\n        // Handle color bundling\n        if(parcatsViewModel.bundlecolors) {\n            // Prepend sort array with the raw color value\n            sortArray1.unshift(v1.rawColor);\n            sortArray2.unshift(v2.rawColor);\n        }\n\n        // colors equal, sort by display categories\n        if(sortArray1 < sortArray2) {\n            return -1;\n        }\n        if(sortArray1 > sortArray2) {\n            return 1;\n        }\n\n        return 0;\n    });\n\n    // Create path models\n    var pathViewModels = new Array(pathModels.length);\n    var totalCount = dimensionViewModels[0].model.count;\n    var totalHeight = dimensionViewModels[0].categories\n        .map(function(c) { return c.height; })\n        .reduce(function(v1, v2) { return v1 + v2; });\n\n\n    for(var pathNumber = 0; pathNumber < pathModels.length; pathNumber++) {\n        var pathModel = pathModels[pathNumber];\n\n        var pathHeight;\n        if(totalCount > 0) {\n            pathHeight = totalHeight * (pathModel.count / totalCount);\n        } else {\n            pathHeight = 0;\n        }\n\n        // Build path y coords\n        var pathYs = new Array(nextYPositions.length);\n        for(var d = 0; d < pathModel.categoryInds.length; d++) {\n            var catInd = pathModel.categoryInds[d];\n            var catDisplayInd = catToDisplayIndPerDim[d][catInd];\n            var dimDisplayInd = dimToDisplayInd[d];\n\n            // Update next y position\n            pathYs[dimDisplayInd] = nextYPositions[dimDisplayInd][catDisplayInd];\n            nextYPositions[dimDisplayInd][catDisplayInd] += pathHeight;\n\n            // Update category color information\n            var catViewModle = parcatsViewModel.dimensions[dimDisplayInd].categories[catDisplayInd];\n            var numBands = catViewModle.bands.length;\n            var lastCatBand = catViewModle.bands[numBands - 1];\n\n            if(lastCatBand === undefined || pathModel.rawColor !== lastCatBand.rawColor) {\n                // Create a new band\n                var bandY = lastCatBand === undefined ? 0 : lastCatBand.y + lastCatBand.height;\n                catViewModle.bands.push({\n                    key: bandY,\n                    color: pathModel.color,\n                    rawColor: pathModel.rawColor,\n                    height: pathHeight,\n                    width: catViewModle.width,\n                    count: pathModel.count,\n                    y: bandY,\n                    categoryViewModel: catViewModle,\n                    parcatsViewModel: parcatsViewModel\n                });\n            } else {\n                // Extend current band\n                var currentBand = catViewModle.bands[numBands - 1];\n                currentBand.height += pathHeight;\n                currentBand.count += pathModel.count;\n            }\n        }\n\n        // build svg path\n        var svgD;\n        if(parcatsViewModel.pathShape === 'hspline') {\n            svgD = buildSvgPath(leftXPositions, pathYs, dimWidths, pathHeight, 0.5);\n        } else {\n            svgD = buildSvgPath(leftXPositions, pathYs, dimWidths, pathHeight, 0);\n        }\n\n        pathViewModels[pathNumber] = {\n            key: pathModel.valueInds[0],\n            model: pathModel,\n            height: pathHeight,\n            leftXs: leftXPositions,\n            topYs: pathYs,\n            dimWidths: dimWidths,\n            svgD: svgD,\n            parcatsViewModel: parcatsViewModel\n        };\n    }\n\n    parcatsViewModel.paths = pathViewModels;\n\n // * @property key\n // *  Unique key for this model\n // * @property {PathModel} model\n // *  Source path model\n // * @property {Number} height\n // *  Height of this path (pixels)\n // * @property {String} svgD\n // *  SVG path \"d\" attribute string\n}\n\n/**\n * Update the dimension view models based on the dimension models in a ParcatsViewModel\n *\n * @param {ParcatsViewModel} parcatsViewModel\n *  View model for trace\n */\nfunction updateDimensionViewModels(parcatsViewModel) {\n    // Compute dimension ordering\n    var dimensionsIndInfo = parcatsViewModel.model.dimensions.map(function(d) {\n        return {displayInd: d.displayInd, dimensionInd: d.dimensionInd};\n    });\n\n    dimensionsIndInfo.sort(function(a, b) {\n        return a.displayInd - b.displayInd;\n    });\n\n    var dimensions = [];\n    for(var displayInd in dimensionsIndInfo) {\n        var dimensionInd = dimensionsIndInfo[displayInd].dimensionInd;\n        var dimModel = parcatsViewModel.model.dimensions[dimensionInd];\n        dimensions.push(createDimensionViewModel(parcatsViewModel, dimModel));\n    }\n\n    parcatsViewModel.dimensions = dimensions;\n}\n\n/**\n * Create a parcats DimensionViewModel\n *\n * @param {ParcatsViewModel} parcatsViewModel\n *  View model for trace\n * @param {DimensionModel} dimensionModel\n * @return {DimensionViewModel}\n */\nfunction createDimensionViewModel(parcatsViewModel, dimensionModel) {\n    // Compute dimension x position\n    var categoryLabelPad = 40;\n    var dimWidth = 16;\n    var numDimensions = parcatsViewModel.model.dimensions.length;\n    var displayInd = dimensionModel.displayInd;\n\n    // Compute x coordinate values\n    var dimDx;\n    var dimX0;\n    var dimX;\n\n    if(numDimensions > 1) {\n        dimDx = (parcatsViewModel.width - 2 * categoryLabelPad - dimWidth) / (numDimensions - 1);\n    } else {\n        dimDx = 0;\n    }\n    dimX0 = categoryLabelPad;\n    dimX = dimX0 + dimDx * displayInd;\n\n    // Compute categories\n    var categories = [];\n    var maxCats = parcatsViewModel.model.maxCats;\n    var numCats = dimensionModel.categories.length;\n    var catSpacing = 8;\n    var totalCount = dimensionModel.count;\n    var totalHeight = parcatsViewModel.height - catSpacing * (maxCats - 1);\n    var nextCatHeight;\n    var nextCatModel;\n    var nextCat;\n    var catInd;\n    var catDisplayInd;\n\n    // Compute starting Y offset\n    var nextCatY = (maxCats - numCats) * catSpacing / 2.0;\n\n    // Compute category ordering\n    var categoryIndInfo = dimensionModel.categories.map(function(c) {\n        return {displayInd: c.displayInd, categoryInd: c.categoryInd};\n    });\n\n    categoryIndInfo.sort(function(a, b) {\n        return a.displayInd - b.displayInd;\n    });\n\n    for(catDisplayInd = 0; catDisplayInd < numCats; catDisplayInd++) {\n        catInd = categoryIndInfo[catDisplayInd].categoryInd;\n        nextCatModel = dimensionModel.categories[catInd];\n\n        if(totalCount > 0) {\n            nextCatHeight = (nextCatModel.count / totalCount) * totalHeight;\n        } else {\n            nextCatHeight = 0;\n        }\n\n        nextCat = {\n            key: nextCatModel.valueInds[0],\n            model: nextCatModel,\n            width: dimWidth,\n            height: nextCatHeight,\n            y: nextCatModel.dragY !== null ? nextCatModel.dragY : nextCatY,\n            bands: [],\n            parcatsViewModel: parcatsViewModel\n        };\n\n        nextCatY = nextCatY + nextCatHeight + catSpacing;\n        categories.push(nextCat);\n    }\n\n    return {\n        key: dimensionModel.dimensionInd,\n        x: dimensionModel.dragX !== null ? dimensionModel.dragX : dimX,\n        y: 0,\n        width: dimWidth,\n        model: dimensionModel,\n        categories: categories,\n        parcatsViewModel: parcatsViewModel,\n        dragCategoryDisplayInd: null,\n        dragDimensionDisplayInd: null,\n        initialDragDimensionDisplayInds: null,\n        initialDragCategoryDisplayInds: null,\n        dragHasMoved: null,\n        potentialClickBand: null\n    };\n}\n\n// JSDoc typedefs\n// ==============\n/**\n * @typedef {Object} Layout\n *  Object containing svg layout information\n *\n * @property {Number} width (pixels)\n *  Usable width for Figure (after margins are removed)\n * @property {Number} height (pixels)\n *  Usable height for Figure (after margins are removed)\n * @property {Margin} margin\n *  Margin around the Figure (pixels)\n */\n\n/**\n * @typedef {Object} Margin\n *  Object containing padding information in pixels\n *\n * @property {Number} t\n *  Top margin\n * @property {Number} r\n *  Right margin\n * @property {Number} b\n *  Bottom margin\n * @property {Number} l\n *  Left margin\n */\n\n/**\n * @typedef {Object} Font\n *  Object containing font information\n *\n * @property {Number} size: Font size\n * @property {String} color: Font color\n * @property {String} family: Font family\n */\n\n/**\n * @typedef {Object} ParcatsViewModel\n *  Object containing calculated parcats view information\n *\n *  These are quantities that require Layout information to calculate\n * @property key\n *  Unique key for this model\n * @property {ParcatsModel} model\n *  Source parcats model\n * @property {Array.<DimensionViewModel>} dimensions\n *  Array of dimension view models\n * @property {Number} width\n *  Width for this trace (pixels)\n * @property {Number} height\n *  Height for this trace (pixels)\n * @property {Number} x\n *  X position of this trace with respect to the Figure (pixels)\n * @property {Number} y\n *  Y position of this trace with respect to the Figure (pixels)\n * @property {String} hoveron\n *  Hover interaction mode. One of: 'category', 'color', or 'dimension'\n * @property {Array.<String>} hoverinfoItems\n *  Info to display on hover. Array with a combination of 'counts' and/or 'probabilities', or 'none', or 'skip'\n * @property {String} arrangement\n *  Category arrangement. One of: 'perpendicular', 'freeform', or 'fixed'\n * @property {Boolean} bundlecolors\n *  Whether paths should be sorted so that like colors are bundled together as they pass through categories\n * @property {String} sortpaths\n *  If 'forward' then sort paths based on dimensions from left to right. If 'backward' sort based on dimensions\n *  from right to left\n * @property {Font} labelfont\n *  Font for the dimension labels\n * @property {Font} categorylabelfont\n *  Font for the category labels\n * @property {String} pathShape\n *  The shape of the paths. Either 'linear' or 'hspline'.\n * @property {DimensionViewModel|null} dragDimension\n *  Dimension currently being dragged. Null if no drag in progress\n * @property {Margin} margin\n *  Margin around the Figure\n * @property {Object} graphDiv\n *  Top-level graph div element\n * @property {Object} traceSelection\n *  D3 selection of this view models trace group element\n * @property {Object} pathSelection\n *  D3 selection of this view models path elements\n * @property {Object} dimensionSelection\n *  D3 selection of this view models dimension group element\n */\n\n/**\n * @typedef {Object} DimensionViewModel\n *  Object containing calculated parcats dimension view information\n *\n *  These are quantities that require Layout information to calculate\n * @property key\n *  Unique key for this model\n * @property {DimensionModel} model\n *  Source dimension model\n * @property {Number} x\n *  X position of the center of this dimension with respect to the Figure (pixels)\n * @property {Number} y\n *  Y position of the top of this dimension with respect to the Figure (pixels)\n * @property {Number} width\n *  Width of categories in this dimension (pixels)\n * @property {ParcatsViewModel} parcatsViewModel\n *  The parent trace's view model\n * @property {Array.<CategoryViewModel>} categories\n *  Dimensions category view models\n * @property {Number|null} dragCategoryDisplayInd\n *  Display index of category currently being dragged. null if no category is being dragged\n * @property {Number|null} dragDimensionDisplayInd\n *  Display index of the dimension being dragged. null if no dimension is being dragged\n * @property {Array.<Number>|null} initialDragDimensionDisplayInds\n *  Dimensions display indexes at the beginning of the current drag. null if no dimension is being dragged\n * @property {Array.<Number>|null} initialDragCategoryDisplayInds\n *  Category display indexes for the at the beginning of the current drag. null if no category is being dragged\n * @property {HTMLElement} potentialClickBand\n *  Band under mouse when current drag began. If no drag movement takes place then a click will be emitted for this\n *  band. Null if not drag in progress.\n * @property {Boolean} dragHasMoved\n *  True if there is an active drag and the drag has moved. If drag doesn't move before being ended then\n *  this may be interpreted as a click. Null if no drag in progress\n */\n\n/**\n * @typedef {Object} CategoryViewModel\n *  Object containing calculated parcats category view information\n *\n *  These are quantities that require Layout information to calculate\n * @property key\n *  Unique key for this model\n * @property {CategoryModel} model\n *  Source category model\n * @property {Number} width\n *  Width for this category (pixels)\n * @property {Number} height\n *  Height for this category (pixels)\n * @property {Number} y\n *  Y position of this cateogry with respect to the Figure (pixels)\n * @property {Array.<CategoryBandViewModel>} bands\n *  Array of color bands inside the category\n * @property {ParcatsViewModel} parcatsViewModel\n *  The parent trace's view model\n */\n\n/**\n * @typedef {Object} CategoryBandViewModel\n *  Object containing calculated category band information. A category band is a region inside a category covering\n *  paths of a single color\n *\n * @property key\n *  Unique key for this model\n * @property color\n *  Band color\n * @property rawColor\n *  Raw color value for band\n * @property {Number} width\n *  Band width\n * @property {Number} height\n *  Band height\n * @property {Number} y\n *  Y position of top of the band with respect to the category\n * @property {Number} count\n *  The number of samples represented by the band\n * @property {CategoryViewModel} categoryViewModel\n *  The parent categorie's view model\n * @property {ParcatsViewModel} parcatsViewModel\n *  The parent trace's view model\n */\n\n/**\n * @typedef {Object} PathViewModel\n *  Object containing calculated parcats path view information\n *\n *  These are quantities that require Layout information to calculate\n * @property key\n *  Unique key for this model\n * @property {PathModel} model\n *  Source path model\n * @property {Number} height\n *  Height of this path (pixels)\n * @property {Array.<Number>} leftXs\n *  The x position of the left edge of each display dimension\n * @property {Array.<Number>} topYs\n *  The y position of the top of the path for each display dimension\n * @property {Array.<Number>} dimWidths\n *  The width of each display dimension\n * @property {String} svgD\n *  SVG path \"d\" attribute string\n * @property {ParcatsViewModel} parcatsViewModel\n *  The parent trace's view model\n */\n"]},"metadata":{},"sourceType":"script"}