{"ast":null,"code":"'use strict';\n\nvar isNumeric = require('fast-isnumeric');\n\nvar calcColorscale = require('../scatter/colorscale_calc');\n\nvar arraysToCalcdata = require('../scatter/arrays_to_calcdata');\n\nvar calcSelection = require('../scatter/calc_selection');\n\nvar calcMarkerSize = require('../scatter/calc').calcMarkerSize;\n\nvar lookupCarpet = require('../carpet/lookup_carpetid');\n\nmodule.exports = function calc(gd, trace) {\n  var carpet = trace._carpetTrace = lookupCarpet(gd, trace);\n  if (!carpet || !carpet.visible || carpet.visible === 'legendonly') return;\n  var i; // Transfer this over from carpet before plotting since this is a necessary\n  // condition in order for cartesian to actually plot this trace:\n\n  trace.xaxis = carpet.xaxis;\n  trace.yaxis = carpet.yaxis; // make the calcdata array\n\n  var serieslen = trace._length;\n  var cd = new Array(serieslen);\n  var a, b;\n  var needsCull = false;\n\n  for (i = 0; i < serieslen; i++) {\n    a = trace.a[i];\n    b = trace.b[i];\n\n    if (isNumeric(a) && isNumeric(b)) {\n      var xy = carpet.ab2xy(+a, +b, true);\n      var visible = carpet.isVisible(+a, +b);\n      if (!visible) needsCull = true;\n      cd[i] = {\n        x: xy[0],\n        y: xy[1],\n        a: a,\n        b: b,\n        vis: visible\n      };\n    } else cd[i] = {\n      x: false,\n      y: false\n    };\n  }\n\n  trace._needsCull = needsCull;\n  cd[0].carpet = carpet;\n  cd[0].trace = trace;\n  calcMarkerSize(trace, serieslen);\n  calcColorscale(gd, trace);\n  arraysToCalcdata(cd, trace);\n  calcSelection(cd, trace);\n  return cd;\n};","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/plotly.js/src/traces/scattercarpet/calc.js"],"names":["isNumeric","require","calcColorscale","arraysToCalcdata","calcSelection","calcMarkerSize","lookupCarpet","module","exports","calc","gd","trace","carpet","_carpetTrace","visible","i","xaxis","yaxis","serieslen","_length","cd","Array","a","b","needsCull","xy","ab2xy","isVisible","x","y","vis","_needsCull"],"mappings":"AAAA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,gBAAD,CAAvB;;AAEA,IAAIC,cAAc,GAAGD,OAAO,CAAC,4BAAD,CAA5B;;AACA,IAAIE,gBAAgB,GAAGF,OAAO,CAAC,+BAAD,CAA9B;;AACA,IAAIG,aAAa,GAAGH,OAAO,CAAC,2BAAD,CAA3B;;AACA,IAAII,cAAc,GAAGJ,OAAO,CAAC,iBAAD,CAAP,CAA2BI,cAAhD;;AACA,IAAIC,YAAY,GAAGL,OAAO,CAAC,2BAAD,CAA1B;;AAEAM,MAAM,CAACC,OAAP,GAAiB,SAASC,IAAT,CAAcC,EAAd,EAAkBC,KAAlB,EAAyB;AACtC,MAAIC,MAAM,GAAGD,KAAK,CAACE,YAAN,GAAqBP,YAAY,CAACI,EAAD,EAAKC,KAAL,CAA9C;AACA,MAAG,CAACC,MAAD,IAAW,CAACA,MAAM,CAACE,OAAnB,IAA8BF,MAAM,CAACE,OAAP,KAAmB,YAApD,EAAkE;AAClE,MAAIC,CAAJ,CAHsC,CAKtC;AACA;;AACAJ,EAAAA,KAAK,CAACK,KAAN,GAAcJ,MAAM,CAACI,KAArB;AACAL,EAAAA,KAAK,CAACM,KAAN,GAAcL,MAAM,CAACK,KAArB,CARsC,CAUtC;;AACA,MAAIC,SAAS,GAAGP,KAAK,CAACQ,OAAtB;AACA,MAAIC,EAAE,GAAG,IAAIC,KAAJ,CAAUH,SAAV,CAAT;AACA,MAAII,CAAJ,EAAOC,CAAP;AACA,MAAIC,SAAS,GAAG,KAAhB;;AACA,OAAIT,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGG,SAAf,EAA0BH,CAAC,EAA3B,EAA+B;AAC3BO,IAAAA,CAAC,GAAGX,KAAK,CAACW,CAAN,CAAQP,CAAR,CAAJ;AACAQ,IAAAA,CAAC,GAAGZ,KAAK,CAACY,CAAN,CAAQR,CAAR,CAAJ;;AACA,QAAGf,SAAS,CAACsB,CAAD,CAAT,IAAgBtB,SAAS,CAACuB,CAAD,CAA5B,EAAiC;AAC7B,UAAIE,EAAE,GAAGb,MAAM,CAACc,KAAP,CAAa,CAACJ,CAAd,EAAiB,CAACC,CAAlB,EAAqB,IAArB,CAAT;AACA,UAAIT,OAAO,GAAGF,MAAM,CAACe,SAAP,CAAiB,CAACL,CAAlB,EAAqB,CAACC,CAAtB,CAAd;AACA,UAAG,CAACT,OAAJ,EAAaU,SAAS,GAAG,IAAZ;AACbJ,MAAAA,EAAE,CAACL,CAAD,CAAF,GAAQ;AAACa,QAAAA,CAAC,EAAEH,EAAE,CAAC,CAAD,CAAN;AAAWI,QAAAA,CAAC,EAAEJ,EAAE,CAAC,CAAD,CAAhB;AAAqBH,QAAAA,CAAC,EAAEA,CAAxB;AAA2BC,QAAAA,CAAC,EAAEA,CAA9B;AAAiCO,QAAAA,GAAG,EAAEhB;AAAtC,OAAR;AACH,KALD,MAKOM,EAAE,CAACL,CAAD,CAAF,GAAQ;AAACa,MAAAA,CAAC,EAAE,KAAJ;AAAWC,MAAAA,CAAC,EAAE;AAAd,KAAR;AACV;;AAEDlB,EAAAA,KAAK,CAACoB,UAAN,GAAmBP,SAAnB;AAEAJ,EAAAA,EAAE,CAAC,CAAD,CAAF,CAAMR,MAAN,GAAeA,MAAf;AACAQ,EAAAA,EAAE,CAAC,CAAD,CAAF,CAAMT,KAAN,GAAcA,KAAd;AAEAN,EAAAA,cAAc,CAACM,KAAD,EAAQO,SAAR,CAAd;AACAhB,EAAAA,cAAc,CAACQ,EAAD,EAAKC,KAAL,CAAd;AACAR,EAAAA,gBAAgB,CAACiB,EAAD,EAAKT,KAAL,CAAhB;AACAP,EAAAA,aAAa,CAACgB,EAAD,EAAKT,KAAL,CAAb;AAEA,SAAOS,EAAP;AACH,CArCD","sourcesContent":["'use strict';\n\nvar isNumeric = require('fast-isnumeric');\n\nvar calcColorscale = require('../scatter/colorscale_calc');\nvar arraysToCalcdata = require('../scatter/arrays_to_calcdata');\nvar calcSelection = require('../scatter/calc_selection');\nvar calcMarkerSize = require('../scatter/calc').calcMarkerSize;\nvar lookupCarpet = require('../carpet/lookup_carpetid');\n\nmodule.exports = function calc(gd, trace) {\n    var carpet = trace._carpetTrace = lookupCarpet(gd, trace);\n    if(!carpet || !carpet.visible || carpet.visible === 'legendonly') return;\n    var i;\n\n    // Transfer this over from carpet before plotting since this is a necessary\n    // condition in order for cartesian to actually plot this trace:\n    trace.xaxis = carpet.xaxis;\n    trace.yaxis = carpet.yaxis;\n\n    // make the calcdata array\n    var serieslen = trace._length;\n    var cd = new Array(serieslen);\n    var a, b;\n    var needsCull = false;\n    for(i = 0; i < serieslen; i++) {\n        a = trace.a[i];\n        b = trace.b[i];\n        if(isNumeric(a) && isNumeric(b)) {\n            var xy = carpet.ab2xy(+a, +b, true);\n            var visible = carpet.isVisible(+a, +b);\n            if(!visible) needsCull = true;\n            cd[i] = {x: xy[0], y: xy[1], a: a, b: b, vis: visible};\n        } else cd[i] = {x: false, y: false};\n    }\n\n    trace._needsCull = needsCull;\n\n    cd[0].carpet = carpet;\n    cd[0].trace = trace;\n\n    calcMarkerSize(trace, serieslen);\n    calcColorscale(gd, trace);\n    arraysToCalcdata(cd, trace);\n    calcSelection(cd, trace);\n\n    return cd;\n};\n"]},"metadata":{},"sourceType":"script"}