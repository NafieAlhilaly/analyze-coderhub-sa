{"ast":null,"code":"'use strict';\n/**\n * @module parenthesis\n */\n\nfunction parse(str, opts) {\n  // pretend non-string parsed per-se\n  if (typeof str !== 'string') return [str];\n  var res = [str];\n\n  if (typeof opts === 'string' || Array.isArray(opts)) {\n    opts = {\n      brackets: opts\n    };\n  } else if (!opts) opts = {};\n\n  var brackets = opts.brackets ? Array.isArray(opts.brackets) ? opts.brackets : [opts.brackets] : ['{}', '[]', '()'];\n  var escape = opts.escape || '___';\n  var flat = !!opts.flat;\n  brackets.forEach(function (bracket) {\n    // create parenthesis regex\n    var pRE = new RegExp(['\\\\', bracket[0], '[^\\\\', bracket[0], '\\\\', bracket[1], ']*\\\\', bracket[1]].join(''));\n    var ids = [];\n\n    function replaceToken(token, idx, str) {\n      // save token to res\n      var refId = res.push(token.slice(bracket[0].length, -bracket[1].length)) - 1;\n      ids.push(refId);\n      return escape + refId + escape;\n    }\n\n    res.forEach(function (str, i) {\n      var prevStr; // replace paren tokens till there’s none\n\n      var a = 0;\n\n      while (str != prevStr) {\n        prevStr = str;\n        str = str.replace(pRE, replaceToken);\n        if (a++ > 10e3) throw Error('References have circular dependency. Please, check them.');\n      }\n\n      res[i] = str;\n    }); // wrap found refs to brackets\n\n    ids = ids.reverse();\n    res = res.map(function (str) {\n      ids.forEach(function (id) {\n        str = str.replace(new RegExp('(\\\\' + escape + id + '\\\\' + escape + ')', 'g'), bracket[0] + '$1' + bracket[1]);\n      });\n      return str;\n    });\n  });\n  var re = new RegExp('\\\\' + escape + '([0-9]+)' + '\\\\' + escape); // transform references to tree\n\n  function nest(str, refs, escape) {\n    var res = [],\n        match;\n    var a = 0;\n\n    while (match = re.exec(str)) {\n      if (a++ > 10e3) throw Error('Circular references in parenthesis');\n      res.push(str.slice(0, match.index));\n      res.push(nest(refs[match[1]], refs));\n      str = str.slice(match.index + match[0].length);\n    }\n\n    res.push(str);\n    return res;\n  }\n\n  return flat ? res : nest(res[0], res);\n}\n\nfunction stringify(arg, opts) {\n  if (opts && opts.flat) {\n    var escape = opts && opts.escape || '___';\n    var str = arg[0],\n        prevStr; // pretend bad string stringified with no parentheses\n\n    if (!str) return '';\n    var re = new RegExp('\\\\' + escape + '([0-9]+)' + '\\\\' + escape);\n    var a = 0;\n\n    while (str != prevStr) {\n      if (a++ > 10e3) throw Error('Circular references in ' + arg);\n      prevStr = str;\n      str = str.replace(re, replaceRef);\n    }\n\n    return str;\n  }\n\n  return arg.reduce(function f(prev, curr) {\n    if (Array.isArray(curr)) {\n      curr = curr.reduce(f, '');\n    }\n\n    return prev + curr;\n  }, '');\n\n  function replaceRef(match, idx) {\n    if (arg[idx] == null) throw Error('Reference ' + idx + 'is undefined');\n    return arg[idx];\n  }\n}\n\nfunction parenthesis(arg, opts) {\n  if (Array.isArray(arg)) {\n    return stringify(arg, opts);\n  } else {\n    return parse(arg, opts);\n  }\n}\n\nparenthesis.parse = parse;\nparenthesis.stringify = stringify;\nmodule.exports = parenthesis;","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/parenthesis/index.js"],"names":["parse","str","opts","res","Array","isArray","brackets","escape","flat","forEach","bracket","pRE","RegExp","join","ids","replaceToken","token","idx","refId","push","slice","length","i","prevStr","a","replace","Error","reverse","map","id","re","nest","refs","match","exec","index","stringify","arg","replaceRef","reduce","f","prev","curr","parenthesis","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\n/**\n * @module parenthesis\n */\n\nfunction parse (str, opts) {\n\t// pretend non-string parsed per-se\n\tif (typeof str !== 'string') return [str]\n\n\tvar res = [str]\n\n\tif (typeof opts === 'string' || Array.isArray(opts)) {\n\t\topts = {brackets: opts}\n\t}\n\telse if (!opts) opts = {}\n\n\tvar brackets = opts.brackets ? (Array.isArray(opts.brackets) ? opts.brackets : [opts.brackets]) : ['{}', '[]', '()']\n\n\tvar escape = opts.escape || '___'\n\n\tvar flat = !!opts.flat\n\n\tbrackets.forEach(function (bracket) {\n\t\t// create parenthesis regex\n\t\tvar pRE = new RegExp(['\\\\', bracket[0], '[^\\\\', bracket[0], '\\\\', bracket[1], ']*\\\\', bracket[1]].join(''))\n\n\t\tvar ids = []\n\n\t\tfunction replaceToken(token, idx, str){\n\t\t\t// save token to res\n\t\t\tvar refId = res.push(token.slice(bracket[0].length, -bracket[1].length)) - 1\n\n\t\t\tids.push(refId)\n\n\t\t\treturn escape + refId + escape\n\t\t}\n\n\t\tres.forEach(function (str, i) {\n\t\t\tvar prevStr\n\n\t\t\t// replace paren tokens till there’s none\n\t\t\tvar a = 0\n\t\t\twhile (str != prevStr) {\n\t\t\t\tprevStr = str\n\t\t\t\tstr = str.replace(pRE, replaceToken)\n\t\t\t\tif (a++ > 10e3) throw Error('References have circular dependency. Please, check them.')\n\t\t\t}\n\n\t\t\tres[i] = str\n\t\t})\n\n\t\t// wrap found refs to brackets\n\t\tids = ids.reverse()\n\t\tres = res.map(function (str) {\n\t\t\tids.forEach(function (id) {\n\t\t\t\tstr = str.replace(new RegExp('(\\\\' + escape + id + '\\\\' + escape + ')', 'g'), bracket[0] + '$1' + bracket[1])\n\t\t\t})\n\t\t\treturn str\n\t\t})\n\t})\n\n\tvar re = new RegExp('\\\\' + escape + '([0-9]+)' + '\\\\' + escape)\n\n\t// transform references to tree\n\tfunction nest (str, refs, escape) {\n\t\tvar res = [], match\n\n\t\tvar a = 0\n\t\twhile (match = re.exec(str)) {\n\t\t\tif (a++ > 10e3) throw Error('Circular references in parenthesis')\n\n\t\t\tres.push(str.slice(0, match.index))\n\n\t\t\tres.push(nest(refs[match[1]], refs))\n\n\t\t\tstr = str.slice(match.index + match[0].length)\n\t\t}\n\n\t\tres.push(str)\n\n\t\treturn res\n\t}\n\n\treturn flat ? res : nest(res[0], res)\n}\n\nfunction stringify (arg, opts) {\n\tif (opts && opts.flat) {\n\t\tvar escape = opts && opts.escape || '___'\n\n\t\tvar str = arg[0], prevStr\n\n\t\t// pretend bad string stringified with no parentheses\n\t\tif (!str) return ''\n\n\n\t\tvar re = new RegExp('\\\\' + escape + '([0-9]+)' + '\\\\' + escape)\n\n\t\tvar a = 0\n\t\twhile (str != prevStr) {\n\t\t\tif (a++ > 10e3) throw Error('Circular references in ' + arg)\n\t\t\tprevStr = str\n\t\t\tstr = str.replace(re, replaceRef)\n\t\t}\n\n\t\treturn str\n\t}\n\n\treturn arg.reduce(function f (prev, curr) {\n\t\tif (Array.isArray(curr)) {\n\t\t\tcurr = curr.reduce(f, '')\n\t\t}\n\t\treturn prev + curr\n\t}, '')\n\n\tfunction replaceRef(match, idx){\n\t\tif (arg[idx] == null) throw Error('Reference ' + idx + 'is undefined')\n\t\treturn arg[idx]\n\t}\n}\n\nfunction parenthesis (arg, opts) {\n\tif (Array.isArray(arg)) {\n\t\treturn stringify(arg, opts)\n\t}\n\telse {\n\t\treturn parse(arg, opts)\n\t}\n}\n\nparenthesis.parse = parse\nparenthesis.stringify = stringify\n\nmodule.exports = parenthesis\n"]},"metadata":{},"sourceType":"script"}