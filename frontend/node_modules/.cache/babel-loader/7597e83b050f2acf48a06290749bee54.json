{"ast":null,"code":"/**\n * Module dependencies.\n */\nvar assert = require('assert');\n\nvar debug = require('debug')('stream-parser');\n/**\n * Module exports.\n */\n\n\nmodule.exports = Parser;\n/**\n * Parser states.\n */\n\nvar INIT = -1;\nvar BUFFERING = 0;\nvar SKIPPING = 1;\nvar PASSTHROUGH = 2;\n/**\n * The `Parser` stream mixin works with either `Writable` or `Transform` stream\n * instances/subclasses. Provides a convenient generic \"parsing\" API:\n *\n *   _bytes(n, cb) - buffers \"n\" bytes and then calls \"cb\" with the \"chunk\"\n *   _skipBytes(n, cb) - skips \"n\" bytes and then calls \"cb\" when done\n *\n * If you extend a `Transform` stream, then the `_passthrough()` function is also\n * added:\n *\n *   _passthrough(n, cb) - passes through \"n\" bytes untouched and then calls \"cb\"\n *\n * @param {Stream} stream Transform or Writable stream instance to extend\n * @api public\n */\n\nfunction Parser(stream) {\n  var isTransform = stream && 'function' == typeof stream._transform;\n  var isWritable = stream && 'function' == typeof stream._write;\n  if (!isTransform && !isWritable) throw new Error('must pass a Writable or Transform stream in');\n  debug('extending Parser into stream'); // Transform streams and Writable streams get `_bytes()` and `_skipBytes()`\n\n  stream._bytes = _bytes;\n  stream._skipBytes = _skipBytes; // only Transform streams get the `_passthrough()` function\n\n  if (isTransform) stream._passthrough = _passthrough; // take control of the streams2 callback functions for this stream\n\n  if (isTransform) {\n    stream._transform = transform;\n  } else {\n    stream._write = write;\n  }\n}\n\nfunction init(stream) {\n  debug('initializing parser stream'); // number of bytes left to parser for the next \"chunk\"\n\n  stream._parserBytesLeft = 0; // array of Buffer instances that make up the next \"chunk\"\n\n  stream._parserBuffers = []; // number of bytes parsed so far for the next \"chunk\"\n\n  stream._parserBuffered = 0; // flag that keeps track of if what the parser should do with bytes received\n\n  stream._parserState = INIT; // the callback for the next \"chunk\"\n\n  stream._parserCallback = null; // XXX: backwards compat with the old Transform API... remove at some point..\n\n  if ('function' == typeof stream.push) {\n    stream._parserOutput = stream.push.bind(stream);\n  }\n\n  stream._parserInit = true;\n}\n/**\n * Buffers `n` bytes and then invokes `fn` once that amount has been collected.\n *\n * @param {Number} n the number of bytes to buffer\n * @param {Function} fn callback function to invoke when `n` bytes are buffered\n * @api public\n */\n\n\nfunction _bytes(n, fn) {\n  assert(!this._parserCallback, 'there is already a \"callback\" set!');\n  assert(isFinite(n) && n > 0, 'can only buffer a finite number of bytes > 0, got \"' + n + '\"');\n  if (!this._parserInit) init(this);\n  debug('buffering %o bytes', n);\n  this._parserBytesLeft = n;\n  this._parserCallback = fn;\n  this._parserState = BUFFERING;\n}\n/**\n * Skips over the next `n` bytes, then invokes `fn` once that amount has\n * been discarded.\n *\n * @param {Number} n the number of bytes to discard\n * @param {Function} fn callback function to invoke when `n` bytes have been skipped\n * @api public\n */\n\n\nfunction _skipBytes(n, fn) {\n  assert(!this._parserCallback, 'there is already a \"callback\" set!');\n  assert(n > 0, 'can only skip > 0 bytes, got \"' + n + '\"');\n  if (!this._parserInit) init(this);\n  debug('skipping %o bytes', n);\n  this._parserBytesLeft = n;\n  this._parserCallback = fn;\n  this._parserState = SKIPPING;\n}\n/**\n * Passes through `n` bytes to the readable side of this stream untouched,\n * then invokes `fn` once that amount has been passed through.\n *\n * @param {Number} n the number of bytes to pass through\n * @param {Function} fn callback function to invoke when `n` bytes have passed through\n * @api public\n */\n\n\nfunction _passthrough(n, fn) {\n  assert(!this._parserCallback, 'There is already a \"callback\" set!');\n  assert(n > 0, 'can only pass through > 0 bytes, got \"' + n + '\"');\n  if (!this._parserInit) init(this);\n  debug('passing through %o bytes', n);\n  this._parserBytesLeft = n;\n  this._parserCallback = fn;\n  this._parserState = PASSTHROUGH;\n}\n/**\n * The `_write()` callback function implementation.\n *\n * @api private\n */\n\n\nfunction write(chunk, encoding, fn) {\n  if (!this._parserInit) init(this);\n  debug('write(%o bytes)', chunk.length); // XXX: old Writable stream API compat... remove at some point...\n\n  if ('function' == typeof encoding) fn = encoding;\n  data(this, chunk, null, fn);\n}\n/**\n * The `_transform()` callback function implementation.\n *\n * @api private\n */\n\n\nfunction transform(chunk, output, fn) {\n  if (!this._parserInit) init(this);\n  debug('transform(%o bytes)', chunk.length); // XXX: old Transform stream API compat... remove at some point...\n\n  if ('function' != typeof output) {\n    output = this._parserOutput;\n  }\n\n  data(this, chunk, output, fn);\n}\n/**\n * The internal buffering/passthrough logic...\n *\n * This `_data` function get's \"trampolined\" to prevent stack overflows for tight\n * loops. This technique requires us to return a \"thunk\" function for any\n * synchronous action. Async stuff breaks the trampoline, but that's ok since it's\n * working with a new stack at that point anyway.\n *\n * @api private\n */\n\n\nfunction _data(stream, chunk, output, fn) {\n  if (stream._parserBytesLeft <= 0) {\n    return fn(new Error('got data but not currently parsing anything'));\n  }\n\n  if (chunk.length <= stream._parserBytesLeft) {\n    // small buffer fits within the \"_parserBytesLeft\" window\n    return function () {\n      return process(stream, chunk, output, fn);\n    };\n  } else {\n    // large buffer needs to be sliced on \"_parserBytesLeft\" and processed\n    return function () {\n      var b = chunk.slice(0, stream._parserBytesLeft);\n      return process(stream, b, output, function (err) {\n        if (err) return fn(err);\n\n        if (chunk.length > b.length) {\n          return function () {\n            return _data(stream, chunk.slice(b.length), output, fn);\n          };\n        }\n      });\n    };\n  }\n}\n/**\n * The internal `process` function gets called by the `data` function when\n * something \"interesting\" happens. This function takes care of buffering the\n * bytes when buffering, passing through the bytes when doing that, and invoking\n * the user callback when the number of bytes has been reached.\n *\n * @api private\n */\n\n\nfunction process(stream, chunk, output, fn) {\n  stream._parserBytesLeft -= chunk.length;\n  debug('%o bytes left for stream piece', stream._parserBytesLeft);\n\n  if (stream._parserState === BUFFERING) {\n    // buffer\n    stream._parserBuffers.push(chunk);\n\n    stream._parserBuffered += chunk.length;\n  } else if (stream._parserState === PASSTHROUGH) {\n    // passthrough\n    output(chunk);\n  } // don't need to do anything for the SKIPPING case\n\n\n  if (0 === stream._parserBytesLeft) {\n    // done with stream \"piece\", invoke the callback\n    var cb = stream._parserCallback;\n\n    if (cb && stream._parserState === BUFFERING && stream._parserBuffers.length > 1) {\n      chunk = Buffer.concat(stream._parserBuffers, stream._parserBuffered);\n    }\n\n    if (stream._parserState !== BUFFERING) {\n      chunk = null;\n    }\n\n    stream._parserCallback = null;\n    stream._parserBuffered = 0;\n    stream._parserState = INIT;\n\n    stream._parserBuffers.splice(0); // empty\n\n\n    if (cb) {\n      var args = [];\n\n      if (chunk) {\n        // buffered\n        args.push(chunk);\n      } else {// passthrough\n      }\n\n      if (output) {\n        // on a Transform stream, has \"output\" function\n        args.push(output);\n      }\n\n      var async = cb.length > args.length;\n\n      if (async) {\n        args.push(trampoline(fn));\n      } // invoke cb\n\n\n      var rtn = cb.apply(stream, args);\n      if (!async || fn === rtn) return fn;\n    }\n  } else {\n    // need more bytes\n    return fn;\n  }\n}\n\nvar data = trampoline(_data);\n/**\n * Generic thunk-based \"trampoline\" helper function.\n *\n * @param {Function} input function\n * @return {Function} \"trampolined\" function\n * @api private\n */\n\nfunction trampoline(fn) {\n  return function () {\n    var result = fn.apply(this, arguments);\n\n    while ('function' == typeof result) {\n      result = result();\n    }\n\n    return result;\n  };\n}","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/stream-parser/index.js"],"names":["assert","require","debug","module","exports","Parser","INIT","BUFFERING","SKIPPING","PASSTHROUGH","stream","isTransform","_transform","isWritable","_write","Error","_bytes","_skipBytes","_passthrough","transform","write","init","_parserBytesLeft","_parserBuffers","_parserBuffered","_parserState","_parserCallback","push","_parserOutput","bind","_parserInit","n","fn","isFinite","chunk","encoding","length","data","output","_data","process","b","slice","err","cb","Buffer","concat","splice","args","async","trampoline","rtn","apply","result","arguments"],"mappings":"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","sourcesContent":["\n/**\n * Module dependencies.\n */\n\nvar assert = require('assert');\nvar debug = require('debug')('stream-parser');\n\n/**\n * Module exports.\n */\n\nmodule.exports = Parser;\n\n/**\n * Parser states.\n */\n\nvar INIT        = -1;\nvar BUFFERING   = 0;\nvar SKIPPING    = 1;\nvar PASSTHROUGH = 2;\n\n/**\n * The `Parser` stream mixin works with either `Writable` or `Transform` stream\n * instances/subclasses. Provides a convenient generic \"parsing\" API:\n *\n *   _bytes(n, cb) - buffers \"n\" bytes and then calls \"cb\" with the \"chunk\"\n *   _skipBytes(n, cb) - skips \"n\" bytes and then calls \"cb\" when done\n *\n * If you extend a `Transform` stream, then the `_passthrough()` function is also\n * added:\n *\n *   _passthrough(n, cb) - passes through \"n\" bytes untouched and then calls \"cb\"\n *\n * @param {Stream} stream Transform or Writable stream instance to extend\n * @api public\n */\n\nfunction Parser (stream) {\n  var isTransform = stream && 'function' == typeof stream._transform;\n  var isWritable = stream && 'function' == typeof stream._write;\n\n  if (!isTransform && !isWritable) throw new Error('must pass a Writable or Transform stream in');\n  debug('extending Parser into stream');\n\n  // Transform streams and Writable streams get `_bytes()` and `_skipBytes()`\n  stream._bytes = _bytes;\n  stream._skipBytes = _skipBytes;\n\n  // only Transform streams get the `_passthrough()` function\n  if (isTransform) stream._passthrough = _passthrough;\n\n  // take control of the streams2 callback functions for this stream\n  if (isTransform) {\n    stream._transform = transform;\n  } else {\n    stream._write = write;\n  }\n}\n\nfunction init (stream) {\n  debug('initializing parser stream');\n\n  // number of bytes left to parser for the next \"chunk\"\n  stream._parserBytesLeft = 0;\n\n  // array of Buffer instances that make up the next \"chunk\"\n  stream._parserBuffers = [];\n\n  // number of bytes parsed so far for the next \"chunk\"\n  stream._parserBuffered = 0;\n\n  // flag that keeps track of if what the parser should do with bytes received\n  stream._parserState = INIT;\n\n  // the callback for the next \"chunk\"\n  stream._parserCallback = null;\n\n  // XXX: backwards compat with the old Transform API... remove at some point..\n  if ('function' == typeof stream.push) {\n    stream._parserOutput = stream.push.bind(stream);\n  }\n\n  stream._parserInit = true;\n}\n\n/**\n * Buffers `n` bytes and then invokes `fn` once that amount has been collected.\n *\n * @param {Number} n the number of bytes to buffer\n * @param {Function} fn callback function to invoke when `n` bytes are buffered\n * @api public\n */\n\nfunction _bytes (n, fn) {\n  assert(!this._parserCallback, 'there is already a \"callback\" set!');\n  assert(isFinite(n) && n > 0, 'can only buffer a finite number of bytes > 0, got \"' + n + '\"');\n  if (!this._parserInit) init(this);\n  debug('buffering %o bytes', n);\n  this._parserBytesLeft = n;\n  this._parserCallback = fn;\n  this._parserState = BUFFERING;\n}\n\n/**\n * Skips over the next `n` bytes, then invokes `fn` once that amount has\n * been discarded.\n *\n * @param {Number} n the number of bytes to discard\n * @param {Function} fn callback function to invoke when `n` bytes have been skipped\n * @api public\n */\n\nfunction _skipBytes (n, fn) {\n  assert(!this._parserCallback, 'there is already a \"callback\" set!');\n  assert(n > 0, 'can only skip > 0 bytes, got \"' + n + '\"');\n  if (!this._parserInit) init(this);\n  debug('skipping %o bytes', n);\n  this._parserBytesLeft = n;\n  this._parserCallback = fn;\n  this._parserState = SKIPPING;\n}\n\n/**\n * Passes through `n` bytes to the readable side of this stream untouched,\n * then invokes `fn` once that amount has been passed through.\n *\n * @param {Number} n the number of bytes to pass through\n * @param {Function} fn callback function to invoke when `n` bytes have passed through\n * @api public\n */\n\nfunction _passthrough (n, fn) {\n  assert(!this._parserCallback, 'There is already a \"callback\" set!');\n  assert(n > 0, 'can only pass through > 0 bytes, got \"' + n + '\"');\n  if (!this._parserInit) init(this);\n  debug('passing through %o bytes', n);\n  this._parserBytesLeft = n;\n  this._parserCallback = fn;\n  this._parserState = PASSTHROUGH;\n}\n\n/**\n * The `_write()` callback function implementation.\n *\n * @api private\n */\n\nfunction write (chunk, encoding, fn) {\n  if (!this._parserInit) init(this);\n  debug('write(%o bytes)', chunk.length);\n\n  // XXX: old Writable stream API compat... remove at some point...\n  if ('function' == typeof encoding) fn = encoding;\n\n  data(this, chunk, null, fn);\n}\n\n/**\n * The `_transform()` callback function implementation.\n *\n * @api private\n */\n\n\nfunction transform (chunk, output, fn) {\n  if (!this._parserInit) init(this);\n  debug('transform(%o bytes)', chunk.length);\n\n  // XXX: old Transform stream API compat... remove at some point...\n  if ('function' != typeof output) {\n    output = this._parserOutput;\n  }\n\n  data(this, chunk, output, fn);\n}\n\n/**\n * The internal buffering/passthrough logic...\n *\n * This `_data` function get's \"trampolined\" to prevent stack overflows for tight\n * loops. This technique requires us to return a \"thunk\" function for any\n * synchronous action. Async stuff breaks the trampoline, but that's ok since it's\n * working with a new stack at that point anyway.\n *\n * @api private\n */\n\nfunction _data (stream, chunk, output, fn) {\n  if (stream._parserBytesLeft <= 0) {\n    return fn(new Error('got data but not currently parsing anything'));\n  }\n\n  if (chunk.length <= stream._parserBytesLeft) {\n    // small buffer fits within the \"_parserBytesLeft\" window\n    return function () {\n      return process(stream, chunk, output, fn);\n    };\n  } else {\n    // large buffer needs to be sliced on \"_parserBytesLeft\" and processed\n    return function () {\n      var b = chunk.slice(0, stream._parserBytesLeft);\n      return process(stream, b, output, function (err) {\n        if (err) return fn(err);\n        if (chunk.length > b.length) {\n          return function () {\n            return _data(stream, chunk.slice(b.length), output, fn);\n          };\n        }\n      });\n    };\n  }\n}\n\n/**\n * The internal `process` function gets called by the `data` function when\n * something \"interesting\" happens. This function takes care of buffering the\n * bytes when buffering, passing through the bytes when doing that, and invoking\n * the user callback when the number of bytes has been reached.\n *\n * @api private\n */\n\nfunction process (stream, chunk, output, fn) {\n  stream._parserBytesLeft -= chunk.length;\n  debug('%o bytes left for stream piece', stream._parserBytesLeft);\n\n  if (stream._parserState === BUFFERING) {\n    // buffer\n    stream._parserBuffers.push(chunk);\n    stream._parserBuffered += chunk.length;\n  } else if (stream._parserState === PASSTHROUGH) {\n    // passthrough\n    output(chunk);\n  }\n  // don't need to do anything for the SKIPPING case\n\n  if (0 === stream._parserBytesLeft) {\n    // done with stream \"piece\", invoke the callback\n    var cb = stream._parserCallback;\n    if (cb && stream._parserState === BUFFERING && stream._parserBuffers.length > 1) {\n      chunk = Buffer.concat(stream._parserBuffers, stream._parserBuffered);\n    }\n    if (stream._parserState !== BUFFERING) {\n      chunk = null;\n    }\n    stream._parserCallback = null;\n    stream._parserBuffered = 0;\n    stream._parserState = INIT;\n    stream._parserBuffers.splice(0); // empty\n\n    if (cb) {\n      var args = [];\n      if (chunk) {\n        // buffered\n        args.push(chunk);\n      } else {\n        // passthrough\n      }\n      if (output) {\n        // on a Transform stream, has \"output\" function\n        args.push(output);\n      }\n      var async = cb.length > args.length;\n      if (async) {\n        args.push(trampoline(fn));\n      }\n      // invoke cb\n      var rtn = cb.apply(stream, args);\n      if (!async || fn === rtn) return fn;\n    }\n  } else {\n    // need more bytes\n    return fn;\n  }\n}\n\nvar data = trampoline(_data);\n\n/**\n * Generic thunk-based \"trampoline\" helper function.\n *\n * @param {Function} input function\n * @return {Function} \"trampolined\" function\n * @api private\n */\n\nfunction trampoline (fn) {\n  return function () {\n    var result = fn.apply(this, arguments);\n\n    while ('function' == typeof result) {\n      result = result();\n    }\n\n    return result;\n  };\n}\n"]},"metadata":{},"sourceType":"script"}