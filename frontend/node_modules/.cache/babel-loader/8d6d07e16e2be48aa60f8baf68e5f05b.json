{"ast":null,"code":"'use strict';\n\nvar numConstants = require('../../constants/numerical');\n\nvar BADNUM = numConstants.BADNUM;\nvar LOG_CLIP = numConstants.LOG_CLIP;\nvar LOG_CLIP_PLUS = LOG_CLIP + 0.5;\nvar LOG_CLIP_MINUS = LOG_CLIP - 0.5;\n\nvar Lib = require('../../lib');\n\nvar segmentsIntersect = Lib.segmentsIntersect;\nvar constrain = Lib.constrain;\n\nvar constants = require('./constants');\n\nmodule.exports = function linePoints(d, opts) {\n  var xa = opts.xaxis;\n  var ya = opts.yaxis;\n  var xLog = xa.type === 'log';\n  var yLog = ya.type === 'log';\n  var xLen = xa._length;\n  var yLen = ya._length;\n  var connectGaps = opts.connectGaps;\n  var baseTolerance = opts.baseTolerance;\n  var shape = opts.shape;\n  var linear = shape === 'linear';\n  var fill = opts.fill && opts.fill !== 'none';\n  var segments = [];\n  var minTolerance = constants.minTolerance;\n  var len = d.length;\n  var pts = new Array(len);\n  var pti = 0;\n  var i; // pt variables are pixel coordinates [x,y] of one point\n  // these four are the outputs of clustering on a line\n\n  var clusterStartPt, clusterEndPt, clusterHighPt, clusterLowPt; // \"this\" is the next point we're considering adding to the cluster\n\n  var thisPt; // did we encounter the high point first, then a low point, or vice versa?\n\n  var clusterHighFirst; // the first two points in the cluster determine its unit vector\n  // so the second is always in the \"High\" direction\n\n  var clusterUnitVector; // the pixel delta from clusterStartPt\n\n  var thisVector; // val variables are (signed) pixel distances along the cluster vector\n\n  var clusterRefDist, clusterHighVal, clusterLowVal, thisVal; // deviation variables are (signed) pixel distances normal to the cluster vector\n\n  var clusterMinDeviation, clusterMaxDeviation, thisDeviation; // turn one calcdata point into pixel coordinates\n\n  function getPt(index) {\n    var di = d[index];\n    if (!di) return false;\n    var x = opts.linearized ? xa.l2p(di.x) : xa.c2p(di.x);\n    var y = opts.linearized ? ya.l2p(di.y) : ya.c2p(di.y); // if non-positive log values, set them VERY far off-screen\n    // so the line looks essentially straight from the previous point.\n\n    if (x === BADNUM) {\n      if (xLog) x = xa.c2p(di.x, true);\n      if (x === BADNUM) return false; // If BOTH were bad log values, make the line follow a constant\n      // exponent rather than a constant slope\n\n      if (yLog && y === BADNUM) {\n        x *= Math.abs(xa._m * yLen * (xa._m > 0 ? LOG_CLIP_PLUS : LOG_CLIP_MINUS) / (ya._m * xLen * (ya._m > 0 ? LOG_CLIP_PLUS : LOG_CLIP_MINUS)));\n      }\n\n      x *= 1000;\n    }\n\n    if (y === BADNUM) {\n      if (yLog) y = ya.c2p(di.y, true);\n      if (y === BADNUM) return false;\n      y *= 1000;\n    }\n\n    return [x, y];\n  }\n\n  function crossesViewport(xFrac0, yFrac0, xFrac1, yFrac1) {\n    var dx = xFrac1 - xFrac0;\n    var dy = yFrac1 - yFrac0;\n    var dx0 = 0.5 - xFrac0;\n    var dy0 = 0.5 - yFrac0;\n    var norm2 = dx * dx + dy * dy;\n    var dot = dx * dx0 + dy * dy0;\n\n    if (dot > 0 && dot < norm2) {\n      var cross = dx0 * dy - dy0 * dx;\n      if (cross * cross < norm2) return true;\n    }\n  }\n\n  var latestXFrac, latestYFrac; // if we're off-screen, increase tolerance over baseTolerance\n\n  function getTolerance(pt, nextPt) {\n    var xFrac = pt[0] / xLen;\n    var yFrac = pt[1] / yLen;\n    var offScreenFraction = Math.max(0, -xFrac, xFrac - 1, -yFrac, yFrac - 1);\n\n    if (offScreenFraction && latestXFrac !== undefined && crossesViewport(xFrac, yFrac, latestXFrac, latestYFrac)) {\n      offScreenFraction = 0;\n    }\n\n    if (offScreenFraction && nextPt && crossesViewport(xFrac, yFrac, nextPt[0] / xLen, nextPt[1] / yLen)) {\n      offScreenFraction = 0;\n    }\n\n    return (1 + constants.toleranceGrowth * offScreenFraction) * baseTolerance;\n  }\n\n  function ptDist(pt1, pt2) {\n    var dx = pt1[0] - pt2[0];\n    var dy = pt1[1] - pt2[1];\n    return Math.sqrt(dx * dx + dy * dy);\n  } // last bit of filtering: clip paths that are VERY far off-screen\n  // so we don't get near the browser's hard limit (+/- 2^29 px in Chrome and FF)\n\n\n  var maxScreensAway = constants.maxScreensAway; // find the intersections between the segment from pt1 to pt2\n  // and the large rectangle maxScreensAway around the viewport\n  // if one of pt1 and pt2 is inside and the other outside, there\n  // will be only one intersection.\n  // if both are outside there will be 0 or 2 intersections\n  // (or 1 if it's right at a corner - we'll treat that like 0)\n  // returns an array of intersection pts\n\n  var xEdge0 = -xLen * maxScreensAway;\n  var xEdge1 = xLen * (1 + maxScreensAway);\n  var yEdge0 = -yLen * maxScreensAway;\n  var yEdge1 = yLen * (1 + maxScreensAway);\n  var edges = [[xEdge0, yEdge0, xEdge1, yEdge0], [xEdge1, yEdge0, xEdge1, yEdge1], [xEdge1, yEdge1, xEdge0, yEdge1], [xEdge0, yEdge1, xEdge0, yEdge0]];\n  var xEdge, yEdge, lastXEdge, lastYEdge, lastFarPt, edgePt; // for linear line shape, edge intersections should be linearly interpolated\n  // spline uses this too, which isn't precisely correct but is actually pretty\n  // good, because Catmull-Rom weights far-away points less in creating the curvature\n\n  function getLinearEdgeIntersections(pt1, pt2) {\n    var out = [];\n    var ptCount = 0;\n\n    for (var i = 0; i < 4; i++) {\n      var edge = edges[i];\n      var ptInt = segmentsIntersect(pt1[0], pt1[1], pt2[0], pt2[1], edge[0], edge[1], edge[2], edge[3]);\n\n      if (ptInt && (!ptCount || Math.abs(ptInt.x - out[0][0]) > 1 || Math.abs(ptInt.y - out[0][1]) > 1)) {\n        ptInt = [ptInt.x, ptInt.y]; // if we have 2 intersections, make sure the closest one to pt1 comes first\n\n        if (ptCount && ptDist(ptInt, pt1) < ptDist(out[0], pt1)) out.unshift(ptInt);else out.push(ptInt);\n        ptCount++;\n      }\n    }\n\n    return out;\n  }\n\n  function onlyConstrainedPoint(pt) {\n    if (pt[0] < xEdge0 || pt[0] > xEdge1 || pt[1] < yEdge0 || pt[1] > yEdge1) {\n      return [constrain(pt[0], xEdge0, xEdge1), constrain(pt[1], yEdge0, yEdge1)];\n    }\n  }\n\n  function sameEdge(pt1, pt2) {\n    if (pt1[0] === pt2[0] && (pt1[0] === xEdge0 || pt1[0] === xEdge1)) return true;\n    if (pt1[1] === pt2[1] && (pt1[1] === yEdge0 || pt1[1] === yEdge1)) return true;\n  } // for line shapes hv and vh, movement in the two dimensions is decoupled,\n  // so all we need to do is constrain each dimension independently\n\n\n  function getHVEdgeIntersections(pt1, pt2) {\n    var out = [];\n    var ptInt1 = onlyConstrainedPoint(pt1);\n    var ptInt2 = onlyConstrainedPoint(pt2);\n    if (ptInt1 && ptInt2 && sameEdge(ptInt1, ptInt2)) return out;\n    if (ptInt1) out.push(ptInt1);\n    if (ptInt2) out.push(ptInt2);\n    return out;\n  } // hvh and vhv we sometimes have to move one of the intersection points\n  // out BEYOND the clipping rect, by a maximum of a factor of 2, so that\n  // the midpoint line is drawn in the right place\n\n\n  function getABAEdgeIntersections(dim, limit0, limit1) {\n    return function (pt1, pt2) {\n      var ptInt1 = onlyConstrainedPoint(pt1);\n      var ptInt2 = onlyConstrainedPoint(pt2);\n      var out = [];\n      if (ptInt1 && ptInt2 && sameEdge(ptInt1, ptInt2)) return out;\n      if (ptInt1) out.push(ptInt1);\n      if (ptInt2) out.push(ptInt2);\n      var midShift = 2 * Lib.constrain((pt1[dim] + pt2[dim]) / 2, limit0, limit1) - ((ptInt1 || pt1)[dim] + (ptInt2 || pt2)[dim]);\n\n      if (midShift) {\n        var ptToAlter;\n\n        if (ptInt1 && ptInt2) {\n          ptToAlter = midShift > 0 === ptInt1[dim] > ptInt2[dim] ? ptInt1 : ptInt2;\n        } else ptToAlter = ptInt1 || ptInt2;\n\n        ptToAlter[dim] += midShift;\n      }\n\n      return out;\n    };\n  }\n\n  var getEdgeIntersections;\n\n  if (shape === 'linear' || shape === 'spline') {\n    getEdgeIntersections = getLinearEdgeIntersections;\n  } else if (shape === 'hv' || shape === 'vh') {\n    getEdgeIntersections = getHVEdgeIntersections;\n  } else if (shape === 'hvh') getEdgeIntersections = getABAEdgeIntersections(0, xEdge0, xEdge1);else if (shape === 'vhv') getEdgeIntersections = getABAEdgeIntersections(1, yEdge0, yEdge1); // a segment pt1->pt2 entirely outside the nearby region:\n  // find the corner it gets closest to touching\n\n\n  function getClosestCorner(pt1, pt2) {\n    var dx = pt2[0] - pt1[0];\n    var m = (pt2[1] - pt1[1]) / dx;\n    var b = (pt1[1] * pt2[0] - pt2[1] * pt1[0]) / dx;\n    if (b > 0) return [m > 0 ? xEdge0 : xEdge1, yEdge1];else return [m > 0 ? xEdge1 : xEdge0, yEdge0];\n  }\n\n  function updateEdge(pt) {\n    var x = pt[0];\n    var y = pt[1];\n    var xSame = x === pts[pti - 1][0];\n    var ySame = y === pts[pti - 1][1]; // duplicate point?\n\n    if (xSame && ySame) return;\n\n    if (pti > 1) {\n      // backtracking along an edge?\n      var xSame2 = x === pts[pti - 2][0];\n      var ySame2 = y === pts[pti - 2][1];\n\n      if (xSame && (x === xEdge0 || x === xEdge1) && xSame2) {\n        if (ySame2) pti--; // backtracking exactly - drop prev pt and don't add\n        else pts[pti - 1] = pt; // not exact: replace the prev pt\n      } else if (ySame && (y === yEdge0 || y === yEdge1) && ySame2) {\n        if (xSame2) pti--;else pts[pti - 1] = pt;\n      } else pts[pti++] = pt;\n    } else pts[pti++] = pt;\n  }\n\n  function updateEdgesForReentry(pt) {\n    // if we're outside the nearby region and going back in,\n    // we may need to loop around a corner point\n    if (pts[pti - 1][0] !== pt[0] && pts[pti - 1][1] !== pt[1]) {\n      updateEdge([lastXEdge, lastYEdge]);\n    }\n\n    updateEdge(pt);\n    lastFarPt = null;\n    lastXEdge = lastYEdge = 0;\n  }\n\n  function addPt(pt) {\n    latestXFrac = pt[0] / xLen;\n    latestYFrac = pt[1] / yLen; // Are we more than maxScreensAway off-screen any direction?\n    // if so, clip to this box, but in such a way that on-screen\n    // drawing is unchanged\n\n    xEdge = pt[0] < xEdge0 ? xEdge0 : pt[0] > xEdge1 ? xEdge1 : 0;\n    yEdge = pt[1] < yEdge0 ? yEdge0 : pt[1] > yEdge1 ? yEdge1 : 0;\n\n    if (xEdge || yEdge) {\n      if (!pti) {\n        // to get fills right - if first point is far, push it toward the\n        // screen in whichever direction(s) are far\n        pts[pti++] = [xEdge || pt[0], yEdge || pt[1]];\n      } else if (lastFarPt) {\n        // both this point and the last are outside the nearby region\n        // check if we're crossing the nearby region\n        var intersections = getEdgeIntersections(lastFarPt, pt);\n\n        if (intersections.length > 1) {\n          updateEdgesForReentry(intersections[0]);\n          pts[pti++] = intersections[1];\n        }\n      } else {\n        // we're leaving the nearby region - add the point where we left it\n        edgePt = getEdgeIntersections(pts[pti - 1], pt)[0];\n        pts[pti++] = edgePt;\n      }\n\n      var lastPt = pts[pti - 1];\n\n      if (xEdge && yEdge && (lastPt[0] !== xEdge || lastPt[1] !== yEdge)) {\n        // we've gone out beyond a new corner: add the corner too\n        // so that the next point will take the right winding\n        if (lastFarPt) {\n          if (lastXEdge !== xEdge && lastYEdge !== yEdge) {\n            if (lastXEdge && lastYEdge) {\n              // we've gone around to an opposite corner - we\n              // need to add the correct extra corner\n              // in order to get the right winding\n              updateEdge(getClosestCorner(lastFarPt, pt));\n            } else {\n              // we're coming from a far edge - the extra corner\n              // we need is determined uniquely by the sectors\n              updateEdge([lastXEdge || xEdge, lastYEdge || yEdge]);\n            }\n          } else if (lastXEdge && lastYEdge) {\n            updateEdge([lastXEdge, lastYEdge]);\n          }\n        }\n\n        updateEdge([xEdge, yEdge]);\n      } else if (lastXEdge - xEdge && lastYEdge - yEdge) {\n        // we're coming from an edge or far corner to an edge - again the\n        // extra corner we need is uniquely determined by the sectors\n        updateEdge([xEdge || lastXEdge, yEdge || lastYEdge]);\n      }\n\n      lastFarPt = pt;\n      lastXEdge = xEdge;\n      lastYEdge = yEdge;\n    } else {\n      if (lastFarPt) {\n        // this point is in range but the previous wasn't: add its entry pt first\n        updateEdgesForReentry(getEdgeIntersections(lastFarPt, pt)[0]);\n      }\n\n      pts[pti++] = pt;\n    }\n  } // loop over ALL points in this trace\n\n\n  for (i = 0; i < len; i++) {\n    clusterStartPt = getPt(i);\n    if (!clusterStartPt) continue;\n    pti = 0;\n    lastFarPt = null;\n    addPt(clusterStartPt); // loop over one segment of the trace\n\n    for (i++; i < len; i++) {\n      clusterHighPt = getPt(i);\n\n      if (!clusterHighPt) {\n        if (connectGaps) continue;else break;\n      } // can't decimate if nonlinear line shape\n      // TODO: we *could* decimate [hv]{2,3} shapes if we restricted clusters to horz or vert again\n      // but spline would be verrry awkward to decimate\n\n\n      if (!linear || !opts.simplify) {\n        addPt(clusterHighPt);\n        continue;\n      }\n\n      var nextPt = getPt(i + 1);\n      clusterRefDist = ptDist(clusterHighPt, clusterStartPt); // #3147 - always include the very first and last points for fills\n\n      if (!(fill && (pti === 0 || pti === len - 1)) && clusterRefDist < getTolerance(clusterHighPt, nextPt) * minTolerance) continue;\n      clusterUnitVector = [(clusterHighPt[0] - clusterStartPt[0]) / clusterRefDist, (clusterHighPt[1] - clusterStartPt[1]) / clusterRefDist];\n      clusterLowPt = clusterStartPt;\n      clusterHighVal = clusterRefDist;\n      clusterLowVal = clusterMinDeviation = clusterMaxDeviation = 0;\n      clusterHighFirst = false;\n      clusterEndPt = clusterHighPt; // loop over one cluster of points that collapse onto one line\n\n      for (i++; i < d.length; i++) {\n        thisPt = nextPt;\n        nextPt = getPt(i + 1);\n\n        if (!thisPt) {\n          if (connectGaps) continue;else break;\n        }\n\n        thisVector = [thisPt[0] - clusterStartPt[0], thisPt[1] - clusterStartPt[1]]; // cross product (or dot with normal to the cluster vector)\n\n        thisDeviation = thisVector[0] * clusterUnitVector[1] - thisVector[1] * clusterUnitVector[0];\n        clusterMinDeviation = Math.min(clusterMinDeviation, thisDeviation);\n        clusterMaxDeviation = Math.max(clusterMaxDeviation, thisDeviation);\n        if (clusterMaxDeviation - clusterMinDeviation > getTolerance(thisPt, nextPt)) break;\n        clusterEndPt = thisPt;\n        thisVal = thisVector[0] * clusterUnitVector[0] + thisVector[1] * clusterUnitVector[1];\n\n        if (thisVal > clusterHighVal) {\n          clusterHighVal = thisVal;\n          clusterHighPt = thisPt;\n          clusterHighFirst = false;\n        } else if (thisVal < clusterLowVal) {\n          clusterLowVal = thisVal;\n          clusterLowPt = thisPt;\n          clusterHighFirst = true;\n        }\n      } // insert this cluster into pts\n      // we've already inserted the start pt, now check if we have high and low pts\n\n\n      if (clusterHighFirst) {\n        addPt(clusterHighPt);\n        if (clusterEndPt !== clusterLowPt) addPt(clusterLowPt);\n      } else {\n        if (clusterLowPt !== clusterStartPt) addPt(clusterLowPt);\n        if (clusterEndPt !== clusterHighPt) addPt(clusterHighPt);\n      } // and finally insert the end pt\n\n\n      addPt(clusterEndPt); // have we reached the end of this segment?\n\n      if (i >= d.length || !thisPt) break; // otherwise we have an out-of-cluster point to insert as next clusterStartPt\n\n      addPt(thisPt);\n      clusterStartPt = thisPt;\n    } // to get fills right - repeat what we did at the start\n\n\n    if (lastFarPt) updateEdge([lastXEdge || lastFarPt[0], lastYEdge || lastFarPt[1]]);\n    segments.push(pts.slice(0, pti));\n  }\n\n  return segments;\n};","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/plotly.js/src/traces/scatter/line_points.js"],"names":["numConstants","require","BADNUM","LOG_CLIP","LOG_CLIP_PLUS","LOG_CLIP_MINUS","Lib","segmentsIntersect","constrain","constants","module","exports","linePoints","d","opts","xa","xaxis","ya","yaxis","xLog","type","yLog","xLen","_length","yLen","connectGaps","baseTolerance","shape","linear","fill","segments","minTolerance","len","length","pts","Array","pti","i","clusterStartPt","clusterEndPt","clusterHighPt","clusterLowPt","thisPt","clusterHighFirst","clusterUnitVector","thisVector","clusterRefDist","clusterHighVal","clusterLowVal","thisVal","clusterMinDeviation","clusterMaxDeviation","thisDeviation","getPt","index","di","x","linearized","l2p","c2p","y","Math","abs","_m","crossesViewport","xFrac0","yFrac0","xFrac1","yFrac1","dx","dy","dx0","dy0","norm2","dot","cross","latestXFrac","latestYFrac","getTolerance","pt","nextPt","xFrac","yFrac","offScreenFraction","max","undefined","toleranceGrowth","ptDist","pt1","pt2","sqrt","maxScreensAway","xEdge0","xEdge1","yEdge0","yEdge1","edges","xEdge","yEdge","lastXEdge","lastYEdge","lastFarPt","edgePt","getLinearEdgeIntersections","out","ptCount","edge","ptInt","unshift","push","onlyConstrainedPoint","sameEdge","getHVEdgeIntersections","ptInt1","ptInt2","getABAEdgeIntersections","dim","limit0","limit1","midShift","ptToAlter","getEdgeIntersections","getClosestCorner","m","b","updateEdge","xSame","ySame","xSame2","ySame2","updateEdgesForReentry","addPt","intersections","lastPt","simplify","min","slice"],"mappings":"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","sourcesContent":["'use strict';\n\nvar numConstants = require('../../constants/numerical');\nvar BADNUM = numConstants.BADNUM;\nvar LOG_CLIP = numConstants.LOG_CLIP;\nvar LOG_CLIP_PLUS = LOG_CLIP + 0.5;\nvar LOG_CLIP_MINUS = LOG_CLIP - 0.5;\nvar Lib = require('../../lib');\nvar segmentsIntersect = Lib.segmentsIntersect;\nvar constrain = Lib.constrain;\nvar constants = require('./constants');\n\n\nmodule.exports = function linePoints(d, opts) {\n    var xa = opts.xaxis;\n    var ya = opts.yaxis;\n    var xLog = xa.type === 'log';\n    var yLog = ya.type === 'log';\n    var xLen = xa._length;\n    var yLen = ya._length;\n    var connectGaps = opts.connectGaps;\n    var baseTolerance = opts.baseTolerance;\n    var shape = opts.shape;\n    var linear = shape === 'linear';\n    var fill = opts.fill && opts.fill !== 'none';\n    var segments = [];\n    var minTolerance = constants.minTolerance;\n    var len = d.length;\n    var pts = new Array(len);\n    var pti = 0;\n\n    var i;\n\n    // pt variables are pixel coordinates [x,y] of one point\n    // these four are the outputs of clustering on a line\n    var clusterStartPt, clusterEndPt, clusterHighPt, clusterLowPt;\n\n    // \"this\" is the next point we're considering adding to the cluster\n    var thisPt;\n\n    // did we encounter the high point first, then a low point, or vice versa?\n    var clusterHighFirst;\n\n    // the first two points in the cluster determine its unit vector\n    // so the second is always in the \"High\" direction\n    var clusterUnitVector;\n\n    // the pixel delta from clusterStartPt\n    var thisVector;\n\n    // val variables are (signed) pixel distances along the cluster vector\n    var clusterRefDist, clusterHighVal, clusterLowVal, thisVal;\n\n    // deviation variables are (signed) pixel distances normal to the cluster vector\n    var clusterMinDeviation, clusterMaxDeviation, thisDeviation;\n\n    // turn one calcdata point into pixel coordinates\n    function getPt(index) {\n        var di = d[index];\n        if(!di) return false;\n        var x = opts.linearized ? xa.l2p(di.x) : xa.c2p(di.x);\n        var y = opts.linearized ? ya.l2p(di.y) : ya.c2p(di.y);\n\n        // if non-positive log values, set them VERY far off-screen\n        // so the line looks essentially straight from the previous point.\n        if(x === BADNUM) {\n            if(xLog) x = xa.c2p(di.x, true);\n            if(x === BADNUM) return false;\n            // If BOTH were bad log values, make the line follow a constant\n            // exponent rather than a constant slope\n            if(yLog && y === BADNUM) {\n                x *= Math.abs(xa._m * yLen * (xa._m > 0 ? LOG_CLIP_PLUS : LOG_CLIP_MINUS) /\n                    (ya._m * xLen * (ya._m > 0 ? LOG_CLIP_PLUS : LOG_CLIP_MINUS)));\n            }\n            x *= 1000;\n        }\n        if(y === BADNUM) {\n            if(yLog) y = ya.c2p(di.y, true);\n            if(y === BADNUM) return false;\n            y *= 1000;\n        }\n        return [x, y];\n    }\n\n    function crossesViewport(xFrac0, yFrac0, xFrac1, yFrac1) {\n        var dx = xFrac1 - xFrac0;\n        var dy = yFrac1 - yFrac0;\n        var dx0 = 0.5 - xFrac0;\n        var dy0 = 0.5 - yFrac0;\n        var norm2 = dx * dx + dy * dy;\n        var dot = dx * dx0 + dy * dy0;\n        if(dot > 0 && dot < norm2) {\n            var cross = dx0 * dy - dy0 * dx;\n            if(cross * cross < norm2) return true;\n        }\n    }\n\n    var latestXFrac, latestYFrac;\n    // if we're off-screen, increase tolerance over baseTolerance\n    function getTolerance(pt, nextPt) {\n        var xFrac = pt[0] / xLen;\n        var yFrac = pt[1] / yLen;\n        var offScreenFraction = Math.max(0, -xFrac, xFrac - 1, -yFrac, yFrac - 1);\n        if(offScreenFraction && (latestXFrac !== undefined) &&\n            crossesViewport(xFrac, yFrac, latestXFrac, latestYFrac)\n        ) {\n            offScreenFraction = 0;\n        }\n        if(offScreenFraction && nextPt &&\n            crossesViewport(xFrac, yFrac, nextPt[0] / xLen, nextPt[1] / yLen)\n        ) {\n            offScreenFraction = 0;\n        }\n\n        return (1 + constants.toleranceGrowth * offScreenFraction) * baseTolerance;\n    }\n\n    function ptDist(pt1, pt2) {\n        var dx = pt1[0] - pt2[0];\n        var dy = pt1[1] - pt2[1];\n        return Math.sqrt(dx * dx + dy * dy);\n    }\n\n    // last bit of filtering: clip paths that are VERY far off-screen\n    // so we don't get near the browser's hard limit (+/- 2^29 px in Chrome and FF)\n\n    var maxScreensAway = constants.maxScreensAway;\n\n    // find the intersections between the segment from pt1 to pt2\n    // and the large rectangle maxScreensAway around the viewport\n    // if one of pt1 and pt2 is inside and the other outside, there\n    // will be only one intersection.\n    // if both are outside there will be 0 or 2 intersections\n    // (or 1 if it's right at a corner - we'll treat that like 0)\n    // returns an array of intersection pts\n    var xEdge0 = -xLen * maxScreensAway;\n    var xEdge1 = xLen * (1 + maxScreensAway);\n    var yEdge0 = -yLen * maxScreensAway;\n    var yEdge1 = yLen * (1 + maxScreensAway);\n    var edges = [\n        [xEdge0, yEdge0, xEdge1, yEdge0],\n        [xEdge1, yEdge0, xEdge1, yEdge1],\n        [xEdge1, yEdge1, xEdge0, yEdge1],\n        [xEdge0, yEdge1, xEdge0, yEdge0]\n    ];\n    var xEdge, yEdge, lastXEdge, lastYEdge, lastFarPt, edgePt;\n\n    // for linear line shape, edge intersections should be linearly interpolated\n    // spline uses this too, which isn't precisely correct but is actually pretty\n    // good, because Catmull-Rom weights far-away points less in creating the curvature\n    function getLinearEdgeIntersections(pt1, pt2) {\n        var out = [];\n        var ptCount = 0;\n        for(var i = 0; i < 4; i++) {\n            var edge = edges[i];\n            var ptInt = segmentsIntersect(\n                pt1[0], pt1[1], pt2[0], pt2[1],\n                edge[0], edge[1], edge[2], edge[3]\n            );\n            if(ptInt && (!ptCount ||\n                Math.abs(ptInt.x - out[0][0]) > 1 ||\n                Math.abs(ptInt.y - out[0][1]) > 1\n            )) {\n                ptInt = [ptInt.x, ptInt.y];\n                // if we have 2 intersections, make sure the closest one to pt1 comes first\n                if(ptCount && ptDist(ptInt, pt1) < ptDist(out[0], pt1)) out.unshift(ptInt);\n                else out.push(ptInt);\n                ptCount++;\n            }\n        }\n        return out;\n    }\n\n    function onlyConstrainedPoint(pt) {\n        if(pt[0] < xEdge0 || pt[0] > xEdge1 || pt[1] < yEdge0 || pt[1] > yEdge1) {\n            return [constrain(pt[0], xEdge0, xEdge1), constrain(pt[1], yEdge0, yEdge1)];\n        }\n    }\n\n    function sameEdge(pt1, pt2) {\n        if(pt1[0] === pt2[0] && (pt1[0] === xEdge0 || pt1[0] === xEdge1)) return true;\n        if(pt1[1] === pt2[1] && (pt1[1] === yEdge0 || pt1[1] === yEdge1)) return true;\n    }\n\n    // for line shapes hv and vh, movement in the two dimensions is decoupled,\n    // so all we need to do is constrain each dimension independently\n    function getHVEdgeIntersections(pt1, pt2) {\n        var out = [];\n        var ptInt1 = onlyConstrainedPoint(pt1);\n        var ptInt2 = onlyConstrainedPoint(pt2);\n        if(ptInt1 && ptInt2 && sameEdge(ptInt1, ptInt2)) return out;\n\n        if(ptInt1) out.push(ptInt1);\n        if(ptInt2) out.push(ptInt2);\n        return out;\n    }\n\n    // hvh and vhv we sometimes have to move one of the intersection points\n    // out BEYOND the clipping rect, by a maximum of a factor of 2, so that\n    // the midpoint line is drawn in the right place\n    function getABAEdgeIntersections(dim, limit0, limit1) {\n        return function(pt1, pt2) {\n            var ptInt1 = onlyConstrainedPoint(pt1);\n            var ptInt2 = onlyConstrainedPoint(pt2);\n\n            var out = [];\n            if(ptInt1 && ptInt2 && sameEdge(ptInt1, ptInt2)) return out;\n\n            if(ptInt1) out.push(ptInt1);\n            if(ptInt2) out.push(ptInt2);\n\n            var midShift = 2 * Lib.constrain((pt1[dim] + pt2[dim]) / 2, limit0, limit1) -\n                ((ptInt1 || pt1)[dim] + (ptInt2 || pt2)[dim]);\n            if(midShift) {\n                var ptToAlter;\n                if(ptInt1 && ptInt2) {\n                    ptToAlter = (midShift > 0 === ptInt1[dim] > ptInt2[dim]) ? ptInt1 : ptInt2;\n                } else ptToAlter = ptInt1 || ptInt2;\n\n                ptToAlter[dim] += midShift;\n            }\n\n            return out;\n        };\n    }\n\n    var getEdgeIntersections;\n    if(shape === 'linear' || shape === 'spline') {\n        getEdgeIntersections = getLinearEdgeIntersections;\n    } else if(shape === 'hv' || shape === 'vh') {\n        getEdgeIntersections = getHVEdgeIntersections;\n    } else if(shape === 'hvh') getEdgeIntersections = getABAEdgeIntersections(0, xEdge0, xEdge1);\n    else if(shape === 'vhv') getEdgeIntersections = getABAEdgeIntersections(1, yEdge0, yEdge1);\n\n    // a segment pt1->pt2 entirely outside the nearby region:\n    // find the corner it gets closest to touching\n    function getClosestCorner(pt1, pt2) {\n        var dx = pt2[0] - pt1[0];\n        var m = (pt2[1] - pt1[1]) / dx;\n        var b = (pt1[1] * pt2[0] - pt2[1] * pt1[0]) / dx;\n\n        if(b > 0) return [m > 0 ? xEdge0 : xEdge1, yEdge1];\n        else return [m > 0 ? xEdge1 : xEdge0, yEdge0];\n    }\n\n    function updateEdge(pt) {\n        var x = pt[0];\n        var y = pt[1];\n        var xSame = x === pts[pti - 1][0];\n        var ySame = y === pts[pti - 1][1];\n        // duplicate point?\n        if(xSame && ySame) return;\n        if(pti > 1) {\n            // backtracking along an edge?\n            var xSame2 = x === pts[pti - 2][0];\n            var ySame2 = y === pts[pti - 2][1];\n            if(xSame && (x === xEdge0 || x === xEdge1) && xSame2) {\n                if(ySame2) pti--; // backtracking exactly - drop prev pt and don't add\n                else pts[pti - 1] = pt; // not exact: replace the prev pt\n            } else if(ySame && (y === yEdge0 || y === yEdge1) && ySame2) {\n                if(xSame2) pti--;\n                else pts[pti - 1] = pt;\n            } else pts[pti++] = pt;\n        } else pts[pti++] = pt;\n    }\n\n    function updateEdgesForReentry(pt) {\n        // if we're outside the nearby region and going back in,\n        // we may need to loop around a corner point\n        if(pts[pti - 1][0] !== pt[0] && pts[pti - 1][1] !== pt[1]) {\n            updateEdge([lastXEdge, lastYEdge]);\n        }\n        updateEdge(pt);\n        lastFarPt = null;\n        lastXEdge = lastYEdge = 0;\n    }\n\n    function addPt(pt) {\n        latestXFrac = pt[0] / xLen;\n        latestYFrac = pt[1] / yLen;\n        // Are we more than maxScreensAway off-screen any direction?\n        // if so, clip to this box, but in such a way that on-screen\n        // drawing is unchanged\n        xEdge = (pt[0] < xEdge0) ? xEdge0 : (pt[0] > xEdge1) ? xEdge1 : 0;\n        yEdge = (pt[1] < yEdge0) ? yEdge0 : (pt[1] > yEdge1) ? yEdge1 : 0;\n        if(xEdge || yEdge) {\n            if(!pti) {\n                // to get fills right - if first point is far, push it toward the\n                // screen in whichever direction(s) are far\n\n                pts[pti++] = [xEdge || pt[0], yEdge || pt[1]];\n            } else if(lastFarPt) {\n                // both this point and the last are outside the nearby region\n                // check if we're crossing the nearby region\n                var intersections = getEdgeIntersections(lastFarPt, pt);\n                if(intersections.length > 1) {\n                    updateEdgesForReentry(intersections[0]);\n                    pts[pti++] = intersections[1];\n                }\n            } else {\n                // we're leaving the nearby region - add the point where we left it\n\n                edgePt = getEdgeIntersections(pts[pti - 1], pt)[0];\n                pts[pti++] = edgePt;\n            }\n\n            var lastPt = pts[pti - 1];\n            if(xEdge && yEdge && (lastPt[0] !== xEdge || lastPt[1] !== yEdge)) {\n                // we've gone out beyond a new corner: add the corner too\n                // so that the next point will take the right winding\n                if(lastFarPt) {\n                    if(lastXEdge !== xEdge && lastYEdge !== yEdge) {\n                        if(lastXEdge && lastYEdge) {\n                            // we've gone around to an opposite corner - we\n                            // need to add the correct extra corner\n                            // in order to get the right winding\n                            updateEdge(getClosestCorner(lastFarPt, pt));\n                        } else {\n                            // we're coming from a far edge - the extra corner\n                            // we need is determined uniquely by the sectors\n                            updateEdge([lastXEdge || xEdge, lastYEdge || yEdge]);\n                        }\n                    } else if(lastXEdge && lastYEdge) {\n                        updateEdge([lastXEdge, lastYEdge]);\n                    }\n                }\n                updateEdge([xEdge, yEdge]);\n            } else if((lastXEdge - xEdge) && (lastYEdge - yEdge)) {\n                // we're coming from an edge or far corner to an edge - again the\n                // extra corner we need is uniquely determined by the sectors\n                updateEdge([xEdge || lastXEdge, yEdge || lastYEdge]);\n            }\n            lastFarPt = pt;\n            lastXEdge = xEdge;\n            lastYEdge = yEdge;\n        } else {\n            if(lastFarPt) {\n                // this point is in range but the previous wasn't: add its entry pt first\n                updateEdgesForReentry(getEdgeIntersections(lastFarPt, pt)[0]);\n            }\n\n            pts[pti++] = pt;\n        }\n    }\n\n    // loop over ALL points in this trace\n    for(i = 0; i < len; i++) {\n        clusterStartPt = getPt(i);\n        if(!clusterStartPt) continue;\n\n        pti = 0;\n        lastFarPt = null;\n        addPt(clusterStartPt);\n\n        // loop over one segment of the trace\n        for(i++; i < len; i++) {\n            clusterHighPt = getPt(i);\n            if(!clusterHighPt) {\n                if(connectGaps) continue;\n                else break;\n            }\n\n            // can't decimate if nonlinear line shape\n            // TODO: we *could* decimate [hv]{2,3} shapes if we restricted clusters to horz or vert again\n            // but spline would be verrry awkward to decimate\n            if(!linear || !opts.simplify) {\n                addPt(clusterHighPt);\n                continue;\n            }\n\n            var nextPt = getPt(i + 1);\n\n            clusterRefDist = ptDist(clusterHighPt, clusterStartPt);\n\n            // #3147 - always include the very first and last points for fills\n            if(!(fill && (pti === 0 || pti === len - 1)) &&\n                clusterRefDist < getTolerance(clusterHighPt, nextPt) * minTolerance) continue;\n\n            clusterUnitVector = [\n                (clusterHighPt[0] - clusterStartPt[0]) / clusterRefDist,\n                (clusterHighPt[1] - clusterStartPt[1]) / clusterRefDist\n            ];\n\n            clusterLowPt = clusterStartPt;\n            clusterHighVal = clusterRefDist;\n            clusterLowVal = clusterMinDeviation = clusterMaxDeviation = 0;\n            clusterHighFirst = false;\n            clusterEndPt = clusterHighPt;\n\n            // loop over one cluster of points that collapse onto one line\n            for(i++; i < d.length; i++) {\n                thisPt = nextPt;\n                nextPt = getPt(i + 1);\n                if(!thisPt) {\n                    if(connectGaps) continue;\n                    else break;\n                }\n                thisVector = [\n                    thisPt[0] - clusterStartPt[0],\n                    thisPt[1] - clusterStartPt[1]\n                ];\n                // cross product (or dot with normal to the cluster vector)\n                thisDeviation = thisVector[0] * clusterUnitVector[1] - thisVector[1] * clusterUnitVector[0];\n                clusterMinDeviation = Math.min(clusterMinDeviation, thisDeviation);\n                clusterMaxDeviation = Math.max(clusterMaxDeviation, thisDeviation);\n\n                if(clusterMaxDeviation - clusterMinDeviation > getTolerance(thisPt, nextPt)) break;\n\n                clusterEndPt = thisPt;\n                thisVal = thisVector[0] * clusterUnitVector[0] + thisVector[1] * clusterUnitVector[1];\n\n                if(thisVal > clusterHighVal) {\n                    clusterHighVal = thisVal;\n                    clusterHighPt = thisPt;\n                    clusterHighFirst = false;\n                } else if(thisVal < clusterLowVal) {\n                    clusterLowVal = thisVal;\n                    clusterLowPt = thisPt;\n                    clusterHighFirst = true;\n                }\n            }\n\n            // insert this cluster into pts\n            // we've already inserted the start pt, now check if we have high and low pts\n            if(clusterHighFirst) {\n                addPt(clusterHighPt);\n                if(clusterEndPt !== clusterLowPt) addPt(clusterLowPt);\n            } else {\n                if(clusterLowPt !== clusterStartPt) addPt(clusterLowPt);\n                if(clusterEndPt !== clusterHighPt) addPt(clusterHighPt);\n            }\n            // and finally insert the end pt\n            addPt(clusterEndPt);\n\n            // have we reached the end of this segment?\n            if(i >= d.length || !thisPt) break;\n\n            // otherwise we have an out-of-cluster point to insert as next clusterStartPt\n            addPt(thisPt);\n            clusterStartPt = thisPt;\n        }\n\n        // to get fills right - repeat what we did at the start\n        if(lastFarPt) updateEdge([lastXEdge || lastFarPt[0], lastYEdge || lastFarPt[1]]);\n\n        segments.push(pts.slice(0, pti));\n    }\n\n    return segments;\n};\n"]},"metadata":{},"sourceType":"script"}