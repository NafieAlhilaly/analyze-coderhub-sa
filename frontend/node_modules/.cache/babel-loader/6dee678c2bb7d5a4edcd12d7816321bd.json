{"ast":null,"code":"'use strict';\n\nvar d3 = require('@plotly/d3');\n\nvar Registry = require('../../registry');\n\nvar appendArrayPointValue = require('../../components/fx/helpers').appendArrayPointValue;\n\nvar Fx = require('../../components/fx');\n\nvar Lib = require('../../lib');\n\nvar Events = require('../../lib/events');\n\nvar helpers = require('./helpers');\n\nvar pieHelpers = require('../pie/helpers');\n\nvar formatValue = pieHelpers.formatPieValue;\n\nmodule.exports = function attachFxHandlers(sliceTop, entry, gd, cd, opts) {\n  var cd0 = cd[0];\n  var trace = cd0.trace;\n  var hierarchy = cd0.hierarchy;\n  var isSunburst = trace.type === 'sunburst';\n  var isTreemapOrIcicle = trace.type === 'treemap' || trace.type === 'icicle'; // hover state vars\n  // have we drawn a hover label, so it should be cleared later\n\n  if (!('_hasHoverLabel' in trace)) trace._hasHoverLabel = false; // have we emitted a hover event, so later an unhover event should be emitted\n  // note that click events do not depend on this - you can still get them\n  // with hovermode: false or if you were earlier dragging, then clicked\n  // in the same slice that you moused up in\n\n  if (!('_hasHoverEvent' in trace)) trace._hasHoverEvent = false;\n\n  var onMouseOver = function onMouseOver(pt) {\n    var fullLayoutNow = gd._fullLayout;\n    if (gd._dragging || fullLayoutNow.hovermode === false) return;\n    var traceNow = gd._fullData[trace.index];\n    var cdi = pt.data.data;\n    var ptNumber = cdi.i;\n    var isRoot = helpers.isHierarchyRoot(pt);\n    var parent = helpers.getParent(hierarchy, pt);\n    var val = helpers.getValue(pt);\n\n    var _cast = function _cast(astr) {\n      return Lib.castOption(traceNow, ptNumber, astr);\n    };\n\n    var hovertemplate = _cast('hovertemplate');\n\n    var hoverinfo = Fx.castHoverinfo(traceNow, fullLayoutNow, ptNumber);\n    var separators = fullLayoutNow.separators;\n    var eventData;\n\n    if (hovertemplate || hoverinfo && hoverinfo !== 'none' && hoverinfo !== 'skip') {\n      var hoverCenterX;\n      var hoverCenterY;\n\n      if (isSunburst) {\n        hoverCenterX = cd0.cx + pt.pxmid[0] * (1 - pt.rInscribed);\n        hoverCenterY = cd0.cy + pt.pxmid[1] * (1 - pt.rInscribed);\n      }\n\n      if (isTreemapOrIcicle) {\n        hoverCenterX = pt._hoverX;\n        hoverCenterY = pt._hoverY;\n      }\n\n      var hoverPt = {};\n      var parts = [];\n      var thisText = [];\n\n      var hasFlag = function hasFlag(flag) {\n        return parts.indexOf(flag) !== -1;\n      };\n\n      if (hoverinfo) {\n        parts = hoverinfo === 'all' ? traceNow._module.attributes.hoverinfo.flags : hoverinfo.split('+');\n      }\n\n      hoverPt.label = cdi.label;\n      if (hasFlag('label') && hoverPt.label) thisText.push(hoverPt.label);\n\n      if (cdi.hasOwnProperty('v')) {\n        hoverPt.value = cdi.v;\n        hoverPt.valueLabel = formatValue(hoverPt.value, separators);\n        if (hasFlag('value')) thisText.push(hoverPt.valueLabel);\n      }\n\n      hoverPt.currentPath = pt.currentPath = helpers.getPath(pt.data);\n\n      if (hasFlag('current path') && !isRoot) {\n        thisText.push(hoverPt.currentPath);\n      }\n\n      var tx;\n      var allPercents = [];\n\n      var insertPercent = function insertPercent() {\n        if (allPercents.indexOf(tx) === -1) {\n          // no need to add redundant info\n          thisText.push(tx);\n          allPercents.push(tx);\n        }\n      };\n\n      hoverPt.percentParent = pt.percentParent = val / helpers.getValue(parent);\n      hoverPt.parent = pt.parentString = helpers.getPtLabel(parent);\n\n      if (hasFlag('percent parent')) {\n        tx = helpers.formatPercent(hoverPt.percentParent, separators) + ' of ' + hoverPt.parent;\n        insertPercent();\n      }\n\n      hoverPt.percentEntry = pt.percentEntry = val / helpers.getValue(entry);\n      hoverPt.entry = pt.entry = helpers.getPtLabel(entry);\n\n      if (hasFlag('percent entry') && !isRoot && !pt.onPathbar) {\n        tx = helpers.formatPercent(hoverPt.percentEntry, separators) + ' of ' + hoverPt.entry;\n        insertPercent();\n      }\n\n      hoverPt.percentRoot = pt.percentRoot = val / helpers.getValue(hierarchy);\n      hoverPt.root = pt.root = helpers.getPtLabel(hierarchy);\n\n      if (hasFlag('percent root') && !isRoot) {\n        tx = helpers.formatPercent(hoverPt.percentRoot, separators) + ' of ' + hoverPt.root;\n        insertPercent();\n      }\n\n      hoverPt.text = _cast('hovertext') || _cast('text');\n\n      if (hasFlag('text')) {\n        tx = hoverPt.text;\n        if (Lib.isValidTextValue(tx)) thisText.push(tx);\n      }\n\n      eventData = [makeEventData(pt, traceNow, opts.eventDataKeys)];\n      var hoverItems = {\n        trace: traceNow,\n        y: hoverCenterY,\n        _x0: pt._x0,\n        _x1: pt._x1,\n        _y0: pt._y0,\n        _y1: pt._y1,\n        text: thisText.join('<br>'),\n        name: hovertemplate || hasFlag('name') ? traceNow.name : undefined,\n        color: _cast('hoverlabel.bgcolor') || cdi.color,\n        borderColor: _cast('hoverlabel.bordercolor'),\n        fontFamily: _cast('hoverlabel.font.family'),\n        fontSize: _cast('hoverlabel.font.size'),\n        fontColor: _cast('hoverlabel.font.color'),\n        nameLength: _cast('hoverlabel.namelength'),\n        textAlign: _cast('hoverlabel.align'),\n        hovertemplate: hovertemplate,\n        hovertemplateLabels: hoverPt,\n        eventData: eventData\n      };\n\n      if (isSunburst) {\n        hoverItems.x0 = hoverCenterX - pt.rInscribed * pt.rpx1;\n        hoverItems.x1 = hoverCenterX + pt.rInscribed * pt.rpx1;\n        hoverItems.idealAlign = pt.pxmid[0] < 0 ? 'left' : 'right';\n      }\n\n      if (isTreemapOrIcicle) {\n        hoverItems.x = hoverCenterX;\n        hoverItems.idealAlign = hoverCenterX < 0 ? 'left' : 'right';\n      }\n\n      var bbox = [];\n      Fx.loneHover(hoverItems, {\n        container: fullLayoutNow._hoverlayer.node(),\n        outerContainer: fullLayoutNow._paper.node(),\n        gd: gd,\n        inOut_bbox: bbox\n      });\n      eventData[0].bbox = bbox[0];\n      trace._hasHoverLabel = true;\n    }\n\n    if (isTreemapOrIcicle) {\n      var slice = sliceTop.select('path.surface');\n      opts.styleOne(slice, pt, traceNow, {\n        hovered: true\n      });\n    }\n\n    trace._hasHoverEvent = true;\n    gd.emit('plotly_hover', {\n      points: eventData || [makeEventData(pt, traceNow, opts.eventDataKeys)],\n      event: d3.event\n    });\n  };\n\n  var onMouseOut = function onMouseOut(evt) {\n    var fullLayoutNow = gd._fullLayout;\n    var traceNow = gd._fullData[trace.index];\n    var pt = d3.select(this).datum();\n\n    if (trace._hasHoverEvent) {\n      evt.originalEvent = d3.event;\n      gd.emit('plotly_unhover', {\n        points: [makeEventData(pt, traceNow, opts.eventDataKeys)],\n        event: d3.event\n      });\n      trace._hasHoverEvent = false;\n    }\n\n    if (trace._hasHoverLabel) {\n      Fx.loneUnhover(fullLayoutNow._hoverlayer.node());\n      trace._hasHoverLabel = false;\n    }\n\n    if (isTreemapOrIcicle) {\n      var slice = sliceTop.select('path.surface');\n      opts.styleOne(slice, pt, traceNow, {\n        hovered: false\n      });\n    }\n  };\n\n  var onClick = function onClick(pt) {\n    // TODO: this does not support right-click. If we want to support it, we\n    // would likely need to change pie to use dragElement instead of straight\n    // mapbox event binding. Or perhaps better, make a simple wrapper with the\n    // right mousedown, mousemove, and mouseup handlers just for a left/right click\n    // mapbox would use this too.\n    var fullLayoutNow = gd._fullLayout;\n    var traceNow = gd._fullData[trace.index];\n    var noTransition = isSunburst && (helpers.isHierarchyRoot(pt) || helpers.isLeaf(pt));\n    var id = helpers.getPtId(pt);\n    var nextEntry = helpers.isEntry(pt) ? helpers.findEntryWithChild(hierarchy, id) : helpers.findEntryWithLevel(hierarchy, id);\n    var nextLevel = helpers.getPtId(nextEntry);\n    var typeClickEvtData = {\n      points: [makeEventData(pt, traceNow, opts.eventDataKeys)],\n      event: d3.event\n    };\n    if (!noTransition) typeClickEvtData.nextLevel = nextLevel;\n    var clickVal = Events.triggerHandler(gd, 'plotly_' + trace.type + 'click', typeClickEvtData);\n\n    if (clickVal !== false && fullLayoutNow.hovermode) {\n      gd._hoverdata = [makeEventData(pt, traceNow, opts.eventDataKeys)];\n      Fx.click(gd, d3.event);\n    } // if click does not trigger a transition, we're done!\n\n\n    if (noTransition) return; // if custom handler returns false, we're done!\n\n    if (clickVal === false) return; // skip if triggered from dragging a nearby cartesian subplot\n\n    if (gd._dragging) return; // skip during transitions, to avoid potential bugs\n    // we could remove this check later\n\n    if (gd._transitioning) return; // store 'old' level in guiEdit stash, so that subsequent Plotly.react\n    // calls with the same uirevision can start from the same entry\n\n    Registry.call('_storeDirectGUIEdit', traceNow, fullLayoutNow._tracePreGUI[traceNow.uid], {\n      level: traceNow.level\n    });\n    var frame = {\n      data: [{\n        level: nextLevel\n      }],\n      traces: [trace.index]\n    };\n    var animOpts = {\n      frame: {\n        redraw: false,\n        duration: opts.transitionTime\n      },\n      transition: {\n        duration: opts.transitionTime,\n        easing: opts.transitionEasing\n      },\n      mode: 'immediate',\n      fromcurrent: true\n    };\n    Fx.loneUnhover(fullLayoutNow._hoverlayer.node());\n    Registry.call('animate', gd, frame, animOpts);\n  };\n\n  sliceTop.on('mouseover', onMouseOver);\n  sliceTop.on('mouseout', onMouseOut);\n  sliceTop.on('click', onClick);\n};\n\nfunction makeEventData(pt, trace, keys) {\n  var cdi = pt.data.data;\n  var out = {\n    curveNumber: trace.index,\n    pointNumber: cdi.i,\n    data: trace._input,\n    fullData: trace // TODO more things like 'children', 'siblings', 'hierarchy?\n\n  };\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    if (key in pt) out[key] = pt[key];\n  } // handle special case of parent\n\n\n  if ('parentString' in pt && !helpers.isHierarchyRoot(pt)) out.parent = pt.parentString;\n  appendArrayPointValue(out, trace, cdi.i);\n  return out;\n}","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/plotly.js/src/traces/sunburst/fx.js"],"names":["d3","require","Registry","appendArrayPointValue","Fx","Lib","Events","helpers","pieHelpers","formatValue","formatPieValue","module","exports","attachFxHandlers","sliceTop","entry","gd","cd","opts","cd0","trace","hierarchy","isSunburst","type","isTreemapOrIcicle","_hasHoverLabel","_hasHoverEvent","onMouseOver","pt","fullLayoutNow","_fullLayout","_dragging","hovermode","traceNow","_fullData","index","cdi","data","ptNumber","i","isRoot","isHierarchyRoot","parent","getParent","val","getValue","_cast","astr","castOption","hovertemplate","hoverinfo","castHoverinfo","separators","eventData","hoverCenterX","hoverCenterY","cx","pxmid","rInscribed","cy","_hoverX","_hoverY","hoverPt","parts","thisText","hasFlag","flag","indexOf","_module","attributes","flags","split","label","push","hasOwnProperty","value","v","valueLabel","currentPath","getPath","tx","allPercents","insertPercent","percentParent","parentString","getPtLabel","formatPercent","percentEntry","onPathbar","percentRoot","root","text","isValidTextValue","makeEventData","eventDataKeys","hoverItems","y","_x0","_x1","_y0","_y1","join","name","undefined","color","borderColor","fontFamily","fontSize","fontColor","nameLength","textAlign","hovertemplateLabels","x0","rpx1","x1","idealAlign","x","bbox","loneHover","container","_hoverlayer","node","outerContainer","_paper","inOut_bbox","slice","select","styleOne","hovered","emit","points","event","onMouseOut","evt","datum","originalEvent","loneUnhover","onClick","noTransition","isLeaf","id","getPtId","nextEntry","isEntry","findEntryWithChild","findEntryWithLevel","nextLevel","typeClickEvtData","clickVal","triggerHandler","_hoverdata","click","_transitioning","call","_tracePreGUI","uid","level","frame","traces","animOpts","redraw","duration","transitionTime","transition","easing","transitionEasing","mode","fromcurrent","on","keys","out","curveNumber","pointNumber","_input","fullData","length","key"],"mappings":"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","sourcesContent":["'use strict';\n\nvar d3 = require('@plotly/d3');\nvar Registry = require('../../registry');\nvar appendArrayPointValue = require('../../components/fx/helpers').appendArrayPointValue;\nvar Fx = require('../../components/fx');\nvar Lib = require('../../lib');\nvar Events = require('../../lib/events');\n\nvar helpers = require('./helpers');\nvar pieHelpers = require('../pie/helpers');\n\nvar formatValue = pieHelpers.formatPieValue;\n\nmodule.exports = function attachFxHandlers(sliceTop, entry, gd, cd, opts) {\n    var cd0 = cd[0];\n    var trace = cd0.trace;\n    var hierarchy = cd0.hierarchy;\n\n    var isSunburst = trace.type === 'sunburst';\n    var isTreemapOrIcicle =\n        trace.type === 'treemap' ||\n        trace.type === 'icicle';\n\n    // hover state vars\n    // have we drawn a hover label, so it should be cleared later\n    if(!('_hasHoverLabel' in trace)) trace._hasHoverLabel = false;\n    // have we emitted a hover event, so later an unhover event should be emitted\n    // note that click events do not depend on this - you can still get them\n    // with hovermode: false or if you were earlier dragging, then clicked\n    // in the same slice that you moused up in\n    if(!('_hasHoverEvent' in trace)) trace._hasHoverEvent = false;\n\n    var onMouseOver = function(pt) {\n        var fullLayoutNow = gd._fullLayout;\n\n        if(gd._dragging || fullLayoutNow.hovermode === false) return;\n\n        var traceNow = gd._fullData[trace.index];\n        var cdi = pt.data.data;\n        var ptNumber = cdi.i;\n        var isRoot = helpers.isHierarchyRoot(pt);\n        var parent = helpers.getParent(hierarchy, pt);\n\n        var val = helpers.getValue(pt);\n\n        var _cast = function(astr) {\n            return Lib.castOption(traceNow, ptNumber, astr);\n        };\n\n        var hovertemplate = _cast('hovertemplate');\n        var hoverinfo = Fx.castHoverinfo(traceNow, fullLayoutNow, ptNumber);\n        var separators = fullLayoutNow.separators;\n\n        var eventData;\n\n        if(hovertemplate || (hoverinfo && hoverinfo !== 'none' && hoverinfo !== 'skip')) {\n            var hoverCenterX;\n            var hoverCenterY;\n            if(isSunburst) {\n                hoverCenterX = cd0.cx + pt.pxmid[0] * (1 - pt.rInscribed);\n                hoverCenterY = cd0.cy + pt.pxmid[1] * (1 - pt.rInscribed);\n            }\n            if(isTreemapOrIcicle) {\n                hoverCenterX = pt._hoverX;\n                hoverCenterY = pt._hoverY;\n            }\n\n            var hoverPt = {};\n            var parts = [];\n            var thisText = [];\n            var hasFlag = function(flag) { return parts.indexOf(flag) !== -1; };\n\n            if(hoverinfo) {\n                parts = hoverinfo === 'all' ?\n                    traceNow._module.attributes.hoverinfo.flags :\n                    hoverinfo.split('+');\n            }\n\n            hoverPt.label = cdi.label;\n            if(hasFlag('label') && hoverPt.label) thisText.push(hoverPt.label);\n\n            if(cdi.hasOwnProperty('v')) {\n                hoverPt.value = cdi.v;\n                hoverPt.valueLabel = formatValue(hoverPt.value, separators);\n                if(hasFlag('value')) thisText.push(hoverPt.valueLabel);\n            }\n\n            hoverPt.currentPath = pt.currentPath = helpers.getPath(pt.data);\n            if(hasFlag('current path') && !isRoot) {\n                thisText.push(hoverPt.currentPath);\n            }\n\n            var tx;\n            var allPercents = [];\n            var insertPercent = function() {\n                if(allPercents.indexOf(tx) === -1) { // no need to add redundant info\n                    thisText.push(tx);\n                    allPercents.push(tx);\n                }\n            };\n\n            hoverPt.percentParent = pt.percentParent = val / helpers.getValue(parent);\n            hoverPt.parent = pt.parentString = helpers.getPtLabel(parent);\n            if(hasFlag('percent parent')) {\n                tx = helpers.formatPercent(hoverPt.percentParent, separators) + ' of ' + hoverPt.parent;\n                insertPercent();\n            }\n\n            hoverPt.percentEntry = pt.percentEntry = val / helpers.getValue(entry);\n            hoverPt.entry = pt.entry = helpers.getPtLabel(entry);\n            if(hasFlag('percent entry') && !isRoot && !pt.onPathbar) {\n                tx = helpers.formatPercent(hoverPt.percentEntry, separators) + ' of ' + hoverPt.entry;\n                insertPercent();\n            }\n\n            hoverPt.percentRoot = pt.percentRoot = val / helpers.getValue(hierarchy);\n            hoverPt.root = pt.root = helpers.getPtLabel(hierarchy);\n            if(hasFlag('percent root') && !isRoot) {\n                tx = helpers.formatPercent(hoverPt.percentRoot, separators) + ' of ' + hoverPt.root;\n                insertPercent();\n            }\n\n            hoverPt.text = _cast('hovertext') || _cast('text');\n            if(hasFlag('text')) {\n                tx = hoverPt.text;\n                if(Lib.isValidTextValue(tx)) thisText.push(tx);\n            }\n\n            eventData = [makeEventData(pt, traceNow, opts.eventDataKeys)];\n\n            var hoverItems = {\n                trace: traceNow,\n                y: hoverCenterY,\n                _x0: pt._x0,\n                _x1: pt._x1,\n                _y0: pt._y0,\n                _y1: pt._y1,\n                text: thisText.join('<br>'),\n                name: (hovertemplate || hasFlag('name')) ? traceNow.name : undefined,\n                color: _cast('hoverlabel.bgcolor') || cdi.color,\n                borderColor: _cast('hoverlabel.bordercolor'),\n                fontFamily: _cast('hoverlabel.font.family'),\n                fontSize: _cast('hoverlabel.font.size'),\n                fontColor: _cast('hoverlabel.font.color'),\n                nameLength: _cast('hoverlabel.namelength'),\n                textAlign: _cast('hoverlabel.align'),\n                hovertemplate: hovertemplate,\n                hovertemplateLabels: hoverPt,\n                eventData: eventData\n            };\n\n            if(isSunburst) {\n                hoverItems.x0 = hoverCenterX - pt.rInscribed * pt.rpx1;\n                hoverItems.x1 = hoverCenterX + pt.rInscribed * pt.rpx1;\n                hoverItems.idealAlign = pt.pxmid[0] < 0 ? 'left' : 'right';\n            }\n            if(isTreemapOrIcicle) {\n                hoverItems.x = hoverCenterX;\n                hoverItems.idealAlign = hoverCenterX < 0 ? 'left' : 'right';\n            }\n\n            var bbox = [];\n            Fx.loneHover(hoverItems, {\n                container: fullLayoutNow._hoverlayer.node(),\n                outerContainer: fullLayoutNow._paper.node(),\n                gd: gd,\n                inOut_bbox: bbox\n            });\n            eventData[0].bbox = bbox[0];\n\n            trace._hasHoverLabel = true;\n        }\n\n        if(isTreemapOrIcicle) {\n            var slice = sliceTop.select('path.surface');\n            opts.styleOne(slice, pt, traceNow, {\n                hovered: true\n            });\n        }\n\n        trace._hasHoverEvent = true;\n        gd.emit('plotly_hover', {\n            points: eventData || [makeEventData(pt, traceNow, opts.eventDataKeys)],\n            event: d3.event\n        });\n    };\n\n    var onMouseOut = function(evt) {\n        var fullLayoutNow = gd._fullLayout;\n        var traceNow = gd._fullData[trace.index];\n        var pt = d3.select(this).datum();\n\n        if(trace._hasHoverEvent) {\n            evt.originalEvent = d3.event;\n            gd.emit('plotly_unhover', {\n                points: [makeEventData(pt, traceNow, opts.eventDataKeys)],\n                event: d3.event\n            });\n            trace._hasHoverEvent = false;\n        }\n\n        if(trace._hasHoverLabel) {\n            Fx.loneUnhover(fullLayoutNow._hoverlayer.node());\n            trace._hasHoverLabel = false;\n        }\n\n        if(isTreemapOrIcicle) {\n            var slice = sliceTop.select('path.surface');\n            opts.styleOne(slice, pt, traceNow, {\n                hovered: false\n            });\n        }\n    };\n\n    var onClick = function(pt) {\n        // TODO: this does not support right-click. If we want to support it, we\n        // would likely need to change pie to use dragElement instead of straight\n        // mapbox event binding. Or perhaps better, make a simple wrapper with the\n        // right mousedown, mousemove, and mouseup handlers just for a left/right click\n        // mapbox would use this too.\n        var fullLayoutNow = gd._fullLayout;\n        var traceNow = gd._fullData[trace.index];\n\n        var noTransition = isSunburst && (helpers.isHierarchyRoot(pt) || helpers.isLeaf(pt));\n\n        var id = helpers.getPtId(pt);\n        var nextEntry = helpers.isEntry(pt) ?\n            helpers.findEntryWithChild(hierarchy, id) :\n            helpers.findEntryWithLevel(hierarchy, id);\n        var nextLevel = helpers.getPtId(nextEntry);\n\n        var typeClickEvtData = {\n            points: [makeEventData(pt, traceNow, opts.eventDataKeys)],\n            event: d3.event\n        };\n        if(!noTransition) typeClickEvtData.nextLevel = nextLevel;\n\n        var clickVal = Events.triggerHandler(gd, 'plotly_' + trace.type + 'click', typeClickEvtData);\n\n        if(clickVal !== false && fullLayoutNow.hovermode) {\n            gd._hoverdata = [makeEventData(pt, traceNow, opts.eventDataKeys)];\n            Fx.click(gd, d3.event);\n        }\n\n        // if click does not trigger a transition, we're done!\n        if(noTransition) return;\n\n        // if custom handler returns false, we're done!\n        if(clickVal === false) return;\n\n        // skip if triggered from dragging a nearby cartesian subplot\n        if(gd._dragging) return;\n\n        // skip during transitions, to avoid potential bugs\n        // we could remove this check later\n        if(gd._transitioning) return;\n\n        // store 'old' level in guiEdit stash, so that subsequent Plotly.react\n        // calls with the same uirevision can start from the same entry\n        Registry.call('_storeDirectGUIEdit', traceNow, fullLayoutNow._tracePreGUI[traceNow.uid], {\n            level: traceNow.level\n        });\n\n        var frame = {\n            data: [{level: nextLevel}],\n            traces: [trace.index]\n        };\n\n        var animOpts = {\n            frame: {\n                redraw: false,\n                duration: opts.transitionTime\n            },\n            transition: {\n                duration: opts.transitionTime,\n                easing: opts.transitionEasing\n            },\n            mode: 'immediate',\n            fromcurrent: true\n        };\n\n        Fx.loneUnhover(fullLayoutNow._hoverlayer.node());\n        Registry.call('animate', gd, frame, animOpts);\n    };\n\n    sliceTop.on('mouseover', onMouseOver);\n    sliceTop.on('mouseout', onMouseOut);\n    sliceTop.on('click', onClick);\n};\n\nfunction makeEventData(pt, trace, keys) {\n    var cdi = pt.data.data;\n\n    var out = {\n        curveNumber: trace.index,\n        pointNumber: cdi.i,\n        data: trace._input,\n        fullData: trace,\n\n        // TODO more things like 'children', 'siblings', 'hierarchy?\n    };\n\n    for(var i = 0; i < keys.length; i++) {\n        var key = keys[i];\n        if(key in pt) out[key] = pt[key];\n    }\n    // handle special case of parent\n    if('parentString' in pt && !helpers.isHierarchyRoot(pt)) out.parent = pt.parentString;\n\n    appendArrayPointValue(out, trace, cdi.i);\n\n    return out;\n}\n"]},"metadata":{},"sourceType":"script"}