{"ast":null,"code":"module.exports = preprocessPolygon;\n\nvar orient = require('robust-orientation')[3];\n\nvar makeSlabs = require('slab-decomposition');\n\nvar makeIntervalTree = require('interval-tree-1d');\n\nvar bsearch = require('binary-search-bounds');\n\nfunction visitInterval() {\n  return true;\n}\n\nfunction intervalSearch(table) {\n  return function (x, y) {\n    var tree = table[x];\n\n    if (tree) {\n      return !!tree.queryPoint(y, visitInterval);\n    }\n\n    return false;\n  };\n}\n\nfunction buildVerticalIndex(segments) {\n  var table = {};\n\n  for (var i = 0; i < segments.length; ++i) {\n    var s = segments[i];\n    var x = s[0][0];\n    var y0 = s[0][1];\n    var y1 = s[1][1];\n    var p = [Math.min(y0, y1), Math.max(y0, y1)];\n\n    if (x in table) {\n      table[x].push(p);\n    } else {\n      table[x] = [p];\n    }\n  }\n\n  var intervalTable = {};\n  var keys = Object.keys(table);\n\n  for (var i = 0; i < keys.length; ++i) {\n    var segs = table[keys[i]];\n    intervalTable[keys[i]] = makeIntervalTree(segs);\n  }\n\n  return intervalSearch(intervalTable);\n}\n\nfunction buildSlabSearch(slabs, coordinates) {\n  return function (p) {\n    var bucket = bsearch.le(coordinates, p[0]);\n\n    if (bucket < 0) {\n      return 1;\n    }\n\n    var root = slabs[bucket];\n\n    if (!root) {\n      if (bucket > 0 && coordinates[bucket] === p[0]) {\n        root = slabs[bucket - 1];\n      } else {\n        return 1;\n      }\n    }\n\n    var lastOrientation = 1;\n\n    while (root) {\n      var s = root.key;\n      var o = orient(p, s[0], s[1]);\n\n      if (s[0][0] < s[1][0]) {\n        if (o < 0) {\n          root = root.left;\n        } else if (o > 0) {\n          lastOrientation = -1;\n          root = root.right;\n        } else {\n          return 0;\n        }\n      } else {\n        if (o > 0) {\n          root = root.left;\n        } else if (o < 0) {\n          lastOrientation = 1;\n          root = root.right;\n        } else {\n          return 0;\n        }\n      }\n    }\n\n    return lastOrientation;\n  };\n}\n\nfunction classifyEmpty(p) {\n  return 1;\n}\n\nfunction createClassifyVertical(testVertical) {\n  return function classify(p) {\n    if (testVertical(p[0], p[1])) {\n      return 0;\n    }\n\n    return 1;\n  };\n}\n\nfunction createClassifyPointDegen(testVertical, testNormal) {\n  return function classify(p) {\n    if (testVertical(p[0], p[1])) {\n      return 0;\n    }\n\n    return testNormal(p);\n  };\n}\n\nfunction preprocessPolygon(loops) {\n  //Compute number of loops\n  var numLoops = loops.length; //Unpack segments\n\n  var segments = [];\n  var vsegments = [];\n  var ptr = 0;\n\n  for (var i = 0; i < numLoops; ++i) {\n    var loop = loops[i];\n    var numVertices = loop.length;\n\n    for (var s = numVertices - 1, t = 0; t < numVertices; s = t++) {\n      var a = loop[s];\n      var b = loop[t];\n\n      if (a[0] === b[0]) {\n        vsegments.push([a, b]);\n      } else {\n        segments.push([a, b]);\n      }\n    }\n  } //Degenerate case: All loops are empty\n\n\n  if (segments.length === 0) {\n    if (vsegments.length === 0) {\n      return classifyEmpty;\n    } else {\n      return createClassifyVertical(buildVerticalIndex(vsegments));\n    }\n  } //Build slab decomposition\n\n\n  var slabs = makeSlabs(segments);\n  var testSlab = buildSlabSearch(slabs.slabs, slabs.coordinates);\n\n  if (vsegments.length === 0) {\n    return testSlab;\n  } else {\n    return createClassifyPointDegen(buildVerticalIndex(vsegments), testSlab);\n  }\n}","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/point-in-big-polygon/pnp-big.js"],"names":["module","exports","preprocessPolygon","orient","require","makeSlabs","makeIntervalTree","bsearch","visitInterval","intervalSearch","table","x","y","tree","queryPoint","buildVerticalIndex","segments","i","length","s","y0","y1","p","Math","min","max","push","intervalTable","keys","Object","segs","buildSlabSearch","slabs","coordinates","bucket","le","root","lastOrientation","key","o","left","right","classifyEmpty","createClassifyVertical","testVertical","classify","createClassifyPointDegen","testNormal","loops","numLoops","vsegments","ptr","loop","numVertices","t","a","b","testSlab"],"mappings":"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","sourcesContent":["module.exports = preprocessPolygon\n\nvar orient = require('robust-orientation')[3]\nvar makeSlabs = require('slab-decomposition')\nvar makeIntervalTree = require('interval-tree-1d')\nvar bsearch = require('binary-search-bounds')\n\nfunction visitInterval() {\n  return true\n}\n\nfunction intervalSearch(table) {\n  return function(x, y) {\n    var tree = table[x]\n    if(tree) {\n      return !!tree.queryPoint(y, visitInterval)\n    }\n    return false\n  }\n}\n\nfunction buildVerticalIndex(segments) {\n  var table = {}\n  for(var i=0; i<segments.length; ++i) {\n    var s = segments[i]\n    var x = s[0][0]\n    var y0 = s[0][1]\n    var y1 = s[1][1]\n    var p = [ Math.min(y0, y1), Math.max(y0, y1) ]\n    if(x in table) {\n      table[x].push(p)\n    } else {\n      table[x] = [ p ]\n    }\n  }\n  var intervalTable = {}\n  var keys = Object.keys(table)\n  for(var i=0; i<keys.length; ++i) {\n    var segs = table[keys[i]]\n    intervalTable[keys[i]] = makeIntervalTree(segs)\n  }\n  return intervalSearch(intervalTable)\n}\n\nfunction buildSlabSearch(slabs, coordinates) {\n  return function(p) {\n    var bucket = bsearch.le(coordinates, p[0])\n    if(bucket < 0) {\n      return 1\n    }\n    var root = slabs[bucket]\n    if(!root) {\n      if(bucket > 0 && coordinates[bucket] === p[0]) {\n        root = slabs[bucket-1]\n      } else {\n        return 1\n      }\n    }\n    var lastOrientation = 1\n    while(root) {\n      var s = root.key\n      var o = orient(p, s[0], s[1])\n      if(s[0][0] < s[1][0]) {\n        if(o < 0) {\n          root = root.left\n        } else if(o > 0) {\n          lastOrientation = -1\n          root = root.right\n        } else {\n          return 0\n        }\n      } else {\n        if(o > 0) {\n          root = root.left\n        } else if(o < 0) {\n          lastOrientation = 1\n          root = root.right\n        } else {\n          return 0\n        }\n      }\n    }\n    return lastOrientation\n  }\n}\n\nfunction classifyEmpty(p) {\n  return 1\n}\n\nfunction createClassifyVertical(testVertical) {\n  return function classify(p) {\n    if(testVertical(p[0], p[1])) {\n      return 0\n    }\n    return 1\n  }\n}\n\nfunction createClassifyPointDegen(testVertical, testNormal) {\n  return function classify(p) {\n    if(testVertical(p[0], p[1])) {\n      return 0\n    }\n    return testNormal(p)\n  }\n}\n\nfunction preprocessPolygon(loops) {\n  //Compute number of loops\n  var numLoops = loops.length\n\n  //Unpack segments\n  var segments = []\n  var vsegments = []\n  var ptr = 0\n  for(var i=0; i<numLoops; ++i) {\n    var loop = loops[i]\n    var numVertices = loop.length\n    for(var s=numVertices-1,t=0; t<numVertices; s=(t++)) {\n      var a = loop[s]\n      var b = loop[t]\n      if(a[0] === b[0]) {\n        vsegments.push([a,b])\n      } else {\n        segments.push([a,b])\n      }\n    }\n  }\n\n  //Degenerate case: All loops are empty\n  if(segments.length === 0) {\n    if(vsegments.length === 0) {\n      return classifyEmpty\n    } else {\n      return createClassifyVertical(buildVerticalIndex(vsegments))\n    }\n  }\n\n  //Build slab decomposition\n  var slabs = makeSlabs(segments)\n  var testSlab = buildSlabSearch(slabs.slabs, slabs.coordinates)\n\n  if(vsegments.length === 0) {\n    return testSlab\n  } else {\n    return createClassifyPointDegen(\n      buildVerticalIndex(vsegments),\n      testSlab)\n  }\n}"]},"metadata":{},"sourceType":"script"}