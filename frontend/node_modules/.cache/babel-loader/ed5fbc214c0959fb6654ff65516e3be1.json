{"ast":null,"code":"'use strict';\n\nvar Lib = require('../../lib');\n\nvar Axes = require('../../plots/cartesian/axes');\n\nvar draw = require('./draw').draw;\n\nmodule.exports = function calcAutorange(gd) {\n  var fullLayout = gd._fullLayout;\n  var annotationList = Lib.filterVisible(fullLayout.annotations);\n\n  if (annotationList.length && gd._fullData.length) {\n    return Lib.syncOrAsync([draw, annAutorange], gd);\n  }\n};\n\nfunction annAutorange(gd) {\n  var fullLayout = gd._fullLayout; // find the bounding boxes for each of these annotations'\n  // relative to their anchor points\n  // use the arrow and the text bg rectangle,\n  // as the whole anno may include hidden text in its bbox\n\n  Lib.filterVisible(fullLayout.annotations).forEach(function (ann) {\n    var xa = Axes.getFromId(gd, ann.xref);\n    var ya = Axes.getFromId(gd, ann.yref);\n    var xRefType = Axes.getRefType(ann.xref);\n    var yRefType = Axes.getRefType(ann.yref);\n    ann._extremes = {};\n    if (xRefType === 'range') calcAxisExpansion(ann, xa);\n    if (yRefType === 'range') calcAxisExpansion(ann, ya);\n  });\n}\n\nfunction calcAxisExpansion(ann, ax) {\n  var axId = ax._id;\n  var letter = axId.charAt(0);\n  var pos = ann[letter];\n  var apos = ann['a' + letter];\n  var ref = ann[letter + 'ref'];\n  var aref = ann['a' + letter + 'ref'];\n  var padplus = ann['_' + letter + 'padplus'];\n  var padminus = ann['_' + letter + 'padminus'];\n  var shift = {\n    x: 1,\n    y: -1\n  }[letter] * ann[letter + 'shift'];\n  var headSize = 3 * ann.arrowsize * ann.arrowwidth || 0;\n  var headPlus = headSize + shift;\n  var headMinus = headSize - shift;\n  var startHeadSize = 3 * ann.startarrowsize * ann.arrowwidth || 0;\n  var startHeadPlus = startHeadSize + shift;\n  var startHeadMinus = startHeadSize - shift;\n  var extremes;\n\n  if (aref === ref) {\n    // expand for the arrowhead (padded by arrowhead)\n    var extremeArrowHead = Axes.findExtremes(ax, [ax.r2c(pos)], {\n      ppadplus: headPlus,\n      ppadminus: headMinus\n    }); // again for the textbox (padded by textbox)\n\n    var extremeText = Axes.findExtremes(ax, [ax.r2c(apos)], {\n      ppadplus: Math.max(padplus, startHeadPlus),\n      ppadminus: Math.max(padminus, startHeadMinus)\n    });\n    extremes = {\n      min: [extremeArrowHead.min[0], extremeText.min[0]],\n      max: [extremeArrowHead.max[0], extremeText.max[0]]\n    };\n  } else {\n    startHeadPlus = apos ? startHeadPlus + apos : startHeadPlus;\n    startHeadMinus = apos ? startHeadMinus - apos : startHeadMinus;\n    extremes = Axes.findExtremes(ax, [ax.r2c(pos)], {\n      ppadplus: Math.max(padplus, headPlus, startHeadPlus),\n      ppadminus: Math.max(padminus, headMinus, startHeadMinus)\n    });\n  }\n\n  ann._extremes[axId] = extremes;\n}","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/plotly.js/src/components/annotations/calc_autorange.js"],"names":["Lib","require","Axes","draw","module","exports","calcAutorange","gd","fullLayout","_fullLayout","annotationList","filterVisible","annotations","length","_fullData","syncOrAsync","annAutorange","forEach","ann","xa","getFromId","xref","ya","yref","xRefType","getRefType","yRefType","_extremes","calcAxisExpansion","ax","axId","_id","letter","charAt","pos","apos","ref","aref","padplus","padminus","shift","x","y","headSize","arrowsize","arrowwidth","headPlus","headMinus","startHeadSize","startarrowsize","startHeadPlus","startHeadMinus","extremes","extremeArrowHead","findExtremes","r2c","ppadplus","ppadminus","extremeText","Math","max","min"],"mappings":"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","sourcesContent":["'use strict';\n\nvar Lib = require('../../lib');\nvar Axes = require('../../plots/cartesian/axes');\n\nvar draw = require('./draw').draw;\n\n\nmodule.exports = function calcAutorange(gd) {\n    var fullLayout = gd._fullLayout;\n    var annotationList = Lib.filterVisible(fullLayout.annotations);\n\n    if(annotationList.length && gd._fullData.length) {\n        return Lib.syncOrAsync([draw, annAutorange], gd);\n    }\n};\n\nfunction annAutorange(gd) {\n    var fullLayout = gd._fullLayout;\n\n    // find the bounding boxes for each of these annotations'\n    // relative to their anchor points\n    // use the arrow and the text bg rectangle,\n    // as the whole anno may include hidden text in its bbox\n    Lib.filterVisible(fullLayout.annotations).forEach(function(ann) {\n        var xa = Axes.getFromId(gd, ann.xref);\n        var ya = Axes.getFromId(gd, ann.yref);\n        var xRefType = Axes.getRefType(ann.xref);\n        var yRefType = Axes.getRefType(ann.yref);\n\n        ann._extremes = {};\n        if(xRefType === 'range') calcAxisExpansion(ann, xa);\n        if(yRefType === 'range') calcAxisExpansion(ann, ya);\n    });\n}\n\nfunction calcAxisExpansion(ann, ax) {\n    var axId = ax._id;\n    var letter = axId.charAt(0);\n    var pos = ann[letter];\n    var apos = ann['a' + letter];\n    var ref = ann[letter + 'ref'];\n    var aref = ann['a' + letter + 'ref'];\n    var padplus = ann['_' + letter + 'padplus'];\n    var padminus = ann['_' + letter + 'padminus'];\n    var shift = {x: 1, y: -1}[letter] * ann[letter + 'shift'];\n    var headSize = 3 * ann.arrowsize * ann.arrowwidth || 0;\n    var headPlus = headSize + shift;\n    var headMinus = headSize - shift;\n    var startHeadSize = 3 * ann.startarrowsize * ann.arrowwidth || 0;\n    var startHeadPlus = startHeadSize + shift;\n    var startHeadMinus = startHeadSize - shift;\n    var extremes;\n\n    if(aref === ref) {\n        // expand for the arrowhead (padded by arrowhead)\n        var extremeArrowHead = Axes.findExtremes(ax, [ax.r2c(pos)], {\n            ppadplus: headPlus,\n            ppadminus: headMinus\n        });\n        // again for the textbox (padded by textbox)\n        var extremeText = Axes.findExtremes(ax, [ax.r2c(apos)], {\n            ppadplus: Math.max(padplus, startHeadPlus),\n            ppadminus: Math.max(padminus, startHeadMinus)\n        });\n        extremes = {\n            min: [extremeArrowHead.min[0], extremeText.min[0]],\n            max: [extremeArrowHead.max[0], extremeText.max[0]]\n        };\n    } else {\n        startHeadPlus = apos ? startHeadPlus + apos : startHeadPlus;\n        startHeadMinus = apos ? startHeadMinus - apos : startHeadMinus;\n        extremes = Axes.findExtremes(ax, [ax.r2c(pos)], {\n            ppadplus: Math.max(padplus, headPlus, startHeadPlus),\n            ppadminus: Math.max(padminus, headMinus, startHeadMinus)\n        });\n    }\n\n    ann._extremes[axId] = extremes;\n}\n"]},"metadata":{},"sourceType":"script"}