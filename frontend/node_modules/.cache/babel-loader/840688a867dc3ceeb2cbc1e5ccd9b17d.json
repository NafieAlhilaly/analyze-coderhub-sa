{"ast":null,"code":"'use strict';\n\nvar barycentric = require('barycentric');\n\nvar closestPointToTriangle = require('polytope-closest-point/lib/closest_point_2d.js');\n\nmodule.exports = closestPointToPickLocation;\n\nfunction xformMatrix(m, v) {\n  var out = [0, 0, 0, 0];\n\n  for (var i = 0; i < 4; ++i) {\n    for (var j = 0; j < 4; ++j) {\n      out[j] += m[4 * i + j] * v[i];\n    }\n  }\n\n  return out;\n}\n\nfunction projectVertex(v, model, view, projection, resolution) {\n  var p = xformMatrix(projection, xformMatrix(view, xformMatrix(model, [v[0], v[1], v[2], 1])));\n\n  for (var i = 0; i < 3; ++i) {\n    p[i] /= p[3];\n  }\n\n  return [0.5 * resolution[0] * (1.0 + p[0]), 0.5 * resolution[1] * (1.0 - p[1])];\n}\n\nfunction barycentricCoord(simplex, point) {\n  if (simplex.length === 2) {\n    var d0 = 0.0;\n    var d1 = 0.0;\n\n    for (var i = 0; i < 2; ++i) {\n      d0 += Math.pow(point[i] - simplex[0][i], 2);\n      d1 += Math.pow(point[i] - simplex[1][i], 2);\n    }\n\n    d0 = Math.sqrt(d0);\n    d1 = Math.sqrt(d1);\n\n    if (d0 + d1 < 1e-6) {\n      return [1, 0];\n    }\n\n    return [d1 / (d0 + d1), d0 / (d1 + d0)];\n  } else if (simplex.length === 3) {\n    var closestPoint = [0, 0];\n    closestPointToTriangle(simplex[0], simplex[1], simplex[2], point, closestPoint);\n    return barycentric(simplex, closestPoint);\n  }\n\n  return [];\n}\n\nfunction interpolate(simplex, weights) {\n  var result = [0, 0, 0];\n\n  for (var i = 0; i < simplex.length; ++i) {\n    var p = simplex[i];\n    var w = weights[i];\n\n    for (var j = 0; j < 3; ++j) {\n      result[j] += w * p[j];\n    }\n  }\n\n  return result;\n}\n\nfunction closestPointToPickLocation(simplex, pixelCoord, model, view, projection, resolution) {\n  if (simplex.length === 1) {\n    return [0, simplex[0].slice()];\n  }\n\n  var simplex2D = new Array(simplex.length);\n\n  for (var i = 0; i < simplex.length; ++i) {\n    simplex2D[i] = projectVertex(simplex[i], model, view, projection, resolution);\n  }\n\n  var closestIndex = 0;\n  var closestDist = Infinity;\n\n  for (var i = 0; i < simplex2D.length; ++i) {\n    var d2 = 0.0;\n\n    for (var j = 0; j < 2; ++j) {\n      d2 += Math.pow(simplex2D[i][j] - pixelCoord[j], 2);\n    }\n\n    if (d2 < closestDist) {\n      closestDist = d2;\n      closestIndex = i;\n    }\n  }\n\n  var weights = barycentricCoord(simplex2D, pixelCoord);\n  var s = 0.0;\n\n  for (var i = 0; i < 3; ++i) {\n    if (weights[i] < -0.001 || weights[i] > 1.0001) {\n      return null;\n    }\n\n    s += weights[i];\n  }\n\n  if (Math.abs(s - 1.0) > 0.001) {\n    return null;\n  }\n\n  return [closestIndex, interpolate(simplex, weights), weights];\n}","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/gl-mesh3d/lib/closest-point.js"],"names":["barycentric","require","closestPointToTriangle","module","exports","closestPointToPickLocation","xformMatrix","m","v","out","i","j","projectVertex","model","view","projection","resolution","p","barycentricCoord","simplex","point","length","d0","d1","Math","pow","sqrt","closestPoint","interpolate","weights","result","w","pixelCoord","slice","simplex2D","Array","closestIndex","closestDist","Infinity","d2","s","abs"],"mappings":"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","sourcesContent":["'use strict'\n\nvar barycentric            = require('barycentric')\nvar closestPointToTriangle = require('polytope-closest-point/lib/closest_point_2d.js')\n\nmodule.exports = closestPointToPickLocation\n\nfunction xformMatrix(m, v) {\n  var out = [0,0,0,0]\n  for(var i=0; i<4; ++i) {\n    for(var j=0; j<4; ++j) {\n      out[j] += m[4*i + j] * v[i]\n    }\n  }\n  return out\n}\n\nfunction projectVertex(v, model, view, projection, resolution) {\n  var p = xformMatrix(projection,\n            xformMatrix(view,\n              xformMatrix(model, [v[0], v[1], v[2], 1])))\n  for(var i=0; i<3; ++i) {\n    p[i] /= p[3]\n  }\n  return [ 0.5 * resolution[0] * (1.0+p[0]), 0.5 * resolution[1] * (1.0-p[1]) ]\n}\n\nfunction barycentricCoord(simplex, point) {\n  if(simplex.length === 2) {\n    var d0 = 0.0\n    var d1 = 0.0\n    for(var i=0; i<2; ++i) {\n      d0 += Math.pow(point[i] - simplex[0][i], 2)\n      d1 += Math.pow(point[i] - simplex[1][i], 2)\n    }\n    d0 = Math.sqrt(d0)\n    d1 = Math.sqrt(d1)\n    if(d0+d1 < 1e-6) {\n      return [1,0]\n    }\n    return [d1/(d0+d1),d0/(d1+d0)]\n  } else if(simplex.length === 3) {\n    var closestPoint = [0,0]\n    closestPointToTriangle(simplex[0], simplex[1], simplex[2], point, closestPoint)\n    return barycentric(simplex, closestPoint)\n  }\n  return []\n}\n\nfunction interpolate(simplex, weights) {\n  var result = [0,0,0]\n  for(var i=0; i<simplex.length; ++i) {\n    var p = simplex[i]\n    var w = weights[i]\n    for(var j=0; j<3; ++j) {\n      result[j] += w * p[j]\n    }\n  }\n  return result\n}\n\nfunction closestPointToPickLocation(simplex, pixelCoord, model, view, projection, resolution) {\n  if(simplex.length === 1) {\n    return [0, simplex[0].slice()]\n  }\n  var simplex2D = new Array(simplex.length)\n  for(var i=0; i<simplex.length; ++i) {\n    simplex2D[i] = projectVertex(simplex[i], model, view, projection, resolution);\n  }\n\n  var closestIndex = 0\n  var closestDist  = Infinity\n  for(var i=0; i<simplex2D.length; ++i) {\n    var d2 = 0.0\n    for(var j=0; j<2; ++j) {\n      d2 += Math.pow(simplex2D[i][j] - pixelCoord[j], 2)\n    }\n    if(d2 < closestDist) {\n      closestDist  = d2\n      closestIndex = i\n    }\n  }\n\n  var weights = barycentricCoord(simplex2D, pixelCoord)\n  var s = 0.0\n  for(var i=0; i<3; ++i) {\n    if(weights[i] < -0.001 ||\n       weights[i] > 1.0001) {\n      return null\n    }\n    s += weights[i]\n  }\n  if(Math.abs(s - 1.0) > 0.001) {\n    return null\n  }\n  return [closestIndex, interpolate(simplex, weights), weights]\n}"]},"metadata":{},"sourceType":"script"}