{"ast":null,"code":"'use strict';\n\nvar Axes = require('../../plots/cartesian/axes');\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nmodule.exports = function calcLabels(trace, axis) {\n  var i, tobj, prefix, suffix, gridline;\n  var labels = axis._labels = [];\n  var gridlines = axis._gridlines;\n\n  for (i = 0; i < gridlines.length; i++) {\n    gridline = gridlines[i];\n\n    if (['start', 'both'].indexOf(axis.showticklabels) !== -1) {\n      tobj = Axes.tickText(axis, gridline.value);\n      extendFlat(tobj, {\n        prefix: prefix,\n        suffix: suffix,\n        endAnchor: true,\n        xy: gridline.xy(0),\n        dxy: gridline.dxy(0, 0),\n        axis: gridline.axis,\n        length: gridline.crossAxis.length,\n        font: gridline.axis.tickfont,\n        isFirst: i === 0,\n        isLast: i === gridlines.length - 1\n      });\n      labels.push(tobj);\n    }\n\n    if (['end', 'both'].indexOf(axis.showticklabels) !== -1) {\n      tobj = Axes.tickText(axis, gridline.value);\n      extendFlat(tobj, {\n        endAnchor: false,\n        xy: gridline.xy(gridline.crossLength - 1),\n        dxy: gridline.dxy(gridline.crossLength - 2, 1),\n        axis: gridline.axis,\n        length: gridline.crossAxis.length,\n        font: gridline.axis.tickfont,\n        isFirst: i === 0,\n        isLast: i === gridlines.length - 1\n      });\n      labels.push(tobj);\n    }\n  }\n};","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/plotly.js/src/traces/carpet/calc_labels.js"],"names":["Axes","require","extendFlat","module","exports","calcLabels","trace","axis","i","tobj","prefix","suffix","gridline","labels","_labels","gridlines","_gridlines","length","indexOf","showticklabels","tickText","value","endAnchor","xy","dxy","crossAxis","font","tickfont","isFirst","isLast","push","crossLength"],"mappings":"AAAA;;AAEA,IAAIA,IAAI,GAAGC,OAAO,CAAC,4BAAD,CAAlB;;AACA,IAAIC,UAAU,GAAGD,OAAO,CAAC,kBAAD,CAAP,CAA4BC,UAA7C;;AAEAC,MAAM,CAACC,OAAP,GAAiB,SAASC,UAAT,CAAoBC,KAApB,EAA2BC,IAA3B,EAAiC;AAC9C,MAAIC,CAAJ,EAAOC,IAAP,EAAaC,MAAb,EAAqBC,MAArB,EAA6BC,QAA7B;AAEA,MAAIC,MAAM,GAAGN,IAAI,CAACO,OAAL,GAAe,EAA5B;AACA,MAAIC,SAAS,GAAGR,IAAI,CAACS,UAArB;;AAEA,OAAIR,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGO,SAAS,CAACE,MAAzB,EAAiCT,CAAC,EAAlC,EAAsC;AAClCI,IAAAA,QAAQ,GAAGG,SAAS,CAACP,CAAD,CAApB;;AAEA,QAAG,CAAC,OAAD,EAAU,MAAV,EAAkBU,OAAlB,CAA0BX,IAAI,CAACY,cAA/B,MAAmD,CAAC,CAAvD,EAA0D;AACtDV,MAAAA,IAAI,GAAGT,IAAI,CAACoB,QAAL,CAAcb,IAAd,EAAoBK,QAAQ,CAACS,KAA7B,CAAP;AAEAnB,MAAAA,UAAU,CAACO,IAAD,EAAO;AACbC,QAAAA,MAAM,EAAEA,MADK;AAEbC,QAAAA,MAAM,EAAEA,MAFK;AAGbW,QAAAA,SAAS,EAAE,IAHE;AAIbC,QAAAA,EAAE,EAAEX,QAAQ,CAACW,EAAT,CAAY,CAAZ,CAJS;AAKbC,QAAAA,GAAG,EAAEZ,QAAQ,CAACY,GAAT,CAAa,CAAb,EAAgB,CAAhB,CALQ;AAMbjB,QAAAA,IAAI,EAAEK,QAAQ,CAACL,IANF;AAObU,QAAAA,MAAM,EAAEL,QAAQ,CAACa,SAAT,CAAmBR,MAPd;AAQbS,QAAAA,IAAI,EAAEd,QAAQ,CAACL,IAAT,CAAcoB,QARP;AASbC,QAAAA,OAAO,EAAEpB,CAAC,KAAK,CATF;AAUbqB,QAAAA,MAAM,EAAErB,CAAC,KAAKO,SAAS,CAACE,MAAV,GAAmB;AAVpB,OAAP,CAAV;AAaAJ,MAAAA,MAAM,CAACiB,IAAP,CAAYrB,IAAZ;AACH;;AAED,QAAG,CAAC,KAAD,EAAQ,MAAR,EAAgBS,OAAhB,CAAwBX,IAAI,CAACY,cAA7B,MAAiD,CAAC,CAArD,EAAwD;AACpDV,MAAAA,IAAI,GAAGT,IAAI,CAACoB,QAAL,CAAcb,IAAd,EAAoBK,QAAQ,CAACS,KAA7B,CAAP;AAEAnB,MAAAA,UAAU,CAACO,IAAD,EAAO;AACba,QAAAA,SAAS,EAAE,KADE;AAEbC,QAAAA,EAAE,EAAEX,QAAQ,CAACW,EAAT,CAAYX,QAAQ,CAACmB,WAAT,GAAuB,CAAnC,CAFS;AAGbP,QAAAA,GAAG,EAAEZ,QAAQ,CAACY,GAAT,CAAaZ,QAAQ,CAACmB,WAAT,GAAuB,CAApC,EAAuC,CAAvC,CAHQ;AAIbxB,QAAAA,IAAI,EAAEK,QAAQ,CAACL,IAJF;AAKbU,QAAAA,MAAM,EAAEL,QAAQ,CAACa,SAAT,CAAmBR,MALd;AAMbS,QAAAA,IAAI,EAAEd,QAAQ,CAACL,IAAT,CAAcoB,QANP;AAObC,QAAAA,OAAO,EAAEpB,CAAC,KAAK,CAPF;AAQbqB,QAAAA,MAAM,EAAErB,CAAC,KAAKO,SAAS,CAACE,MAAV,GAAmB;AARpB,OAAP,CAAV;AAWAJ,MAAAA,MAAM,CAACiB,IAAP,CAAYrB,IAAZ;AACH;AACJ;AACJ,CA7CD","sourcesContent":["'use strict';\n\nvar Axes = require('../../plots/cartesian/axes');\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nmodule.exports = function calcLabels(trace, axis) {\n    var i, tobj, prefix, suffix, gridline;\n\n    var labels = axis._labels = [];\n    var gridlines = axis._gridlines;\n\n    for(i = 0; i < gridlines.length; i++) {\n        gridline = gridlines[i];\n\n        if(['start', 'both'].indexOf(axis.showticklabels) !== -1) {\n            tobj = Axes.tickText(axis, gridline.value);\n\n            extendFlat(tobj, {\n                prefix: prefix,\n                suffix: suffix,\n                endAnchor: true,\n                xy: gridline.xy(0),\n                dxy: gridline.dxy(0, 0),\n                axis: gridline.axis,\n                length: gridline.crossAxis.length,\n                font: gridline.axis.tickfont,\n                isFirst: i === 0,\n                isLast: i === gridlines.length - 1\n            });\n\n            labels.push(tobj);\n        }\n\n        if(['end', 'both'].indexOf(axis.showticklabels) !== -1) {\n            tobj = Axes.tickText(axis, gridline.value);\n\n            extendFlat(tobj, {\n                endAnchor: false,\n                xy: gridline.xy(gridline.crossLength - 1),\n                dxy: gridline.dxy(gridline.crossLength - 2, 1),\n                axis: gridline.axis,\n                length: gridline.crossAxis.length,\n                font: gridline.axis.tickfont,\n                isFirst: i === 0,\n                isLast: i === gridlines.length - 1\n            });\n\n            labels.push(tobj);\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}