{"ast":null,"code":"'use strict';\n\nvar isArrayOrTypedArray = require('../../lib').isArrayOrTypedArray;\n/*\n * Construct a 2D array of cheater values given a, b, and a slope.\n * If\n */\n\n\nmodule.exports = function (a, b, cheaterslope) {\n  var i, j, ascal, bscal, aval, bval;\n  var data = [];\n  var na = isArrayOrTypedArray(a) ? a.length : a;\n  var nb = isArrayOrTypedArray(b) ? b.length : b;\n  var adata = isArrayOrTypedArray(a) ? a : null;\n  var bdata = isArrayOrTypedArray(b) ? b : null; // If we're using data, scale it so that for data that's just barely\n  // not evenly spaced, the switch to value-based indexing is continuous.\n  // This means evenly spaced data should look the same whether value\n  // or index cheatertype.\n\n  if (adata) {\n    ascal = (adata.length - 1) / (adata[adata.length - 1] - adata[0]) / (na - 1);\n  }\n\n  if (bdata) {\n    bscal = (bdata.length - 1) / (bdata[bdata.length - 1] - bdata[0]) / (nb - 1);\n  }\n\n  var xval;\n  var xmin = Infinity;\n  var xmax = -Infinity;\n\n  for (j = 0; j < nb; j++) {\n    data[j] = [];\n    bval = bdata ? (bdata[j] - bdata[0]) * bscal : j / (nb - 1);\n\n    for (i = 0; i < na; i++) {\n      aval = adata ? (adata[i] - adata[0]) * ascal : i / (na - 1);\n      xval = aval - bval * cheaterslope;\n      xmin = Math.min(xval, xmin);\n      xmax = Math.max(xval, xmax);\n      data[j][i] = xval;\n    }\n  } // Normalize cheater values to the 0-1 range. This comes into play when you have\n  // multiple cheater plots. After careful consideration, it seems better if cheater\n  // values are normalized to a consistent range. Otherwise one cheater affects the\n  // layout of other cheaters on the same axis.\n\n\n  var slope = 1.0 / (xmax - xmin);\n  var offset = -xmin * slope;\n\n  for (j = 0; j < nb; j++) {\n    for (i = 0; i < na; i++) {\n      data[j][i] = slope * data[j][i] + offset;\n    }\n  }\n\n  return data;\n};","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/plotly.js/src/traces/carpet/cheater_basis.js"],"names":["isArrayOrTypedArray","require","module","exports","a","b","cheaterslope","i","j","ascal","bscal","aval","bval","data","na","length","nb","adata","bdata","xval","xmin","Infinity","xmax","Math","min","max","slope","offset"],"mappings":"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","sourcesContent":["'use strict';\n\nvar isArrayOrTypedArray = require('../../lib').isArrayOrTypedArray;\n\n/*\n * Construct a 2D array of cheater values given a, b, and a slope.\n * If\n */\nmodule.exports = function(a, b, cheaterslope) {\n    var i, j, ascal, bscal, aval, bval;\n    var data = [];\n\n    var na = isArrayOrTypedArray(a) ? a.length : a;\n    var nb = isArrayOrTypedArray(b) ? b.length : b;\n    var adata = isArrayOrTypedArray(a) ? a : null;\n    var bdata = isArrayOrTypedArray(b) ? b : null;\n\n    // If we're using data, scale it so that for data that's just barely\n    // not evenly spaced, the switch to value-based indexing is continuous.\n    // This means evenly spaced data should look the same whether value\n    // or index cheatertype.\n    if(adata) {\n        ascal = (adata.length - 1) / (adata[adata.length - 1] - adata[0]) / (na - 1);\n    }\n\n    if(bdata) {\n        bscal = (bdata.length - 1) / (bdata[bdata.length - 1] - bdata[0]) / (nb - 1);\n    }\n\n    var xval;\n    var xmin = Infinity;\n    var xmax = -Infinity;\n    for(j = 0; j < nb; j++) {\n        data[j] = [];\n        bval = bdata ? (bdata[j] - bdata[0]) * bscal : j / (nb - 1);\n        for(i = 0; i < na; i++) {\n            aval = adata ? (adata[i] - adata[0]) * ascal : i / (na - 1);\n            xval = aval - bval * cheaterslope;\n            xmin = Math.min(xval, xmin);\n            xmax = Math.max(xval, xmax);\n            data[j][i] = xval;\n        }\n    }\n\n    // Normalize cheater values to the 0-1 range. This comes into play when you have\n    // multiple cheater plots. After careful consideration, it seems better if cheater\n    // values are normalized to a consistent range. Otherwise one cheater affects the\n    // layout of other cheaters on the same axis.\n    var slope = 1.0 / (xmax - xmin);\n    var offset = -xmin * slope;\n    for(j = 0; j < nb; j++) {\n        for(i = 0; i < na; i++) {\n            data[j][i] = slope * data[j][i] + offset;\n        }\n    }\n\n    return data;\n};\n"]},"metadata":{},"sourceType":"script"}