{"ast":null,"code":"'use strict';\n\nvar scatterPlot = require('../scatter/plot');\n\nvar BADNUM = require('../../constants/numerical').BADNUM;\n\nmodule.exports = function plot(gd, subplot, moduleCalcData) {\n  var mlayer = subplot.layers.frontplot.select('g.scatterlayer');\n  var plotinfo = {\n    xaxis: subplot.xaxis,\n    yaxis: subplot.yaxis,\n    plot: subplot.framework,\n    layerClipId: subplot._hasClipOnAxisFalse ? subplot.clipIds.forTraces : null\n  };\n  var radialAxis = subplot.radialAxis;\n  var angularAxis = subplot.angularAxis; // convert:\n  // 'c' (r,theta) -> 'geometric' (r,theta) -> (x,y)\n\n  for (var i = 0; i < moduleCalcData.length; i++) {\n    var cdi = moduleCalcData[i];\n\n    for (var j = 0; j < cdi.length; j++) {\n      var cd = cdi[j];\n      var r = cd.r;\n\n      if (r === BADNUM) {\n        cd.x = cd.y = BADNUM;\n      } else {\n        var rg = radialAxis.c2g(r);\n        var thetag = angularAxis.c2g(cd.theta);\n        cd.x = rg * Math.cos(thetag);\n        cd.y = rg * Math.sin(thetag);\n      }\n    }\n  }\n\n  scatterPlot(gd, plotinfo, moduleCalcData, mlayer);\n};","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/plotly.js/src/traces/scatterpolar/plot.js"],"names":["scatterPlot","require","BADNUM","module","exports","plot","gd","subplot","moduleCalcData","mlayer","layers","frontplot","select","plotinfo","xaxis","yaxis","framework","layerClipId","_hasClipOnAxisFalse","clipIds","forTraces","radialAxis","angularAxis","i","length","cdi","j","cd","r","x","y","rg","c2g","thetag","theta","Math","cos","sin"],"mappings":"AAAA;;AAEA,IAAIA,WAAW,GAAGC,OAAO,CAAC,iBAAD,CAAzB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,2BAAD,CAAP,CAAqCC,MAAlD;;AAEAC,MAAM,CAACC,OAAP,GAAiB,SAASC,IAAT,CAAcC,EAAd,EAAkBC,OAAlB,EAA2BC,cAA3B,EAA2C;AACxD,MAAIC,MAAM,GAAGF,OAAO,CAACG,MAAR,CAAeC,SAAf,CAAyBC,MAAzB,CAAgC,gBAAhC,CAAb;AAEA,MAAIC,QAAQ,GAAG;AACXC,IAAAA,KAAK,EAAEP,OAAO,CAACO,KADJ;AAEXC,IAAAA,KAAK,EAAER,OAAO,CAACQ,KAFJ;AAGXV,IAAAA,IAAI,EAAEE,OAAO,CAACS,SAHH;AAIXC,IAAAA,WAAW,EAAEV,OAAO,CAACW,mBAAR,GAA8BX,OAAO,CAACY,OAAR,CAAgBC,SAA9C,GAA0D;AAJ5D,GAAf;AAOA,MAAIC,UAAU,GAAGd,OAAO,CAACc,UAAzB;AACA,MAAIC,WAAW,GAAGf,OAAO,CAACe,WAA1B,CAXwD,CAaxD;AACA;;AACA,OAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGf,cAAc,CAACgB,MAAlC,EAA0CD,CAAC,EAA3C,EAA+C;AAC3C,QAAIE,GAAG,GAAGjB,cAAc,CAACe,CAAD,CAAxB;;AAEA,SAAI,IAAIG,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGD,GAAG,CAACD,MAAvB,EAA+BE,CAAC,EAAhC,EAAoC;AAChC,UAAIC,EAAE,GAAGF,GAAG,CAACC,CAAD,CAAZ;AACA,UAAIE,CAAC,GAAGD,EAAE,CAACC,CAAX;;AAEA,UAAGA,CAAC,KAAK1B,MAAT,EAAiB;AACbyB,QAAAA,EAAE,CAACE,CAAH,GAAOF,EAAE,CAACG,CAAH,GAAO5B,MAAd;AACH,OAFD,MAEO;AACH,YAAI6B,EAAE,GAAGV,UAAU,CAACW,GAAX,CAAeJ,CAAf,CAAT;AACA,YAAIK,MAAM,GAAGX,WAAW,CAACU,GAAZ,CAAgBL,EAAE,CAACO,KAAnB,CAAb;AACAP,QAAAA,EAAE,CAACE,CAAH,GAAOE,EAAE,GAAGI,IAAI,CAACC,GAAL,CAASH,MAAT,CAAZ;AACAN,QAAAA,EAAE,CAACG,CAAH,GAAOC,EAAE,GAAGI,IAAI,CAACE,GAAL,CAASJ,MAAT,CAAZ;AACH;AACJ;AACJ;;AAEDjC,EAAAA,WAAW,CAACM,EAAD,EAAKO,QAAL,EAAeL,cAAf,EAA+BC,MAA/B,CAAX;AACH,CAlCD","sourcesContent":["'use strict';\n\nvar scatterPlot = require('../scatter/plot');\nvar BADNUM = require('../../constants/numerical').BADNUM;\n\nmodule.exports = function plot(gd, subplot, moduleCalcData) {\n    var mlayer = subplot.layers.frontplot.select('g.scatterlayer');\n\n    var plotinfo = {\n        xaxis: subplot.xaxis,\n        yaxis: subplot.yaxis,\n        plot: subplot.framework,\n        layerClipId: subplot._hasClipOnAxisFalse ? subplot.clipIds.forTraces : null\n    };\n\n    var radialAxis = subplot.radialAxis;\n    var angularAxis = subplot.angularAxis;\n\n    // convert:\n    // 'c' (r,theta) -> 'geometric' (r,theta) -> (x,y)\n    for(var i = 0; i < moduleCalcData.length; i++) {\n        var cdi = moduleCalcData[i];\n\n        for(var j = 0; j < cdi.length; j++) {\n            var cd = cdi[j];\n            var r = cd.r;\n\n            if(r === BADNUM) {\n                cd.x = cd.y = BADNUM;\n            } else {\n                var rg = radialAxis.c2g(r);\n                var thetag = angularAxis.c2g(cd.theta);\n                cd.x = rg * Math.cos(thetag);\n                cd.y = rg * Math.sin(thetag);\n            }\n        }\n    }\n\n    scatterPlot(gd, plotinfo, moduleCalcData, mlayer);\n};\n"]},"metadata":{},"sourceType":"script"}