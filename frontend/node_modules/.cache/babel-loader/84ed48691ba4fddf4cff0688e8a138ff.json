{"ast":null,"code":"'use strict';\n\nfunction full() {\n  function bruteForceRedFull(d, ax, vv, rs, re, rb, ri, bs, be, bb, bi) {\n    var es = 2 * d;\n\n    for (var i = rs, rp = es * rs; i < re; ++i, rp += es) {\n      var x0 = rb[ax + rp],\n          x1 = rb[ax + rp + d],\n          xi = ri[i];\n\n      Q: for (var j = bs, bp = es * bs; j < be; ++j, bp += es) {\n        var y0 = bb[ax + bp],\n            y1 = bb[ax + bp + d],\n            yi = bi[j];\n        if (y1 < x0 || x1 < y0) continue;\n\n        for (var k = ax + 1; k < d; ++k) {\n          var r0 = rb[k + rp],\n              r1 = rb[k + d + rp],\n              b0 = bb[k + bp],\n              b1 = bb[k + d + bp];\n          if (r1 < b0 || b1 < r0) continue Q;\n        }\n\n        var rv = vv(xi, yi);\n        if (rv !== void 0) return rv;\n      }\n    }\n  }\n\n  function bruteForceBlueFull(d, ax, vv, rs, re, rb, ri, bs, be, bb, bi) {\n    var es = 2 * d;\n\n    for (var j = bs, bp = es * bs; j < be; ++j, bp += es) {\n      var y0 = bb[ax + bp],\n          y1 = bb[ax + bp + d],\n          yi = bi[j];\n\n      Q: for (var i = rs, rp = es * rs; i < re; ++i, rp += es) {\n        var x0 = rb[ax + rp],\n            x1 = rb[ax + rp + d],\n            xi = ri[i];\n        if (y1 < x0 || x1 < y0) continue;\n\n        for (var k = ax + 1; k < d; ++k) {\n          var r0 = rb[k + rp],\n              r1 = rb[k + d + rp],\n              b0 = bb[k + bp],\n              b1 = bb[k + d + bp];\n          if (r1 < b0 || b1 < r0) continue Q;\n        }\n\n        var rv = vv(xi, yi);\n        if (rv !== void 0) return rv;\n      }\n    }\n  }\n\n  function bruteForceFull(d, ax, vv, rs, re, rb, ri, bs, be, bb, bi) {\n    if (re - rs > be - bs) {\n      return bruteForceRedFull(d, ax, vv, rs, re, rb, ri, bs, be, bb, bi);\n    } else {\n      return bruteForceBlueFull(d, ax, vv, rs, re, rb, ri, bs, be, bb, bi);\n    }\n  }\n\n  return bruteForceFull;\n}\n\nfunction partial() {\n  function bruteForceRedFlip(d, ax, vv, rs, re, rb, ri, bs, be, bb, bi) {\n    var es = 2 * d;\n\n    for (var i = rs, rp = es * rs; i < re; ++i, rp += es) {\n      var x0 = rb[ax + rp],\n          x1 = rb[ax + rp + d],\n          xi = ri[i];\n\n      Q: for (var j = bs, bp = es * bs; j < be; ++j, bp += es) {\n        var y0 = bb[ax + bp],\n            yi = bi[j];\n        if (y0 <= x0 || x1 < y0) continue;\n\n        for (var k = ax + 1; k < d; ++k) {\n          var r0 = rb[k + rp],\n              r1 = rb[k + d + rp],\n              b0 = bb[k + bp],\n              b1 = bb[k + d + bp];\n          if (r1 < b0 || b1 < r0) continue Q;\n        }\n\n        var rv = vv(yi, xi);\n        if (rv !== void 0) return rv;\n      }\n    }\n  }\n\n  function bruteForceRed(d, ax, vv, rs, re, rb, ri, bs, be, bb, bi) {\n    var es = 2 * d;\n\n    for (var i = rs, rp = es * rs; i < re; ++i, rp += es) {\n      var x0 = rb[ax + rp],\n          x1 = rb[ax + rp + d],\n          xi = ri[i];\n\n      Q: for (var j = bs, bp = es * bs; j < be; ++j, bp += es) {\n        var y0 = bb[ax + bp],\n            yi = bi[j];\n        if (y0 < x0 || x1 < y0) continue;\n\n        for (var k = ax + 1; k < d; ++k) {\n          var r0 = rb[k + rp],\n              r1 = rb[k + d + rp],\n              b0 = bb[k + bp],\n              b1 = bb[k + d + bp];\n          if (r1 < b0 || b1 < r0) continue Q;\n        }\n\n        var rv = vv(xi, yi);\n        if (rv !== void 0) return rv;\n      }\n    }\n  }\n\n  function bruteForceBlueFlip(d, ax, vv, rs, re, rb, ri, bs, be, bb, bi) {\n    var es = 2 * d;\n\n    for (var j = bs, bp = es * bs; j < be; ++j, bp += es) {\n      var y0 = bb[ax + bp],\n          yi = bi[j];\n\n      Q: for (var i = rs, rp = es * rs; i < re; ++i, rp += es) {\n        var x0 = rb[ax + rp],\n            x1 = rb[ax + rp + d],\n            xi = ri[i];\n        if (y0 <= x0 || x1 < y0) continue;\n\n        for (var k = ax + 1; k < d; ++k) {\n          var r0 = rb[k + rp],\n              r1 = rb[k + d + rp],\n              b0 = bb[k + bp],\n              b1 = bb[k + d + bp];\n          if (r1 < b0 || b1 < r0) continue Q;\n        }\n\n        var rv = vv(yi, xi);\n        if (rv !== void 0) return rv;\n      }\n    }\n  }\n\n  function bruteForceBlue(d, ax, vv, rs, re, rb, ri, bs, be, bb, bi) {\n    var es = 2 * d;\n\n    for (var j = bs, bp = es * bs; j < be; ++j, bp += es) {\n      var y0 = bb[ax + bp],\n          yi = bi[j];\n\n      Q: for (var i = rs, rp = es * rs; i < re; ++i, rp += es) {\n        var x0 = rb[ax + rp],\n            x1 = rb[ax + rp + d],\n            xi = ri[i];\n        if (y0 < x0 || x1 < y0) continue;\n\n        for (var k = ax + 1; k < d; ++k) {\n          var r0 = rb[k + rp],\n              r1 = rb[k + d + rp],\n              b0 = bb[k + bp],\n              b1 = bb[k + d + bp];\n          if (r1 < b0 || b1 < r0) continue Q;\n        }\n\n        var rv = vv(xi, yi);\n        if (rv !== void 0) return rv;\n      }\n    }\n  }\n\n  function bruteForcePartial(d, ax, vv, fp, rs, re, rb, ri, bs, be, bb, bi) {\n    if (re - rs > be - bs) {\n      if (fp) {\n        return bruteForceRedFlip(d, ax, vv, rs, re, rb, ri, bs, be, bb, bi);\n      } else {\n        return bruteForceRed(d, ax, vv, rs, re, rb, ri, bs, be, bb, bi);\n      }\n    } else {\n      if (fp) {\n        return bruteForceBlueFlip(d, ax, vv, rs, re, rb, ri, bs, be, bb, bi);\n      } else {\n        return bruteForceBlue(d, ax, vv, rs, re, rb, ri, bs, be, bb, bi);\n      }\n    }\n  }\n\n  return bruteForcePartial;\n}\n\nfunction bruteForcePlanner(isFull) {\n  return isFull ? full() : partial();\n}\n\nexports.partial = bruteForcePlanner(false);\nexports.full = bruteForcePlanner(true);","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/box-intersect/lib/brute.js"],"names":["full","bruteForceRedFull","d","ax","vv","rs","re","rb","ri","bs","be","bb","bi","es","i","rp","x0","x1","xi","Q","j","bp","y0","y1","yi","k","r0","r1","b0","b1","rv","bruteForceBlueFull","bruteForceFull","partial","bruteForceRedFlip","bruteForceRed","bruteForceBlueFlip","bruteForceBlue","bruteForcePartial","fp","bruteForcePlanner","isFull","exports"],"mappings":"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","sourcesContent":["'use strict'\r\n\r\nfunction full() {\r\n  function bruteForceRedFull(d, ax, vv, rs, re, rb, ri, bs, be, bb, bi) {\r\n    var es = 2 * d\r\n    for (var i = rs, rp = es * rs; i < re; ++i, rp += es) {\r\n      var x0 = rb[ax + rp], x1 = rb[ax + rp + d], xi = ri[i]\r\n      Q: for (var j = bs, bp = es * bs; j < be; ++j, bp += es) {\r\n        var y0 = bb[ax + bp], y1 = bb[ax + bp + d], yi = bi[j]\r\n        if (y1 < x0 || x1 < y0) continue\r\n        for (var k = ax + 1; k < d; ++k) {\r\n          var r0 = rb[k + rp], r1 = rb[k + d + rp], b0 = bb[k + bp], b1 = bb[k + d + bp]\r\n          if (r1 < b0 || b1 < r0) continue Q\r\n        }\r\n        var rv = vv(xi, yi)\r\n        if (rv !== void 0) return rv\r\n      }\r\n    }\r\n  }\r\n  function bruteForceBlueFull(d, ax, vv, rs, re, rb, ri, bs, be, bb, bi) {\r\n    var es = 2 * d\r\n    for (var j = bs, bp = es * bs; j < be; ++j, bp += es) {\r\n      var y0 = bb[ax + bp], y1 = bb[ax + bp + d], yi = bi[j]\r\n      Q: for (var i = rs, rp = es * rs; i < re; ++i, rp += es) {\r\n        var x0 = rb[ax + rp], x1 = rb[ax + rp + d], xi = ri[i]\r\n        if (y1 < x0 || x1 < y0) continue\r\n        for (var k = ax + 1; k < d; ++k) {\r\n          var r0 = rb[k + rp], r1 = rb[k + d + rp], b0 = bb[k + bp], b1 = bb[k + d + bp]\r\n          if (r1 < b0 || b1 < r0) continue Q\r\n        }\r\n        var rv = vv(xi, yi)\r\n        if (rv !== void 0) return rv\r\n      }\r\n    }\r\n  }\r\n  function bruteForceFull(d, ax, vv, rs, re, rb, ri, bs, be, bb, bi) {\r\n    if (re - rs > be - bs) {\r\n      return bruteForceRedFull(d, ax, vv, rs, re, rb, ri, bs, be, bb, bi)\r\n    }\r\n    else {\r\n      return bruteForceBlueFull(d, ax, vv, rs, re, rb, ri, bs, be, bb, bi)\r\n    }\r\n  }\r\n  return bruteForceFull\r\n}\r\n\r\nfunction partial() {\r\n  function bruteForceRedFlip(d, ax, vv, rs, re, rb, ri, bs, be, bb, bi) {\r\n    var es = 2 * d\r\n    for (var i = rs, rp = es * rs; i < re; ++i, rp += es) {\r\n      var x0 = rb[ax + rp], x1 = rb[ax + rp + d], xi = ri[i]\r\n      Q: for (var j = bs, bp = es * bs; j < be; ++j, bp += es) {\r\n        var y0 = bb[ax + bp], yi = bi[j]\r\n        if (y0 <= x0 || x1 < y0) continue\r\n        for (var k = ax + 1; k < d; ++k) {\r\n          var r0 = rb[k + rp], r1 = rb[k + d + rp], b0 = bb[k + bp], b1 = bb[k + d + bp]\r\n          if (r1 < b0 || b1 < r0) continue Q\r\n        }\r\n        var rv = vv(yi, xi)\r\n        if (rv !== void 0) return rv\r\n      }\r\n    }\r\n  }\r\n  function bruteForceRed(d, ax, vv, rs, re, rb, ri, bs, be, bb, bi) {\r\n    var es = 2 * d\r\n    for (var i = rs, rp = es * rs; i < re; ++i, rp += es) {\r\n      var x0 = rb[ax + rp], x1 = rb[ax + rp + d], xi = ri[i]\r\n      Q: for (var j = bs, bp = es * bs; j < be; ++j, bp += es) {\r\n        var y0 = bb[ax + bp], yi = bi[j]\r\n        if (y0 < x0 || x1 < y0) continue\r\n        for (var k = ax + 1; k < d; ++k) {\r\n          var r0 = rb[k + rp], r1 = rb[k + d + rp], b0 = bb[k + bp], b1 = bb[k + d + bp]\r\n          if (r1 < b0 || b1 < r0) continue Q\r\n        }\r\n        var rv = vv(xi, yi)\r\n        if (rv !== void 0) return rv\r\n      }\r\n    }\r\n  }\r\n  function bruteForceBlueFlip(d, ax, vv, rs, re, rb, ri, bs, be, bb, bi) {\r\n    var es = 2 * d\r\n    for (var j = bs, bp = es * bs; j < be; ++j, bp += es) {\r\n      var y0 = bb[ax + bp], yi = bi[j]\r\n      Q: for (var i = rs, rp = es * rs; i < re; ++i, rp += es) {\r\n        var x0 = rb[ax + rp], x1 = rb[ax + rp + d], xi = ri[i]\r\n        if (y0 <= x0 || x1 < y0) continue\r\n        for (var k = ax + 1; k < d; ++k) {\r\n          var r0 = rb[k + rp], r1 = rb[k + d + rp], b0 = bb[k + bp], b1 = bb[k + d + bp]\r\n          if (r1 < b0 || b1 < r0) continue Q\r\n        }\r\n        var rv = vv(yi, xi)\r\n        if (rv !== void 0) return rv\r\n      }\r\n    }\r\n  }\r\n  function bruteForceBlue(d, ax, vv, rs, re, rb, ri, bs, be, bb, bi) {\r\n    var es = 2 * d\r\n    for (var j = bs, bp = es * bs; j < be; ++j, bp += es) {\r\n      var y0 = bb[ax + bp], yi = bi[j]\r\n      Q: for (var i = rs, rp = es * rs; i < re; ++i, rp += es) {\r\n        var x0 = rb[ax + rp], x1 = rb[ax + rp + d], xi = ri[i]\r\n        if (y0 < x0 || x1 < y0) continue\r\n        for (var k = ax + 1; k < d; ++k) {\r\n          var r0 = rb[k + rp], r1 = rb[k + d + rp], b0 = bb[k + bp], b1 = bb[k + d + bp]\r\n          if (r1 < b0 || b1 < r0) continue Q\r\n        }\r\n        var rv = vv(xi, yi)\r\n        if (rv !== void 0) return rv\r\n      }\r\n    }\r\n  }\r\n  function bruteForcePartial(d, ax, vv, fp, rs, re, rb, ri, bs, be, bb, bi) {\r\n    if (re - rs > be - bs) {\r\n      if (fp) {\r\n        return bruteForceRedFlip(d, ax, vv, rs, re, rb, ri, bs, be, bb, bi)\r\n      }\r\n      else {\r\n        return bruteForceRed(d, ax, vv, rs, re, rb, ri, bs, be, bb, bi)\r\n      }\r\n    }\r\n    else {\r\n      if (fp) {\r\n        return bruteForceBlueFlip(d, ax, vv, rs, re, rb, ri, bs, be, bb, bi)\r\n      }\r\n      else {\r\n        return bruteForceBlue(d, ax, vv, rs, re, rb, ri, bs, be, bb, bi)\r\n      }\r\n    }\r\n  }\r\n  return bruteForcePartial\r\n}\r\n\r\nfunction bruteForcePlanner(isFull) {\r\n  return isFull ? full() : partial()\r\n\r\n}\r\n\r\nexports.partial = bruteForcePlanner(false)\r\nexports.full    = bruteForcePlanner(true)"]},"metadata":{},"sourceType":"script"}