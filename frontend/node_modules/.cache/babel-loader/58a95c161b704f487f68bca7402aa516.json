{"ast":null,"code":"'use strict';\n\nvar getSubplotCalcData = require('../../plots/get_data').getSubplotCalcData;\n\nvar counterRegex = require('../../lib').counterRegex;\n\nvar createGeo = require('./geo');\n\nvar GEO = 'geo';\nvar counter = counterRegex(GEO);\nvar attributes = {};\nattributes[GEO] = {\n  valType: 'subplotid',\n  dflt: GEO,\n  editType: 'calc',\n  description: ['Sets a reference between this trace\\'s geospatial coordinates and', 'a geographic map.', 'If *geo* (the default value), the geospatial coordinates refer to', '`layout.geo`.', 'If *geo2*, the geospatial coordinates refer to `layout.geo2`,', 'and so on.'].join(' ')\n};\n\nfunction plotGeo(gd) {\n  var fullLayout = gd._fullLayout;\n  var calcData = gd.calcdata;\n  var geoIds = fullLayout._subplots[GEO];\n\n  for (var i = 0; i < geoIds.length; i++) {\n    var geoId = geoIds[i];\n    var geoCalcData = getSubplotCalcData(calcData, GEO, geoId);\n    var geoLayout = fullLayout[geoId];\n    var geo = geoLayout._subplot;\n\n    if (!geo) {\n      geo = createGeo({\n        id: geoId,\n        graphDiv: gd,\n        container: fullLayout._geolayer.node(),\n        topojsonURL: gd._context.topojsonURL,\n        staticPlot: gd._context.staticPlot\n      });\n      fullLayout[geoId]._subplot = geo;\n    }\n\n    geo.plot(geoCalcData, fullLayout, gd._promises);\n  }\n}\n\nfunction clean(newFullData, newFullLayout, oldFullData, oldFullLayout) {\n  var oldGeoKeys = oldFullLayout._subplots[GEO] || [];\n\n  for (var i = 0; i < oldGeoKeys.length; i++) {\n    var oldGeoKey = oldGeoKeys[i];\n    var oldGeo = oldFullLayout[oldGeoKey]._subplot;\n\n    if (!newFullLayout[oldGeoKey] && !!oldGeo) {\n      oldGeo.framework.remove();\n      oldGeo.clipDef.remove();\n    }\n  }\n}\n\nfunction updateFx(gd) {\n  var fullLayout = gd._fullLayout;\n  var subplotIds = fullLayout._subplots[GEO];\n\n  for (var i = 0; i < subplotIds.length; i++) {\n    var subplotLayout = fullLayout[subplotIds[i]];\n    var subplotObj = subplotLayout._subplot;\n    subplotObj.updateFx(fullLayout, subplotLayout);\n  }\n}\n\nmodule.exports = {\n  attr: GEO,\n  name: GEO,\n  idRoot: GEO,\n  idRegex: counter,\n  attrRegex: counter,\n  attributes: attributes,\n  layoutAttributes: require('./layout_attributes'),\n  supplyLayoutDefaults: require('./layout_defaults'),\n  plot: plotGeo,\n  updateFx: updateFx,\n  clean: clean\n};","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/plotly.js/src/plots/geo/index.js"],"names":["getSubplotCalcData","require","counterRegex","createGeo","GEO","counter","attributes","valType","dflt","editType","description","join","plotGeo","gd","fullLayout","_fullLayout","calcData","calcdata","geoIds","_subplots","i","length","geoId","geoCalcData","geoLayout","geo","_subplot","id","graphDiv","container","_geolayer","node","topojsonURL","_context","staticPlot","plot","_promises","clean","newFullData","newFullLayout","oldFullData","oldFullLayout","oldGeoKeys","oldGeoKey","oldGeo","framework","remove","clipDef","updateFx","subplotIds","subplotLayout","subplotObj","module","exports","attr","name","idRoot","idRegex","attrRegex","layoutAttributes","supplyLayoutDefaults"],"mappings":"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","sourcesContent":["'use strict';\n\nvar getSubplotCalcData = require('../../plots/get_data').getSubplotCalcData;\nvar counterRegex = require('../../lib').counterRegex;\n\nvar createGeo = require('./geo');\n\nvar GEO = 'geo';\nvar counter = counterRegex(GEO);\n\nvar attributes = {};\nattributes[GEO] = {\n    valType: 'subplotid',\n    dflt: GEO,\n    editType: 'calc',\n    description: [\n        'Sets a reference between this trace\\'s geospatial coordinates and',\n        'a geographic map.',\n        'If *geo* (the default value), the geospatial coordinates refer to',\n        '`layout.geo`.',\n        'If *geo2*, the geospatial coordinates refer to `layout.geo2`,',\n        'and so on.'\n    ].join(' ')\n};\n\nfunction plotGeo(gd) {\n    var fullLayout = gd._fullLayout;\n    var calcData = gd.calcdata;\n    var geoIds = fullLayout._subplots[GEO];\n\n    for(var i = 0; i < geoIds.length; i++) {\n        var geoId = geoIds[i];\n        var geoCalcData = getSubplotCalcData(calcData, GEO, geoId);\n        var geoLayout = fullLayout[geoId];\n        var geo = geoLayout._subplot;\n\n        if(!geo) {\n            geo = createGeo({\n                id: geoId,\n                graphDiv: gd,\n                container: fullLayout._geolayer.node(),\n                topojsonURL: gd._context.topojsonURL,\n                staticPlot: gd._context.staticPlot\n            });\n\n            fullLayout[geoId]._subplot = geo;\n        }\n\n        geo.plot(geoCalcData, fullLayout, gd._promises);\n    }\n}\n\nfunction clean(newFullData, newFullLayout, oldFullData, oldFullLayout) {\n    var oldGeoKeys = oldFullLayout._subplots[GEO] || [];\n\n    for(var i = 0; i < oldGeoKeys.length; i++) {\n        var oldGeoKey = oldGeoKeys[i];\n        var oldGeo = oldFullLayout[oldGeoKey]._subplot;\n\n        if(!newFullLayout[oldGeoKey] && !!oldGeo) {\n            oldGeo.framework.remove();\n            oldGeo.clipDef.remove();\n        }\n    }\n}\n\nfunction updateFx(gd) {\n    var fullLayout = gd._fullLayout;\n    var subplotIds = fullLayout._subplots[GEO];\n\n    for(var i = 0; i < subplotIds.length; i++) {\n        var subplotLayout = fullLayout[subplotIds[i]];\n        var subplotObj = subplotLayout._subplot;\n        subplotObj.updateFx(fullLayout, subplotLayout);\n    }\n}\n\nmodule.exports = {\n    attr: GEO,\n    name: GEO,\n    idRoot: GEO,\n    idRegex: counter,\n    attrRegex: counter,\n    attributes: attributes,\n    layoutAttributes: require('./layout_attributes'),\n    supplyLayoutDefaults: require('./layout_defaults'),\n    plot: plotGeo,\n    updateFx: updateFx,\n    clean: clean\n};\n"]},"metadata":{},"sourceType":"script"}