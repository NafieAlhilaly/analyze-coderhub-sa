{"ast":null,"code":"'use strict';\n\nvar isPlainObject = require('./is_plain_object.js');\n\nvar isArray = Array.isArray;\n\nfunction primitivesLoopSplice(source, target) {\n  var i, value;\n\n  for (i = 0; i < source.length; i++) {\n    value = source[i];\n\n    if (value !== null && typeof value === 'object') {\n      return false;\n    }\n\n    if (value !== void 0) {\n      target[i] = value;\n    }\n  }\n\n  return true;\n}\n\nexports.extendFlat = function () {\n  return _extend(arguments, false, false, false);\n};\n\nexports.extendDeep = function () {\n  return _extend(arguments, true, false, false);\n};\n\nexports.extendDeepAll = function () {\n  return _extend(arguments, true, true, false);\n};\n\nexports.extendDeepNoArrays = function () {\n  return _extend(arguments, true, false, true);\n};\n/*\n * Inspired by https://github.com/justmoon/node-extend/blob/master/index.js\n * All credit to the jQuery authors for perfecting this amazing utility.\n *\n * API difference with jQuery version:\n * - No optional boolean (true -> deep extend) first argument,\n *   use `extendFlat` for first-level only extend and\n *   use `extendDeep` for a deep extend.\n *\n * Other differences with jQuery version:\n * - Uses a modern (and faster) isPlainObject routine.\n * - Expected to work with object {} and array [] arguments only.\n * - Does not check for circular structure.\n *   FYI: jQuery only does a check across one level.\n *   Warning: this might result in infinite loops.\n *\n */\n\n\nfunction _extend(inputs, isDeep, keepAllKeys, noArrayCopies) {\n  var target = inputs[0];\n  var length = inputs.length;\n  var input, key, src, copy, copyIsArray, clone, allPrimitives; // TODO does this do the right thing for typed arrays?\n\n  if (length === 2 && isArray(target) && isArray(inputs[1]) && target.length === 0) {\n    allPrimitives = primitivesLoopSplice(inputs[1], target);\n\n    if (allPrimitives) {\n      return target;\n    } else {\n      target.splice(0, target.length); // reset target and continue to next block\n    }\n  }\n\n  for (var i = 1; i < length; i++) {\n    input = inputs[i];\n\n    for (key in input) {\n      src = target[key];\n      copy = input[key];\n\n      if (noArrayCopies && isArray(copy)) {\n        // Stop early and just transfer the array if array copies are disallowed:\n        target[key] = copy;\n      } else if (isDeep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n        // recurse if we're merging plain objects or arrays\n        if (copyIsArray) {\n          copyIsArray = false;\n          clone = src && isArray(src) ? src : [];\n        } else {\n          clone = src && isPlainObject(src) ? src : {};\n        } // never move original objects, clone them\n\n\n        target[key] = _extend([clone, copy], isDeep, keepAllKeys, noArrayCopies);\n      } else if (typeof copy !== 'undefined' || keepAllKeys) {\n        // don't bring in undefined values, except for extendDeepAll\n        target[key] = copy;\n      }\n    }\n  }\n\n  return target;\n}","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/plotly.js/src/lib/extend.js"],"names":["isPlainObject","require","isArray","Array","primitivesLoopSplice","source","target","i","value","length","exports","extendFlat","_extend","arguments","extendDeep","extendDeepAll","extendDeepNoArrays","inputs","isDeep","keepAllKeys","noArrayCopies","input","key","src","copy","copyIsArray","clone","allPrimitives","splice"],"mappings":"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","sourcesContent":["'use strict';\n\nvar isPlainObject = require('./is_plain_object.js');\nvar isArray = Array.isArray;\n\nfunction primitivesLoopSplice(source, target) {\n    var i, value;\n    for(i = 0; i < source.length; i++) {\n        value = source[i];\n        if(value !== null && typeof(value) === 'object') {\n            return false;\n        }\n        if(value !== void(0)) {\n            target[i] = value;\n        }\n    }\n    return true;\n}\n\nexports.extendFlat = function() {\n    return _extend(arguments, false, false, false);\n};\n\nexports.extendDeep = function() {\n    return _extend(arguments, true, false, false);\n};\n\nexports.extendDeepAll = function() {\n    return _extend(arguments, true, true, false);\n};\n\nexports.extendDeepNoArrays = function() {\n    return _extend(arguments, true, false, true);\n};\n\n/*\n * Inspired by https://github.com/justmoon/node-extend/blob/master/index.js\n * All credit to the jQuery authors for perfecting this amazing utility.\n *\n * API difference with jQuery version:\n * - No optional boolean (true -> deep extend) first argument,\n *   use `extendFlat` for first-level only extend and\n *   use `extendDeep` for a deep extend.\n *\n * Other differences with jQuery version:\n * - Uses a modern (and faster) isPlainObject routine.\n * - Expected to work with object {} and array [] arguments only.\n * - Does not check for circular structure.\n *   FYI: jQuery only does a check across one level.\n *   Warning: this might result in infinite loops.\n *\n */\nfunction _extend(inputs, isDeep, keepAllKeys, noArrayCopies) {\n    var target = inputs[0];\n    var length = inputs.length;\n\n    var input, key, src, copy, copyIsArray, clone, allPrimitives;\n\n    // TODO does this do the right thing for typed arrays?\n\n    if(length === 2 && isArray(target) && isArray(inputs[1]) && target.length === 0) {\n        allPrimitives = primitivesLoopSplice(inputs[1], target);\n\n        if(allPrimitives) {\n            return target;\n        } else {\n            target.splice(0, target.length); // reset target and continue to next block\n        }\n    }\n\n    for(var i = 1; i < length; i++) {\n        input = inputs[i];\n\n        for(key in input) {\n            src = target[key];\n            copy = input[key];\n\n            if(noArrayCopies && isArray(copy)) {\n                // Stop early and just transfer the array if array copies are disallowed:\n\n                target[key] = copy;\n            } else if(isDeep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n                // recurse if we're merging plain objects or arrays\n\n                if(copyIsArray) {\n                    copyIsArray = false;\n                    clone = src && isArray(src) ? src : [];\n                } else {\n                    clone = src && isPlainObject(src) ? src : {};\n                }\n\n                // never move original objects, clone them\n                target[key] = _extend([clone, copy], isDeep, keepAllKeys, noArrayCopies);\n            } else if(typeof copy !== 'undefined' || keepAllKeys) {\n                // don't bring in undefined values, except for extendDeepAll\n\n                target[key] = copy;\n            }\n        }\n    }\n\n    return target;\n}\n"]},"metadata":{},"sourceType":"script"}