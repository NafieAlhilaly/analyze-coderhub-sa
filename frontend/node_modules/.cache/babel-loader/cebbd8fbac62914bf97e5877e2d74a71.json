{"ast":null,"code":"'use strict';\n\nvar isNumeric = require('fast-isnumeric');\n\nvar Lib = require('../../lib');\n\nvar hasColorbar = require('../colorbar/has_colorbar');\n\nvar colorbarDefaults = require('../colorbar/defaults');\n\nvar isValidScale = require('./scales').isValid;\n\nvar traceIs = require('../../registry').traceIs;\n\nfunction npMaybe(parentCont, prefix) {\n  var containerStr = prefix.slice(0, prefix.length - 1);\n  return prefix ? Lib.nestedProperty(parentCont, containerStr).get() || {} : parentCont;\n}\n/**\n * Colorscale / colorbar default handler\n *\n * @param {object} parentContIn : user (input) parent container (e.g. trace or layout coloraxis object)\n * @param {object} parentContOut : full parent container\n * @param {object} layout : (full) layout object\n * @param {fn} coerce : Lib.coerce wrapper\n * @param {object} opts :\n * - prefix {string} : attr string prefix to colorscale container from parent root\n * - cLetter {string} : 'c or 'z' color letter\n */\n\n\nmodule.exports = function colorScaleDefaults(parentContIn, parentContOut, layout, coerce, opts) {\n  var prefix = opts.prefix;\n  var cLetter = opts.cLetter;\n  var inTrace = ('_module' in parentContOut);\n  var containerIn = npMaybe(parentContIn, prefix);\n  var containerOut = npMaybe(parentContOut, prefix);\n  var template = npMaybe(parentContOut._template || {}, prefix) || {}; // colorScaleDefaults wrapper called if-ever we need to reset the colorscale\n  // attributes for containers that were linked to invalid color axes\n\n  var thisFn = function thisFn() {\n    delete parentContIn.coloraxis;\n    delete parentContOut.coloraxis;\n    return colorScaleDefaults(parentContIn, parentContOut, layout, coerce, opts);\n  };\n\n  if (inTrace) {\n    var colorAxes = layout._colorAxes || {};\n    var colorAx = coerce(prefix + 'coloraxis');\n\n    if (colorAx) {\n      var colorbarVisuals = traceIs(parentContOut, 'contour') && Lib.nestedProperty(parentContOut, 'contours.coloring').get() || 'heatmap';\n      var stash = colorAxes[colorAx];\n\n      if (stash) {\n        stash[2].push(thisFn);\n\n        if (stash[0] !== colorbarVisuals) {\n          stash[0] = false;\n          Lib.warn(['Ignoring coloraxis:', colorAx, 'setting', 'as it is linked to incompatible colorscales.'].join(' '));\n        }\n      } else {\n        // stash:\n        // - colorbar visual 'type'\n        // - colorbar options to help in Colorbar.draw\n        // - list of colorScaleDefaults wrapper functions\n        colorAxes[colorAx] = [colorbarVisuals, parentContOut, [thisFn]];\n      }\n\n      return;\n    }\n  }\n\n  var minIn = containerIn[cLetter + 'min'];\n  var maxIn = containerIn[cLetter + 'max'];\n  var validMinMax = isNumeric(minIn) && isNumeric(maxIn) && minIn < maxIn;\n  var auto = coerce(prefix + cLetter + 'auto', !validMinMax);\n\n  if (auto) {\n    coerce(prefix + cLetter + 'mid');\n  } else {\n    coerce(prefix + cLetter + 'min');\n    coerce(prefix + cLetter + 'max');\n  } // handles both the trace case (autocolorscale is false by default) and\n  // the marker and marker.line case (autocolorscale is true by default)\n\n\n  var sclIn = containerIn.colorscale;\n  var sclTemplate = template.colorscale;\n  var autoColorscaleDflt;\n  if (sclIn !== undefined) autoColorscaleDflt = !isValidScale(sclIn);\n  if (sclTemplate !== undefined) autoColorscaleDflt = !isValidScale(sclTemplate);\n  coerce(prefix + 'autocolorscale', autoColorscaleDflt);\n  coerce(prefix + 'colorscale');\n  coerce(prefix + 'reversescale');\n\n  if (prefix !== 'marker.line.') {\n    // handles both the trace case where the dflt is listed in attributes and\n    // the marker case where the dflt is determined by hasColorbar\n    var showScaleDflt;\n    if (prefix && inTrace) showScaleDflt = hasColorbar(containerIn);\n    var showScale = coerce(prefix + 'showscale', showScaleDflt);\n\n    if (showScale) {\n      if (prefix && template) containerOut._template = template;\n      colorbarDefaults(containerIn, containerOut, layout);\n    }\n  }\n};","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/plotly.js/src/components/colorscale/defaults.js"],"names":["isNumeric","require","Lib","hasColorbar","colorbarDefaults","isValidScale","isValid","traceIs","npMaybe","parentCont","prefix","containerStr","slice","length","nestedProperty","get","module","exports","colorScaleDefaults","parentContIn","parentContOut","layout","coerce","opts","cLetter","inTrace","containerIn","containerOut","template","_template","thisFn","coloraxis","colorAxes","_colorAxes","colorAx","colorbarVisuals","stash","push","warn","join","minIn","maxIn","validMinMax","auto","sclIn","colorscale","sclTemplate","autoColorscaleDflt","undefined","showScaleDflt","showScale"],"mappings":"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","sourcesContent":["'use strict';\n\nvar isNumeric = require('fast-isnumeric');\n\nvar Lib = require('../../lib');\nvar hasColorbar = require('../colorbar/has_colorbar');\nvar colorbarDefaults = require('../colorbar/defaults');\n\nvar isValidScale = require('./scales').isValid;\nvar traceIs = require('../../registry').traceIs;\n\nfunction npMaybe(parentCont, prefix) {\n    var containerStr = prefix.slice(0, prefix.length - 1);\n    return prefix ?\n        Lib.nestedProperty(parentCont, containerStr).get() || {} :\n        parentCont;\n}\n\n/**\n * Colorscale / colorbar default handler\n *\n * @param {object} parentContIn : user (input) parent container (e.g. trace or layout coloraxis object)\n * @param {object} parentContOut : full parent container\n * @param {object} layout : (full) layout object\n * @param {fn} coerce : Lib.coerce wrapper\n * @param {object} opts :\n * - prefix {string} : attr string prefix to colorscale container from parent root\n * - cLetter {string} : 'c or 'z' color letter\n */\nmodule.exports = function colorScaleDefaults(parentContIn, parentContOut, layout, coerce, opts) {\n    var prefix = opts.prefix;\n    var cLetter = opts.cLetter;\n    var inTrace = '_module' in parentContOut;\n    var containerIn = npMaybe(parentContIn, prefix);\n    var containerOut = npMaybe(parentContOut, prefix);\n    var template = npMaybe(parentContOut._template || {}, prefix) || {};\n\n    // colorScaleDefaults wrapper called if-ever we need to reset the colorscale\n    // attributes for containers that were linked to invalid color axes\n    var thisFn = function() {\n        delete parentContIn.coloraxis;\n        delete parentContOut.coloraxis;\n        return colorScaleDefaults(parentContIn, parentContOut, layout, coerce, opts);\n    };\n\n    if(inTrace) {\n        var colorAxes = layout._colorAxes || {};\n        var colorAx = coerce(prefix + 'coloraxis');\n\n        if(colorAx) {\n            var colorbarVisuals = (\n                traceIs(parentContOut, 'contour') &&\n                Lib.nestedProperty(parentContOut, 'contours.coloring').get()\n            ) || 'heatmap';\n\n            var stash = colorAxes[colorAx];\n\n            if(stash) {\n                stash[2].push(thisFn);\n\n                if(stash[0] !== colorbarVisuals) {\n                    stash[0] = false;\n                    Lib.warn([\n                        'Ignoring coloraxis:', colorAx, 'setting',\n                        'as it is linked to incompatible colorscales.'\n                    ].join(' '));\n                }\n            } else {\n                // stash:\n                // - colorbar visual 'type'\n                // - colorbar options to help in Colorbar.draw\n                // - list of colorScaleDefaults wrapper functions\n                colorAxes[colorAx] = [colorbarVisuals, parentContOut, [thisFn]];\n            }\n            return;\n        }\n    }\n\n    var minIn = containerIn[cLetter + 'min'];\n    var maxIn = containerIn[cLetter + 'max'];\n    var validMinMax = isNumeric(minIn) && isNumeric(maxIn) && (minIn < maxIn);\n    var auto = coerce(prefix + cLetter + 'auto', !validMinMax);\n\n    if(auto) {\n        coerce(prefix + cLetter + 'mid');\n    } else {\n        coerce(prefix + cLetter + 'min');\n        coerce(prefix + cLetter + 'max');\n    }\n\n    // handles both the trace case (autocolorscale is false by default) and\n    // the marker and marker.line case (autocolorscale is true by default)\n    var sclIn = containerIn.colorscale;\n    var sclTemplate = template.colorscale;\n    var autoColorscaleDflt;\n    if(sclIn !== undefined) autoColorscaleDflt = !isValidScale(sclIn);\n    if(sclTemplate !== undefined) autoColorscaleDflt = !isValidScale(sclTemplate);\n    coerce(prefix + 'autocolorscale', autoColorscaleDflt);\n\n    coerce(prefix + 'colorscale');\n    coerce(prefix + 'reversescale');\n\n    if(prefix !== 'marker.line.') {\n        // handles both the trace case where the dflt is listed in attributes and\n        // the marker case where the dflt is determined by hasColorbar\n        var showScaleDflt;\n        if(prefix && inTrace) showScaleDflt = hasColorbar(containerIn);\n\n        var showScale = coerce(prefix + 'showscale', showScaleDflt);\n        if(showScale) {\n            if(prefix && template) containerOut._template = template;\n            colorbarDefaults(containerIn, containerOut, layout);\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}