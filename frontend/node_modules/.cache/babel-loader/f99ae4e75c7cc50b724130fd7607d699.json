{"ast":null,"code":"'use strict';\n\nvar isNumeric = require('fast-isnumeric');\n\nvar Lib = require('../../lib');\n\nvar BADNUM = require('../../constants/numerical').BADNUM;\n\nvar isArrayOrTypedArray = Lib.isArrayOrTypedArray;\nvar isDateTime = Lib.isDateTime;\nvar cleanNumber = Lib.cleanNumber;\nvar round = Math.round;\n\nmodule.exports = function autoType(array, calendar, opts) {\n  var a = array;\n  var noMultiCategory = opts.noMultiCategory;\n  if (isArrayOrTypedArray(a) && !a.length) return '-';\n  if (!noMultiCategory && multiCategory(a)) return 'multicategory';\n\n  if (noMultiCategory && Array.isArray(a[0])) {\n    // no need to flat typed arrays here\n    var b = [];\n\n    for (var i = 0; i < a.length; i++) {\n      if (isArrayOrTypedArray(a[i])) {\n        for (var j = 0; j < a[i].length; j++) {\n          b.push(a[i][j]);\n        }\n      }\n    }\n\n    a = b;\n  }\n\n  if (moreDates(a, calendar)) return 'date';\n  var convertNumeric = opts.autotypenumbers !== 'strict'; // compare against strict, just in case autotypenumbers was not provided in opts\n\n  if (category(a, convertNumeric)) return 'category';\n  if (linearOK(a, convertNumeric)) return 'linear';\n  return '-';\n};\n\nfunction hasTypeNumber(v, convertNumeric) {\n  return convertNumeric ? isNumeric(v) : typeof v === 'number';\n} // is there at least one number in array? If not, we should leave\n// ax.type empty so it can be autoset later\n\n\nfunction linearOK(a, convertNumeric) {\n  var len = a.length;\n\n  for (var i = 0; i < len; i++) {\n    if (hasTypeNumber(a[i], convertNumeric)) return true;\n  }\n\n  return false;\n} // does the array a have mostly dates rather than numbers?\n// note: some values can be neither (such as blanks, text)\n// 2- or 4-digit integers can be both, so require twice as many\n// dates as non-dates, to exclude cases with mostly 2 & 4 digit\n// numbers and a few dates\n// as with categories, consider DISTINCT values only.\n\n\nfunction moreDates(a, calendar) {\n  var len = a.length;\n  var inc = getIncrement(len);\n  var dats = 0;\n  var nums = 0;\n  var seen = {};\n\n  for (var f = 0; f < len; f += inc) {\n    var i = round(f);\n    var ai = a[i];\n    var stri = String(ai);\n    if (seen[stri]) continue;\n    seen[stri] = 1;\n    if (isDateTime(ai, calendar)) dats++;\n    if (isNumeric(ai)) nums++;\n  }\n\n  return dats > nums * 2;\n} // return increment to test at most 1000 points, evenly spaced\n\n\nfunction getIncrement(len) {\n  return Math.max(1, (len - 1) / 1000);\n} // are the (x,y)-values in gd.data mostly text?\n// require twice as many DISTINCT categories as distinct numbers\n\n\nfunction category(a, convertNumeric) {\n  var len = a.length;\n  var inc = getIncrement(len);\n  var nums = 0;\n  var cats = 0;\n  var seen = {};\n\n  for (var f = 0; f < len; f += inc) {\n    var i = round(f);\n    var ai = a[i];\n    var stri = String(ai);\n    if (seen[stri]) continue;\n    seen[stri] = 1;\n    var t = typeof ai;\n    if (t === 'boolean') cats++;else if (convertNumeric ? cleanNumber(ai) !== BADNUM : t === 'number') nums++;else if (t === 'string') cats++;\n  }\n\n  return cats > nums * 2;\n} // very-loose requirements for multicategory,\n// trace modules that should never auto-type to multicategory\n// should be declared with 'noMultiCategory'\n\n\nfunction multiCategory(a) {\n  return isArrayOrTypedArray(a[0]) && isArrayOrTypedArray(a[1]);\n}","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/plotly.js/src/plots/cartesian/axis_autotype.js"],"names":["isNumeric","require","Lib","BADNUM","isArrayOrTypedArray","isDateTime","cleanNumber","round","Math","module","exports","autoType","array","calendar","opts","a","noMultiCategory","length","multiCategory","Array","isArray","b","i","j","push","moreDates","convertNumeric","autotypenumbers","category","linearOK","hasTypeNumber","v","len","inc","getIncrement","dats","nums","seen","f","ai","stri","String","max","cats","t"],"mappings":"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","sourcesContent":["'use strict';\n\nvar isNumeric = require('fast-isnumeric');\n\nvar Lib = require('../../lib');\nvar BADNUM = require('../../constants/numerical').BADNUM;\n\nvar isArrayOrTypedArray = Lib.isArrayOrTypedArray;\nvar isDateTime = Lib.isDateTime;\nvar cleanNumber = Lib.cleanNumber;\nvar round = Math.round;\n\nmodule.exports = function autoType(array, calendar, opts) {\n    var a = array;\n\n    var noMultiCategory = opts.noMultiCategory;\n    if(isArrayOrTypedArray(a) && !a.length) return '-';\n    if(!noMultiCategory && multiCategory(a)) return 'multicategory';\n    if(noMultiCategory && Array.isArray(a[0])) { // no need to flat typed arrays here\n        var b = [];\n        for(var i = 0; i < a.length; i++) {\n            if(isArrayOrTypedArray(a[i])) {\n                for(var j = 0; j < a[i].length; j++) {\n                    b.push(a[i][j]);\n                }\n            }\n        }\n        a = b;\n    }\n\n    if(moreDates(a, calendar)) return 'date';\n\n    var convertNumeric = opts.autotypenumbers !== 'strict'; // compare against strict, just in case autotypenumbers was not provided in opts\n    if(category(a, convertNumeric)) return 'category';\n    if(linearOK(a, convertNumeric)) return 'linear';\n\n    return '-';\n};\n\nfunction hasTypeNumber(v, convertNumeric) {\n    return convertNumeric ? isNumeric(v) : typeof v === 'number';\n}\n\n// is there at least one number in array? If not, we should leave\n// ax.type empty so it can be autoset later\nfunction linearOK(a, convertNumeric) {\n    var len = a.length;\n\n    for(var i = 0; i < len; i++) {\n        if(hasTypeNumber(a[i], convertNumeric)) return true;\n    }\n\n    return false;\n}\n\n// does the array a have mostly dates rather than numbers?\n// note: some values can be neither (such as blanks, text)\n// 2- or 4-digit integers can be both, so require twice as many\n// dates as non-dates, to exclude cases with mostly 2 & 4 digit\n// numbers and a few dates\n// as with categories, consider DISTINCT values only.\nfunction moreDates(a, calendar) {\n    var len = a.length;\n\n    var inc = getIncrement(len);\n    var dats = 0;\n    var nums = 0;\n    var seen = {};\n\n    for(var f = 0; f < len; f += inc) {\n        var i = round(f);\n        var ai = a[i];\n        var stri = String(ai);\n        if(seen[stri]) continue;\n        seen[stri] = 1;\n\n        if(isDateTime(ai, calendar)) dats++;\n        if(isNumeric(ai)) nums++;\n    }\n\n    return dats > nums * 2;\n}\n\n// return increment to test at most 1000 points, evenly spaced\nfunction getIncrement(len) {\n    return Math.max(1, (len - 1) / 1000);\n}\n\n// are the (x,y)-values in gd.data mostly text?\n// require twice as many DISTINCT categories as distinct numbers\nfunction category(a, convertNumeric) {\n    var len = a.length;\n\n    var inc = getIncrement(len);\n    var nums = 0;\n    var cats = 0;\n    var seen = {};\n\n    for(var f = 0; f < len; f += inc) {\n        var i = round(f);\n        var ai = a[i];\n        var stri = String(ai);\n        if(seen[stri]) continue;\n        seen[stri] = 1;\n\n        var t = typeof ai;\n        if(t === 'boolean') cats++;\n        else if(convertNumeric ? cleanNumber(ai) !== BADNUM : t === 'number') nums++;\n        else if(t === 'string') cats++;\n    }\n\n    return cats > nums * 2;\n}\n\n// very-loose requirements for multicategory,\n// trace modules that should never auto-type to multicategory\n// should be declared with 'noMultiCategory'\nfunction multiCategory(a) {\n    return isArrayOrTypedArray(a[0]) && isArrayOrTypedArray(a[1]);\n}\n"]},"metadata":{},"sourceType":"script"}