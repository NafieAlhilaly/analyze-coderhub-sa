{"ast":null,"code":"/*\n * World Calendars\n * https://github.com/alexcjohnson/world-calendars\n *\n * Batch-converted from kbwood/calendars\n * Many thanks to Keith Wood and all of the contributors to the original project!\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/* http://keith-wood.name/calendars.html\n   Nanakshahi calendar for jQuery v2.0.2.\n   Written by Keith Wood (wood.keith{at}optusnet.com.au) January 2016.\n   Available under the MIT (http://keith-wood.name/licence.html) license. \n   Please attribute the author if you use it. */\nvar main = require('../main');\n\nvar assign = require('object-assign');\n/** Implementation of the Nanakshahi calendar.\n    See also <a href=\"https://en.wikipedia.org/wiki/Nanakshahi_calendar\">https://en.wikipedia.org/wiki/Nanakshahi_calendar</a>.\n    @class NanakshahiCalendar\n    @param [language=''] {string} The language code (default English) for localisation. */\n\n\nfunction NanakshahiCalendar(language) {\n  this.local = this.regionalOptions[language || ''] || this.regionalOptions[''];\n}\n\nNanakshahiCalendar.prototype = new main.baseCalendar();\nvar gregorian = main.instance('gregorian');\nassign(NanakshahiCalendar.prototype, {\n  /** The calendar name.\n      @memberof NanakshahiCalendar */\n  name: 'Nanakshahi',\n\n  /** Julian date of start of Nanakshahi epoch: 14 March 1469 CE.\n      @memberof NanakshahiCalendar */\n  jdEpoch: 2257673.5,\n\n  /** Days per month in a common year.\n      @memberof NanakshahiCalendar */\n  daysPerMonth: [31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 30, 30],\n\n  /** <code>true</code> if has a year zero, <code>false</code> if not.\n      @memberof NanakshahiCalendar */\n  hasYearZero: false,\n\n  /** The minimum month number.\n      @memberof NanakshahiCalendar */\n  minMonth: 1,\n\n  /** The first month in the year.\n      @memberof NanakshahiCalendar */\n  firstMonth: 1,\n\n  /** The minimum day number.\n      @memberof NanakshahiCalendar */\n  minDay: 1,\n\n  /** Localisations for the plugin.\n      Entries are objects indexed by the language code ('' being the default US/English).\n      Each object has the following attributes.\n      @memberof NanakshahiCalendar\n      @property name {string} The calendar name.\n      @property epochs {string[]} The epoch names.\n      @property monthNames {string[]} The long names of the months of the year.\n      @property monthNamesShort {string[]} The short names of the months of the year.\n      @property dayNames {string[]} The long names of the days of the week.\n      @property dayNamesShort {string[]} The short names of the days of the week.\n      @property dayNamesMin {string[]} The minimal names of the days of the week.\n      @property dateFormat {string} The date format for this calendar.\n              See the options on <a href=\"BaseCalendar.html#formatDate\"><code>formatDate</code></a> for details.\n      @property firstDay {number} The number of the first day of the week, starting at 0.\n      @property isRTL {number} <code>true</code> if this localisation reads right-to-left. */\n  regionalOptions: {\n    // Localisations\n    '': {\n      name: 'Nanakshahi',\n      epochs: ['BN', 'AN'],\n      monthNames: ['Chet', 'Vaisakh', 'Jeth', 'Harh', 'Sawan', 'Bhadon', 'Assu', 'Katak', 'Maghar', 'Poh', 'Magh', 'Phagun'],\n      monthNamesShort: ['Che', 'Vai', 'Jet', 'Har', 'Saw', 'Bha', 'Ass', 'Kat', 'Mgr', 'Poh', 'Mgh', 'Pha'],\n      dayNames: ['Somvaar', 'Mangalvar', 'Budhvaar', 'Veervaar', 'Shukarvaar', 'Sanicharvaar', 'Etvaar'],\n      dayNamesShort: ['Som', 'Mangal', 'Budh', 'Veer', 'Shukar', 'Sanichar', 'Et'],\n      dayNamesMin: ['So', 'Ma', 'Bu', 'Ve', 'Sh', 'Sa', 'Et'],\n      digits: null,\n      dateFormat: 'dd-mm-yyyy',\n      firstDay: 0,\n      isRTL: false\n    }\n  },\n\n  /** Determine whether this date is in a leap year.\n      @memberof NanakshahiCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @return {boolean} <code>true</code> if this is a leap year, <code>false</code> if not.\n      @throws Error if an invalid year or a different calendar used. */\n  leapYear: function leapYear(year) {\n    var date = this._validate(year, this.minMonth, this.minDay, main.local.invalidYear || main.regionalOptions[''].invalidYear);\n\n    return gregorian.leapYear(date.year() + (date.year() < 1 ? 1 : 0) + 1469);\n  },\n\n  /** Determine the week of the year for a date.\n      @memberof NanakshahiCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @param [month] {number} The month to examine.\n      @param [day] {number} The day to examine.\n      @return {number} The week of the year.\n      @throws Error if an invalid date or a different calendar used. */\n  weekOfYear: function weekOfYear(year, month, day) {\n    // Find Monday of this week starting on Monday\n    var checkDate = this.newDate(year, month, day);\n    checkDate.add(1 - (checkDate.dayOfWeek() || 7), 'd');\n    return Math.floor((checkDate.dayOfYear() - 1) / 7) + 1;\n  },\n\n  /** Retrieve the number of days in a month.\n      @memberof NanakshahiCalendar\n      @param year {CDate|number} The date to examine or the year of the month.\n      @param [month] {number} The month.\n      @return {number} The number of days in this month.\n      @throws Error if an invalid month/year or a different calendar used. */\n  daysInMonth: function daysInMonth(year, month) {\n    var date = this._validate(year, month, this.minDay, main.local.invalidMonth);\n\n    return this.daysPerMonth[date.month() - 1] + (date.month() === 12 && this.leapYear(date.year()) ? 1 : 0);\n  },\n\n  /** Determine whether this date is a week day.\n      @memberof NanakshahiCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @param [month] {number} The month to examine.\n      @param [day] {number} The day to examine.\n      @return {boolean} <code>true</code> if a week day, <code>false</code> if not.\n      @throws Error if an invalid date or a different calendar used. */\n  weekDay: function weekDay(year, month, day) {\n    return (this.dayOfWeek(year, month, day) || 7) < 6;\n  },\n\n  /** Retrieve the Julian date equivalent for this date,\n      i.e. days since January 1, 4713 BCE Greenwich noon.\n      @memberof NanakshahiCalendar\n      @param year {CDate|number} The date to convert or the year to convert.\n      @param [month] {number} The month to convert.\n      @param [day] {number} The day to convert.\n      @return {number} The equivalent Julian date.\n      @throws Error if an invalid date or a different calendar used. */\n  toJD: function toJD(year, month, day) {\n    var date = this._validate(year, month, day, main.local.invalidMonth);\n\n    var year = date.year();\n\n    if (year < 0) {\n      year++;\n    } // No year zero\n\n\n    var doy = date.day();\n\n    for (var m = 1; m < date.month(); m++) {\n      doy += this.daysPerMonth[m - 1];\n    }\n\n    return doy + gregorian.toJD(year + 1468, 3, 13);\n  },\n\n  /** Create a new date from a Julian date.\n      @memberof NanakshahiCalendar\n      @param jd {number} The Julian date to convert.\n      @return {CDate} The equivalent date. */\n  fromJD: function fromJD(jd) {\n    jd = Math.floor(jd + 0.5);\n    var year = Math.floor((jd - (this.jdEpoch - 1)) / 366);\n\n    while (jd >= this.toJD(year + 1, 1, 1)) {\n      year++;\n    }\n\n    var day = jd - Math.floor(this.toJD(year, 1, 1) + 0.5) + 1;\n    var month = 1;\n\n    while (day > this.daysInMonth(year, month)) {\n      day -= this.daysInMonth(year, month);\n      month++;\n    }\n\n    return this.newDate(year, month, day);\n  }\n}); // Nanakshahi calendar implementation\n\nmain.calendars.nanakshahi = NanakshahiCalendar;","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/world-calendars/dist/calendars/nanakshahi.js"],"names":["main","require","assign","NanakshahiCalendar","language","local","regionalOptions","prototype","baseCalendar","gregorian","instance","name","jdEpoch","daysPerMonth","hasYearZero","minMonth","firstMonth","minDay","epochs","monthNames","monthNamesShort","dayNames","dayNamesShort","dayNamesMin","digits","dateFormat","firstDay","isRTL","leapYear","year","date","_validate","invalidYear","weekOfYear","month","day","checkDate","newDate","add","dayOfWeek","Math","floor","dayOfYear","daysInMonth","invalidMonth","weekDay","toJD","doy","m","fromJD","jd","calendars","nanakshahi"],"mappings":"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","sourcesContent":["/*\n * World Calendars\n * https://github.com/alexcjohnson/world-calendars\n *\n * Batch-converted from kbwood/calendars\n * Many thanks to Keith Wood and all of the contributors to the original project!\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/* http://keith-wood.name/calendars.html\n   Nanakshahi calendar for jQuery v2.0.2.\n   Written by Keith Wood (wood.keith{at}optusnet.com.au) January 2016.\n   Available under the MIT (http://keith-wood.name/licence.html) license. \n   Please attribute the author if you use it. */\n\nvar main = require('../main');\nvar assign = require('object-assign');\n\n\n/** Implementation of the Nanakshahi calendar.\n    See also <a href=\"https://en.wikipedia.org/wiki/Nanakshahi_calendar\">https://en.wikipedia.org/wiki/Nanakshahi_calendar</a>.\n    @class NanakshahiCalendar\n    @param [language=''] {string} The language code (default English) for localisation. */\nfunction NanakshahiCalendar(language) {\n    this.local = this.regionalOptions[language || ''] || this.regionalOptions[''];\n}\n\nNanakshahiCalendar.prototype = new main.baseCalendar;\n\nvar gregorian = main.instance('gregorian');\n\nassign(NanakshahiCalendar.prototype, {\n    /** The calendar name.\n        @memberof NanakshahiCalendar */\n    name: 'Nanakshahi',\n    /** Julian date of start of Nanakshahi epoch: 14 March 1469 CE.\n        @memberof NanakshahiCalendar */\n    jdEpoch: 2257673.5,\n    /** Days per month in a common year.\n        @memberof NanakshahiCalendar */\n    daysPerMonth: [31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 30, 30],\n    /** <code>true</code> if has a year zero, <code>false</code> if not.\n        @memberof NanakshahiCalendar */\n    hasYearZero: false,\n    /** The minimum month number.\n        @memberof NanakshahiCalendar */\n    minMonth: 1,\n    /** The first month in the year.\n        @memberof NanakshahiCalendar */\n    firstMonth: 1,\n    /** The minimum day number.\n        @memberof NanakshahiCalendar */\n    minDay: 1,\n\n    /** Localisations for the plugin.\n        Entries are objects indexed by the language code ('' being the default US/English).\n        Each object has the following attributes.\n        @memberof NanakshahiCalendar\n        @property name {string} The calendar name.\n        @property epochs {string[]} The epoch names.\n        @property monthNames {string[]} The long names of the months of the year.\n        @property monthNamesShort {string[]} The short names of the months of the year.\n        @property dayNames {string[]} The long names of the days of the week.\n        @property dayNamesShort {string[]} The short names of the days of the week.\n        @property dayNamesMin {string[]} The minimal names of the days of the week.\n        @property dateFormat {string} The date format for this calendar.\n                See the options on <a href=\"BaseCalendar.html#formatDate\"><code>formatDate</code></a> for details.\n        @property firstDay {number} The number of the first day of the week, starting at 0.\n        @property isRTL {number} <code>true</code> if this localisation reads right-to-left. */\n    regionalOptions: { // Localisations\n        '': {\n            name: 'Nanakshahi',\n            epochs: ['BN', 'AN'],\n            monthNames: ['Chet', 'Vaisakh', 'Jeth', 'Harh', 'Sawan', 'Bhadon',\n            'Assu', 'Katak', 'Maghar', 'Poh', 'Magh', 'Phagun'],\n            monthNamesShort: ['Che', 'Vai', 'Jet', 'Har', 'Saw', 'Bha', 'Ass', 'Kat', 'Mgr', 'Poh', 'Mgh', 'Pha'],\n            dayNames: ['Somvaar', 'Mangalvar', 'Budhvaar', 'Veervaar', 'Shukarvaar', 'Sanicharvaar', 'Etvaar'],\n            dayNamesShort: ['Som', 'Mangal', 'Budh', 'Veer', 'Shukar', 'Sanichar', 'Et'],\n            dayNamesMin: ['So', 'Ma', 'Bu', 'Ve', 'Sh', 'Sa', 'Et'],\n            digits: null,\n            dateFormat: 'dd-mm-yyyy',\n            firstDay: 0,\n            isRTL: false\n        }\n    },\n\n    /** Determine whether this date is in a leap year.\n        @memberof NanakshahiCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @return {boolean} <code>true</code> if this is a leap year, <code>false</code> if not.\n        @throws Error if an invalid year or a different calendar used. */\n    leapYear: function(year) {\n        var date = this._validate(year, this.minMonth, this.minDay,\n            main.local.invalidYear || main.regionalOptions[''].invalidYear);\n        return gregorian.leapYear(date.year() + (date.year() < 1 ? 1 : 0) + 1469);\n    },\n\n    /** Determine the week of the year for a date.\n        @memberof NanakshahiCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @param [month] {number} The month to examine.\n        @param [day] {number} The day to examine.\n        @return {number} The week of the year.\n        @throws Error if an invalid date or a different calendar used. */\n    weekOfYear: function(year, month, day) {\n        // Find Monday of this week starting on Monday\n        var checkDate = this.newDate(year, month, day);\n        checkDate.add(1 - (checkDate.dayOfWeek() || 7), 'd');\n        return Math.floor((checkDate.dayOfYear() - 1) / 7) + 1;\n    },\n\n    /** Retrieve the number of days in a month.\n        @memberof NanakshahiCalendar\n        @param year {CDate|number} The date to examine or the year of the month.\n        @param [month] {number} The month.\n        @return {number} The number of days in this month.\n        @throws Error if an invalid month/year or a different calendar used. */\n    daysInMonth: function(year, month) {\n        var date = this._validate(year, month, this.minDay, main.local.invalidMonth);\n        return this.daysPerMonth[date.month() - 1] +\n            (date.month() === 12 && this.leapYear(date.year()) ? 1 : 0);\n    },\n\n    /** Determine whether this date is a week day.\n        @memberof NanakshahiCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @param [month] {number} The month to examine.\n        @param [day] {number} The day to examine.\n        @return {boolean} <code>true</code> if a week day, <code>false</code> if not.\n        @throws Error if an invalid date or a different calendar used. */\n    weekDay: function(year, month, day) {\n        return (this.dayOfWeek(year, month, day) || 7) < 6;\n    },\n\n    /** Retrieve the Julian date equivalent for this date,\n        i.e. days since January 1, 4713 BCE Greenwich noon.\n        @memberof NanakshahiCalendar\n        @param year {CDate|number} The date to convert or the year to convert.\n        @param [month] {number} The month to convert.\n        @param [day] {number} The day to convert.\n        @return {number} The equivalent Julian date.\n        @throws Error if an invalid date or a different calendar used. */\n    toJD: function(year, month, day) {\n        var date = this._validate(year, month, day, main.local.invalidMonth);\n        var year = date.year();\n        if (year < 0) { year++; } // No year zero\n        var doy = date.day();\n        for (var m = 1; m < date.month(); m++) {\n            doy += this.daysPerMonth[m - 1];\n        }\n        return doy + gregorian.toJD(year + 1468, 3, 13);\n    },\n\n    /** Create a new date from a Julian date.\n        @memberof NanakshahiCalendar\n        @param jd {number} The Julian date to convert.\n        @return {CDate} The equivalent date. */\n    fromJD: function(jd) {\n        jd = Math.floor(jd + 0.5);\n        var year = Math.floor((jd - (this.jdEpoch - 1)) / 366);\n        while (jd >= this.toJD(year + 1, 1, 1)) {\n            year++;\n        }\n        var day = jd - Math.floor(this.toJD(year, 1, 1) + 0.5) + 1;\n        var month = 1;\n        while (day > this.daysInMonth(year, month)) {\n            day -= this.daysInMonth(year, month);\n            month++;\n        }\n        return this.newDate(year, month, day);\n    }\n});\n\n// Nanakshahi calendar implementation\nmain.calendars.nanakshahi = NanakshahiCalendar;\n\n"]},"metadata":{},"sourceType":"script"}