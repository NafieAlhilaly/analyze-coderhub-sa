{"ast":null,"code":"'use strict';\n\nvar d3 = require('@plotly/d3');\n\nvar tinycolor = require('tinycolor2');\n\nvar Registry = require('../../registry');\n\nvar Lib = require('../../lib');\n\nvar makeColorScaleFuncFromTrace = require('../../components/colorscale').makeColorScaleFuncFromTrace;\n\nvar xmlnsNamespaces = require('../../constants/xmlns_namespaces');\n\nmodule.exports = function (gd, plotinfo, cdheatmaps, heatmapLayer) {\n  var xa = plotinfo.xaxis;\n  var ya = plotinfo.yaxis;\n  Lib.makeTraceGroups(heatmapLayer, cdheatmaps, 'hm').each(function (cd) {\n    var plotGroup = d3.select(this);\n    var cd0 = cd[0];\n    var trace = cd0.trace;\n    var z = cd0.z;\n    var x = cd0.x;\n    var y = cd0.y;\n    var xc = cd0.xCenter;\n    var yc = cd0.yCenter;\n    var isContour = Registry.traceIs(trace, 'contour');\n    var zsmooth = isContour ? 'best' : trace.zsmooth; // get z dims\n\n    var m = z.length;\n    var n = Lib.maxRowLength(z);\n    var xrev = false;\n    var yrev = false;\n    var left, right, temp, top, bottom, i; // TODO: if there are multiple overlapping categorical heatmaps,\n    // or if we allow category sorting, then the categories may not be\n    // sequential... may need to reorder and/or expand z\n    // Get edges of png in pixels (xa.c2p() maps axes coordinates to pixel coordinates)\n    // figure out if either axis is reversed (y is usually reversed, in pixel coords)\n    // also clip the image to maximum 50% outside the visible plot area\n    // bigger image lets you pan more naturally, but slows performance.\n    // TODO: use low-resolution images outside the visible plot for panning\n    // these while loops find the first and last brick bounds that are defined\n    // (in case of log of a negative)\n\n    i = 0;\n\n    while (left === undefined && i < x.length - 1) {\n      left = xa.c2p(x[i]);\n      i++;\n    }\n\n    i = x.length - 1;\n\n    while (right === undefined && i > 0) {\n      right = xa.c2p(x[i]);\n      i--;\n    }\n\n    if (right < left) {\n      temp = right;\n      right = left;\n      left = temp;\n      xrev = true;\n    }\n\n    i = 0;\n\n    while (top === undefined && i < y.length - 1) {\n      top = ya.c2p(y[i]);\n      i++;\n    }\n\n    i = y.length - 1;\n\n    while (bottom === undefined && i > 0) {\n      bottom = ya.c2p(y[i]);\n      i--;\n    }\n\n    if (bottom < top) {\n      temp = top;\n      top = bottom;\n      bottom = temp;\n      yrev = true;\n    } // for contours with heatmap fill, we generate the boundaries based on\n    // brick centers but then use the brick edges for drawing the bricks\n\n\n    if (isContour) {\n      xc = x;\n      yc = y;\n      x = cd0.xfill;\n      y = cd0.yfill;\n    } // make an image that goes at most half a screen off either side, to keep\n    // time reasonable when you zoom in. if zsmooth is true/fast, don't worry\n    // about this, because zooming doesn't increase number of pixels\n    // if zsmooth is best, don't include anything off screen because it takes too long\n\n\n    if (zsmooth !== 'fast') {\n      var extra = zsmooth === 'best' ? 0 : 0.5;\n      left = Math.max(-extra * xa._length, left);\n      right = Math.min((1 + extra) * xa._length, right);\n      top = Math.max(-extra * ya._length, top);\n      bottom = Math.min((1 + extra) * ya._length, bottom);\n    }\n\n    var imageWidth = Math.round(right - left);\n    var imageHeight = Math.round(bottom - top); // setup image nodes\n    // if image is entirely off-screen, don't even draw it\n\n    var isOffScreen = imageWidth <= 0 || imageHeight <= 0;\n\n    if (isOffScreen) {\n      var noImage = plotGroup.selectAll('image').data([]);\n      noImage.exit().remove();\n      return;\n    } // generate image data\n\n\n    var canvasW, canvasH;\n\n    if (zsmooth === 'fast') {\n      canvasW = n;\n      canvasH = m;\n    } else {\n      canvasW = imageWidth;\n      canvasH = imageHeight;\n    }\n\n    var canvas = document.createElement('canvas');\n    canvas.width = canvasW;\n    canvas.height = canvasH;\n    var context = canvas.getContext('2d');\n    var sclFunc = makeColorScaleFuncFromTrace(trace, {\n      noNumericCheck: true,\n      returnArray: true\n    }); // map brick boundaries to image pixels\n\n    var xpx, ypx;\n\n    if (zsmooth === 'fast') {\n      xpx = xrev ? function (index) {\n        return n - 1 - index;\n      } : Lib.identity;\n      ypx = yrev ? function (index) {\n        return m - 1 - index;\n      } : Lib.identity;\n    } else {\n      xpx = function (index) {\n        return Lib.constrain(Math.round(xa.c2p(x[index]) - left), 0, imageWidth);\n      };\n\n      ypx = function (index) {\n        return Lib.constrain(Math.round(ya.c2p(y[index]) - top), 0, imageHeight);\n      };\n    } // build the pixel map brick-by-brick\n    // cruise through z-matrix row-by-row\n    // build a brick at each z-matrix value\n\n\n    var yi = ypx(0);\n    var yb = [yi, yi];\n    var xbi = xrev ? 0 : 1;\n    var ybi = yrev ? 0 : 1; // for collecting an average luminosity of the heatmap\n\n    var pixcount = 0;\n    var rcount = 0;\n    var gcount = 0;\n    var bcount = 0;\n    var xb, j, xi, v, row, c;\n\n    function setColor(v, pixsize) {\n      if (v !== undefined) {\n        var c = sclFunc(v);\n        c[0] = Math.round(c[0]);\n        c[1] = Math.round(c[1]);\n        c[2] = Math.round(c[2]);\n        pixcount += pixsize;\n        rcount += c[0] * pixsize;\n        gcount += c[1] * pixsize;\n        bcount += c[2] * pixsize;\n        return c;\n      }\n\n      return [0, 0, 0, 0];\n    }\n\n    function interpColor(r0, r1, xinterp, yinterp) {\n      var z00 = r0[xinterp.bin0];\n      if (z00 === undefined) return setColor(undefined, 1);\n      var z01 = r0[xinterp.bin1];\n      var z10 = r1[xinterp.bin0];\n      var z11 = r1[xinterp.bin1];\n      var dx = z01 - z00 || 0;\n      var dy = z10 - z00 || 0;\n      var dxy; // the bilinear interpolation term needs different calculations\n      // for all the different permutations of missing data\n      // among the neighbors of the main point, to ensure\n      // continuity across brick boundaries.\n\n      if (z01 === undefined) {\n        if (z11 === undefined) dxy = 0;else if (z10 === undefined) dxy = 2 * (z11 - z00);else dxy = (2 * z11 - z10 - z00) * 2 / 3;\n      } else if (z11 === undefined) {\n        if (z10 === undefined) dxy = 0;else dxy = (2 * z00 - z01 - z10) * 2 / 3;\n      } else if (z10 === undefined) dxy = (2 * z11 - z01 - z00) * 2 / 3;else dxy = z11 + z00 - z01 - z10;\n\n      return setColor(z00 + xinterp.frac * dx + yinterp.frac * (dy + xinterp.frac * dxy));\n    }\n\n    if (zsmooth) {\n      // best or fast, works fastest with imageData\n      var pxIndex = 0;\n      var pixels;\n\n      try {\n        pixels = new Uint8Array(imageWidth * imageHeight * 4);\n      } catch (e) {\n        pixels = new Array(imageWidth * imageHeight * 4);\n      }\n\n      if (zsmooth === 'best') {\n        var xForPx = xc || x;\n        var yForPx = yc || y;\n        var xPixArray = new Array(xForPx.length);\n        var yPixArray = new Array(yForPx.length);\n        var xinterpArray = new Array(imageWidth);\n        var findInterpX = xc ? findInterpFromCenters : findInterp;\n        var findInterpY = yc ? findInterpFromCenters : findInterp;\n        var yinterp, r0, r1; // first make arrays of x and y pixel locations of brick boundaries\n\n        for (i = 0; i < xForPx.length; i++) xPixArray[i] = Math.round(xa.c2p(xForPx[i]) - left);\n\n        for (i = 0; i < yForPx.length; i++) yPixArray[i] = Math.round(ya.c2p(yForPx[i]) - top); // then make arrays of interpolations\n        // (bin0=closest, bin1=next, frac=fractional dist.)\n\n\n        for (i = 0; i < imageWidth; i++) xinterpArray[i] = findInterpX(i, xPixArray); // now do the interpolations and fill the png\n\n\n        for (j = 0; j < imageHeight; j++) {\n          yinterp = findInterpY(j, yPixArray);\n          r0 = z[yinterp.bin0];\n          r1 = z[yinterp.bin1];\n\n          for (i = 0; i < imageWidth; i++, pxIndex += 4) {\n            c = interpColor(r0, r1, xinterpArray[i], yinterp);\n            putColor(pixels, pxIndex, c);\n          }\n        }\n      } else {\n        // zsmooth = fast\n        for (j = 0; j < m; j++) {\n          row = z[j];\n          yb = ypx(j);\n\n          for (i = 0; i < imageWidth; i++) {\n            c = setColor(row[i], 1);\n            pxIndex = (yb * imageWidth + xpx(i)) * 4;\n            putColor(pixels, pxIndex, c);\n          }\n        }\n      }\n\n      var imageData = context.createImageData(imageWidth, imageHeight);\n\n      try {\n        imageData.data.set(pixels);\n      } catch (e) {\n        var pxArray = imageData.data;\n        var dlen = pxArray.length;\n\n        for (j = 0; j < dlen; j++) {\n          pxArray[j] = pixels[j];\n        }\n      }\n\n      context.putImageData(imageData, 0, 0);\n    } else {\n      // zsmooth = false -> filling potentially large bricks works fastest with fillRect\n      // gaps do not need to be exact integers, but if they *are* we will get\n      // cleaner edges by rounding at least one edge\n      var xGap = trace.xgap;\n      var yGap = trace.ygap;\n      var xGapLeft = Math.floor(xGap / 2);\n      var yGapTop = Math.floor(yGap / 2);\n\n      for (j = 0; j < m; j++) {\n        row = z[j];\n        yb.reverse();\n        yb[ybi] = ypx(j + 1);\n\n        if (yb[0] === yb[1] || yb[0] === undefined || yb[1] === undefined) {\n          continue;\n        }\n\n        xi = xpx(0);\n        xb = [xi, xi];\n\n        for (i = 0; i < n; i++) {\n          // build one color brick!\n          xb.reverse();\n          xb[xbi] = xpx(i + 1);\n\n          if (xb[0] === xb[1] || xb[0] === undefined || xb[1] === undefined) {\n            continue;\n          }\n\n          v = row[i];\n          c = setColor(v, (xb[1] - xb[0]) * (yb[1] - yb[0]));\n          context.fillStyle = 'rgba(' + c.join(',') + ')';\n          context.fillRect(xb[0] + xGapLeft, yb[0] + yGapTop, xb[1] - xb[0] - xGap, yb[1] - yb[0] - yGap);\n        }\n      }\n    }\n\n    rcount = Math.round(rcount / pixcount);\n    gcount = Math.round(gcount / pixcount);\n    bcount = Math.round(bcount / pixcount);\n    var avgColor = tinycolor('rgb(' + rcount + ',' + gcount + ',' + bcount + ')');\n    gd._hmpixcount = (gd._hmpixcount || 0) + pixcount;\n    gd._hmlumcount = (gd._hmlumcount || 0) + pixcount * avgColor.getLuminance();\n    var image3 = plotGroup.selectAll('image').data(cd);\n    image3.enter().append('svg:image').attr({\n      xmlns: xmlnsNamespaces.svg,\n      preserveAspectRatio: 'none'\n    });\n    image3.attr({\n      height: imageHeight,\n      width: imageWidth,\n      x: left,\n      y: top,\n      'xlink:href': canvas.toDataURL('image/png')\n    });\n  });\n}; // get interpolated bin value. Returns {bin0:closest bin, frac:fractional dist to next, bin1:next bin}\n\n\nfunction findInterp(pixel, pixArray) {\n  var maxBin = pixArray.length - 2;\n  var bin = Lib.constrain(Lib.findBin(pixel, pixArray), 0, maxBin);\n  var pix0 = pixArray[bin];\n  var pix1 = pixArray[bin + 1];\n  var interp = Lib.constrain(bin + (pixel - pix0) / (pix1 - pix0) - 0.5, 0, maxBin);\n  var bin0 = Math.round(interp);\n  var frac = Math.abs(interp - bin0);\n\n  if (!interp || interp === maxBin || !frac) {\n    return {\n      bin0: bin0,\n      bin1: bin0,\n      frac: 0\n    };\n  }\n\n  return {\n    bin0: bin0,\n    frac: frac,\n    bin1: Math.round(bin0 + frac / (interp - bin0))\n  };\n}\n\nfunction findInterpFromCenters(pixel, centerPixArray) {\n  var maxBin = centerPixArray.length - 1;\n  var bin = Lib.constrain(Lib.findBin(pixel, centerPixArray), 0, maxBin);\n  var pix0 = centerPixArray[bin];\n  var pix1 = centerPixArray[bin + 1];\n  var frac = (pixel - pix0) / (pix1 - pix0) || 0;\n\n  if (frac <= 0) {\n    return {\n      bin0: bin,\n      bin1: bin,\n      frac: 0\n    };\n  }\n\n  if (frac < 0.5) {\n    return {\n      bin0: bin,\n      bin1: bin + 1,\n      frac: frac\n    };\n  }\n\n  return {\n    bin0: bin + 1,\n    bin1: bin,\n    frac: 1 - frac\n  };\n}\n\nfunction putColor(pixels, pxIndex, c) {\n  pixels[pxIndex] = c[0];\n  pixels[pxIndex + 1] = c[1];\n  pixels[pxIndex + 2] = c[2];\n  pixels[pxIndex + 3] = Math.round(c[3] * 255);\n}","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/plotly.js/src/traces/heatmap/plot.js"],"names":["d3","require","tinycolor","Registry","Lib","makeColorScaleFuncFromTrace","xmlnsNamespaces","module","exports","gd","plotinfo","cdheatmaps","heatmapLayer","xa","xaxis","ya","yaxis","makeTraceGroups","each","cd","plotGroup","select","cd0","trace","z","x","y","xc","xCenter","yc","yCenter","isContour","traceIs","zsmooth","m","length","n","maxRowLength","xrev","yrev","left","right","temp","top","bottom","i","undefined","c2p","xfill","yfill","extra","Math","max","_length","min","imageWidth","round","imageHeight","isOffScreen","noImage","selectAll","data","exit","remove","canvasW","canvasH","canvas","document","createElement","width","height","context","getContext","sclFunc","noNumericCheck","returnArray","xpx","ypx","index","identity","constrain","yi","yb","xbi","ybi","pixcount","rcount","gcount","bcount","xb","j","xi","v","row","c","setColor","pixsize","interpColor","r0","r1","xinterp","yinterp","z00","bin0","z01","bin1","z10","z11","dx","dy","dxy","frac","pxIndex","pixels","Uint8Array","e","Array","xForPx","yForPx","xPixArray","yPixArray","xinterpArray","findInterpX","findInterpFromCenters","findInterp","findInterpY","putColor","imageData","createImageData","set","pxArray","dlen","putImageData","xGap","xgap","yGap","ygap","xGapLeft","floor","yGapTop","reverse","fillStyle","join","fillRect","avgColor","_hmpixcount","_hmlumcount","getLuminance","image3","enter","append","attr","xmlns","svg","preserveAspectRatio","toDataURL","pixel","pixArray","maxBin","bin","findBin","pix0","pix1","interp","abs","centerPixArray"],"mappings":"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","sourcesContent":["'use strict';\n\nvar d3 = require('@plotly/d3');\nvar tinycolor = require('tinycolor2');\n\nvar Registry = require('../../registry');\nvar Lib = require('../../lib');\nvar makeColorScaleFuncFromTrace = require('../../components/colorscale').makeColorScaleFuncFromTrace;\nvar xmlnsNamespaces = require('../../constants/xmlns_namespaces');\n\nmodule.exports = function(gd, plotinfo, cdheatmaps, heatmapLayer) {\n    var xa = plotinfo.xaxis;\n    var ya = plotinfo.yaxis;\n\n    Lib.makeTraceGroups(heatmapLayer, cdheatmaps, 'hm').each(function(cd) {\n        var plotGroup = d3.select(this);\n        var cd0 = cd[0];\n        var trace = cd0.trace;\n\n        var z = cd0.z;\n        var x = cd0.x;\n        var y = cd0.y;\n        var xc = cd0.xCenter;\n        var yc = cd0.yCenter;\n        var isContour = Registry.traceIs(trace, 'contour');\n        var zsmooth = isContour ? 'best' : trace.zsmooth;\n\n        // get z dims\n        var m = z.length;\n        var n = Lib.maxRowLength(z);\n        var xrev = false;\n        var yrev = false;\n\n        var left, right, temp, top, bottom, i;\n\n        // TODO: if there are multiple overlapping categorical heatmaps,\n        // or if we allow category sorting, then the categories may not be\n        // sequential... may need to reorder and/or expand z\n\n        // Get edges of png in pixels (xa.c2p() maps axes coordinates to pixel coordinates)\n        // figure out if either axis is reversed (y is usually reversed, in pixel coords)\n        // also clip the image to maximum 50% outside the visible plot area\n        // bigger image lets you pan more naturally, but slows performance.\n        // TODO: use low-resolution images outside the visible plot for panning\n        // these while loops find the first and last brick bounds that are defined\n        // (in case of log of a negative)\n        i = 0;\n        while(left === undefined && i < x.length - 1) {\n            left = xa.c2p(x[i]);\n            i++;\n        }\n        i = x.length - 1;\n        while(right === undefined && i > 0) {\n            right = xa.c2p(x[i]);\n            i--;\n        }\n\n        if(right < left) {\n            temp = right;\n            right = left;\n            left = temp;\n            xrev = true;\n        }\n\n        i = 0;\n        while(top === undefined && i < y.length - 1) {\n            top = ya.c2p(y[i]);\n            i++;\n        }\n        i = y.length - 1;\n        while(bottom === undefined && i > 0) {\n            bottom = ya.c2p(y[i]);\n            i--;\n        }\n\n        if(bottom < top) {\n            temp = top;\n            top = bottom;\n            bottom = temp;\n            yrev = true;\n        }\n\n        // for contours with heatmap fill, we generate the boundaries based on\n        // brick centers but then use the brick edges for drawing the bricks\n        if(isContour) {\n            xc = x;\n            yc = y;\n            x = cd0.xfill;\n            y = cd0.yfill;\n        }\n\n        // make an image that goes at most half a screen off either side, to keep\n        // time reasonable when you zoom in. if zsmooth is true/fast, don't worry\n        // about this, because zooming doesn't increase number of pixels\n        // if zsmooth is best, don't include anything off screen because it takes too long\n        if(zsmooth !== 'fast') {\n            var extra = zsmooth === 'best' ? 0 : 0.5;\n            left = Math.max(-extra * xa._length, left);\n            right = Math.min((1 + extra) * xa._length, right);\n            top = Math.max(-extra * ya._length, top);\n            bottom = Math.min((1 + extra) * ya._length, bottom);\n        }\n\n        var imageWidth = Math.round(right - left);\n        var imageHeight = Math.round(bottom - top);\n\n        // setup image nodes\n\n        // if image is entirely off-screen, don't even draw it\n        var isOffScreen = (imageWidth <= 0 || imageHeight <= 0);\n\n        if(isOffScreen) {\n            var noImage = plotGroup.selectAll('image').data([]);\n            noImage.exit().remove();\n            return;\n        }\n\n        // generate image data\n\n        var canvasW, canvasH;\n        if(zsmooth === 'fast') {\n            canvasW = n;\n            canvasH = m;\n        } else {\n            canvasW = imageWidth;\n            canvasH = imageHeight;\n        }\n\n        var canvas = document.createElement('canvas');\n        canvas.width = canvasW;\n        canvas.height = canvasH;\n        var context = canvas.getContext('2d');\n\n        var sclFunc = makeColorScaleFuncFromTrace(trace, {noNumericCheck: true, returnArray: true});\n\n        // map brick boundaries to image pixels\n        var xpx,\n            ypx;\n        if(zsmooth === 'fast') {\n            xpx = xrev ?\n                function(index) { return n - 1 - index; } :\n                Lib.identity;\n            ypx = yrev ?\n                function(index) { return m - 1 - index; } :\n                Lib.identity;\n        } else {\n            xpx = function(index) {\n                return Lib.constrain(Math.round(xa.c2p(x[index]) - left),\n                    0, imageWidth);\n            };\n            ypx = function(index) {\n                return Lib.constrain(Math.round(ya.c2p(y[index]) - top),\n                    0, imageHeight);\n            };\n        }\n\n        // build the pixel map brick-by-brick\n        // cruise through z-matrix row-by-row\n        // build a brick at each z-matrix value\n        var yi = ypx(0);\n        var yb = [yi, yi];\n        var xbi = xrev ? 0 : 1;\n        var ybi = yrev ? 0 : 1;\n        // for collecting an average luminosity of the heatmap\n        var pixcount = 0;\n        var rcount = 0;\n        var gcount = 0;\n        var bcount = 0;\n\n        var xb, j, xi, v, row, c;\n\n        function setColor(v, pixsize) {\n            if(v !== undefined) {\n                var c = sclFunc(v);\n                c[0] = Math.round(c[0]);\n                c[1] = Math.round(c[1]);\n                c[2] = Math.round(c[2]);\n\n                pixcount += pixsize;\n                rcount += c[0] * pixsize;\n                gcount += c[1] * pixsize;\n                bcount += c[2] * pixsize;\n                return c;\n            }\n            return [0, 0, 0, 0];\n        }\n\n        function interpColor(r0, r1, xinterp, yinterp) {\n            var z00 = r0[xinterp.bin0];\n            if(z00 === undefined) return setColor(undefined, 1);\n\n            var z01 = r0[xinterp.bin1];\n            var z10 = r1[xinterp.bin0];\n            var z11 = r1[xinterp.bin1];\n            var dx = (z01 - z00) || 0;\n            var dy = (z10 - z00) || 0;\n            var dxy;\n\n            // the bilinear interpolation term needs different calculations\n            // for all the different permutations of missing data\n            // among the neighbors of the main point, to ensure\n            // continuity across brick boundaries.\n            if(z01 === undefined) {\n                if(z11 === undefined) dxy = 0;\n                else if(z10 === undefined) dxy = 2 * (z11 - z00);\n                else dxy = (2 * z11 - z10 - z00) * 2 / 3;\n            } else if(z11 === undefined) {\n                if(z10 === undefined) dxy = 0;\n                else dxy = (2 * z00 - z01 - z10) * 2 / 3;\n            } else if(z10 === undefined) dxy = (2 * z11 - z01 - z00) * 2 / 3;\n            else dxy = (z11 + z00 - z01 - z10);\n\n            return setColor(z00 + xinterp.frac * dx + yinterp.frac * (dy + xinterp.frac * dxy));\n        }\n\n        if(zsmooth) { // best or fast, works fastest with imageData\n            var pxIndex = 0;\n            var pixels;\n\n            try {\n                pixels = new Uint8Array(imageWidth * imageHeight * 4);\n            } catch(e) {\n                pixels = new Array(imageWidth * imageHeight * 4);\n            }\n\n            if(zsmooth === 'best') {\n                var xForPx = xc || x;\n                var yForPx = yc || y;\n                var xPixArray = new Array(xForPx.length);\n                var yPixArray = new Array(yForPx.length);\n                var xinterpArray = new Array(imageWidth);\n                var findInterpX = xc ? findInterpFromCenters : findInterp;\n                var findInterpY = yc ? findInterpFromCenters : findInterp;\n                var yinterp, r0, r1;\n\n                // first make arrays of x and y pixel locations of brick boundaries\n                for(i = 0; i < xForPx.length; i++) xPixArray[i] = Math.round(xa.c2p(xForPx[i]) - left);\n                for(i = 0; i < yForPx.length; i++) yPixArray[i] = Math.round(ya.c2p(yForPx[i]) - top);\n\n                // then make arrays of interpolations\n                // (bin0=closest, bin1=next, frac=fractional dist.)\n                for(i = 0; i < imageWidth; i++) xinterpArray[i] = findInterpX(i, xPixArray);\n\n                // now do the interpolations and fill the png\n                for(j = 0; j < imageHeight; j++) {\n                    yinterp = findInterpY(j, yPixArray);\n                    r0 = z[yinterp.bin0];\n                    r1 = z[yinterp.bin1];\n                    for(i = 0; i < imageWidth; i++, pxIndex += 4) {\n                        c = interpColor(r0, r1, xinterpArray[i], yinterp);\n                        putColor(pixels, pxIndex, c);\n                    }\n                }\n            } else { // zsmooth = fast\n                for(j = 0; j < m; j++) {\n                    row = z[j];\n                    yb = ypx(j);\n                    for(i = 0; i < imageWidth; i++) {\n                        c = setColor(row[i], 1);\n                        pxIndex = (yb * imageWidth + xpx(i)) * 4;\n                        putColor(pixels, pxIndex, c);\n                    }\n                }\n            }\n\n            var imageData = context.createImageData(imageWidth, imageHeight);\n            try {\n                imageData.data.set(pixels);\n            } catch(e) {\n                var pxArray = imageData.data;\n                var dlen = pxArray.length;\n                for(j = 0; j < dlen; j ++) {\n                    pxArray[j] = pixels[j];\n                }\n            }\n\n            context.putImageData(imageData, 0, 0);\n        } else { // zsmooth = false -> filling potentially large bricks works fastest with fillRect\n            // gaps do not need to be exact integers, but if they *are* we will get\n            // cleaner edges by rounding at least one edge\n            var xGap = trace.xgap;\n            var yGap = trace.ygap;\n            var xGapLeft = Math.floor(xGap / 2);\n            var yGapTop = Math.floor(yGap / 2);\n\n            for(j = 0; j < m; j++) {\n                row = z[j];\n                yb.reverse();\n                yb[ybi] = ypx(j + 1);\n                if(yb[0] === yb[1] || yb[0] === undefined || yb[1] === undefined) {\n                    continue;\n                }\n                xi = xpx(0);\n                xb = [xi, xi];\n                for(i = 0; i < n; i++) {\n                    // build one color brick!\n                    xb.reverse();\n                    xb[xbi] = xpx(i + 1);\n                    if(xb[0] === xb[1] || xb[0] === undefined || xb[1] === undefined) {\n                        continue;\n                    }\n                    v = row[i];\n                    c = setColor(v, (xb[1] - xb[0]) * (yb[1] - yb[0]));\n                    context.fillStyle = 'rgba(' + c.join(',') + ')';\n\n                    context.fillRect(xb[0] + xGapLeft, yb[0] + yGapTop,\n                        xb[1] - xb[0] - xGap, yb[1] - yb[0] - yGap);\n                }\n            }\n        }\n\n        rcount = Math.round(rcount / pixcount);\n        gcount = Math.round(gcount / pixcount);\n        bcount = Math.round(bcount / pixcount);\n        var avgColor = tinycolor('rgb(' + rcount + ',' + gcount + ',' + bcount + ')');\n\n        gd._hmpixcount = (gd._hmpixcount||0) + pixcount;\n        gd._hmlumcount = (gd._hmlumcount||0) + pixcount * avgColor.getLuminance();\n\n        var image3 = plotGroup.selectAll('image')\n            .data(cd);\n\n        image3.enter().append('svg:image').attr({\n            xmlns: xmlnsNamespaces.svg,\n            preserveAspectRatio: 'none'\n        });\n\n        image3.attr({\n            height: imageHeight,\n            width: imageWidth,\n            x: left,\n            y: top,\n            'xlink:href': canvas.toDataURL('image/png')\n        });\n    });\n};\n\n// get interpolated bin value. Returns {bin0:closest bin, frac:fractional dist to next, bin1:next bin}\nfunction findInterp(pixel, pixArray) {\n    var maxBin = pixArray.length - 2;\n    var bin = Lib.constrain(Lib.findBin(pixel, pixArray), 0, maxBin);\n    var pix0 = pixArray[bin];\n    var pix1 = pixArray[bin + 1];\n    var interp = Lib.constrain(bin + (pixel - pix0) / (pix1 - pix0) - 0.5, 0, maxBin);\n    var bin0 = Math.round(interp);\n    var frac = Math.abs(interp - bin0);\n\n    if(!interp || interp === maxBin || !frac) {\n        return {\n            bin0: bin0,\n            bin1: bin0,\n            frac: 0\n        };\n    }\n    return {\n        bin0: bin0,\n        frac: frac,\n        bin1: Math.round(bin0 + frac / (interp - bin0))\n    };\n}\n\nfunction findInterpFromCenters(pixel, centerPixArray) {\n    var maxBin = centerPixArray.length - 1;\n    var bin = Lib.constrain(Lib.findBin(pixel, centerPixArray), 0, maxBin);\n    var pix0 = centerPixArray[bin];\n    var pix1 = centerPixArray[bin + 1];\n    var frac = ((pixel - pix0) / (pix1 - pix0)) || 0;\n    if(frac <= 0) {\n        return {\n            bin0: bin,\n            bin1: bin,\n            frac: 0\n        };\n    }\n    if(frac < 0.5) {\n        return {\n            bin0: bin,\n            bin1: bin + 1,\n            frac: frac\n        };\n    }\n    return {\n        bin0: bin + 1,\n        bin1: bin,\n        frac: 1 - frac\n    };\n}\n\nfunction putColor(pixels, pxIndex, c) {\n    pixels[pxIndex] = c[0];\n    pixels[pxIndex + 1] = c[1];\n    pixels[pxIndex + 2] = c[2];\n    pixels[pxIndex + 3] = Math.round(c[3] * 255);\n}\n"]},"metadata":{},"sourceType":"script"}