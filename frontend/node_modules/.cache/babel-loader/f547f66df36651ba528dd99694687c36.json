{"ast":null,"code":"'use strict';\n\nconst getBounds = require('array-bounds');\n\nconst rgba = require('color-normalize');\n\nconst updateDiff = require('update-diff');\n\nconst pick = require('pick-by-alias');\n\nconst extend = require('object-assign');\n\nconst flatten = require('flatten-vertex-data');\n\nconst {\n  float32,\n  fract32\n} = require('to-float32');\n\nmodule.exports = Error2D;\nconst WEIGHTS = [//direction, lineWidth shift, capSize shift\n// x-error bar\n[1, 0, 0, 1, 0, 0], [1, 0, 0, -1, 0, 0], [-1, 0, 0, -1, 0, 0], [-1, 0, 0, -1, 0, 0], [-1, 0, 0, 1, 0, 0], [1, 0, 0, 1, 0, 0], // x-error right cap\n[1, 0, -1, 0, 0, 1], [1, 0, -1, 0, 0, -1], [1, 0, 1, 0, 0, -1], [1, 0, 1, 0, 0, -1], [1, 0, 1, 0, 0, 1], [1, 0, -1, 0, 0, 1], // x-error left cap\n[-1, 0, -1, 0, 0, 1], [-1, 0, -1, 0, 0, -1], [-1, 0, 1, 0, 0, -1], [-1, 0, 1, 0, 0, -1], [-1, 0, 1, 0, 0, 1], [-1, 0, -1, 0, 0, 1], // y-error bar\n[0, 1, 1, 0, 0, 0], [0, 1, -1, 0, 0, 0], [0, -1, -1, 0, 0, 0], [0, -1, -1, 0, 0, 0], [0, 1, 1, 0, 0, 0], [0, -1, 1, 0, 0, 0], // y-error top cap\n[0, 1, 0, -1, 1, 0], [0, 1, 0, -1, -1, 0], [0, 1, 0, 1, -1, 0], [0, 1, 0, 1, 1, 0], [0, 1, 0, -1, 1, 0], [0, 1, 0, 1, -1, 0], // y-error bottom cap\n[0, -1, 0, -1, 1, 0], [0, -1, 0, -1, -1, 0], [0, -1, 0, 1, -1, 0], [0, -1, 0, 1, 1, 0], [0, -1, 0, -1, 1, 0], [0, -1, 0, 1, -1, 0]];\n\nfunction Error2D(regl, options) {\n  if (typeof regl === 'function') {\n    if (!options) options = {};\n    options.regl = regl;\n  } else {\n    options = regl;\n  }\n\n  if (options.length) options.positions = options;\n  regl = options.regl;\n\n  if (!regl.hasExtension('ANGLE_instanced_arrays')) {\n    throw Error('regl-error2d: `ANGLE_instanced_arrays` extension should be enabled');\n  } // persistent variables\n\n\n  let gl = regl._gl,\n      drawErrors,\n      positionBuffer,\n      positionFractBuffer,\n      colorBuffer,\n      errorBuffer,\n      meshBuffer,\n      defaults = {\n    color: 'black',\n    capSize: 5,\n    lineWidth: 1,\n    opacity: 1,\n    viewport: null,\n    range: null,\n    offset: 0,\n    count: 0,\n    bounds: null,\n    positions: [],\n    errors: []\n  },\n      groups = []; //color per-point\n\n  colorBuffer = regl.buffer({\n    usage: 'dynamic',\n    type: 'uint8',\n    data: new Uint8Array(0)\n  }); //xy-position per-point\n\n  positionBuffer = regl.buffer({\n    usage: 'dynamic',\n    type: 'float',\n    data: new Uint8Array(0)\n  }); //xy-position float32-fraction\n\n  positionFractBuffer = regl.buffer({\n    usage: 'dynamic',\n    type: 'float',\n    data: new Uint8Array(0)\n  }); //4 errors per-point\n\n  errorBuffer = regl.buffer({\n    usage: 'dynamic',\n    type: 'float',\n    data: new Uint8Array(0)\n  }); //error bar mesh\n\n  meshBuffer = regl.buffer({\n    usage: 'static',\n    type: 'float',\n    data: WEIGHTS\n  });\n  update(options); //drawing method\n\n  drawErrors = regl({\n    vert: `\n\t\tprecision highp float;\n\n\t\tattribute vec2 position, positionFract;\n\t\tattribute vec4 error;\n\t\tattribute vec4 color;\n\n\t\tattribute vec2 direction, lineOffset, capOffset;\n\n\t\tuniform vec4 viewport;\n\t\tuniform float lineWidth, capSize;\n\t\tuniform vec2 scale, scaleFract, translate, translateFract;\n\n\t\tvarying vec4 fragColor;\n\n\t\tvoid main() {\n\t\t\tfragColor = color / 255.;\n\n\t\t\tvec2 pixelOffset = lineWidth * lineOffset + (capSize + lineWidth) * capOffset;\n\n\t\t\tvec2 dxy = -step(.5, direction.xy) * error.xz + step(direction.xy, vec2(-.5)) * error.yw;\n\n\t\t\tvec2 position = position + dxy;\n\n\t\t\tvec2 pos = (position + translate) * scale\n\t\t\t\t+ (positionFract + translateFract) * scale\n\t\t\t\t+ (position + translate) * scaleFract\n\t\t\t\t+ (positionFract + translateFract) * scaleFract;\n\n\t\t\tpos += pixelOffset / viewport.zw;\n\n\t\t\tgl_Position = vec4(pos * 2. - 1., 0, 1);\n\t\t}\n\t\t`,\n    frag: `\n\t\tprecision highp float;\n\n\t\tvarying vec4 fragColor;\n\n\t\tuniform float opacity;\n\n\t\tvoid main() {\n\t\t\tgl_FragColor = fragColor;\n\t\t\tgl_FragColor.a *= opacity;\n\t\t}\n\t\t`,\n    uniforms: {\n      range: regl.prop('range'),\n      lineWidth: regl.prop('lineWidth'),\n      capSize: regl.prop('capSize'),\n      opacity: regl.prop('opacity'),\n      scale: regl.prop('scale'),\n      translate: regl.prop('translate'),\n      scaleFract: regl.prop('scaleFract'),\n      translateFract: regl.prop('translateFract'),\n      viewport: (ctx, prop) => [prop.viewport.x, prop.viewport.y, ctx.viewportWidth, ctx.viewportHeight]\n    },\n    attributes: {\n      //dynamic attributes\n      color: {\n        buffer: colorBuffer,\n        offset: (ctx, prop) => prop.offset * 4,\n        divisor: 1\n      },\n      position: {\n        buffer: positionBuffer,\n        offset: (ctx, prop) => prop.offset * 8,\n        divisor: 1\n      },\n      positionFract: {\n        buffer: positionFractBuffer,\n        offset: (ctx, prop) => prop.offset * 8,\n        divisor: 1\n      },\n      error: {\n        buffer: errorBuffer,\n        offset: (ctx, prop) => prop.offset * 16,\n        divisor: 1\n      },\n      //static attributes\n      direction: {\n        buffer: meshBuffer,\n        stride: 24,\n        offset: 0\n      },\n      lineOffset: {\n        buffer: meshBuffer,\n        stride: 24,\n        offset: 8\n      },\n      capOffset: {\n        buffer: meshBuffer,\n        stride: 24,\n        offset: 16\n      }\n    },\n    primitive: 'triangles',\n    blend: {\n      enable: true,\n      color: [0, 0, 0, 0],\n      equation: {\n        rgb: 'add',\n        alpha: 'add'\n      },\n      func: {\n        srcRGB: 'src alpha',\n        dstRGB: 'one minus src alpha',\n        srcAlpha: 'one minus dst alpha',\n        dstAlpha: 'one'\n      }\n    },\n    depth: {\n      enable: false\n    },\n    scissor: {\n      enable: true,\n      box: regl.prop('viewport')\n    },\n    viewport: regl.prop('viewport'),\n    stencil: false,\n    instances: regl.prop('count'),\n    count: WEIGHTS.length\n  }); //expose API\n\n  extend(error2d, {\n    update: update,\n    draw: draw,\n    destroy: destroy,\n    regl: regl,\n    gl: gl,\n    canvas: gl.canvas,\n    groups: groups\n  });\n  return error2d;\n\n  function error2d(opts) {\n    //update\n    if (opts) {\n      update(opts);\n    } //destroy\n    else if (opts === null) {\n      destroy();\n    }\n\n    draw();\n  } //main draw method\n\n\n  function draw(options) {\n    if (typeof options === 'number') return drawGroup(options); //make options a batch\n\n    if (options && !Array.isArray(options)) options = [options];\n\n    regl._refresh(); //render multiple polylines via regl batch\n\n\n    groups.forEach((s, i) => {\n      if (!s) return;\n\n      if (options) {\n        if (!options[i]) s.draw = false;else s.draw = true;\n      } //ignore draw flag for one pass\n\n\n      if (!s.draw) {\n        s.draw = true;\n        return;\n      }\n\n      drawGroup(i);\n    });\n  } //draw single error group by id\n\n\n  function drawGroup(s) {\n    if (typeof s === 'number') s = groups[s];\n    if (s == null) return;\n    if (!(s && s.count && s.color && s.opacity && s.positions && s.positions.length > 1)) return;\n    s.scaleRatio = [s.scale[0] * s.viewport.width, s.scale[1] * s.viewport.height];\n    drawErrors(s);\n    if (s.after) s.after(s);\n  }\n\n  function update(options) {\n    if (!options) return; //direct points argument\n\n    if (options.length != null) {\n      if (typeof options[0] === 'number') options = [{\n        positions: options\n      }];\n    } //make options a batch\n    else if (!Array.isArray(options)) options = [options]; //global count of points\n\n\n    let pointCount = 0,\n        errorCount = 0;\n    error2d.groups = groups = options.map((options, i) => {\n      let group = groups[i];\n      if (!options) return group;else if (typeof options === 'function') options = {\n        after: options\n      };else if (typeof options[0] === 'number') options = {\n        positions: options\n      }; //copy options to avoid mutation & handle aliases\n\n      options = pick(options, {\n        color: 'color colors fill',\n        capSize: 'capSize cap capsize cap-size',\n        lineWidth: 'lineWidth line-width width line thickness',\n        opacity: 'opacity alpha',\n        range: 'range dataBox',\n        viewport: 'viewport viewBox',\n        errors: 'errors error',\n        positions: 'positions position data points'\n      });\n\n      if (!group) {\n        groups[i] = group = {\n          id: i,\n          scale: null,\n          translate: null,\n          scaleFract: null,\n          translateFract: null,\n          draw: true\n        };\n        options = extend({}, defaults, options);\n      }\n\n      updateDiff(group, options, [{\n        lineWidth: v => +v * .5,\n        capSize: v => +v * .5,\n        opacity: parseFloat,\n        errors: errors => {\n          errors = flatten(errors);\n          errorCount += errors.length;\n          return errors;\n        },\n        positions: (positions, state) => {\n          positions = flatten(positions, 'float64');\n          state.count = Math.floor(positions.length / 2);\n          state.bounds = getBounds(positions, 2);\n          state.offset = pointCount;\n          pointCount += state.count;\n          return positions;\n        }\n      }, {\n        color: (colors, state) => {\n          let count = state.count;\n          if (!colors) colors = 'transparent'; // 'black' or [0,0,0,0] case\n\n          if (!Array.isArray(colors) || typeof colors[0] === 'number') {\n            let color = colors;\n            colors = Array(count);\n\n            for (let i = 0; i < count; i++) {\n              colors[i] = color;\n            }\n          }\n\n          if (colors.length < count) throw Error('Not enough colors');\n          let colorData = new Uint8Array(count * 4); //convert colors to float arrays\n\n          for (let i = 0; i < count; i++) {\n            let c = rgba(colors[i], 'uint8');\n            colorData.set(c, i * 4);\n          }\n\n          return colorData;\n        },\n        range: (range, state, options) => {\n          let bounds = state.bounds;\n          if (!range) range = bounds;\n          state.scale = [1 / (range[2] - range[0]), 1 / (range[3] - range[1])];\n          state.translate = [-range[0], -range[1]];\n          state.scaleFract = fract32(state.scale);\n          state.translateFract = fract32(state.translate);\n          return range;\n        },\n        viewport: vp => {\n          let viewport;\n\n          if (Array.isArray(vp)) {\n            viewport = {\n              x: vp[0],\n              y: vp[1],\n              width: vp[2] - vp[0],\n              height: vp[3] - vp[1]\n            };\n          } else if (vp) {\n            viewport = {\n              x: vp.x || vp.left || 0,\n              y: vp.y || vp.top || 0\n            };\n            if (vp.right) viewport.width = vp.right - viewport.x;else viewport.width = vp.w || vp.width || 0;\n            if (vp.bottom) viewport.height = vp.bottom - viewport.y;else viewport.height = vp.h || vp.height || 0;\n          } else {\n            viewport = {\n              x: 0,\n              y: 0,\n              width: gl.drawingBufferWidth,\n              height: gl.drawingBufferHeight\n            };\n          }\n\n          return viewport;\n        }\n      }]);\n      return group;\n    });\n\n    if (pointCount || errorCount) {\n      let len = groups.reduce((acc, group, i) => {\n        return acc + (group ? group.count : 0);\n      }, 0);\n      let positionData = new Float64Array(len * 2);\n      let colorData = new Uint8Array(len * 4);\n      let errorData = new Float32Array(len * 4);\n      groups.forEach((group, i) => {\n        if (!group) return;\n        let {\n          positions,\n          count,\n          offset,\n          color,\n          errors\n        } = group;\n        if (!count) return;\n        colorData.set(color, offset * 4);\n        errorData.set(errors, offset * 4);\n        positionData.set(positions, offset * 2);\n      });\n      var float_data = float32(positionData);\n      positionBuffer(float_data);\n      var frac_data = fract32(positionData, float_data);\n      positionFractBuffer(frac_data);\n      colorBuffer(colorData);\n      errorBuffer(errorData);\n    }\n  }\n\n  function destroy() {\n    positionBuffer.destroy();\n    positionFractBuffer.destroy();\n    colorBuffer.destroy();\n    errorBuffer.destroy();\n    meshBuffer.destroy();\n  }\n}","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/regl-error2d/index.js"],"names":["getBounds","require","rgba","updateDiff","pick","extend","flatten","float32","fract32","module","exports","Error2D","WEIGHTS","regl","options","length","positions","hasExtension","Error","gl","_gl","drawErrors","positionBuffer","positionFractBuffer","colorBuffer","errorBuffer","meshBuffer","defaults","color","capSize","lineWidth","opacity","viewport","range","offset","count","bounds","errors","groups","buffer","usage","type","data","Uint8Array","update","vert","frag","uniforms","prop","scale","translate","scaleFract","translateFract","ctx","x","y","viewportWidth","viewportHeight","attributes","divisor","position","positionFract","error","direction","stride","lineOffset","capOffset","primitive","blend","enable","equation","rgb","alpha","func","srcRGB","dstRGB","srcAlpha","dstAlpha","depth","scissor","box","stencil","instances","error2d","draw","destroy","canvas","opts","drawGroup","Array","isArray","_refresh","forEach","s","i","scaleRatio","width","height","after","pointCount","errorCount","map","group","id","v","parseFloat","state","Math","floor","colors","colorData","c","set","vp","left","top","right","w","bottom","h","drawingBufferWidth","drawingBufferHeight","len","reduce","acc","positionData","Float64Array","errorData","Float32Array","float_data","frac_data"],"mappings":"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","sourcesContent":["'use strict'\n\nconst getBounds = require('array-bounds')\nconst rgba = require('color-normalize')\nconst updateDiff = require('update-diff')\nconst pick = require('pick-by-alias')\nconst extend = require('object-assign')\nconst flatten = require('flatten-vertex-data')\nconst {float32, fract32} = require('to-float32')\n\nmodule.exports = Error2D\n\nconst WEIGHTS = [\n\t//direction, lineWidth shift, capSize shift\n\n\t// x-error bar\n\t[1, 0, 0, 1, 0, 0],\n\t[1, 0, 0, -1, 0, 0],\n\t[-1, 0, 0, -1, 0, 0],\n\n\t[-1, 0, 0, -1, 0, 0],\n\t[-1, 0, 0, 1, 0, 0],\n\t[1, 0, 0, 1, 0, 0],\n\n\t// x-error right cap\n\t[1, 0, -1, 0, 0, 1],\n\t[1, 0, -1, 0, 0, -1],\n\t[1, 0, 1, 0, 0, -1],\n\n\t[1, 0, 1, 0, 0, -1],\n\t[1, 0, 1, 0, 0, 1],\n\t[1, 0, -1, 0, 0, 1],\n\n\t// x-error left cap\n\t[-1, 0, -1, 0, 0, 1],\n\t[-1, 0, -1, 0, 0, -1],\n\t[-1, 0, 1, 0, 0, -1],\n\n\t[-1, 0, 1, 0, 0, -1],\n\t[-1, 0, 1, 0, 0, 1],\n\t[-1, 0, -1, 0, 0, 1],\n\n\t// y-error bar\n\t[0, 1, 1, 0, 0, 0],\n\t[0, 1, -1, 0, 0, 0],\n\t[0, -1, -1, 0, 0, 0],\n\n\t[0, -1, -1, 0, 0, 0],\n\t[0, 1, 1, 0, 0, 0],\n\t[0, -1, 1, 0, 0, 0],\n\n\t// y-error top cap\n\t[0, 1, 0, -1, 1, 0],\n\t[0, 1, 0, -1, -1, 0],\n\t[0, 1, 0, 1, -1, 0],\n\n\t[0, 1, 0, 1, 1, 0],\n\t[0, 1, 0, -1, 1, 0],\n\t[0, 1, 0, 1, -1, 0],\n\n\t// y-error bottom cap\n\t[0, -1, 0, -1, 1, 0],\n\t[0, -1, 0, -1, -1, 0],\n\t[0, -1, 0, 1, -1, 0],\n\n\t[0, -1, 0, 1, 1, 0],\n\t[0, -1, 0, -1, 1, 0],\n\t[0, -1, 0, 1, -1, 0]\n]\n\n\nfunction Error2D (regl, options) {\n\tif (typeof regl === 'function') {\n\t\tif (!options) options = {}\n\t\toptions.regl = regl\n\t}\n\telse {\n\t\toptions = regl\n\t}\n\tif (options.length) options.positions = options\n\tregl = options.regl\n\n\tif (!regl.hasExtension('ANGLE_instanced_arrays')) {\n\t\tthrow Error('regl-error2d: `ANGLE_instanced_arrays` extension should be enabled');\n\t}\n\n\t// persistent variables\n\tlet gl = regl._gl, drawErrors, positionBuffer, positionFractBuffer, colorBuffer, errorBuffer, meshBuffer,\n\t\t\tdefaults = {\n\t\t\t\tcolor: 'black',\n\t\t\t\tcapSize: 5,\n\t\t\t\tlineWidth: 1,\n\t\t\t\topacity: 1,\n\t\t\t\tviewport: null,\n\t\t\t\trange: null,\n\t\t\t\toffset: 0,\n\t\t\t\tcount: 0,\n\t\t\t\tbounds: null,\n\t\t\t\tpositions: [],\n\t\t\t\terrors: []\n\t\t\t}, groups = []\n\n\t//color per-point\n\tcolorBuffer = regl.buffer({\n\t\tusage: 'dynamic',\n\t\ttype: 'uint8',\n\t\tdata: new Uint8Array(0)\n\t})\n\t//xy-position per-point\n\tpositionBuffer = regl.buffer({\n\t\tusage: 'dynamic',\n\t\ttype: 'float',\n\t\tdata: new Uint8Array(0)\n\t})\n\t//xy-position float32-fraction\n\tpositionFractBuffer = regl.buffer({\n\t\tusage: 'dynamic',\n\t\ttype: 'float',\n\t\tdata: new Uint8Array(0)\n\t})\n\t//4 errors per-point\n\terrorBuffer = regl.buffer({\n\t\tusage: 'dynamic',\n\t\ttype: 'float',\n\t\tdata: new Uint8Array(0)\n\t})\n\t//error bar mesh\n\tmeshBuffer = regl.buffer({\n\t\tusage: 'static',\n\t\ttype: 'float',\n\t\tdata: WEIGHTS\n\t})\n\n\tupdate(options)\n\n\t//drawing method\n\tdrawErrors = regl({\n\t\tvert: `\n\t\tprecision highp float;\n\n\t\tattribute vec2 position, positionFract;\n\t\tattribute vec4 error;\n\t\tattribute vec4 color;\n\n\t\tattribute vec2 direction, lineOffset, capOffset;\n\n\t\tuniform vec4 viewport;\n\t\tuniform float lineWidth, capSize;\n\t\tuniform vec2 scale, scaleFract, translate, translateFract;\n\n\t\tvarying vec4 fragColor;\n\n\t\tvoid main() {\n\t\t\tfragColor = color / 255.;\n\n\t\t\tvec2 pixelOffset = lineWidth * lineOffset + (capSize + lineWidth) * capOffset;\n\n\t\t\tvec2 dxy = -step(.5, direction.xy) * error.xz + step(direction.xy, vec2(-.5)) * error.yw;\n\n\t\t\tvec2 position = position + dxy;\n\n\t\t\tvec2 pos = (position + translate) * scale\n\t\t\t\t+ (positionFract + translateFract) * scale\n\t\t\t\t+ (position + translate) * scaleFract\n\t\t\t\t+ (positionFract + translateFract) * scaleFract;\n\n\t\t\tpos += pixelOffset / viewport.zw;\n\n\t\t\tgl_Position = vec4(pos * 2. - 1., 0, 1);\n\t\t}\n\t\t`,\n\n\t\tfrag: `\n\t\tprecision highp float;\n\n\t\tvarying vec4 fragColor;\n\n\t\tuniform float opacity;\n\n\t\tvoid main() {\n\t\t\tgl_FragColor = fragColor;\n\t\t\tgl_FragColor.a *= opacity;\n\t\t}\n\t\t`,\n\n\t\tuniforms: {\n\t\t\trange: regl.prop('range'),\n\t\t\tlineWidth: regl.prop('lineWidth'),\n\t\t\tcapSize: regl.prop('capSize'),\n\t\t\topacity: regl.prop('opacity'),\n\t\t\tscale: regl.prop('scale'),\n\t\t\ttranslate: regl.prop('translate'),\n\t\t\tscaleFract: regl.prop('scaleFract'),\n\t\t\ttranslateFract: regl.prop('translateFract'),\n\t\t\tviewport: (ctx, prop) => [prop.viewport.x, prop.viewport.y, ctx.viewportWidth, ctx.viewportHeight]\n\t\t},\n\n\t\tattributes: {\n\t\t\t//dynamic attributes\n\t\t\tcolor: {\n\t\t\t\tbuffer: colorBuffer,\n\t\t\t\toffset: (ctx, prop) => prop.offset * 4,\n\t\t\t\tdivisor: 1,\n\t\t\t},\n\t\t\tposition: {\n\t\t\t\tbuffer: positionBuffer,\n\t\t\t\toffset: (ctx, prop) => prop.offset * 8,\n\t\t\t\tdivisor: 1\n\t\t\t},\n\t\t\tpositionFract: {\n\t\t\t\tbuffer: positionFractBuffer,\n\t\t\t\toffset: (ctx, prop) => prop.offset * 8,\n\t\t\t\tdivisor: 1\n\t\t\t},\n\t\t\terror: {\n\t\t\t\tbuffer: errorBuffer,\n\t\t\t\toffset: (ctx, prop) => prop.offset * 16,\n\t\t\t\tdivisor: 1\n\t\t\t},\n\n\t\t\t//static attributes\n\t\t\tdirection: {\n\t\t\t\tbuffer: meshBuffer,\n\t\t\t\tstride: 24,\n\t\t\t\toffset: 0\n\t\t\t},\n\t\t\tlineOffset: {\n\t\t\t\tbuffer: meshBuffer,\n\t\t\t\tstride: 24,\n\t\t\t\toffset: 8\n\t\t\t},\n\t\t\tcapOffset: {\n\t\t\t\tbuffer: meshBuffer,\n\t\t\t\tstride: 24,\n\t\t\t\toffset: 16\n\t\t\t}\n\t\t},\n\n\t\tprimitive: 'triangles',\n\n\t\tblend: {\n\t\t\tenable: true,\n\t\t\tcolor: [0,0,0,0],\n\t\t\tequation: {\n\t\t\t\trgb: 'add',\n\t\t\t\talpha: 'add'\n\t\t\t},\n\t\t\tfunc: {\n\t\t\t\tsrcRGB: 'src alpha',\n\t\t\t\tdstRGB: 'one minus src alpha',\n\t\t\t\tsrcAlpha: 'one minus dst alpha',\n\t\t\t\tdstAlpha: 'one'\n\t\t\t}\n\t\t},\n\n\t\tdepth: {\n\t\t\tenable: false\n\t\t},\n\n\t\tscissor: {\n\t\t\tenable: true,\n\t\t\tbox: regl.prop('viewport')\n\t\t},\n\t\tviewport: regl.prop('viewport'),\n\t\tstencil: false,\n\n\t\tinstances: regl.prop('count'),\n\t\tcount: WEIGHTS.length\n\t})\n\n\t//expose API\n\textend(error2d, {\n\t\tupdate: update,\n\t\tdraw: draw,\n\t\tdestroy: destroy,\n\t\tregl: regl,\n\t\tgl: gl,\n\t\tcanvas: gl.canvas,\n\t\tgroups: groups\n\t})\n\n\treturn error2d\n\n\tfunction error2d (opts) {\n\t\t//update\n\t\tif (opts) {\n\t\t\tupdate(opts)\n\t\t}\n\n\t\t//destroy\n\t\telse if (opts === null) {\n\t\t\tdestroy()\n\t\t}\n\n\t\tdraw()\n\t}\n\n\n\t//main draw method\n\tfunction draw (options) {\n\t\tif (typeof options === 'number') return drawGroup(options)\n\n\t\t//make options a batch\n\t\tif (options && !Array.isArray(options)) options = [options]\n\n\n\t\tregl._refresh()\n\n\t\t//render multiple polylines via regl batch\n\t\tgroups.forEach((s, i) => {\n\t\t\tif (!s) return\n\n\t\t\tif (options) {\n\t\t\t\tif (!options[i]) s.draw = false\n\t\t\t\telse s.draw = true\n\t\t\t}\n\n\t\t\t//ignore draw flag for one pass\n\t\t\tif (!s.draw) {\n\t\t\t\ts.draw = true;\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tdrawGroup(i)\n\t\t})\n\t}\n\n\t//draw single error group by id\n\tfunction drawGroup (s) {\n\t\tif (typeof s === 'number') s = groups[s]\n\t\tif (s == null) return\n\n\t\tif (!(s && s.count && s.color && s.opacity && s.positions && s.positions.length > 1)) return\n\n\t\ts.scaleRatio = [\n\t\t\ts.scale[0] * s.viewport.width,\n\t\t\ts.scale[1] * s.viewport.height\n\t\t]\n\n\t\tdrawErrors(s)\n\n\t\tif (s.after) s.after(s)\n\t}\n\n\tfunction update (options) {\n\t\tif (!options) return\n\n\t\t//direct points argument\n\t\tif (options.length != null) {\n\t\t\tif (typeof options[0] === 'number') options = [{positions: options}]\n\t\t}\n\n\t\t//make options a batch\n\t\telse if (!Array.isArray(options)) options = [options]\n\n\t\t//global count of points\n\t\tlet pointCount = 0, errorCount = 0\n\n\t\terror2d.groups = groups = options.map((options, i) => {\n\t\t\tlet group = groups[i]\n\n\t\t\tif (!options) return group\n\t\t\telse if (typeof options === 'function') options = {after: options}\n\t\t\telse if (typeof options[0] === 'number') options = {positions: options}\n\n\t\t\t//copy options to avoid mutation & handle aliases\n\t\t\toptions = pick(options, {\n\t\t\t\tcolor: 'color colors fill',\n\t\t\t\tcapSize: 'capSize cap capsize cap-size',\n\t\t\t\tlineWidth: 'lineWidth line-width width line thickness',\n\t\t\t\topacity: 'opacity alpha',\n\t\t\t\trange: 'range dataBox',\n\t\t\t\tviewport: 'viewport viewBox',\n\t\t\t\terrors: 'errors error',\n\t\t\t\tpositions: 'positions position data points'\n\t\t\t})\n\n\t\t\tif (!group) {\n\t\t\t\tgroups[i] = group = {\n\t\t\t\t\tid: i,\n\t\t\t\t\tscale: null,\n\t\t\t\t\ttranslate: null,\n\t\t\t\t\tscaleFract: null,\n\t\t\t\t\ttranslateFract: null,\n\t\t\t\t\tdraw: true\n\t\t\t\t}\n\t\t\t\toptions = extend({}, defaults, options)\n\t\t\t}\n\n\t\t\tupdateDiff(group, options, [{\n\t\t\t\tlineWidth: v => +v * .5,\n\t\t\t\tcapSize: v => +v * .5,\n\t\t\t\topacity: parseFloat,\n\t\t\t\terrors: errors => {\n\t\t\t\t\terrors = flatten(errors)\n\n\t\t\t\t\terrorCount += errors.length\n\t\t\t\t\treturn errors\n\t\t\t\t},\n\t\t\t\tpositions: (positions, state) => {\n\t\t\t\t\tpositions = flatten(positions, 'float64')\n\t\t\t\t\tstate.count = Math.floor(positions.length / 2)\n\t\t\t\t\tstate.bounds = getBounds(positions, 2)\n\t\t\t\t\tstate.offset = pointCount\n\n\t\t\t\t\tpointCount += state.count\n\n\t\t\t\t\treturn positions\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tcolor: (colors, state) => {\n\t\t\t\t\tlet count = state.count\n\n\t\t\t\t\tif (!colors) colors = 'transparent'\n\n\t\t\t\t\t// 'black' or [0,0,0,0] case\n\t\t\t\t\tif (!Array.isArray(colors) || typeof colors[0] === 'number') {\n\t\t\t\t\t\tlet color = colors\n\t\t\t\t\t\tcolors = Array(count)\n\t\t\t\t\t\tfor (let i = 0; i < count; i++) {\n\t\t\t\t\t\t\tcolors[i] = color\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (colors.length < count) throw Error('Not enough colors')\n\n\t\t\t\t\tlet colorData = new Uint8Array(count * 4)\n\n\t\t\t\t\t//convert colors to float arrays\n\t\t\t\t\tfor (let i = 0; i < count; i++) {\n\t\t\t\t\t\tlet c = rgba(colors[i], 'uint8')\n\t\t\t\t\t\tcolorData.set(c, i * 4)\n\t\t\t\t\t}\n\n\t\t\t\t\treturn colorData\n\t\t\t\t},\n\n\t\t\t\trange: (range, state, options) => {\n\t\t\t\t\tlet bounds = state.bounds\n\t\t\t\t\tif (!range) range = bounds\n\n\t\t\t\t\tstate.scale = [1 / (range[2] - range[0]), 1 / (range[3] - range[1])]\n\t\t\t\t\tstate.translate = [-range[0], -range[1]]\n\n\t\t\t\t\tstate.scaleFract = fract32(state.scale)\n\t\t\t\t\tstate.translateFract = fract32(state.translate)\n\n\t\t\t\t\treturn range\n\t\t\t\t},\n\n\t\t\t\tviewport: vp => {\n\t\t\t\t\tlet viewport\n\n\t\t\t\t\tif (Array.isArray(vp)) {\n\t\t\t\t\t\tviewport = {\n\t\t\t\t\t\t\tx: vp[0],\n\t\t\t\t\t\t\ty: vp[1],\n\t\t\t\t\t\t\twidth: vp[2] - vp[0],\n\t\t\t\t\t\t\theight: vp[3] - vp[1]\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (vp) {\n\t\t\t\t\t\tviewport = {\n\t\t\t\t\t\t\tx: vp.x || vp.left || 0,\n\t\t\t\t\t\t\ty: vp.y || vp.top || 0\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (vp.right) viewport.width = vp.right - viewport.x\n\t\t\t\t\t\telse viewport.width = vp.w || vp.width || 0\n\n\t\t\t\t\t\tif (vp.bottom) viewport.height = vp.bottom - viewport.y\n\t\t\t\t\t\telse viewport.height = vp.h || vp.height || 0\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tviewport = {\n\t\t\t\t\t\t\tx: 0, y: 0,\n\t\t\t\t\t\t\twidth: gl.drawingBufferWidth,\n\t\t\t\t\t\t\theight: gl.drawingBufferHeight\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn viewport\n\t\t\t\t}\n\t\t\t}])\n\n\t\t\treturn group\n\t\t})\n\n\t\tif (pointCount || errorCount) {\n\t\t\tlet len = groups.reduce((acc, group, i) => {\n\t\t\t\treturn acc + (group ? group.count : 0)\n\t\t\t}, 0)\n\n\t\t\tlet positionData = new Float64Array(len * 2)\n\t\t\tlet colorData = new Uint8Array(len * 4)\n\t\t\tlet errorData = new Float32Array(len * 4)\n\n\t\t\tgroups.forEach((group, i) => {\n\t\t\t\tif (!group) return\n\t\t\t\tlet {positions, count, offset, color, errors} = group\n\t\t\t\tif (!count) return\n\n\t\t\t\tcolorData.set(color, offset * 4)\n\t\t\t\terrorData.set(errors, offset * 4)\n\t\t\t\tpositionData.set(positions, offset * 2)\n\t\t\t})\n\n\t\t\tvar float_data = float32(positionData)\n\t\t\tpositionBuffer(float_data)\n\t\t\tvar frac_data = fract32(positionData, float_data)\n\t\t\tpositionFractBuffer(frac_data)\n\t\t\tcolorBuffer(colorData)\n\t\t\terrorBuffer(errorData)\n\t\t}\n\n\t}\n\n\tfunction destroy () {\n\t\tpositionBuffer.destroy()\n\t\tpositionFractBuffer.destroy()\n\t\tcolorBuffer.destroy()\n\t\terrorBuffer.destroy()\n\t\tmeshBuffer.destroy()\n\t}\n}\n"]},"metadata":{},"sourceType":"script"}