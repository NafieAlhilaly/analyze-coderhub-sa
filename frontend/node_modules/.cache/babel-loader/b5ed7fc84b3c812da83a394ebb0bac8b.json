{"ast":null,"code":"\"use strict\";\n\nvar isValue = require(\"type/value/is\"),\n    isPlainFunction = require(\"type/plain-function/is\"),\n    assign = require(\"es5-ext/object/assign\"),\n    normalizeOpts = require(\"es5-ext/object/normalize-options\"),\n    contains = require(\"es5-ext/string/#/contains\");\n\nvar d = module.exports = function (dscr, value\n/*, options*/\n) {\n  var c, e, w, options, desc;\n\n  if (arguments.length < 2 || typeof dscr !== \"string\") {\n    options = value;\n    value = dscr;\n    dscr = null;\n  } else {\n    options = arguments[2];\n  }\n\n  if (isValue(dscr)) {\n    c = contains.call(dscr, \"c\");\n    e = contains.call(dscr, \"e\");\n    w = contains.call(dscr, \"w\");\n  } else {\n    c = w = true;\n    e = false;\n  }\n\n  desc = {\n    value: value,\n    configurable: c,\n    enumerable: e,\n    writable: w\n  };\n  return !options ? desc : assign(normalizeOpts(options), desc);\n};\n\nd.gs = function (dscr, get, set\n/*, options*/\n) {\n  var c, e, options, desc;\n\n  if (typeof dscr !== \"string\") {\n    options = set;\n    set = get;\n    get = dscr;\n    dscr = null;\n  } else {\n    options = arguments[3];\n  }\n\n  if (!isValue(get)) {\n    get = undefined;\n  } else if (!isPlainFunction(get)) {\n    options = get;\n    get = set = undefined;\n  } else if (!isValue(set)) {\n    set = undefined;\n  } else if (!isPlainFunction(set)) {\n    options = set;\n    set = undefined;\n  }\n\n  if (isValue(dscr)) {\n    c = contains.call(dscr, \"c\");\n    e = contains.call(dscr, \"e\");\n  } else {\n    c = true;\n    e = false;\n  }\n\n  desc = {\n    get: get,\n    set: set,\n    configurable: c,\n    enumerable: e\n  };\n  return !options ? desc : assign(normalizeOpts(options), desc);\n};","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/d/index.js"],"names":["isValue","require","isPlainFunction","assign","normalizeOpts","contains","d","module","exports","dscr","value","c","e","w","options","desc","arguments","length","call","configurable","enumerable","writable","gs","get","set","undefined"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar isValue         = require(\"type/value/is\")\n  , isPlainFunction = require(\"type/plain-function/is\")\n  , assign          = require(\"es5-ext/object/assign\")\n  , normalizeOpts   = require(\"es5-ext/object/normalize-options\")\n  , contains        = require(\"es5-ext/string/#/contains\");\n\nvar d = (module.exports = function (dscr, value/*, options*/) {\n\tvar c, e, w, options, desc;\n\tif (arguments.length < 2 || typeof dscr !== \"string\") {\n\t\toptions = value;\n\t\tvalue = dscr;\n\t\tdscr = null;\n\t} else {\n\t\toptions = arguments[2];\n\t}\n\tif (isValue(dscr)) {\n\t\tc = contains.call(dscr, \"c\");\n\t\te = contains.call(dscr, \"e\");\n\t\tw = contains.call(dscr, \"w\");\n\t} else {\n\t\tc = w = true;\n\t\te = false;\n\t}\n\n\tdesc = { value: value, configurable: c, enumerable: e, writable: w };\n\treturn !options ? desc : assign(normalizeOpts(options), desc);\n});\n\nd.gs = function (dscr, get, set/*, options*/) {\n\tvar c, e, options, desc;\n\tif (typeof dscr !== \"string\") {\n\t\toptions = set;\n\t\tset = get;\n\t\tget = dscr;\n\t\tdscr = null;\n\t} else {\n\t\toptions = arguments[3];\n\t}\n\tif (!isValue(get)) {\n\t\tget = undefined;\n\t} else if (!isPlainFunction(get)) {\n\t\toptions = get;\n\t\tget = set = undefined;\n\t} else if (!isValue(set)) {\n\t\tset = undefined;\n\t} else if (!isPlainFunction(set)) {\n\t\toptions = set;\n\t\tset = undefined;\n\t}\n\tif (isValue(dscr)) {\n\t\tc = contains.call(dscr, \"c\");\n\t\te = contains.call(dscr, \"e\");\n\t} else {\n\t\tc = true;\n\t\te = false;\n\t}\n\n\tdesc = { get: get, set: set, configurable: c, enumerable: e };\n\treturn !options ? desc : assign(normalizeOpts(options), desc);\n};\n"]},"metadata":{},"sourceType":"script"}