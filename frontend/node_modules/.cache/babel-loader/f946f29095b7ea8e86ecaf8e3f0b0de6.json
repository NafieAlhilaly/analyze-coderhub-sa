{"ast":null,"code":"'use strict';\n\nvar colorScaleAttrs = require('../../components/colorscale/attributes');\n\nvar isosurfaceAttrs = require('../isosurface/attributes');\n\nvar surfaceAttrs = require('../surface/attributes');\n\nvar baseAttrs = require('../../plots/attributes');\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\n\nvar attrs = module.exports = overrideAll(extendFlat({\n  x: isosurfaceAttrs.x,\n  y: isosurfaceAttrs.y,\n  z: isosurfaceAttrs.z,\n  value: isosurfaceAttrs.value,\n  isomin: isosurfaceAttrs.isomin,\n  isomax: isosurfaceAttrs.isomax,\n  surface: isosurfaceAttrs.surface,\n  spaceframe: {\n    show: {\n      valType: 'boolean',\n      dflt: false,\n      description: ['Displays/hides tetrahedron shapes between minimum and', 'maximum iso-values. Often useful when either caps or', 'surfaces are disabled or filled with values less than 1.'].join(' ')\n    },\n    fill: {\n      valType: 'number',\n      min: 0,\n      max: 1,\n      dflt: 1,\n      description: ['Sets the fill ratio of the `spaceframe` elements. The default fill value', 'is 1 meaning that they are entirely shaded. Applying a `fill` ratio less', 'than one would allow the creation of openings parallel to the edges.'].join(' ')\n    }\n  },\n  slices: isosurfaceAttrs.slices,\n  caps: isosurfaceAttrs.caps,\n  text: isosurfaceAttrs.text,\n  hovertext: isosurfaceAttrs.hovertext,\n  xhoverformat: isosurfaceAttrs.xhoverformat,\n  yhoverformat: isosurfaceAttrs.yhoverformat,\n  zhoverformat: isosurfaceAttrs.zhoverformat,\n  valuehoverformat: isosurfaceAttrs.valuehoverformat,\n  hovertemplate: isosurfaceAttrs.hovertemplate\n}, colorScaleAttrs('', {\n  colorAttr: '`value`',\n  showScaleDflt: true,\n  editTypeOverride: 'calc'\n}), {\n  colorbar: isosurfaceAttrs.colorbar,\n  opacity: isosurfaceAttrs.opacity,\n  opacityscale: surfaceAttrs.opacityscale,\n  lightposition: isosurfaceAttrs.lightposition,\n  lighting: isosurfaceAttrs.lighting,\n  flatshading: isosurfaceAttrs.flatshading,\n  contour: isosurfaceAttrs.contour,\n  hoverinfo: extendFlat({}, baseAttrs.hoverinfo),\n  showlegend: extendFlat({}, baseAttrs.showlegend, {\n    dflt: false\n  })\n}), 'calc', 'nested');\nattrs.x.editType = attrs.y.editType = attrs.z.editType = attrs.value.editType = 'calc+clearAxisTypes';\nattrs.transforms = undefined;","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/plotly.js/src/traces/volume/attributes.js"],"names":["colorScaleAttrs","require","isosurfaceAttrs","surfaceAttrs","baseAttrs","extendFlat","overrideAll","attrs","module","exports","x","y","z","value","isomin","isomax","surface","spaceframe","show","valType","dflt","description","join","fill","min","max","slices","caps","text","hovertext","xhoverformat","yhoverformat","zhoverformat","valuehoverformat","hovertemplate","colorAttr","showScaleDflt","editTypeOverride","colorbar","opacity","opacityscale","lightposition","lighting","flatshading","contour","hoverinfo","showlegend","editType","transforms","undefined"],"mappings":"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","sourcesContent":["'use strict';\n\nvar colorScaleAttrs = require('../../components/colorscale/attributes');\nvar isosurfaceAttrs = require('../isosurface/attributes');\nvar surfaceAttrs = require('../surface/attributes');\nvar baseAttrs = require('../../plots/attributes');\n\nvar extendFlat = require('../../lib/extend').extendFlat;\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\n\nvar attrs = module.exports = overrideAll(extendFlat({\n    x: isosurfaceAttrs.x,\n    y: isosurfaceAttrs.y,\n    z: isosurfaceAttrs.z,\n    value: isosurfaceAttrs.value,\n    isomin: isosurfaceAttrs.isomin,\n    isomax: isosurfaceAttrs.isomax,\n    surface: isosurfaceAttrs.surface,\n    spaceframe: {\n        show: {\n            valType: 'boolean',\n            dflt: false,\n            description: [\n                'Displays/hides tetrahedron shapes between minimum and',\n                'maximum iso-values. Often useful when either caps or',\n                'surfaces are disabled or filled with values less than 1.'\n            ].join(' ')\n        },\n        fill: {\n            valType: 'number',\n            min: 0,\n            max: 1,\n            dflt: 1,\n            description: [\n                'Sets the fill ratio of the `spaceframe` elements. The default fill value',\n                'is 1 meaning that they are entirely shaded. Applying a `fill` ratio less',\n                'than one would allow the creation of openings parallel to the edges.'\n            ].join(' ')\n        }\n    },\n\n    slices: isosurfaceAttrs.slices,\n    caps: isosurfaceAttrs.caps,\n    text: isosurfaceAttrs.text,\n    hovertext: isosurfaceAttrs.hovertext,\n    xhoverformat: isosurfaceAttrs.xhoverformat,\n    yhoverformat: isosurfaceAttrs.yhoverformat,\n    zhoverformat: isosurfaceAttrs.zhoverformat,\n    valuehoverformat: isosurfaceAttrs.valuehoverformat,\n    hovertemplate: isosurfaceAttrs.hovertemplate\n},\n\ncolorScaleAttrs('', {\n    colorAttr: '`value`',\n    showScaleDflt: true,\n    editTypeOverride: 'calc'\n}), {\n\n    colorbar: isosurfaceAttrs.colorbar,\n    opacity: isosurfaceAttrs.opacity,\n    opacityscale: surfaceAttrs.opacityscale,\n\n    lightposition: isosurfaceAttrs.lightposition,\n    lighting: isosurfaceAttrs.lighting,\n    flatshading: isosurfaceAttrs.flatshading,\n    contour: isosurfaceAttrs.contour,\n\n    hoverinfo: extendFlat({}, baseAttrs.hoverinfo),\n    showlegend: extendFlat({}, baseAttrs.showlegend, {dflt: false})\n}), 'calc', 'nested');\n\nattrs.x.editType = attrs.y.editType = attrs.z.editType = attrs.value.editType = 'calc+clearAxisTypes';\nattrs.transforms = undefined;\n"]},"metadata":{},"sourceType":"script"}