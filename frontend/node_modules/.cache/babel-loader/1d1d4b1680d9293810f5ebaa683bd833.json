{"ast":null,"code":"\"use strict\";\n\nmodule.exports = createSlabDecomposition;\n\nvar bounds = require(\"binary-search-bounds\");\n\nvar createRBTree = require(\"functional-red-black-tree\");\n\nvar orient = require(\"robust-orientation\");\n\nvar orderSegments = require(\"./lib/order-segments\");\n\nfunction SlabDecomposition(slabs, coordinates, horizontal) {\n  this.slabs = slabs;\n  this.coordinates = coordinates;\n  this.horizontal = horizontal;\n}\n\nvar proto = SlabDecomposition.prototype;\n\nfunction compareHorizontal(e, y) {\n  return e.y - y;\n}\n\nfunction searchBucket(root, p) {\n  var lastNode = null;\n\n  while (root) {\n    var seg = root.key;\n    var l, r;\n\n    if (seg[0][0] < seg[1][0]) {\n      l = seg[0];\n      r = seg[1];\n    } else {\n      l = seg[1];\n      r = seg[0];\n    }\n\n    var o = orient(l, r, p);\n\n    if (o < 0) {\n      root = root.left;\n    } else if (o > 0) {\n      if (p[0] !== seg[1][0]) {\n        lastNode = root;\n        root = root.right;\n      } else {\n        var val = searchBucket(root.right, p);\n\n        if (val) {\n          return val;\n        }\n\n        root = root.left;\n      }\n    } else {\n      if (p[0] !== seg[1][0]) {\n        return root;\n      } else {\n        var val = searchBucket(root.right, p);\n\n        if (val) {\n          return val;\n        }\n\n        root = root.left;\n      }\n    }\n  }\n\n  return lastNode;\n}\n\nproto.castUp = function (p) {\n  var bucket = bounds.le(this.coordinates, p[0]);\n\n  if (bucket < 0) {\n    return -1;\n  }\n\n  var root = this.slabs[bucket];\n  var hitNode = searchBucket(this.slabs[bucket], p);\n  var lastHit = -1;\n\n  if (hitNode) {\n    lastHit = hitNode.value;\n  } //Edge case: need to handle horizontal segments (sucks)\n\n\n  if (this.coordinates[bucket] === p[0]) {\n    var lastSegment = null;\n\n    if (hitNode) {\n      lastSegment = hitNode.key;\n    }\n\n    if (bucket > 0) {\n      var otherHitNode = searchBucket(this.slabs[bucket - 1], p);\n\n      if (otherHitNode) {\n        if (lastSegment) {\n          if (orderSegments(otherHitNode.key, lastSegment) > 0) {\n            lastSegment = otherHitNode.key;\n            lastHit = otherHitNode.value;\n          }\n        } else {\n          lastHit = otherHitNode.value;\n          lastSegment = otherHitNode.key;\n        }\n      }\n    }\n\n    var horiz = this.horizontal[bucket];\n\n    if (horiz.length > 0) {\n      var hbucket = bounds.ge(horiz, p[1], compareHorizontal);\n\n      if (hbucket < horiz.length) {\n        var e = horiz[hbucket];\n\n        if (p[1] === e.y) {\n          if (e.closed) {\n            return e.index;\n          } else {\n            while (hbucket < horiz.length - 1 && horiz[hbucket + 1].y === p[1]) {\n              hbucket = hbucket + 1;\n              e = horiz[hbucket];\n\n              if (e.closed) {\n                return e.index;\n              }\n            }\n\n            if (e.y === p[1] && !e.start) {\n              hbucket = hbucket + 1;\n\n              if (hbucket >= horiz.length) {\n                return lastHit;\n              }\n\n              e = horiz[hbucket];\n            }\n          }\n        } //Check if e is above/below last segment\n\n\n        if (e.start) {\n          if (lastSegment) {\n            var o = orient(lastSegment[0], lastSegment[1], [p[0], e.y]);\n\n            if (lastSegment[0][0] > lastSegment[1][0]) {\n              o = -o;\n            }\n\n            if (o > 0) {\n              lastHit = e.index;\n            }\n          } else {\n            lastHit = e.index;\n          }\n        } else if (e.y !== p[1]) {\n          lastHit = e.index;\n        }\n      }\n    }\n  }\n\n  return lastHit;\n};\n\nfunction IntervalSegment(y, index, start, closed) {\n  this.y = y;\n  this.index = index;\n  this.start = start;\n  this.closed = closed;\n}\n\nfunction Event(x, segment, create, index) {\n  this.x = x;\n  this.segment = segment;\n  this.create = create;\n  this.index = index;\n}\n\nfunction createSlabDecomposition(segments) {\n  var numSegments = segments.length;\n  var numEvents = 2 * numSegments;\n  var events = new Array(numEvents);\n\n  for (var i = 0; i < numSegments; ++i) {\n    var s = segments[i];\n    var f = s[0][0] < s[1][0];\n    events[2 * i] = new Event(s[0][0], s, f, i);\n    events[2 * i + 1] = new Event(s[1][0], s, !f, i);\n  }\n\n  events.sort(function (a, b) {\n    var d = a.x - b.x;\n\n    if (d) {\n      return d;\n    }\n\n    d = a.create - b.create;\n\n    if (d) {\n      return d;\n    }\n\n    return Math.min(a.segment[0][1], a.segment[1][1]) - Math.min(b.segment[0][1], b.segment[1][1]);\n  });\n  var tree = createRBTree(orderSegments);\n  var slabs = [];\n  var lines = [];\n  var horizontal = [];\n  var lastX = -Infinity;\n\n  for (var i = 0; i < numEvents;) {\n    var x = events[i].x;\n    var horiz = [];\n\n    while (i < numEvents) {\n      var e = events[i];\n\n      if (e.x !== x) {\n        break;\n      }\n\n      i += 1;\n\n      if (e.segment[0][0] === e.x && e.segment[1][0] === e.x) {\n        if (e.create) {\n          if (e.segment[0][1] < e.segment[1][1]) {\n            horiz.push(new IntervalSegment(e.segment[0][1], e.index, true, true));\n            horiz.push(new IntervalSegment(e.segment[1][1], e.index, false, false));\n          } else {\n            horiz.push(new IntervalSegment(e.segment[1][1], e.index, true, false));\n            horiz.push(new IntervalSegment(e.segment[0][1], e.index, false, true));\n          }\n        }\n      } else {\n        if (e.create) {\n          tree = tree.insert(e.segment, e.index);\n        } else {\n          tree = tree.remove(e.segment);\n        }\n      }\n    }\n\n    slabs.push(tree.root);\n    lines.push(x);\n    horizontal.push(horiz);\n  }\n\n  return new SlabDecomposition(slabs, lines, horizontal);\n}","map":{"version":3,"sources":["C:/Projects/reactApp/frontend/node_modules/slab-decomposition/slabs.js"],"names":["module","exports","createSlabDecomposition","bounds","require","createRBTree","orient","orderSegments","SlabDecomposition","slabs","coordinates","horizontal","proto","prototype","compareHorizontal","e","y","searchBucket","root","p","lastNode","seg","key","l","r","o","left","right","val","castUp","bucket","le","hitNode","lastHit","value","lastSegment","otherHitNode","horiz","length","hbucket","ge","closed","index","start","IntervalSegment","Event","x","segment","create","segments","numSegments","numEvents","events","Array","i","s","f","sort","a","b","d","Math","min","tree","lines","lastX","Infinity","push","insert","remove"],"mappings":"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","sourcesContent":["\"use strict\"\n\nmodule.exports = createSlabDecomposition\n\nvar bounds = require(\"binary-search-bounds\")\nvar createRBTree = require(\"functional-red-black-tree\")\nvar orient = require(\"robust-orientation\")\nvar orderSegments = require(\"./lib/order-segments\")\n\nfunction SlabDecomposition(slabs, coordinates, horizontal) {\n  this.slabs = slabs\n  this.coordinates = coordinates\n  this.horizontal = horizontal\n}\n\nvar proto = SlabDecomposition.prototype\n\nfunction compareHorizontal(e, y) {\n  return e.y - y\n}\n\nfunction searchBucket(root, p) {\n  var lastNode = null\n  while(root) {\n    var seg = root.key\n    var l, r\n    if(seg[0][0] < seg[1][0]) {\n      l = seg[0]\n      r = seg[1]\n    } else {\n      l = seg[1]\n      r = seg[0]\n    }\n    var o = orient(l, r, p)\n    if(o < 0) {\n      root = root.left\n    } else if(o > 0) {\n      if(p[0] !== seg[1][0]) {\n        lastNode = root\n        root = root.right\n      } else {\n        var val = searchBucket(root.right, p)\n        if(val) {\n          return val\n        }\n        root = root.left\n      }\n    } else {\n      if(p[0] !== seg[1][0]) {\n        return root\n      } else {\n        var val = searchBucket(root.right, p)\n        if(val) {\n          return val\n        }\n        root = root.left\n      }\n    }\n  }\n  return lastNode\n}\n\nproto.castUp = function(p) {\n  var bucket = bounds.le(this.coordinates, p[0])\n  if(bucket < 0) {\n    return -1\n  }\n  var root = this.slabs[bucket]\n  var hitNode = searchBucket(this.slabs[bucket], p)\n  var lastHit = -1\n  if(hitNode) {\n    lastHit = hitNode.value\n  }\n  //Edge case: need to handle horizontal segments (sucks)\n  if(this.coordinates[bucket] === p[0]) {\n    var lastSegment = null\n    if(hitNode) {\n      lastSegment = hitNode.key\n    }\n    if(bucket > 0) {\n      var otherHitNode = searchBucket(this.slabs[bucket-1], p)\n      if(otherHitNode) {\n        if(lastSegment) {\n          if(orderSegments(otherHitNode.key, lastSegment) > 0) {\n            lastSegment = otherHitNode.key\n            lastHit = otherHitNode.value\n          }\n        } else {\n          lastHit = otherHitNode.value\n          lastSegment = otherHitNode.key\n        }\n      }\n    }\n    var horiz = this.horizontal[bucket]\n    if(horiz.length > 0) {\n      var hbucket = bounds.ge(horiz, p[1], compareHorizontal)\n      if(hbucket < horiz.length) {\n        var e = horiz[hbucket]\n        if(p[1] === e.y) {\n          if(e.closed) {\n            return e.index\n          } else {\n            while(hbucket < horiz.length-1 && horiz[hbucket+1].y === p[1]) {\n              hbucket = hbucket+1\n              e = horiz[hbucket]\n              if(e.closed) {\n                return e.index\n              }\n            }\n            if(e.y === p[1] && !e.start) {\n              hbucket = hbucket+1\n              if(hbucket >= horiz.length) {\n                return lastHit\n              }\n              e = horiz[hbucket]\n            }\n          }\n        }\n        //Check if e is above/below last segment\n        if(e.start) {\n          if(lastSegment) {\n            var o = orient(lastSegment[0], lastSegment[1], [p[0], e.y])\n            if(lastSegment[0][0] > lastSegment[1][0]) {\n              o = -o\n            }\n            if(o > 0) {\n              lastHit = e.index\n            }\n          } else {\n            lastHit = e.index\n          }\n        } else if(e.y !== p[1]) {\n          lastHit = e.index\n        }\n      }\n    }\n  }\n  return lastHit\n}\n\nfunction IntervalSegment(y, index, start, closed) {\n  this.y = y\n  this.index = index\n  this.start = start\n  this.closed = closed\n}\n\nfunction Event(x, segment, create, index) {\n  this.x = x\n  this.segment = segment\n  this.create = create\n  this.index = index\n}\n\n\nfunction createSlabDecomposition(segments) {\n  var numSegments = segments.length\n  var numEvents = 2 * numSegments\n  var events = new Array(numEvents)\n  for(var i=0; i<numSegments; ++i) {\n    var s = segments[i]\n    var f = s[0][0] < s[1][0]\n    events[2*i] = new Event(s[0][0], s, f, i)\n    events[2*i+1] = new Event(s[1][0], s, !f, i)\n  }\n  events.sort(function(a,b) {\n    var d = a.x - b.x\n    if(d) {\n      return d\n    }\n    d = a.create - b.create\n    if(d) {\n      return d\n    }\n    return Math.min(a.segment[0][1], a.segment[1][1]) - Math.min(b.segment[0][1], b.segment[1][1])\n  })\n  var tree = createRBTree(orderSegments)\n  var slabs = []\n  var lines = []\n  var horizontal = []\n  var lastX = -Infinity\n  for(var i=0; i<numEvents; ) {\n    var x = events[i].x\n    var horiz = []\n    while(i < numEvents) {\n      var e = events[i]\n      if(e.x !== x) {\n        break\n      }\n      i += 1\n      if(e.segment[0][0] === e.x && e.segment[1][0] === e.x) {\n        if(e.create) {\n          if(e.segment[0][1] < e.segment[1][1]) {\n            horiz.push(new IntervalSegment(\n                e.segment[0][1],\n                e.index,\n                true,\n                true))\n            horiz.push(new IntervalSegment(\n                e.segment[1][1],\n                e.index,\n                false,\n                false))\n          } else {\n            horiz.push(new IntervalSegment(\n                e.segment[1][1],\n                e.index,\n                true,\n                false))\n            horiz.push(new IntervalSegment(\n                e.segment[0][1],\n                e.index,\n                false,\n                true))\n          }\n        }\n      } else {\n        if(e.create) {\n          tree = tree.insert(e.segment, e.index)\n        } else {\n          tree = tree.remove(e.segment)\n        }\n      }\n    }\n    slabs.push(tree.root)\n    lines.push(x)\n    horizontal.push(horiz)\n  }\n  return new SlabDecomposition(slabs, lines, horizontal)\n}"]},"metadata":{},"sourceType":"script"}