{"ast":null,"code":"'use strict';\n\nvar isNumeric = require('fast-isnumeric');\n\nvar plotApi = require('./plot_api');\n\nvar plots = require('../plots/plots');\n\nvar Lib = require('../lib');\n\nvar helpers = require('../snapshot/helpers');\n\nvar toSVG = require('../snapshot/tosvg');\n\nvar svgToImg = require('../snapshot/svgtoimg');\n\nvar version = require('../version').version;\n\nvar attrs = {\n  format: {\n    valType: 'enumerated',\n    values: ['png', 'jpeg', 'webp', 'svg', 'full-json'],\n    dflt: 'png',\n    description: 'Sets the format of exported image.'\n  },\n  width: {\n    valType: 'number',\n    min: 1,\n    description: ['Sets the exported image width.', 'Defaults to the value found in `layout.width`', 'If set to *null*, the exported image width will match the current graph width.'].join(' ')\n  },\n  height: {\n    valType: 'number',\n    min: 1,\n    description: ['Sets the exported image height.', 'Defaults to the value found in `layout.height`', 'If set to *null*, the exported image height will match the current graph height.'].join(' ')\n  },\n  scale: {\n    valType: 'number',\n    min: 0,\n    dflt: 1,\n    description: ['Sets a scaling for the generated image.', 'If set, all features of a graphs (e.g. text, line width)', 'are scaled, unlike simply setting', 'a bigger *width* and *height*.'].join(' ')\n  },\n  setBackground: {\n    valType: 'any',\n    dflt: false,\n    description: ['Sets the image background mode.', 'By default, the image background is determined by `layout.paper_bgcolor`,', 'the *transparent* mode.', 'One might consider setting `setBackground` to *opaque*', 'when exporting a *jpeg* image as JPEGs do not support opacity.'].join(' ')\n  },\n  imageDataOnly: {\n    valType: 'boolean',\n    dflt: false,\n    description: ['Determines whether or not the return value is prefixed by', 'the image format\\'s corresponding \\'data:image;\\' spec.'].join(' ')\n  }\n};\n/** Plotly.toImage\n *\n * @param {object | string | HTML div} gd\n *   can either be a data/layout/config object\n *   or an existing graph <div>\n *   or an id to an existing graph <div>\n * @param {object} opts (see above)\n * @return {promise}\n */\n\nfunction toImage(gd, opts) {\n  opts = opts || {};\n  var data;\n  var layout;\n  var config;\n  var fullLayout;\n\n  if (Lib.isPlainObject(gd)) {\n    data = gd.data || [];\n    layout = gd.layout || {};\n    config = gd.config || {};\n    fullLayout = {};\n  } else {\n    gd = Lib.getGraphDiv(gd);\n    data = Lib.extendDeep([], gd.data);\n    layout = Lib.extendDeep({}, gd.layout);\n    config = gd._context;\n    fullLayout = gd._fullLayout || {};\n  }\n\n  function isImpliedOrValid(attr) {\n    return !(attr in opts) || Lib.validate(opts[attr], attrs[attr]);\n  }\n\n  if (!isImpliedOrValid('width') && opts.width !== null || !isImpliedOrValid('height') && opts.height !== null) {\n    throw new Error('Height and width should be pixel values.');\n  }\n\n  if (!isImpliedOrValid('format')) {\n    throw new Error('Export format is not ' + Lib.join2(attrs.format.values, ', ', ' or ') + '.');\n  }\n\n  var fullOpts = {};\n\n  function coerce(attr, dflt) {\n    return Lib.coerce(opts, fullOpts, attrs, attr, dflt);\n  }\n\n  var format = coerce('format');\n  var width = coerce('width');\n  var height = coerce('height');\n  var scale = coerce('scale');\n  var setBackground = coerce('setBackground');\n  var imageDataOnly = coerce('imageDataOnly'); // put the cloned div somewhere off screen before attaching to DOM\n\n  var clonedGd = document.createElement('div');\n  clonedGd.style.position = 'absolute';\n  clonedGd.style.left = '-5000px';\n  document.body.appendChild(clonedGd); // extend layout with image options\n\n  var layoutImage = Lib.extendFlat({}, layout);\n\n  if (width) {\n    layoutImage.width = width;\n  } else if (opts.width === null && isNumeric(fullLayout.width)) {\n    layoutImage.width = fullLayout.width;\n  }\n\n  if (height) {\n    layoutImage.height = height;\n  } else if (opts.height === null && isNumeric(fullLayout.height)) {\n    layoutImage.height = fullLayout.height;\n  } // extend config for static plot\n\n\n  var configImage = Lib.extendFlat({}, config, {\n    _exportedPlot: true,\n    staticPlot: true,\n    setBackground: setBackground\n  });\n  var redrawFunc = helpers.getRedrawFunc(clonedGd);\n\n  function wait() {\n    return new Promise(function (resolve) {\n      setTimeout(resolve, helpers.getDelay(clonedGd._fullLayout));\n    });\n  }\n\n  function convert() {\n    return new Promise(function (resolve, reject) {\n      var svg = toSVG(clonedGd, format, scale);\n      var width = clonedGd._fullLayout.width;\n      var height = clonedGd._fullLayout.height;\n\n      function cleanup() {\n        plotApi.purge(clonedGd);\n        document.body.removeChild(clonedGd);\n      }\n\n      if (format === 'full-json') {\n        var json = plots.graphJson(clonedGd, false, 'keepdata', 'object', true, true);\n        json.version = version;\n        json = JSON.stringify(json);\n        cleanup();\n\n        if (imageDataOnly) {\n          return resolve(json);\n        } else {\n          return resolve(helpers.encodeJSON(json));\n        }\n      }\n\n      cleanup();\n\n      if (format === 'svg') {\n        if (imageDataOnly) {\n          return resolve(svg);\n        } else {\n          return resolve(helpers.encodeSVG(svg));\n        }\n      }\n\n      var canvas = document.createElement('canvas');\n      canvas.id = Lib.randstr();\n      svgToImg({\n        format: format,\n        width: width,\n        height: height,\n        scale: scale,\n        canvas: canvas,\n        svg: svg,\n        // ask svgToImg to return a Promise\n        //  rather than EventEmitter\n        //  leave EventEmitter for backward\n        //  compatibility\n        promise: true\n      }).then(resolve).catch(reject);\n    });\n  }\n\n  function urlToImageData(url) {\n    if (imageDataOnly) {\n      return url.replace(helpers.IMAGE_URL_PREFIX, '');\n    } else {\n      return url;\n    }\n  }\n\n  return new Promise(function (resolve, reject) {\n    plotApi.newPlot(clonedGd, data, layoutImage, configImage).then(redrawFunc).then(wait).then(convert).then(function (url) {\n      resolve(urlToImageData(url));\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n\nmodule.exports = toImage;","map":{"version":3,"sources":["C:/Projects/reactApp/analyse_coderhub/node_modules/plotly.js/src/plot_api/to_image.js"],"names":["isNumeric","require","plotApi","plots","Lib","helpers","toSVG","svgToImg","version","attrs","format","valType","values","dflt","description","width","min","join","height","scale","setBackground","imageDataOnly","toImage","gd","opts","data","layout","config","fullLayout","isPlainObject","getGraphDiv","extendDeep","_context","_fullLayout","isImpliedOrValid","attr","validate","Error","join2","fullOpts","coerce","clonedGd","document","createElement","style","position","left","body","appendChild","layoutImage","extendFlat","configImage","_exportedPlot","staticPlot","redrawFunc","getRedrawFunc","wait","Promise","resolve","setTimeout","getDelay","convert","reject","svg","cleanup","purge","removeChild","json","graphJson","JSON","stringify","encodeJSON","encodeSVG","canvas","id","randstr","promise","then","catch","urlToImageData","url","replace","IMAGE_URL_PREFIX","newPlot","err","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar isNumeric = require('fast-isnumeric');\n\nvar plotApi = require('./plot_api');\nvar plots = require('../plots/plots');\nvar Lib = require('../lib');\n\nvar helpers = require('../snapshot/helpers');\nvar toSVG = require('../snapshot/tosvg');\nvar svgToImg = require('../snapshot/svgtoimg');\nvar version = require('../version').version;\n\nvar attrs = {\n    format: {\n        valType: 'enumerated',\n        values: ['png', 'jpeg', 'webp', 'svg', 'full-json'],\n        dflt: 'png',\n        description: 'Sets the format of exported image.'\n    },\n    width: {\n        valType: 'number',\n        min: 1,\n        description: [\n            'Sets the exported image width.',\n            'Defaults to the value found in `layout.width`',\n            'If set to *null*, the exported image width will match the current graph width.'\n        ].join(' ')\n    },\n    height: {\n        valType: 'number',\n        min: 1,\n        description: [\n            'Sets the exported image height.',\n            'Defaults to the value found in `layout.height`',\n            'If set to *null*, the exported image height will match the current graph height.'\n        ].join(' ')\n    },\n    scale: {\n        valType: 'number',\n        min: 0,\n        dflt: 1,\n        description: [\n            'Sets a scaling for the generated image.',\n            'If set, all features of a graphs (e.g. text, line width)',\n            'are scaled, unlike simply setting',\n            'a bigger *width* and *height*.'\n        ].join(' ')\n    },\n    setBackground: {\n        valType: 'any',\n        dflt: false,\n        description: [\n            'Sets the image background mode.',\n            'By default, the image background is determined by `layout.paper_bgcolor`,',\n            'the *transparent* mode.',\n            'One might consider setting `setBackground` to *opaque*',\n            'when exporting a *jpeg* image as JPEGs do not support opacity.'\n        ].join(' ')\n    },\n    imageDataOnly: {\n        valType: 'boolean',\n        dflt: false,\n        description: [\n            'Determines whether or not the return value is prefixed by',\n            'the image format\\'s corresponding \\'data:image;\\' spec.'\n        ].join(' ')\n    }\n};\n\n/** Plotly.toImage\n *\n * @param {object | string | HTML div} gd\n *   can either be a data/layout/config object\n *   or an existing graph <div>\n *   or an id to an existing graph <div>\n * @param {object} opts (see above)\n * @return {promise}\n */\nfunction toImage(gd, opts) {\n    opts = opts || {};\n\n    var data;\n    var layout;\n    var config;\n    var fullLayout;\n\n    if(Lib.isPlainObject(gd)) {\n        data = gd.data || [];\n        layout = gd.layout || {};\n        config = gd.config || {};\n        fullLayout = {};\n    } else {\n        gd = Lib.getGraphDiv(gd);\n        data = Lib.extendDeep([], gd.data);\n        layout = Lib.extendDeep({}, gd.layout);\n        config = gd._context;\n        fullLayout = gd._fullLayout || {};\n    }\n\n    function isImpliedOrValid(attr) {\n        return !(attr in opts) || Lib.validate(opts[attr], attrs[attr]);\n    }\n\n    if((!isImpliedOrValid('width') && opts.width !== null) ||\n        (!isImpliedOrValid('height') && opts.height !== null)) {\n        throw new Error('Height and width should be pixel values.');\n    }\n\n    if(!isImpliedOrValid('format')) {\n        throw new Error('Export format is not ' + Lib.join2(attrs.format.values, ', ', ' or ') + '.');\n    }\n\n    var fullOpts = {};\n\n    function coerce(attr, dflt) {\n        return Lib.coerce(opts, fullOpts, attrs, attr, dflt);\n    }\n\n    var format = coerce('format');\n    var width = coerce('width');\n    var height = coerce('height');\n    var scale = coerce('scale');\n    var setBackground = coerce('setBackground');\n    var imageDataOnly = coerce('imageDataOnly');\n\n    // put the cloned div somewhere off screen before attaching to DOM\n    var clonedGd = document.createElement('div');\n    clonedGd.style.position = 'absolute';\n    clonedGd.style.left = '-5000px';\n    document.body.appendChild(clonedGd);\n\n    // extend layout with image options\n    var layoutImage = Lib.extendFlat({}, layout);\n    if(width) {\n        layoutImage.width = width;\n    } else if(opts.width === null && isNumeric(fullLayout.width)) {\n        layoutImage.width = fullLayout.width;\n    }\n    if(height) {\n        layoutImage.height = height;\n    } else if(opts.height === null && isNumeric(fullLayout.height)) {\n        layoutImage.height = fullLayout.height;\n    }\n\n    // extend config for static plot\n    var configImage = Lib.extendFlat({}, config, {\n        _exportedPlot: true,\n        staticPlot: true,\n        setBackground: setBackground\n    });\n\n    var redrawFunc = helpers.getRedrawFunc(clonedGd);\n\n    function wait() {\n        return new Promise(function(resolve) {\n            setTimeout(resolve, helpers.getDelay(clonedGd._fullLayout));\n        });\n    }\n\n    function convert() {\n        return new Promise(function(resolve, reject) {\n            var svg = toSVG(clonedGd, format, scale);\n            var width = clonedGd._fullLayout.width;\n            var height = clonedGd._fullLayout.height;\n\n            function cleanup() {\n                plotApi.purge(clonedGd);\n                document.body.removeChild(clonedGd);\n            }\n\n            if(format === 'full-json') {\n                var json = plots.graphJson(clonedGd, false, 'keepdata', 'object', true, true);\n                json.version = version;\n                json = JSON.stringify(json);\n                cleanup();\n                if(imageDataOnly) {\n                    return resolve(json);\n                } else {\n                    return resolve(helpers.encodeJSON(json));\n                }\n            }\n\n            cleanup();\n\n            if(format === 'svg') {\n                if(imageDataOnly) {\n                    return resolve(svg);\n                } else {\n                    return resolve(helpers.encodeSVG(svg));\n                }\n            }\n\n            var canvas = document.createElement('canvas');\n            canvas.id = Lib.randstr();\n\n            svgToImg({\n                format: format,\n                width: width,\n                height: height,\n                scale: scale,\n                canvas: canvas,\n                svg: svg,\n                // ask svgToImg to return a Promise\n                //  rather than EventEmitter\n                //  leave EventEmitter for backward\n                //  compatibility\n                promise: true\n            })\n            .then(resolve)\n            .catch(reject);\n        });\n    }\n\n    function urlToImageData(url) {\n        if(imageDataOnly) {\n            return url.replace(helpers.IMAGE_URL_PREFIX, '');\n        } else {\n            return url;\n        }\n    }\n\n    return new Promise(function(resolve, reject) {\n        plotApi.newPlot(clonedGd, data, layoutImage, configImage)\n            .then(redrawFunc)\n            .then(wait)\n            .then(convert)\n            .then(function(url) { resolve(urlToImageData(url)); })\n            .catch(function(err) { reject(err); });\n    });\n}\n\nmodule.exports = toImage;\n"]},"metadata":{},"sourceType":"script"}